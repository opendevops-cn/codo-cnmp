// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"codo-cnmp/initialization"
	"codo-cnmp/internal/biz"
	"codo-cnmp/internal/conf"
	"codo-cnmp/internal/data"
	"codo-cnmp/internal/dep"
	"codo-cnmp/internal/event"
	"codo-cnmp/internal/informer"
	"codo-cnmp/internal/informer/manager"
	"codo-cnmp/internal/job"
	"codo-cnmp/internal/middleware"
	"codo-cnmp/internal/server"
	"codo-cnmp/internal/service"
	"codo-cnmp/migrate"
	"github.com/go-kratos/kratos/v2"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(contextContext context.Context, bootstrap *conf.Bootstrap) (*kratos.App, func(), error) {
	logger, err := dep.NewLogger(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	textMapPropagator := dep.NewTextMapPropagator()
	tracerProvider, err := dep.NewTracerProvider(contextContext, bootstrap, textMapPropagator, logger)
	if err != nil {
		return nil, nil, err
	}
	db, err := dep.NewMysql(bootstrap, tracerProvider)
	if err != nil {
		return nil, nil, err
	}
	client := dep.NewRedis(contextContext, bootstrap, tracerProvider)
	dataData, cleanup, err := data.NewData(logger, db, client)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	iMsgBus := dep.NewMsgBus(client)
	casCommand := dep.NewCAS(client)
	iSharedStorage := dep.NewSharedStorage(client)
	iTopicManager := dep.NewTopicManager(contextContext, iMsgBus, casCommand, iSharedStorage)
	clusterRepo := data.NewClusterRepo(dataData, logger, bootstrap)
	bizClusterRepo := data.NewIClusterRepo(clusterRepo)
	nodeRepo := data.NewNodeRepo(dataData)
	bizNodeRepo := data.NewINodeRepo(nodeRepo)
	agentRepo := data.NewAgentRepo(dataData, logger, bootstrap)
	iAgentRepository := data.NewIAgentRepo(agentRepo)
	agentUseCase := biz.NewAgentUseCase(iAgentRepository, logger)
	iAgentUseCase := biz.NewIAgentUseCase(agentUseCase)
	codoapiGateway := dep.NewCODOAPIGateway(contextContext, bootstrap)
	meshRepo := data.NewMeshRepo(dataData, logger, codoapiGateway)
	iMeshRepository := data.NewIMeshRepo(meshRepo)
	meshUseCase := biz.NewMeshUseCase(iMeshRepository, logger)
	iMeshUseCase := biz.NewIMeshUseCase(meshUseCase)
	roleBindingRepo := data.NewRoleBindingRepo(dataData, logger)
	iRoleBindingRepo := data.NewIRoleBindingRepoRepo(roleBindingRepo)
	roleBindingUseCase := biz.NewRoleBindingUseCase(iRoleBindingRepo, logger)
	clusterUseCase, cleanup2 := biz.NewClusterUseCase(contextContext, iMsgBus, iTopicManager, bizClusterRepo, bizNodeRepo, logger, iAgentUseCase, iMeshUseCase, bootstrap, roleBindingUseCase)
	iClusterUseCase := biz.NewIClusterUseCase(clusterUseCase)
	podUseCase := biz.NewPodUseCase(iClusterUseCase, logger)
	iPodUseCase := biz.NewIPodUseCase(podUseCase)
	nodeUseCase := biz.NewNodeUseCase(bizNodeRepo, iClusterUseCase, iPodUseCase, logger, client)
	userFollowRepo := data.NewUserFollowRepo(dataData, logger)
	iUserFollowRepo := data.NewIUserFollowRepo(userFollowRepo)
	userFollowUseCase := biz.NewUserFollowUseCase(iUserFollowRepo, logger)
	overViewUseCase := biz.NewOverViewUseCase(clusterUseCase, nodeUseCase, userFollowUseCase, logger)
	gameServerRepo := data.NewGameServerRepo(dataData, logger)
	iGameServerRepo := data.NewIGameServerRepo(gameServerRepo)
	gameServerUseCase := biz.NewGameServerUseCase(iGameServerRepo, logger, iClusterUseCase, bootstrap)
	podInformer := informer.NewPodInformer(clusterUseCase, podUseCase, gameServerUseCase, logger)
	k8sInformerList := informer.NewInformerList(podInformer)
	informerManager := manager.NewK8sInformerManager(k8sInformerList, logger)
	metricsInformer := informer.NewMetricsInformer(clusterUseCase, nodeUseCase, logger)
	metricsInformerList := informer.NewMetricsInformerList(metricsInformer)
	metricsInformerManager := manager.NewMetricsInformerManager(metricsInformerList, logger)
	metricsInformerServerWrapper := server.NewMetricsInformerServer(metricsInformerList, logger)
	informerServerWrapper := server.NewInformerServer(k8sInformerList, logger)
	v := manager.NewManagers(informerManager, metricsInformerManager, metricsInformerServerWrapper, informerServerWrapper)
	clusterEventManager := event.NewClusterEventManager(logger, v)
	clusterService := service.NewClusterService(clusterUseCase, overViewUseCase, userFollowUseCase, clusterEventManager)
	iRoleBindingUseCase := biz.NewIRoleBindingUseCase(roleBindingUseCase)
	nameSpaceUseCase, cleanup3 := biz.NewNameSpaceUseCase(contextContext, iClusterUseCase, logger, iMsgBus, iTopicManager, iRoleBindingUseCase)
	roleRepo := data.NewRoleRepo(dataData, logger)
	iRoleRepo := data.NewIGrantedRoleRepo(roleRepo)
	roleUseCase := biz.NewRoleUseCase(iRoleRepo, iRoleBindingRepo, logger, client)
	nameSpaceService := service.NewNameSpaceService(nameSpaceUseCase, userFollowUseCase, roleBindingUseCase, client, clusterUseCase, roleUseCase)
	nodeService := service.NewNodeService(nodeUseCase, podUseCase, userFollowUseCase)
	podService := service.NewPodService(podUseCase, userFollowUseCase, nodeUseCase)
	deploymentUseCase := biz.NewDeploymentUseCase(iClusterUseCase, iPodUseCase, logger)
	deploymentService := service.NewDeploymentService(deploymentUseCase, userFollowUseCase)
	eventUseCase := biz.NewEventUseCase(iClusterUseCase, iPodUseCase, logger)
	eventService := service.NewEventService(eventUseCase)
	cloneSetUseCase := biz.NewCloneSetUseCase(iClusterUseCase, logger)
	cloneSetService := service.NewCloneSetService(cloneSetUseCase, userFollowUseCase)
	gameServerSetUseCase := biz.NewGameServerSetUseCase(iClusterUseCase, logger)
	gameServerSetService := service.NewGameServerSetService(gameServerSetUseCase, userFollowUseCase)
	userGroupRepoV2 := data.NewUserGroupRepoRepoV2(dataData, logger, codoapiGateway)
	iUserGroupV2Repo := data.NewIUserGroupRepoV2(userGroupRepoV2)
	userGroupUseCase := biz.NewUserGroupUseCase(iRoleBindingRepo, iUserGroupV2Repo, logger, client)
	userGroupService := service.NewUserGroupService(userGroupUseCase)
	roleService := service.NewRoleService(roleUseCase)
	statefulSetUseCase := biz.NewStatefulSetUseCase(iClusterUseCase, logger)
	statefulSetService := service.NewStatefulSetService(statefulSetUseCase, userFollowUseCase)
	hpaUseCase := biz.NewHpaUseCase(iClusterUseCase, logger)
	hpaService := service.NewHpaService(hpaUseCase, userFollowUseCase)
	configMapUseCase := biz.NewConfigMapUseCase(iClusterUseCase, logger)
	configMapService := service.NewConfigMapService(configMapUseCase, userFollowUseCase)
	secretUseCase := biz.NewSecretUseCase(iClusterUseCase, logger)
	secretService := service.NewSecretService(secretUseCase, userFollowUseCase)
	userFollowService := service.NewUserFollowService(userFollowUseCase)
	auditLogRepo := data.NewAuditLogRepo(dataData, logger)
	iAuditLogRepo := data.NewIAuditLogRepo(auditLogRepo)
	auditLogUseCase := biz.NewAuditLogUseCase(iAuditLogRepo, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	iUserRepo := data.NewIUserRepo(userRepo)
	userUseCase := biz.NewUserUseCase(iUserRepo, logger, client)
	auditLogService := service.NewAuditLogService(auditLogUseCase, userUseCase)
	daemonSetUseCase := biz.NewDaemonSetUseCase(logger, iClusterUseCase)
	daemonSetService := service.NewDaemonSetService(daemonSetUseCase, userFollowUseCase)
	gameServerService := service.NewGameServerService(gameServerUseCase)
	ezRolloutUseCase := biz.NewEzRolloutUseCase(iClusterUseCase, logger)
	ezRolloutService := service.NewEzRolloutService(ezRolloutUseCase, userFollowUseCase)
	resourceUseCase := biz.NewResourceUseCase(iClusterUseCase, logger)
	resourceService := service.NewResourceService(resourceUseCase)
	resourceQuotaUseCase := biz.NewResourceQuotaUseCase(iClusterUseCase, logger)
	resourceQuotaService := service.NewResourceQuotaService(resourceQuotaUseCase)
	limitRangeUseCase := biz.NewLimitRangeUseCase(iClusterUseCase, logger)
	limitRangeService := service.NewLimitRangeService(limitRangeUseCase)
	meterProvider, err := dep.NewMeterProvider(bootstrap)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	svcUseCase := biz.NewSvcUseCase(iClusterUseCase, logger)
	svcService := service.NewSvcService(svcUseCase, userFollowUseCase)
	ingressUseCase := biz.NewIngressUseCase(iClusterUseCase, logger)
	ingressService := service.NewIngressService(ingressUseCase, userFollowUseCase)
	crdUseCase := biz.NewCRDUseCase(iClusterUseCase, logger)
	crdService := service.NewCRDService(crdUseCase, userFollowUseCase)
	apiGroupUseCase := biz.NewApiGroupUseCase(iClusterUseCase, logger)
	apiGroupService := service.NewApiGroupService(apiGroupUseCase, userFollowUseCase)
	sideCarSetUseCase := biz.NewSideCarSetUseCase(iClusterUseCase, logger)
	sideCarSetService := service.NewSideCarSetService(sideCarSetUseCase, userFollowUseCase)
	storageClassUseCase := biz.NewStorageClassUseCase(iClusterUseCase, logger)
	scService := service.NewScService(storageClassUseCase, userFollowUseCase)
	persistentVolumeUseCase := biz.NewPersistentVolumeUseCase(iClusterUseCase, logger)
	pvService := service.NewPVService(persistentVolumeUseCase, userFollowUseCase)
	persistentVolumeClaimUseCase := biz.NewPersistentVolumeClaimUseCase(iClusterUseCase, logger)
	pvcService := service.NewPvcService(persistentVolumeClaimUseCase, userFollowUseCase)
	agentService := service.NewAgentService(agentUseCase)
	crrUseCase := biz.NewCRRUseCase(iClusterUseCase, logger, client)
	crrService := service.NewCRRService(crrUseCase, client)
	ingressClassUseCase := biz.NewIngressClassUseCase(iClusterUseCase, logger)
	ingressClassService := service.NewIngressClassService(ingressClassUseCase)
	casbinCheckMiddleware := middleware.NewCasbinCheckMiddleware(client, userGroupUseCase, roleUseCase, clusterUseCase, logger)
	iKafka := dep.NewKafka(contextContext, bootstrap)
	auditMiddleware := middleware.NewAuditMiddleware(auditLogUseCase, clusterUseCase, logger, iKafka, userGroupUseCase, roleUseCase)
	httpServer, err := server.NewHTTPServer(bootstrap, greeterService, clusterService, nameSpaceService, nodeService, podService, deploymentService, eventService, cloneSetService, gameServerSetService, userGroupService, roleService, statefulSetService, hpaService, configMapService, secretService, userFollowService, auditLogService, daemonSetService, gameServerService, ezRolloutService, resourceService, resourceQuotaService, limitRangeService, logger, meterProvider, tracerProvider, svcService, ingressService, crdService, apiGroupService, sideCarSetService, scService, pvService, pvcService, agentService, crrService, ingressClassService, casbinCheckMiddleware, auditMiddleware)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pprofServer, err := server.NewPprofServer(bootstrap)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	prometheusServer, err := server.NewPrometheusServer(bootstrap)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	clusterJob := job.NewClusterJob(clusterUseCase, nodeUseCase, logger, client)
	userGroupJob := job.NewUserGroupJob(codoapiGateway, logger, client)
	userJob := job.NewUserJob(codoapiGateway, logger, client, userUseCase)
	iNodeUseCase := biz.NewINodeUseCase(nodeUseCase)
	syncNodePodsJob := job.NewSyncNodePodsJob(logger, iNodeUseCase)
	iCronJobList := job.NewJobs(clusterJob, userGroupJob, userJob, syncNodePodsJob)
	cronServer, err := server.NewCronServer(iCronJobList, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	podLogWebsocketService := service.NewWebsocketService(logger, podUseCase, casbinCheckMiddleware)
	podCommandWebsocketService := service.NewPodCommandWebsocketService(contextContext, logger, podUseCase, auditLogUseCase, casbinCheckMiddleware, iKafka)
	websocketServer, err := server.NewWebSocketServer(bootstrap, podLogWebsocketService, podCommandWebsocketService)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	migration := migrate.NewMigration(roleUseCase, logger)
	registrationMeta := initialization.NewRegistrationMeta(codoapiGateway, logger)
	apiServerProxy, err := server.NewAPIServerProxy(bootstrap, clusterUseCase, casbinCheckMiddleware, client, auditLogUseCase, iKafka, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app, err := newApp(bootstrap, logger, httpServer, pprofServer, prometheusServer, cronServer, informerServerWrapper, websocketServer, metricsInformerServerWrapper, migration, registrationMeta, apiServerProxy)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
