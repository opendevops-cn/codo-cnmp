// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/apigroup.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APIGroup_ListAPIGroup_FullMethodName = "/apigroup.v1.APIGroup/ListAPIGroup"
)

// APIGroupClient is the client API for APIGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIGroupClient interface {
	// 查看-云原生管理-APIGroup-列表
	ListAPIGroup(ctx context.Context, in *ListAPIGroupRequest, opts ...grpc.CallOption) (*ListAPIGroupResponse, error)
}

type aPIGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIGroupClient(cc grpc.ClientConnInterface) APIGroupClient {
	return &aPIGroupClient{cc}
}

func (c *aPIGroupClient) ListAPIGroup(ctx context.Context, in *ListAPIGroupRequest, opts ...grpc.CallOption) (*ListAPIGroupResponse, error) {
	out := new(ListAPIGroupResponse)
	err := c.cc.Invoke(ctx, APIGroup_ListAPIGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIGroupServer is the server API for APIGroup service.
// All implementations must embed UnimplementedAPIGroupServer
// for forward compatibility
type APIGroupServer interface {
	// 查看-云原生管理-APIGroup-列表
	ListAPIGroup(context.Context, *ListAPIGroupRequest) (*ListAPIGroupResponse, error)
	mustEmbedUnimplementedAPIGroupServer()
}

// UnimplementedAPIGroupServer must be embedded to have forward compatible implementations.
type UnimplementedAPIGroupServer struct {
}

func (UnimplementedAPIGroupServer) ListAPIGroup(context.Context, *ListAPIGroupRequest) (*ListAPIGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIGroup not implemented")
}
func (UnimplementedAPIGroupServer) mustEmbedUnimplementedAPIGroupServer() {}

// UnsafeAPIGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIGroupServer will
// result in compilation errors.
type UnsafeAPIGroupServer interface {
	mustEmbedUnimplementedAPIGroupServer()
}

func RegisterAPIGroupServer(s grpc.ServiceRegistrar, srv APIGroupServer) {
	s.RegisterService(&APIGroup_ServiceDesc, srv)
}

func _APIGroup_ListAPIGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGroupServer).ListAPIGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGroup_ListAPIGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGroupServer).ListAPIGroup(ctx, req.(*ListAPIGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIGroup_ServiceDesc is the grpc.ServiceDesc for APIGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigroup.v1.APIGroup",
	HandlerType: (*APIGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAPIGroup",
			Handler:    _APIGroup_ListAPIGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/apigroup.v1.proto",
}
