// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/pvc.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationPersistentVolumeClaimListPersistentVolumeClaim = "/pvc.v1.PersistentVolumeClaim/ListPersistentVolumeClaim"
const OperationPersistentVolumeClaimDeletePersistentVolumeClaim = "/pvc.v1.PersistentVolumeClaim/DeletePersistentVolumeClaim"

type PersistentVolumeClaimHTTPServer interface {
	// ListPersistentVolumeClaim查看-云原生管理-PersistentVolumeClaim-列表
	ListPersistentVolumeClaim(context.Context, *ListPersistentVolumeClaimRequest) (*ListPersistentVolumeClaimResponse, error)
	// DeletePersistentVolumeClaim管理-云原生管理-PersistentVolumeClaim-删除
	DeletePersistentVolumeClaim(context.Context, *DeletePersistentVolumeClaimRequest) (*DeletePersistentVolumeClaimResponse, error)
}

func NewPersistentVolumeClaimHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationPersistentVolumeClaimListPersistentVolumeClaim).Build(),
		selector.Server().Path(OperationPersistentVolumeClaimDeletePersistentVolumeClaim).Build(),
	).Path(
		OperationPersistentVolumeClaimListPersistentVolumeClaim,
		OperationPersistentVolumeClaimDeletePersistentVolumeClaim,
	).Build()
}

func RegisterPersistentVolumeClaimHTTPServer(s *http.Server, srv PersistentVolumeClaimHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/pvc/list", _PersistentVolumeClaim_ListPersistentVolumeClaim0_HTTP_Handler(srv))
	r.POST("/api/v1/pvc/delete", _PersistentVolumeClaim_DeletePersistentVolumeClaim0_HTTP_Handler(srv))
}

func GeneratePersistentVolumeClaimHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 2)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/pvc/list",
		Comment: "查看-云原生管理-PersistentVolumeClaim-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/pvc/delete",
		Comment: "管理-云原生管理-PersistentVolumeClaim-删除",
	})
	return routes
}

func _PersistentVolumeClaim_ListPersistentVolumeClaim0_HTTP_Handler(srv PersistentVolumeClaimHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListPersistentVolumeClaimRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPersistentVolumeClaimListPersistentVolumeClaim)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPersistentVolumeClaim(ctx, req.(*ListPersistentVolumeClaimRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPersistentVolumeClaimResponse)
		return ctx.Result(200, reply)
	}
}

func _PersistentVolumeClaim_DeletePersistentVolumeClaim0_HTTP_Handler(srv PersistentVolumeClaimHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeletePersistentVolumeClaimRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPersistentVolumeClaimDeletePersistentVolumeClaim)
		auditRule := audit.NewAudit(
			"pvc",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "PersistentVolumeClaim",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePersistentVolumeClaim(ctx, req.(*DeletePersistentVolumeClaimRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePersistentVolumeClaimResponse)
		return ctx.Result(200, reply)
	}
}

type PersistentVolumeClaimHTTPClient interface {
	ListPersistentVolumeClaim(ctx context.Context, req *ListPersistentVolumeClaimRequest, opts ...http.CallOption) (rsp *ListPersistentVolumeClaimResponse, err error)
	DeletePersistentVolumeClaim(ctx context.Context, req *DeletePersistentVolumeClaimRequest, opts ...http.CallOption) (rsp *DeletePersistentVolumeClaimResponse, err error)
}

type PersistentVolumeClaimHTTPClientImpl struct {
	cc *http.Client
}

func NewPersistentVolumeClaimHTTPClient(client *http.Client) PersistentVolumeClaimHTTPClient {
	return &PersistentVolumeClaimHTTPClientImpl{client}
}

func (c *PersistentVolumeClaimHTTPClientImpl) ListPersistentVolumeClaim(ctx context.Context, in *ListPersistentVolumeClaimRequest, opts ...http.CallOption) (*ListPersistentVolumeClaimResponse, error) {
	var out ListPersistentVolumeClaimResponse
	pattern := "/api/v1/pvc/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPersistentVolumeClaimListPersistentVolumeClaim))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PersistentVolumeClaimHTTPClientImpl) DeletePersistentVolumeClaim(ctx context.Context, in *DeletePersistentVolumeClaimRequest, opts ...http.CallOption) (*DeletePersistentVolumeClaimResponse, error) {
	var out DeletePersistentVolumeClaimResponse
	pattern := "/api/v1/pvc/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPersistentVolumeClaimDeletePersistentVolumeClaim))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
