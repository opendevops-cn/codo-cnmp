// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/usergroup.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationUserGroupServiceGrantUserGroup = "/usergroup.UserGroupService/GrantUserGroup"
const OperationUserGroupServiceListGrantedUserGroup = "/usergroup.UserGroupService/ListGrantedUserGroup"
const OperationUserGroupServiceDeleteGrantedUserGroup = "/usergroup.UserGroupService/DeleteGrantedUserGroup"
const OperationUserGroupServiceUpdateGrantedUserGroup = "/usergroup.UserGroupService/UpdateGrantedUserGroup"
const OperationUserGroupServiceGetGrantedUserGroupDetail = "/usergroup.UserGroupService/GetGrantedUserGroupDetail"
const OperationUserGroupServiceListUserGroup = "/usergroup.UserGroupService/ListUserGroup"
const OperationUserGroupServiceListUserGroupUsers = "/usergroup.UserGroupService/ListUserGroupUsers"
const OperationUserGroupServiceListUser = "/usergroup.UserGroupService/ListUser"

type UserGroupServiceHTTPServer interface {
	// GrantUserGroup管理-云原生管理-用户组-授权
	GrantUserGroup(context.Context, *GrantUserGroupRequest) (*GrantUserGroupResponse, error)
	// ListGrantedUserGroup查看-云原生管理-用户组-授权列表
	ListGrantedUserGroup(context.Context, *ListGrantedUserGroupRequest) (*ListGrantedUserGroupResponse, error)
	// DeleteGrantedUserGroup管理-云原生管理-用户组-删除授权
	DeleteGrantedUserGroup(context.Context, *DeleteGrantedUserGroupRequest) (*DeleteGrantedUserGroupResponse, error)
	// UpdateGrantedUserGroup管理-云原生管理-用户组-编辑授权
	UpdateGrantedUserGroup(context.Context, *UpdateGrantedUserGroupRequest) (*UpdateGrantedUserGroupResponse, error)
	// GetGrantedUserGroupDetail查看-云原生管理-用户组-授权详情
	GetGrantedUserGroupDetail(context.Context, *GetGrantedUserGroupDetailRequest) (*GetGrantedUserGroupDetailResponse, error)
	// ListUserGroup查看-云原生管理-用户组-列表
	ListUserGroup(context.Context, *ListUserGroupRequest) (*ListUserGroupResponse, error)
	// ListUserGroupUsers查看-云原生管理-用户组-成员列表
	ListUserGroupUsers(context.Context, *ListUserGroupUsersRequest) (*ListUserGroupUsersResponse, error)
	// ListUser查看-云原生管理-用户列表
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
}

func NewUserGroupServiceHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationUserGroupServiceGrantUserGroup).Build(),
		selector.Server().Path(OperationUserGroupServiceListGrantedUserGroup).Build(),
		selector.Server().Path(OperationUserGroupServiceDeleteGrantedUserGroup).Build(),
		selector.Server().Path(OperationUserGroupServiceUpdateGrantedUserGroup).Build(),
		selector.Server().Path(OperationUserGroupServiceGetGrantedUserGroupDetail).Build(),
		selector.Server().Path(OperationUserGroupServiceListUserGroup).Build(),
		selector.Server().Path(OperationUserGroupServiceListUserGroupUsers).Build(),
		selector.Server().Path(OperationUserGroupServiceListUser).Build(),
	).Path(
		OperationUserGroupServiceGrantUserGroup,
		OperationUserGroupServiceListGrantedUserGroup,
		OperationUserGroupServiceDeleteGrantedUserGroup,
		OperationUserGroupServiceUpdateGrantedUserGroup,
		OperationUserGroupServiceGetGrantedUserGroupDetail,
		OperationUserGroupServiceListUserGroup,
		OperationUserGroupServiceListUserGroupUsers,
		OperationUserGroupServiceListUser,
	).Build()
}

func RegisterUserGroupServiceHTTPServer(s *http.Server, srv UserGroupServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/usergroup/grant", _UserGroupService_GrantUserGroup0_HTTP_Handler(srv))
	r.GET("/api/v1/usergroup/granted/list", _UserGroupService_ListGrantedUserGroup0_HTTP_Handler(srv))
	r.POST("/api/v1/usergroup/granted/delete", _UserGroupService_DeleteGrantedUserGroup0_HTTP_Handler(srv))
	r.POST("/api/v1/usergroup/granted/update", _UserGroupService_UpdateGrantedUserGroup0_HTTP_Handler(srv))
	r.GET("/api/v1/usergroup/granted/detail", _UserGroupService_GetGrantedUserGroupDetail0_HTTP_Handler(srv))
	r.GET("/api/v1/usergroup/list", _UserGroupService_ListUserGroup0_HTTP_Handler(srv))
	r.GET("/api/v1/usergroup/users/list", _UserGroupService_ListUserGroupUsers0_HTTP_Handler(srv))
	r.GET("/api/v1/user/list", _UserGroupService_ListUser0_HTTP_Handler(srv))
}

func GenerateUserGroupServiceHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 8)
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/usergroup/grant",
		Comment: "管理-云原生管理-用户组-授权",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/usergroup/granted/list",
		Comment: "查看-云原生管理-用户组-授权列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/usergroup/granted/delete",
		Comment: "管理-云原生管理-用户组-删除授权",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/usergroup/granted/update",
		Comment: "管理-云原生管理-用户组-编辑授权",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/usergroup/granted/detail",
		Comment: "查看-云原生管理-用户组-授权详情",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/usergroup/list",
		Comment: "查看-云原生管理-用户组-列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/usergroup/users/list",
		Comment: "查看-云原生管理-用户组-成员列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/user/list",
		Comment: "查看-云原生管理-用户列表",
	})
	return routes
}

func _UserGroupService_GrantUserGroup0_HTTP_Handler(srv UserGroupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GrantUserGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGroupServiceGrantUserGroup)
		auditRule := audit.NewAudit(
			"用户组授权",
			"授权管理",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "userGroup",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "user_group_ids",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrantUserGroup(ctx, req.(*GrantUserGroupRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantUserGroupResponse)
		return ctx.Result(200, reply)
	}
}

func _UserGroupService_ListGrantedUserGroup0_HTTP_Handler(srv UserGroupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListGrantedUserGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGroupServiceListGrantedUserGroup)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGrantedUserGroup(ctx, req.(*ListGrantedUserGroupRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGrantedUserGroupResponse)
		return ctx.Result(200, reply)
	}
}

func _UserGroupService_DeleteGrantedUserGroup0_HTTP_Handler(srv UserGroupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteGrantedUserGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGroupServiceDeleteGrantedUserGroup)
		auditRule := audit.NewAudit(
			"用户组授权",
			"删除授权",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "userGroup",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "user_group_id",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGrantedUserGroup(ctx, req.(*DeleteGrantedUserGroupRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGrantedUserGroupResponse)
		return ctx.Result(200, reply)
	}
}

func _UserGroupService_UpdateGrantedUserGroup0_HTTP_Handler(srv UserGroupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateGrantedUserGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGroupServiceUpdateGrantedUserGroup)
		auditRule := audit.NewAudit(
			"用户组授权",
			"授权管理",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "userGroup",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "user_group_ids",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGrantedUserGroup(ctx, req.(*UpdateGrantedUserGroupRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGrantedUserGroupResponse)
		return ctx.Result(200, reply)
	}
}

func _UserGroupService_GetGrantedUserGroupDetail0_HTTP_Handler(srv UserGroupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetGrantedUserGroupDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGroupServiceGetGrantedUserGroupDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGrantedUserGroupDetail(ctx, req.(*GetGrantedUserGroupDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGrantedUserGroupDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _UserGroupService_ListUserGroup0_HTTP_Handler(srv UserGroupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListUserGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGroupServiceListUserGroup)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserGroup(ctx, req.(*ListUserGroupRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserGroupResponse)
		return ctx.Result(200, reply)
	}
}

func _UserGroupService_ListUserGroupUsers0_HTTP_Handler(srv UserGroupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListUserGroupUsersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGroupServiceListUserGroupUsers)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserGroupUsers(ctx, req.(*ListUserGroupUsersRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserGroupUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _UserGroupService_ListUser0_HTTP_Handler(srv UserGroupServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGroupServiceListUser)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserResponse)
		return ctx.Result(200, reply)
	}
}

type UserGroupServiceHTTPClient interface {
	GrantUserGroup(ctx context.Context, req *GrantUserGroupRequest, opts ...http.CallOption) (rsp *GrantUserGroupResponse, err error)
	ListGrantedUserGroup(ctx context.Context, req *ListGrantedUserGroupRequest, opts ...http.CallOption) (rsp *ListGrantedUserGroupResponse, err error)
	DeleteGrantedUserGroup(ctx context.Context, req *DeleteGrantedUserGroupRequest, opts ...http.CallOption) (rsp *DeleteGrantedUserGroupResponse, err error)
	UpdateGrantedUserGroup(ctx context.Context, req *UpdateGrantedUserGroupRequest, opts ...http.CallOption) (rsp *UpdateGrantedUserGroupResponse, err error)
	GetGrantedUserGroupDetail(ctx context.Context, req *GetGrantedUserGroupDetailRequest, opts ...http.CallOption) (rsp *GetGrantedUserGroupDetailResponse, err error)
	ListUserGroup(ctx context.Context, req *ListUserGroupRequest, opts ...http.CallOption) (rsp *ListUserGroupResponse, err error)
	ListUserGroupUsers(ctx context.Context, req *ListUserGroupUsersRequest, opts ...http.CallOption) (rsp *ListUserGroupUsersResponse, err error)
	ListUser(ctx context.Context, req *ListUserRequest, opts ...http.CallOption) (rsp *ListUserResponse, err error)
}

type UserGroupServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserGroupServiceHTTPClient(client *http.Client) UserGroupServiceHTTPClient {
	return &UserGroupServiceHTTPClientImpl{client}
}

func (c *UserGroupServiceHTTPClientImpl) GrantUserGroup(ctx context.Context, in *GrantUserGroupRequest, opts ...http.CallOption) (*GrantUserGroupResponse, error) {
	var out GrantUserGroupResponse
	pattern := "/api/v1/usergroup/grant"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGroupServiceGrantUserGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserGroupServiceHTTPClientImpl) ListGrantedUserGroup(ctx context.Context, in *ListGrantedUserGroupRequest, opts ...http.CallOption) (*ListGrantedUserGroupResponse, error) {
	var out ListGrantedUserGroupResponse
	pattern := "/api/v1/usergroup/granted/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGroupServiceListGrantedUserGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserGroupServiceHTTPClientImpl) DeleteGrantedUserGroup(ctx context.Context, in *DeleteGrantedUserGroupRequest, opts ...http.CallOption) (*DeleteGrantedUserGroupResponse, error) {
	var out DeleteGrantedUserGroupResponse
	pattern := "/api/v1/usergroup/granted/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGroupServiceDeleteGrantedUserGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserGroupServiceHTTPClientImpl) UpdateGrantedUserGroup(ctx context.Context, in *UpdateGrantedUserGroupRequest, opts ...http.CallOption) (*UpdateGrantedUserGroupResponse, error) {
	var out UpdateGrantedUserGroupResponse
	pattern := "/api/v1/usergroup/granted/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserGroupServiceUpdateGrantedUserGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserGroupServiceHTTPClientImpl) GetGrantedUserGroupDetail(ctx context.Context, in *GetGrantedUserGroupDetailRequest, opts ...http.CallOption) (*GetGrantedUserGroupDetailResponse, error) {
	var out GetGrantedUserGroupDetailResponse
	pattern := "/api/v1/usergroup/granted/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGroupServiceGetGrantedUserGroupDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserGroupServiceHTTPClientImpl) ListUserGroup(ctx context.Context, in *ListUserGroupRequest, opts ...http.CallOption) (*ListUserGroupResponse, error) {
	var out ListUserGroupResponse
	pattern := "/api/v1/usergroup/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGroupServiceListUserGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserGroupServiceHTTPClientImpl) ListUserGroupUsers(ctx context.Context, in *ListUserGroupUsersRequest, opts ...http.CallOption) (*ListUserGroupUsersResponse, error) {
	var out ListUserGroupUsersResponse
	pattern := "/api/v1/usergroup/users/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGroupServiceListUserGroupUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserGroupServiceHTTPClientImpl) ListUser(ctx context.Context, in *ListUserRequest, opts ...http.CallOption) (*ListUserResponse, error) {
	var out ListUserResponse
	pattern := "/api/v1/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGroupServiceListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
