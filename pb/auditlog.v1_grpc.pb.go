// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/auditlog.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuditLog_ListAuditLog_FullMethodName               = "/auditlog.v1.AuditLog/ListAuditLog"
	AuditLog_ListAuditLogQueryCondition_FullMethodName = "/auditlog.v1.AuditLog/ListAuditLogQueryCondition"
	AuditLog_GetAuditLog_FullMethodName                = "/auditlog.v1.AuditLog/GetAuditLog"
)

// AuditLogClient is the client API for AuditLog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditLogClient interface {
	// 查看-云原生管理-审计日志
	ListAuditLog(ctx context.Context, in *ListAuditLogRequest, opts ...grpc.CallOption) (*ListAuditLogResponse, error)
	// 查看-云原生管理-审计日志-查询条件
	ListAuditLogQueryCondition(ctx context.Context, in *AuditLogQueryConditionRequest, opts ...grpc.CallOption) (*AuditLogQueryConditionResponse, error)
	// 查看-云原生管理-审计日志详情
	GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...grpc.CallOption) (*GetAuditLogResponse, error)
}

type auditLogClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditLogClient(cc grpc.ClientConnInterface) AuditLogClient {
	return &auditLogClient{cc}
}

func (c *auditLogClient) ListAuditLog(ctx context.Context, in *ListAuditLogRequest, opts ...grpc.CallOption) (*ListAuditLogResponse, error) {
	out := new(ListAuditLogResponse)
	err := c.cc.Invoke(ctx, AuditLog_ListAuditLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLogClient) ListAuditLogQueryCondition(ctx context.Context, in *AuditLogQueryConditionRequest, opts ...grpc.CallOption) (*AuditLogQueryConditionResponse, error) {
	out := new(AuditLogQueryConditionResponse)
	err := c.cc.Invoke(ctx, AuditLog_ListAuditLogQueryCondition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditLogClient) GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...grpc.CallOption) (*GetAuditLogResponse, error) {
	out := new(GetAuditLogResponse)
	err := c.cc.Invoke(ctx, AuditLog_GetAuditLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditLogServer is the server API for AuditLog service.
// All implementations must embed UnimplementedAuditLogServer
// for forward compatibility
type AuditLogServer interface {
	// 查看-云原生管理-审计日志
	ListAuditLog(context.Context, *ListAuditLogRequest) (*ListAuditLogResponse, error)
	// 查看-云原生管理-审计日志-查询条件
	ListAuditLogQueryCondition(context.Context, *AuditLogQueryConditionRequest) (*AuditLogQueryConditionResponse, error)
	// 查看-云原生管理-审计日志详情
	GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error)
	mustEmbedUnimplementedAuditLogServer()
}

// UnimplementedAuditLogServer must be embedded to have forward compatible implementations.
type UnimplementedAuditLogServer struct {
}

func (UnimplementedAuditLogServer) ListAuditLog(context.Context, *ListAuditLogRequest) (*ListAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLog not implemented")
}
func (UnimplementedAuditLogServer) ListAuditLogQueryCondition(context.Context, *AuditLogQueryConditionRequest) (*AuditLogQueryConditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditLogQueryCondition not implemented")
}
func (UnimplementedAuditLogServer) GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLog not implemented")
}
func (UnimplementedAuditLogServer) mustEmbedUnimplementedAuditLogServer() {}

// UnsafeAuditLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditLogServer will
// result in compilation errors.
type UnsafeAuditLogServer interface {
	mustEmbedUnimplementedAuditLogServer()
}

func RegisterAuditLogServer(s grpc.ServiceRegistrar, srv AuditLogServer) {
	s.RegisterService(&AuditLog_ServiceDesc, srv)
}

func _AuditLog_ListAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServer).ListAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLog_ListAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServer).ListAuditLog(ctx, req.(*ListAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLog_ListAuditLogQueryCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditLogQueryConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServer).ListAuditLogQueryCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLog_ListAuditLogQueryCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServer).ListAuditLogQueryCondition(ctx, req.(*AuditLogQueryConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditLog_GetAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditLogServer).GetAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditLog_GetAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditLogServer).GetAuditLog(ctx, req.(*GetAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditLog_ServiceDesc is the grpc.ServiceDesc for AuditLog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditLog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auditlog.v1.AuditLog",
	HandlerType: (*AuditLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAuditLog",
			Handler:    _AuditLog_ListAuditLog_Handler,
		},
		{
			MethodName: "ListAuditLogQueryCondition",
			Handler:    _AuditLog_ListAuditLogQueryCondition_Handler,
		},
		{
			MethodName: "GetAuditLog",
			Handler:    _AuditLog_GetAuditLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/auditlog.v1.proto",
}
