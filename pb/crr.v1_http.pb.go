// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/crr.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationCRRGetCRRDetail = "/crr.v1.CRR/GetCRRDetail"
const OperationCRRBatchCreateCrr = "/crr.v1.CRR/BatchCreateCrr"
const OperationCRRBatchQueryCRR = "/crr.v1.CRR/BatchQueryCRR"
const OperationCRRCreateCrr = "/crr.v1.CRR/CreateCrr"

type CRRHTTPServer interface {
	// GetCRRDetail查看-云原生管理-CRR-详情
	GetCRRDetail(context.Context, *GetCRRDetailRequest) (*GetCRRDetailResponse, error)
	// BatchCreateCrr管理-云原生管理-CRR-批量创建
	BatchCreateCrr(context.Context, *BatchCreateCRRRequest) (*BatchCreateCRRResponse, error)
	// BatchQueryCRR查看-云原生管理-CRR-批量查询重启状态
	BatchQueryCRR(context.Context, *GetBatchCRRDetailRequest) (*GetBatchCRRDetailResponse, error)
	// CreateCrr管理-云原生管理-CRR-创建
	CreateCrr(context.Context, *CreateCRRRequest) (*CreateCRRResponse, error)
}

func NewCRRHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationCRRGetCRRDetail).Build(),
		selector.Server().Path(OperationCRRBatchCreateCrr).Build(),
		selector.Server().Path(OperationCRRBatchQueryCRR).Build(),
		selector.Server().Path(OperationCRRCreateCrr).Build(),
	).Path(
		OperationCRRGetCRRDetail,
		OperationCRRBatchCreateCrr,
		OperationCRRBatchQueryCRR,
		OperationCRRCreateCrr,
	).Build()
}

func RegisterCRRHTTPServer(s *http.Server, srv CRRHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/crr/detail", _CRR_GetCRRDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/crr/batch/create", _CRR_BatchCreateCrr0_HTTP_Handler(srv))
	r.POST("/api/v1/crr/batch/detail", _CRR_BatchQueryCRR0_HTTP_Handler(srv))
	r.POST("/api/v1/crr/create", _CRR_CreateCrr0_HTTP_Handler(srv))
}

func GenerateCRRHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 4)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/crr/detail",
		Comment: "查看-云原生管理-CRR-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/crr/batch/create",
		Comment: "管理-云原生管理-CRR-批量创建",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/crr/batch/detail",
		Comment: "查看-云原生管理-CRR-批量查询重启状态",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/crr/create",
		Comment: "管理-云原生管理-CRR-创建",
	})
	return routes
}

func _CRR_GetCRRDetail0_HTTP_Handler(srv CRRHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetCRRDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCRRGetCRRDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCRRDetail(ctx, req.(*GetCRRDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCRRDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _CRR_BatchCreateCrr0_HTTP_Handler(srv CRRHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in BatchCreateCRRRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCRRBatchCreateCrr)
		auditRule := audit.NewAudit(
			"容器",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "CRR",
					},
				},
				{
					Key:   "name",
					Value: audit.MetaValue{},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCreateCrr(ctx, req.(*BatchCreateCRRRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchCreateCRRResponse)
		return ctx.Result(200, reply)
	}
}

func _CRR_BatchQueryCRR0_HTTP_Handler(srv CRRHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetBatchCRRDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCRRBatchQueryCRR)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchQueryCRR(ctx, req.(*GetBatchCRRDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBatchCRRDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _CRR_CreateCrr0_HTTP_Handler(srv CRRHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateCRRRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCRRCreateCrr)
		auditRule := audit.NewAudit(
			"容器",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "CRR",
					},
				},
				{
					Key:   "name",
					Value: audit.MetaValue{},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCrr(ctx, req.(*CreateCRRRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCRRResponse)
		return ctx.Result(200, reply)
	}
}

type CRRHTTPClient interface {
	GetCRRDetail(ctx context.Context, req *GetCRRDetailRequest, opts ...http.CallOption) (rsp *GetCRRDetailResponse, err error)
	BatchCreateCrr(ctx context.Context, req *BatchCreateCRRRequest, opts ...http.CallOption) (rsp *BatchCreateCRRResponse, err error)
	BatchQueryCRR(ctx context.Context, req *GetBatchCRRDetailRequest, opts ...http.CallOption) (rsp *GetBatchCRRDetailResponse, err error)
	CreateCrr(ctx context.Context, req *CreateCRRRequest, opts ...http.CallOption) (rsp *CreateCRRResponse, err error)
}

type CRRHTTPClientImpl struct {
	cc *http.Client
}

func NewCRRHTTPClient(client *http.Client) CRRHTTPClient {
	return &CRRHTTPClientImpl{client}
}

func (c *CRRHTTPClientImpl) GetCRRDetail(ctx context.Context, in *GetCRRDetailRequest, opts ...http.CallOption) (*GetCRRDetailResponse, error) {
	var out GetCRRDetailResponse
	pattern := "/api/v1/crr/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCRRGetCRRDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CRRHTTPClientImpl) BatchCreateCrr(ctx context.Context, in *BatchCreateCRRRequest, opts ...http.CallOption) (*BatchCreateCRRResponse, error) {
	var out BatchCreateCRRResponse
	pattern := "/api/v1/crr/batch/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCRRBatchCreateCrr))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CRRHTTPClientImpl) BatchQueryCRR(ctx context.Context, in *GetBatchCRRDetailRequest, opts ...http.CallOption) (*GetBatchCRRDetailResponse, error) {
	var out GetBatchCRRDetailResponse
	pattern := "/api/v1/crr/batch/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCRRBatchQueryCRR))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CRRHTTPClientImpl) CreateCrr(ctx context.Context, in *CreateCRRRequest, opts ...http.CallOption) (*CreateCRRResponse, error) {
	var out CreateCRRResponse
	pattern := "/api/v1/crr/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCRRCreateCrr))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
