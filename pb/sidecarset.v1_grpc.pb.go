// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/sidecarset.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SidecarSet_ListSidecarSet_FullMethodName           = "/sidecarset.v1.SidecarSet/ListSidecarSet"
	SidecarSet_GetSidecarSet_FullMethodName            = "/sidecarset.v1.SidecarSet/GetSidecarSet"
	SidecarSet_UpdateSideCarSetStrategy_FullMethodName = "/sidecarset.v1.SidecarSet/UpdateSideCarSetStrategy"
	SidecarSet_DeleteSidecarSet_FullMethodName         = "/sidecarset.v1.SidecarSet/DeleteSidecarSet"
)

// SidecarSetClient is the client API for SidecarSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SidecarSetClient interface {
	// 查看-云原生管理-SideCarSet-列表
	ListSidecarSet(ctx context.Context, in *ListSidecarSetRequest, opts ...grpc.CallOption) (*ListSidecarSetResponse, error)
	// 查看-云原生管理-SideCarSet-详情
	GetSidecarSet(ctx context.Context, in *GetSidecarSetRequest, opts ...grpc.CallOption) (*GetSidecarSetResponse, error)
	// 管理-云原生管理-SideCarSet-更新策略
	UpdateSideCarSetStrategy(ctx context.Context, in *UpdateSideCarSetStrategyRequest, opts ...grpc.CallOption) (*UpdateSideCarSetStrategyResponse, error)
	// 管理-云原生管理-SideCarSet-删除
	DeleteSidecarSet(ctx context.Context, in *DeleteSidecarSetRequest, opts ...grpc.CallOption) (*DeleteSidecarSetResponse, error)
}

type sidecarSetClient struct {
	cc grpc.ClientConnInterface
}

func NewSidecarSetClient(cc grpc.ClientConnInterface) SidecarSetClient {
	return &sidecarSetClient{cc}
}

func (c *sidecarSetClient) ListSidecarSet(ctx context.Context, in *ListSidecarSetRequest, opts ...grpc.CallOption) (*ListSidecarSetResponse, error) {
	out := new(ListSidecarSetResponse)
	err := c.cc.Invoke(ctx, SidecarSet_ListSidecarSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarSetClient) GetSidecarSet(ctx context.Context, in *GetSidecarSetRequest, opts ...grpc.CallOption) (*GetSidecarSetResponse, error) {
	out := new(GetSidecarSetResponse)
	err := c.cc.Invoke(ctx, SidecarSet_GetSidecarSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarSetClient) UpdateSideCarSetStrategy(ctx context.Context, in *UpdateSideCarSetStrategyRequest, opts ...grpc.CallOption) (*UpdateSideCarSetStrategyResponse, error) {
	out := new(UpdateSideCarSetStrategyResponse)
	err := c.cc.Invoke(ctx, SidecarSet_UpdateSideCarSetStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarSetClient) DeleteSidecarSet(ctx context.Context, in *DeleteSidecarSetRequest, opts ...grpc.CallOption) (*DeleteSidecarSetResponse, error) {
	out := new(DeleteSidecarSetResponse)
	err := c.cc.Invoke(ctx, SidecarSet_DeleteSidecarSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SidecarSetServer is the server API for SidecarSet service.
// All implementations must embed UnimplementedSidecarSetServer
// for forward compatibility
type SidecarSetServer interface {
	// 查看-云原生管理-SideCarSet-列表
	ListSidecarSet(context.Context, *ListSidecarSetRequest) (*ListSidecarSetResponse, error)
	// 查看-云原生管理-SideCarSet-详情
	GetSidecarSet(context.Context, *GetSidecarSetRequest) (*GetSidecarSetResponse, error)
	// 管理-云原生管理-SideCarSet-更新策略
	UpdateSideCarSetStrategy(context.Context, *UpdateSideCarSetStrategyRequest) (*UpdateSideCarSetStrategyResponse, error)
	// 管理-云原生管理-SideCarSet-删除
	DeleteSidecarSet(context.Context, *DeleteSidecarSetRequest) (*DeleteSidecarSetResponse, error)
	mustEmbedUnimplementedSidecarSetServer()
}

// UnimplementedSidecarSetServer must be embedded to have forward compatible implementations.
type UnimplementedSidecarSetServer struct {
}

func (UnimplementedSidecarSetServer) ListSidecarSet(context.Context, *ListSidecarSetRequest) (*ListSidecarSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSidecarSet not implemented")
}
func (UnimplementedSidecarSetServer) GetSidecarSet(context.Context, *GetSidecarSetRequest) (*GetSidecarSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSidecarSet not implemented")
}
func (UnimplementedSidecarSetServer) UpdateSideCarSetStrategy(context.Context, *UpdateSideCarSetStrategyRequest) (*UpdateSideCarSetStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSideCarSetStrategy not implemented")
}
func (UnimplementedSidecarSetServer) DeleteSidecarSet(context.Context, *DeleteSidecarSetRequest) (*DeleteSidecarSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSidecarSet not implemented")
}
func (UnimplementedSidecarSetServer) mustEmbedUnimplementedSidecarSetServer() {}

// UnsafeSidecarSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SidecarSetServer will
// result in compilation errors.
type UnsafeSidecarSetServer interface {
	mustEmbedUnimplementedSidecarSetServer()
}

func RegisterSidecarSetServer(s grpc.ServiceRegistrar, srv SidecarSetServer) {
	s.RegisterService(&SidecarSet_ServiceDesc, srv)
}

func _SidecarSet_ListSidecarSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSidecarSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarSetServer).ListSidecarSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarSet_ListSidecarSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarSetServer).ListSidecarSet(ctx, req.(*ListSidecarSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarSet_GetSidecarSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSidecarSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarSetServer).GetSidecarSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarSet_GetSidecarSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarSetServer).GetSidecarSet(ctx, req.(*GetSidecarSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarSet_UpdateSideCarSetStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSideCarSetStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarSetServer).UpdateSideCarSetStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarSet_UpdateSideCarSetStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarSetServer).UpdateSideCarSetStrategy(ctx, req.(*UpdateSideCarSetStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarSet_DeleteSidecarSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSidecarSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarSetServer).DeleteSidecarSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarSet_DeleteSidecarSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarSetServer).DeleteSidecarSet(ctx, req.(*DeleteSidecarSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SidecarSet_ServiceDesc is the grpc.ServiceDesc for SidecarSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SidecarSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sidecarset.v1.SidecarSet",
	HandlerType: (*SidecarSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSidecarSet",
			Handler:    _SidecarSet_ListSidecarSet_Handler,
		},
		{
			MethodName: "GetSidecarSet",
			Handler:    _SidecarSet_GetSidecarSet_Handler,
		},
		{
			MethodName: "UpdateSideCarSetStrategy",
			Handler:    _SidecarSet_UpdateSideCarSetStrategy_Handler,
		},
		{
			MethodName: "DeleteSidecarSet",
			Handler:    _SidecarSet_DeleteSidecarSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/sidecarset.v1.proto",
}
