// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/usergroup.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RoleBinding with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleBinding) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleBinding with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleBindingMultiError, or
// nil if none found.
func (m *RoleBinding) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleBinding) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for Namespace

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RoleBindingMultiError(errors)
	}

	return nil
}

// RoleBindingMultiError is an error wrapping multiple validation errors
// returned by RoleBinding.ValidateAll() if the designated constraints aren't met.
type RoleBindingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleBindingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleBindingMultiError) AllErrors() []error { return m }

// RoleBindingValidationError is the validation error returned by
// RoleBinding.Validate if the designated constraints aren't met.
type RoleBindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleBindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleBindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleBindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleBindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleBindingValidationError) ErrorName() string { return "RoleBindingValidationError" }

// Error satisfies the builtin error interface
func (e RoleBindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleBindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleBindingValidationError{}

// Validate checks the field values on GrantUserGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantUserGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantUserGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantUserGroupRequestMultiError, or nil if none found.
func (m *GrantUserGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantUserGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUserGroupIds()) < 1 {
		err := GrantUserGroupRequestValidationError{
			field:  "UserGroupIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRoles()) < 1 {
		err := GrantUserGroupRequestValidationError{
			field:  "Roles",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantUserGroupRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantUserGroupRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantUserGroupRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantUserGroupRequestMultiError(errors)
	}

	return nil
}

// GrantUserGroupRequestMultiError is an error wrapping multiple validation
// errors returned by GrantUserGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type GrantUserGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantUserGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantUserGroupRequestMultiError) AllErrors() []error { return m }

// GrantUserGroupRequestValidationError is the validation error returned by
// GrantUserGroupRequest.Validate if the designated constraints aren't met.
type GrantUserGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantUserGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantUserGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantUserGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantUserGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantUserGroupRequestValidationError) ErrorName() string {
	return "GrantUserGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantUserGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantUserGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantUserGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantUserGroupRequestValidationError{}

// Validate checks the field values on GrantUserGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantUserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantUserGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantUserGroupResponseMultiError, or nil if none found.
func (m *GrantUserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantUserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return GrantUserGroupResponseMultiError(errors)
	}

	return nil
}

// GrantUserGroupResponseMultiError is an error wrapping multiple validation
// errors returned by GrantUserGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantUserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantUserGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantUserGroupResponseMultiError) AllErrors() []error { return m }

// GrantUserGroupResponseValidationError is the validation error returned by
// GrantUserGroupResponse.Validate if the designated constraints aren't met.
type GrantUserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantUserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantUserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantUserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantUserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantUserGroupResponseValidationError) ErrorName() string {
	return "GrantUserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantUserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantUserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantUserGroupResponseValidationError{}

// Validate checks the field values on ListGrantedUserGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGrantedUserGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGrantedUserGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGrantedUserGroupRequestMultiError, or nil if none found.
func (m *ListGrantedUserGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGrantedUserGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListGrantedUserGroupRequestMultiError(errors)
	}

	return nil
}

// ListGrantedUserGroupRequestMultiError is an error wrapping multiple
// validation errors returned by ListGrantedUserGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type ListGrantedUserGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGrantedUserGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGrantedUserGroupRequestMultiError) AllErrors() []error { return m }

// ListGrantedUserGroupRequestValidationError is the validation error returned
// by ListGrantedUserGroupRequest.Validate if the designated constraints
// aren't met.
type ListGrantedUserGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGrantedUserGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGrantedUserGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGrantedUserGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGrantedUserGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGrantedUserGroupRequestValidationError) ErrorName() string {
	return "ListGrantedUserGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGrantedUserGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGrantedUserGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGrantedUserGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGrantedUserGroupRequestValidationError{}

// Validate checks the field values on GrantedUserGroup with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GrantedUserGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantedUserGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantedUserGroupMultiError, or nil if none found.
func (m *GrantedUserGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantedUserGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserGroupId

	// no validation rules for UserGroupName

	// no validation rules for GrantedClusterCount

	// no validation rules for GrantedRoleCount

	// no validation rules for UpdateTime

	if len(errors) > 0 {
		return GrantedUserGroupMultiError(errors)
	}

	return nil
}

// GrantedUserGroupMultiError is an error wrapping multiple validation errors
// returned by GrantedUserGroup.ValidateAll() if the designated constraints
// aren't met.
type GrantedUserGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantedUserGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantedUserGroupMultiError) AllErrors() []error { return m }

// GrantedUserGroupValidationError is the validation error returned by
// GrantedUserGroup.Validate if the designated constraints aren't met.
type GrantedUserGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantedUserGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantedUserGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantedUserGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantedUserGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantedUserGroupValidationError) ErrorName() string { return "GrantedUserGroupValidationError" }

// Error satisfies the builtin error interface
func (e GrantedUserGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantedUserGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantedUserGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantedUserGroupValidationError{}

// Validate checks the field values on ListGrantedUserGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGrantedUserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGrantedUserGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGrantedUserGroupResponseMultiError, or nil if none found.
func (m *ListGrantedUserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGrantedUserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGrantedUserGroupResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGrantedUserGroupResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGrantedUserGroupResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListGrantedUserGroupResponseMultiError(errors)
	}

	return nil
}

// ListGrantedUserGroupResponseMultiError is an error wrapping multiple
// validation errors returned by ListGrantedUserGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type ListGrantedUserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGrantedUserGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGrantedUserGroupResponseMultiError) AllErrors() []error { return m }

// ListGrantedUserGroupResponseValidationError is the validation error returned
// by ListGrantedUserGroupResponse.Validate if the designated constraints
// aren't met.
type ListGrantedUserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGrantedUserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGrantedUserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGrantedUserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGrantedUserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGrantedUserGroupResponseValidationError) ErrorName() string {
	return "ListGrantedUserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGrantedUserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGrantedUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGrantedUserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGrantedUserGroupResponseValidationError{}

// Validate checks the field values on DeleteGrantedUserGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGrantedUserGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGrantedUserGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteGrantedUserGroupRequestMultiError, or nil if none found.
func (m *DeleteGrantedUserGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGrantedUserGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserGroupId

	if len(errors) > 0 {
		return DeleteGrantedUserGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteGrantedUserGroupRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteGrantedUserGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteGrantedUserGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGrantedUserGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGrantedUserGroupRequestMultiError) AllErrors() []error { return m }

// DeleteGrantedUserGroupRequestValidationError is the validation error
// returned by DeleteGrantedUserGroupRequest.Validate if the designated
// constraints aren't met.
type DeleteGrantedUserGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGrantedUserGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGrantedUserGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGrantedUserGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGrantedUserGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGrantedUserGroupRequestValidationError) ErrorName() string {
	return "DeleteGrantedUserGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGrantedUserGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGrantedUserGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGrantedUserGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGrantedUserGroupRequestValidationError{}

// Validate checks the field values on DeleteGrantedUserGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGrantedUserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGrantedUserGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteGrantedUserGroupResponseMultiError, or nil if none found.
func (m *DeleteGrantedUserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGrantedUserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteGrantedUserGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteGrantedUserGroupResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteGrantedUserGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteGrantedUserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGrantedUserGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGrantedUserGroupResponseMultiError) AllErrors() []error { return m }

// DeleteGrantedUserGroupResponseValidationError is the validation error
// returned by DeleteGrantedUserGroupResponse.Validate if the designated
// constraints aren't met.
type DeleteGrantedUserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGrantedUserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGrantedUserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGrantedUserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGrantedUserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGrantedUserGroupResponseValidationError) ErrorName() string {
	return "DeleteGrantedUserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGrantedUserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGrantedUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGrantedUserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGrantedUserGroupResponseValidationError{}

// Validate checks the field values on UpdateGrantedUserGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGrantedUserGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGrantedUserGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateGrantedUserGroupRequestMultiError, or nil if none found.
func (m *UpdateGrantedUserGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGrantedUserGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateGrantedUserGroupRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateGrantedUserGroupRequestValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateGrantedUserGroupRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateGrantedUserGroupRequestMultiError(errors)
	}

	return nil
}

// UpdateGrantedUserGroupRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateGrantedUserGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateGrantedUserGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGrantedUserGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGrantedUserGroupRequestMultiError) AllErrors() []error { return m }

// UpdateGrantedUserGroupRequestValidationError is the validation error
// returned by UpdateGrantedUserGroupRequest.Validate if the designated
// constraints aren't met.
type UpdateGrantedUserGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGrantedUserGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGrantedUserGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGrantedUserGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGrantedUserGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGrantedUserGroupRequestValidationError) ErrorName() string {
	return "UpdateGrantedUserGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGrantedUserGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGrantedUserGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGrantedUserGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGrantedUserGroupRequestValidationError{}

// Validate checks the field values on UpdateGrantedUserGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGrantedUserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGrantedUserGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateGrantedUserGroupResponseMultiError, or nil if none found.
func (m *UpdateGrantedUserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGrantedUserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateGrantedUserGroupResponseMultiError(errors)
	}

	return nil
}

// UpdateGrantedUserGroupResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateGrantedUserGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateGrantedUserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGrantedUserGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGrantedUserGroupResponseMultiError) AllErrors() []error { return m }

// UpdateGrantedUserGroupResponseValidationError is the validation error
// returned by UpdateGrantedUserGroupResponse.Validate if the designated
// constraints aren't met.
type UpdateGrantedUserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGrantedUserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGrantedUserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGrantedUserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGrantedUserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGrantedUserGroupResponseValidationError) ErrorName() string {
	return "UpdateGrantedUserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGrantedUserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGrantedUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGrantedUserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGrantedUserGroupResponseValidationError{}

// Validate checks the field values on ListUserGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupRequestMultiError, or nil if none found.
func (m *ListUserGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListUserGroupRequestMultiError(errors)
	}

	return nil
}

// ListUserGroupRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupRequestMultiError) AllErrors() []error { return m }

// ListUserGroupRequestValidationError is the validation error returned by
// ListUserGroupRequest.Validate if the designated constraints aren't met.
type ListUserGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupRequestValidationError) ErrorName() string {
	return "ListUserGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupRequestValidationError{}

// Validate checks the field values on ListUserGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupResponseMultiError, or nil if none found.
func (m *ListUserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGroupResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGroupResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGroupResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUserGroupResponseMultiError(errors)
	}

	return nil
}

// ListUserGroupResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupResponseMultiError) AllErrors() []error { return m }

// ListUserGroupResponseValidationError is the validation error returned by
// ListUserGroupResponse.Validate if the designated constraints aren't met.
type ListUserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupResponseValidationError) ErrorName() string {
	return "ListUserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupResponseValidationError{}

// Validate checks the field values on UserGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGroupMultiError, or nil
// if none found.
func (m *UserGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserGroupId

	// no validation rules for UserGroupName

	if len(errors) > 0 {
		return UserGroupMultiError(errors)
	}

	return nil
}

// UserGroupMultiError is an error wrapping multiple validation errors returned
// by UserGroup.ValidateAll() if the designated constraints aren't met.
type UserGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupMultiError) AllErrors() []error { return m }

// UserGroupValidationError is the validation error returned by
// UserGroup.Validate if the designated constraints aren't met.
type UserGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupValidationError) ErrorName() string { return "UserGroupValidationError" }

// Error satisfies the builtin error interface
func (e UserGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupValidationError{}

// Validate checks the field values on UserGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGroupResponseMultiError, or nil if none found.
func (m *UserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGroupResponseValidationError{
					field:  "List",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGroupResponseValidationError{
					field:  "List",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGroupResponseValidationError{
				field:  "List",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Total

	if len(errors) > 0 {
		return UserGroupResponseMultiError(errors)
	}

	return nil
}

// UserGroupResponseMultiError is an error wrapping multiple validation errors
// returned by UserGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type UserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupResponseMultiError) AllErrors() []error { return m }

// UserGroupResponseValidationError is the validation error returned by
// UserGroupResponse.Validate if the designated constraints aren't met.
type UserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupResponseValidationError) ErrorName() string {
	return "UserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupResponseValidationError{}

// Validate checks the field values on GetGrantedUserGroupDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGrantedUserGroupDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGrantedUserGroupDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGrantedUserGroupDetailRequestMultiError, or nil if none found.
func (m *GetGrantedUserGroupDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGrantedUserGroupDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserGroupId

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return GetGrantedUserGroupDetailRequestMultiError(errors)
	}

	return nil
}

// GetGrantedUserGroupDetailRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetGrantedUserGroupDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGrantedUserGroupDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGrantedUserGroupDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGrantedUserGroupDetailRequestMultiError) AllErrors() []error { return m }

// GetGrantedUserGroupDetailRequestValidationError is the validation error
// returned by GetGrantedUserGroupDetailRequest.Validate if the designated
// constraints aren't met.
type GetGrantedUserGroupDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGrantedUserGroupDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGrantedUserGroupDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGrantedUserGroupDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGrantedUserGroupDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGrantedUserGroupDetailRequestValidationError) ErrorName() string {
	return "GetGrantedUserGroupDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGrantedUserGroupDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGrantedUserGroupDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGrantedUserGroupDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGrantedUserGroupDetailRequestValidationError{}

// Validate checks the field values on RoleDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleDetailMultiError, or
// nil if none found.
func (m *RoleDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for ClusterName

	// no validation rules for Namespace

	// no validation rules for RoleId

	// no validation rules for RoleName

	if len(errors) > 0 {
		return RoleDetailMultiError(errors)
	}

	return nil
}

// RoleDetailMultiError is an error wrapping multiple validation errors
// returned by RoleDetail.ValidateAll() if the designated constraints aren't met.
type RoleDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleDetailMultiError) AllErrors() []error { return m }

// RoleDetailValidationError is the validation error returned by
// RoleDetail.Validate if the designated constraints aren't met.
type RoleDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDetailValidationError) ErrorName() string { return "RoleDetailValidationError" }

// Error satisfies the builtin error interface
func (e RoleDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDetailValidationError{}

// Validate checks the field values on GetGrantedUserGroupDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetGrantedUserGroupDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGrantedUserGroupDetailResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetGrantedUserGroupDetailResponseMultiError, or nil if none found.
func (m *GetGrantedUserGroupDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGrantedUserGroupDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUserGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGrantedUserGroupDetailResponseValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGrantedUserGroupDetailResponseValidationError{
					field:  "UserGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGrantedUserGroupDetailResponseValidationError{
				field:  "UserGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoleDetail() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGrantedUserGroupDetailResponseValidationError{
						field:  fmt.Sprintf("RoleDetail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGrantedUserGroupDetailResponseValidationError{
						field:  fmt.Sprintf("RoleDetail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGrantedUserGroupDetailResponseValidationError{
					field:  fmt.Sprintf("RoleDetail[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGrantedUserGroupDetailResponseMultiError(errors)
	}

	return nil
}

// GetGrantedUserGroupDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetGrantedUserGroupDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGrantedUserGroupDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGrantedUserGroupDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGrantedUserGroupDetailResponseMultiError) AllErrors() []error { return m }

// GetGrantedUserGroupDetailResponseValidationError is the validation error
// returned by GetGrantedUserGroupDetailResponse.Validate if the designated
// constraints aren't met.
type GetGrantedUserGroupDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGrantedUserGroupDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGrantedUserGroupDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGrantedUserGroupDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGrantedUserGroupDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGrantedUserGroupDetailResponseValidationError) ErrorName() string {
	return "GetGrantedUserGroupDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGrantedUserGroupDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGrantedUserGroupDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGrantedUserGroupDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGrantedUserGroupDetailResponseValidationError{}

// Validate checks the field values on ListUserGroupUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupUsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupUsersRequestMultiError, or nil if none found.
func (m *ListUserGroupUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserGroupId

	if len(errors) > 0 {
		return ListUserGroupUsersRequestMultiError(errors)
	}

	return nil
}

// ListUserGroupUsersRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserGroupUsersRequest.ValidateAll() if the
// designated constraints aren't met.
type ListUserGroupUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupUsersRequestMultiError) AllErrors() []error { return m }

// ListUserGroupUsersRequestValidationError is the validation error returned by
// ListUserGroupUsersRequest.Validate if the designated constraints aren't met.
type ListUserGroupUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupUsersRequestValidationError) ErrorName() string {
	return "ListUserGroupUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupUsersRequestValidationError{}

// Validate checks the field values on UserGroupUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGroupUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGroupUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGroupUserMultiError, or
// nil if none found.
func (m *UserGroupUser) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGroupUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for Email

	// no validation rules for NickName

	// no validation rules for Source

	if len(errors) > 0 {
		return UserGroupUserMultiError(errors)
	}

	return nil
}

// UserGroupUserMultiError is an error wrapping multiple validation errors
// returned by UserGroupUser.ValidateAll() if the designated constraints
// aren't met.
type UserGroupUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGroupUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGroupUserMultiError) AllErrors() []error { return m }

// UserGroupUserValidationError is the validation error returned by
// UserGroupUser.Validate if the designated constraints aren't met.
type UserGroupUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGroupUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGroupUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGroupUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGroupUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGroupUserValidationError) ErrorName() string { return "UserGroupUserValidationError" }

// Error satisfies the builtin error interface
func (e UserGroupUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGroupUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGroupUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGroupUserValidationError{}

// Validate checks the field values on ListUserGroupUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserGroupUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserGroupUsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserGroupUsersResponseMultiError, or nil if none found.
func (m *ListUserGroupUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserGroupUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserGroupUsersResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserGroupUsersResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGroupUsersResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUserGroupUsersResponseMultiError(errors)
	}

	return nil
}

// ListUserGroupUsersResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserGroupUsersResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserGroupUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserGroupUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserGroupUsersResponseMultiError) AllErrors() []error { return m }

// ListUserGroupUsersResponseValidationError is the validation error returned
// by ListUserGroupUsersResponse.Validate if the designated constraints aren't met.
type ListUserGroupUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGroupUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGroupUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGroupUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGroupUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGroupUsersResponseValidationError) ErrorName() string {
	return "ListUserGroupUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGroupUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGroupUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGroupUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGroupUsersResponseValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	// no validation rules for Keyword

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserResponseMultiError, or nil if none found.
func (m *ListUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListUserResponseMultiError(errors)
	}

	return nil
}

// ListUserResponseMultiError is an error wrapping multiple validation errors
// returned by ListUserResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserResponseMultiError) AllErrors() []error { return m }

// ListUserResponseValidationError is the validation error returned by
// ListUserResponse.Validate if the designated constraints aren't met.
type ListUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserResponseValidationError) ErrorName() string { return "ListUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for UserId

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}
