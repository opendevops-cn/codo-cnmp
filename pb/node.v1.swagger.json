{
  "swagger": "2.0",
  "info": {
    "title": "pb/node.v1.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Node"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/node/create_or_update": {
      "post": {
        "summary": "管理-云原生管理-节点-Yaml创建更新",
        "operationId": "Node_CreateOrUpdateNodeByYaml",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nodeCreateOrUpdateNodeByYamlResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nodeCreateOrUpdateNodeByYamlRequest"
            }
          }
        ],
        "tags": [
          "Node"
        ]
      }
    },
    "/api/v1/node/detail": {
      "get": {
        "summary": "查看-云原生管理-节点-详情",
        "operationId": "Node_GetNodeDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nodeGetNodeDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_name",
            "description": "集群名称",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "节点名称",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Node"
        ]
      }
    },
    "/api/v1/node/eviction/check": {
      "get": {
        "summary": "管理-云原生管理-节点-Pod驱逐检查",
        "operationId": "Node_CheckEviction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nodeCheckEvictionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_name",
            "description": "集群名称",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "节点名称",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Node"
        ]
      }
    },
    "/api/v1/node/handle": {
      "post": {
        "summary": "管理-云原生管理-节点-操作",
        "operationId": "Node_HandleNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nodeHandleNodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nodeHandleNodeRequest"
            }
          }
        ],
        "tags": [
          "Node"
        ]
      }
    },
    "/api/v1/node/list": {
      "get": {
        "summary": "查看-云原生管理-节点-列表",
        "operationId": "Node_ListNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nodeListNodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster_name",
            "description": "集群名称",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyword",
            "description": "关键字",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "page",
            "description": "页码",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "page_size",
            "description": "页大小",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "list_all",
            "description": "查询全部",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Node"
        ]
      }
    },
    "/api/v1/node/update": {
      "post": {
        "summary": "管理-云原生管理-节点-编辑",
        "operationId": "Node_UpdateNode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/nodeUpdateNodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/nodeUpdateNodeRequest"
            }
          }
        ],
        "tags": [
          "Node"
        ]
      }
    }
  },
  "definitions": {
    "corev1ContainerState": {
      "type": "object",
      "properties": {
        "waiting": {
          "$ref": "#/definitions/corev1ContainerStateWaiting",
          "title": "Details about a waiting container\n+optional"
        },
        "running": {
          "$ref": "#/definitions/corev1ContainerStateRunning",
          "title": "Details about a running container\n+optional"
        },
        "terminated": {
          "$ref": "#/definitions/corev1ContainerStateTerminated",
          "title": "Details about a terminated container\n+optional"
        }
      },
      "description": "ContainerState holds a possible state of container.\nOnly one of its members may be specified.\nIf none of them is specified, the default one is ContainerStateWaiting.",
      "required": [
        "waiting",
        "running",
        "terminated"
      ]
    },
    "corev1ContainerStateRunning": {
      "type": "object",
      "properties": {
        "startedAt": {
          "type": "string",
          "format": "uint64",
          "title": "Time at which the container was last (re-)started\n+optional"
        }
      },
      "description": "ContainerStateRunning is a running state of a container.",
      "required": [
        "startedAt"
      ]
    },
    "corev1ContainerStateTerminated": {
      "type": "object",
      "properties": {
        "exitCode": {
          "type": "integer",
          "format": "int32",
          "title": "Exit status from the last termination of the container"
        },
        "signal": {
          "type": "integer",
          "format": "int32",
          "title": "Signal from the last termination of the container\n+optional"
        },
        "reason": {
          "type": "string",
          "title": "(brief) reason from the last termination of the container\n+optional"
        },
        "message": {
          "type": "string",
          "title": "Message regarding the last termination of the container\n+optional"
        },
        "startedAt": {
          "type": "string",
          "title": "Time at which previous execution of the container started\n+optional"
        },
        "finishedAt": {
          "type": "string",
          "title": "Time at which the container last terminated\n+optional"
        },
        "containerID": {
          "type": "string",
          "title": "Container's ID in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'\n+optional"
        }
      },
      "description": "ContainerStateTerminated is a terminated state of a container.",
      "required": [
        "exitCode",
        "signal",
        "reason",
        "message",
        "startedAt",
        "finishedAt",
        "containerID"
      ]
    },
    "corev1ContainerStateWaiting": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "title": "(brief) reason the container is not yet running.\n+optional"
        },
        "message": {
          "type": "string",
          "title": "Message regarding why the container is not yet running.\n+optional"
        }
      },
      "description": "ContainerStateWaiting is a waiting state of a container.",
      "required": [
        "reason",
        "message"
      ]
    },
    "corev1ContainerStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name is a DNS_LABEL representing the unique name of the container.\nEach container in a pod must have a unique name across all container types.\nCannot be updated."
        },
        "state": {
          "$ref": "#/definitions/corev1ContainerState",
          "title": "State holds details about the container's current condition.\n+optional"
        },
        "lastState": {
          "$ref": "#/definitions/corev1ContainerState",
          "title": "LastTerminationState holds the last termination state of the container to\nhelp debug container crashes and restarts. This field is not\npopulated if the container is still running and RestartCount is 0.\n+optional"
        },
        "ready": {
          "type": "boolean",
          "description": "Ready specifies whether the container is currently passing its readiness check.\nThe value will change as readiness probes keep executing. If no readiness\nprobes are specified, this field defaults to true once the container is\nfully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to\naccept traffic."
        },
        "restartCount": {
          "type": "integer",
          "format": "int32",
          "description": "RestartCount holds the number of times the container has been restarted.\nKubelet makes an effort to always increment the value, but there\nare cases when the state may be lost due to node restarts and then the value\nmay be reset to 0. The value is never negative."
        },
        "image": {
          "type": "string",
          "description": "Image is the name of container image that the container is running.\nThe container image may not match the image used in the PodSpec,\nas it may have been resolved by the runtime.\nMore info: https://kubernetes.io/docs/concepts/containers/images."
        },
        "imageID": {
          "type": "string",
          "description": "ImageID is the image ID of the container's image. The image ID may not\nmatch the image ID of the image used in the PodSpec, as it may have been\nresolved by the runtime."
        },
        "containerID": {
          "type": "string",
          "title": "ContainerID is the ID of the container in the format '\u003ctype\u003e://\u003ccontainer_id\u003e'.\nWhere type is a container runtime identifier, returned from Version call of CRI API\n(for example \"containerd\").\n+optional"
        },
        "started": {
          "type": "boolean",
          "title": "Started indicates whether the container has finished its postStart lifecycle hook\nand passed its startup probe.\nInitialized as false, becomes true after startupProbe is considered\nsuccessful. Resets to false when the container is restarted, or if kubelet\nloses state temporarily. In both cases, startup probes will run again.\nIs always true when no startupProbe is defined and container is running and\nhas passed the postStart lifecycle hook. The null value must be treated the\nsame as false.\n+optional"
        },
        "allocatedResources": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resourceQuantity"
          },
          "title": "AllocatedResources represents the compute resources allocated for this container by the\nnode. Kubelet sets this value to Container.Resources.Requests upon successful pod admission\nand after successfully admitting desired pod resize.\n+featureGate=InPlacePodVerticalScaling\n+optional"
        },
        "resources": {
          "$ref": "#/definitions/corev1ResourceRequirements",
          "title": "Resources represents the compute resource requests and limits that have been successfully\nenacted on the running container after it has been started or has been successfully resized.\n+featureGate=InPlacePodVerticalScaling\n+optional"
        },
        "volumeMounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VolumeMountStatus"
          },
          "title": "Status of volume mounts.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=map\n+listMapKey=mountPath\n+featureGate=RecursiveReadOnlyMounts"
        }
      },
      "description": "ContainerStatus contains details for the current status of this container.",
      "required": [
        "name",
        "state",
        "lastState",
        "ready",
        "restartCount",
        "image",
        "imageID",
        "containerID",
        "started",
        "allocatedResources",
        "resources",
        "volumeMounts"
      ]
    },
    "corev1PodCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "Type is the type of the condition.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
        },
        "status": {
          "type": "string",
          "title": "Status is the status of the condition.\nCan be True, False, Unknown.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions"
        },
        "lastProbeTime": {
          "$ref": "#/definitions/v1Time",
          "title": "Last time we probed the condition.\n+optional"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time",
          "title": "Last time the condition transitioned from one status to another.\n+optional"
        },
        "reason": {
          "type": "string",
          "title": "Unique, one-word, CamelCase reason for the condition's last transition.\n+optional"
        },
        "message": {
          "type": "string",
          "title": "Human-readable message indicating details about last transition.\n+optional"
        }
      },
      "description": "PodCondition contains details for the current condition of this pod.",
      "required": [
        "type",
        "status",
        "lastProbeTime",
        "lastTransitionTime",
        "reason",
        "message"
      ]
    },
    "corev1ResourceRequirements": {
      "type": "object",
      "properties": {
        "limits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resourceQuantity"
          },
          "title": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        },
        "requests": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resourceQuantity"
          },
          "title": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        },
        "claims": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceClaim"
          },
          "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.\n\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional"
        }
      },
      "title": "资源请求/限制",
      "required": [
        "limits",
        "requests",
        "claims"
      ]
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      },
      "required": [
        "code",
        "message",
        "details"
      ]
    },
    "intstrIntOrString": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "format": "int64"
        },
        "intVal": {
          "type": "integer",
          "format": "int32"
        },
        "strVal": {
          "type": "string"
        }
      },
      "description": "+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true",
      "title": "IntOrString is a type that can hold an int32 or a string.  When used in\nJSON or YAML marshalling and unmarshalling, it produces or consumes the\ninner type.  This allows you to have, for example, a JSON field that can\naccept a name or number.\nTODO: Rename to Int32OrString",
      "required": [
        "type",
        "intVal",
        "strVal"
      ]
    },
    "nodeCheckEvictionItem": {
      "type": "object",
      "properties": {
        "ready_to_evict_pods_count": {
          "type": "integer",
          "format": "int64",
          "title": "准备驱逐的Pod数量"
        },
        "ignore_evict_pods_count": {
          "type": "integer",
          "format": "int64",
          "title": "忽略驱逐的Pod数量"
        }
      },
      "required": [
        "ready_to_evict_pods_count",
        "ignore_evict_pods_count"
      ]
    },
    "nodeCheckEvictionResponse": {
      "type": "object",
      "properties": {
        "detail": {
          "$ref": "#/definitions/nodeCheckEvictionItem"
        }
      },
      "required": [
        "detail"
      ]
    },
    "nodeCreateOrUpdateNodeByYamlRequest": {
      "type": "object",
      "properties": {
        "cluster_name": {
          "type": "string",
          "title": "集群名称"
        },
        "yaml": {
          "type": "string",
          "title": "Yaml"
        }
      },
      "title": "创建或者更新节点请求",
      "required": [
        "cluster_name",
        "yaml"
      ]
    },
    "nodeCreateOrUpdateNodeByYamlResponse": {
      "type": "object",
      "title": "根据Yaml创建或者更新节点响应"
    },
    "nodeGetNodeDetailResponse": {
      "type": "object",
      "properties": {
        "taints": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Taint"
          },
          "title": "污点"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "标签"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "注解"
        },
        "pods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Pod"
          },
          "title": "Pods"
        },
        "yaml": {
          "type": "string",
          "title": "yaml"
        },
        "node_item": {
          "$ref": "#/definitions/nodeNodeItem",
          "title": "节点信息"
        },
        "system_info": {
          "$ref": "#/definitions/v1NodeSystemInfo",
          "title": "系统信息，包含节点的硬件和操作系统信息"
        },
        "resource_usage": {
          "$ref": "#/definitions/nodeResourceUsage",
          "title": "资源使用情况"
        },
        "node_condition": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nodeNodeCondition"
          },
          "title": "健康检查"
        },
        "unschedulable": {
          "type": "boolean",
          "title": "是否封锁"
        }
      },
      "title": "查询节点详情响应",
      "required": [
        "taints",
        "labels",
        "annotations",
        "pods",
        "yaml",
        "node_item",
        "system_info",
        "resource_usage",
        "node_condition",
        "unschedulable"
      ]
    },
    "nodeHandleNodeRequest": {
      "type": "object",
      "properties": {
        "cluster_name": {
          "type": "string",
          "title": "集群名称"
        },
        "name": {
          "type": "string",
          "title": "节点名称"
        },
        "operation": {
          "$ref": "#/definitions/nodeNodeOperation",
          "title": "操作类型"
        }
      },
      "required": [
        "cluster_name",
        "name",
        "operation"
      ]
    },
    "nodeHandleNodeResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "nodeListNodeResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/nodeNodeItem"
          }
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "title": "总数"
        }
      },
      "title": "节点列表",
      "required": [
        "list",
        "total"
      ]
    },
    "nodeNodeCondition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "last_transition_time": {
          "type": "string",
          "format": "uint64"
        },
        "last_heartbeat_time": {
          "type": "string",
          "format": "uint64"
        },
        "reason": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "status",
        "last_transition_time",
        "last_heartbeat_time",
        "reason",
        "message"
      ]
    },
    "nodeNodeHealthState": {
      "type": "string",
      "enum": [
        "Healthy",
        "DiskPressure",
        "MemoryPressure",
        "PIDPressure",
        "NetworkUnavailable",
        "RouteUnavailable",
        "CpuUsageHigh",
        "MemoryUsageHigh"
      ],
      "default": "Healthy",
      "title": "- Healthy: 健康\n - DiskPressure: 磁盘空间异常\n - MemoryPressure: 内存空间异常\n - PIDPressure: 进程异常\n - NetworkUnavailable: 网络异常\n - RouteUnavailable: 路由异常\n - CpuUsageHigh: Cpu使用过高\n - MemoryUsageHigh: 内存使用过高"
    },
    "nodeNodeItem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "名称"
        },
        "state": {
          "$ref": "#/definitions/nodeNodeStatus",
          "title": "节点状态"
        },
        "health_state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/nodeNodeHealthState"
          },
          "title": "健康检查"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "角色"
        },
        "internal_ip": {
          "type": "string",
          "title": "IP地址"
        },
        "kubelet_version": {
          "type": "string",
          "title": "节点版本"
        },
        "os_image": {
          "type": "string",
          "title": "系统镜像"
        },
        "container_runtime_version": {
          "type": "string",
          "title": "容器引擎"
        },
        "create_time": {
          "type": "string",
          "format": "uint64",
          "title": "创建时间"
        },
        "uid": {
          "type": "string",
          "title": "UID"
        },
        "unschedulable": {
          "type": "boolean",
          "title": "是否封锁"
        },
        "pod_total": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated 使用 resource_usage 替代, pod总数"
        },
        "pod_usage": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated 使用 resource_usage 替代, pod已使用"
        },
        "is_followed": {
          "type": "boolean",
          "title": "是否关注"
        },
        "operating_system": {
          "type": "string",
          "title": "操作系统"
        },
        "resource_usage": {
          "$ref": "#/definitions/nodeResourceUsage",
          "title": "资源使用情况"
        }
      },
      "title": "节点",
      "required": [
        "name",
        "state",
        "health_state",
        "roles",
        "internal_ip",
        "kubelet_version",
        "os_image",
        "container_runtime_version",
        "create_time",
        "uid",
        "unschedulable",
        "pod_total",
        "pod_usage",
        "is_followed",
        "operating_system",
        "resource_usage"
      ]
    },
    "nodeNodeOperation": {
      "type": "string",
      "enum": [
        "UnknownOperation",
        "NodeCordon",
        "NodeUncordon",
        "NodeDrain",
        "NodeUndrain"
      ],
      "default": "UnknownOperation",
      "title": "- UnknownOperation: 未知操作\n - NodeCordon: 封锁节点\n - NodeUncordon: 取消封锁节点\n - NodeDrain: 驱逐节点\n - NodeUndrain: 取消驱逐节点"
    },
    "nodeNodeStatus": {
      "type": "string",
      "enum": [
        "NodeReady",
        "NodeError"
      ],
      "default": "NodeReady",
      "description": "- NodeReady: 运行中\n - NodeError: 异常",
      "title": "节点状态"
    },
    "nodeResourceUsage": {
      "type": "object",
      "properties": {
        "node_memory_total": {
          "type": "number",
          "format": "float",
          "title": "内存总量"
        },
        "node_memory_usage": {
          "type": "number",
          "format": "float",
          "title": "内存使用量"
        },
        "node_cpu_total": {
          "type": "number",
          "format": "float",
          "title": "CPU总量"
        },
        "node_cpu_usage": {
          "type": "number",
          "format": "float",
          "title": "CPU使用量"
        },
        "pod_total": {
          "type": "integer",
          "format": "int64",
          "title": "Pod总量"
        },
        "pod_usage": {
          "type": "integer",
          "format": "int64",
          "title": "Pod使用量"
        },
        "requests_cpu_total": {
          "type": "number",
          "format": "float",
          "title": "requestsCpu总量"
        },
        "requests_cpu_usage": {
          "type": "number",
          "format": "float",
          "title": "requestsCpu使用量"
        },
        "requests_memory_total": {
          "type": "number",
          "format": "float",
          "title": "requestsMemory总量"
        },
        "requests_memory_usage": {
          "type": "number",
          "format": "float",
          "title": "requestsMemory使用量"
        },
        "limits_cpu_total": {
          "type": "number",
          "format": "float",
          "title": "limitsCpu总量"
        },
        "limits_cpu_usage": {
          "type": "number",
          "format": "float",
          "title": "limitsCpu使用量"
        },
        "limits_memory_total": {
          "type": "number",
          "format": "float",
          "title": "limitsMemory总量"
        },
        "limits_memory_usage": {
          "type": "number",
          "format": "float",
          "title": "limitsMemory使用量"
        },
        "node_allocatable_memory": {
          "type": "number",
          "format": "float",
          "title": "节点内存可分配"
        },
        "node_allocatable_cpu": {
          "type": "number",
          "format": "float",
          "title": "节点CPU可分配"
        }
      },
      "required": [
        "node_memory_total",
        "node_memory_usage",
        "node_cpu_total",
        "node_cpu_usage",
        "pod_total",
        "pod_usage",
        "requests_cpu_total",
        "requests_cpu_usage",
        "requests_memory_total",
        "requests_memory_usage",
        "limits_cpu_total",
        "limits_cpu_usage",
        "limits_memory_total",
        "limits_memory_usage",
        "node_allocatable_memory",
        "node_allocatable_cpu"
      ]
    },
    "nodeUpdateNodeRequest": {
      "type": "object",
      "properties": {
        "cluster_name": {
          "type": "string",
          "title": "集群名称"
        },
        "name": {
          "type": "string",
          "title": "节点名称"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "标签"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "注解"
        },
        "taints": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Taint"
          },
          "title": "污点"
        }
      },
      "title": "更新节点请求",
      "required": [
        "cluster_name",
        "name",
        "labels",
        "annotations",
        "taints"
      ]
    },
    "nodeUpdateNodeResponse": {
      "type": "object",
      "title": "更新节点响应"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {},
      "required": [
        "type_url",
        "value"
      ]
    },
    "resourceQuantity": {
      "type": "object",
      "properties": {
        "string": {
          "type": "string"
        }
      },
      "description": "Quantity is a fixed-point representation of a number.\nIt provides convenient marshaling/unmarshaling in JSON and YAML,\nin addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n```\n\u003cquantity\u003e        ::= \u003csignedNumber\u003e\u003csuffix\u003e\n\n\t(Note that \u003csuffix\u003e may be empty, from the \"\" case in \u003cdecimalSI\u003e.)\n\n\u003cdigit\u003e           ::= 0 | 1 | ... | 9\n\u003cdigits\u003e          ::= \u003cdigit\u003e | \u003cdigit\u003e\u003cdigits\u003e\n\u003cnumber\u003e          ::= \u003cdigits\u003e | \u003cdigits\u003e.\u003cdigits\u003e | \u003cdigits\u003e. | .\u003cdigits\u003e\n\u003csign\u003e            ::= \"+\" | \"-\"\n\u003csignedNumber\u003e    ::= \u003cnumber\u003e | \u003csign\u003e\u003cnumber\u003e\n\u003csuffix\u003e          ::= \u003cbinarySI\u003e | \u003cdecimalExponent\u003e | \u003cdecimalSI\u003e\n\u003cbinarySI\u003e        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n\u003cdecimalSI\u003e       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n\u003cdecimalExponent\u003e ::= \"e\" \u003csignedNumber\u003e | \"E\" \u003csignedNumber\u003e\n```\n\nNo matter which of the three exponent forms is used, no quantity may represent\na number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal\nplaces. Numbers larger or more precise will be capped or rounded up.\n(E.g.: 0.1m will rounded up to 1m.)\nThis may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix\nit had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\".\nThis means that Exponent/suffix will be adjusted up or down (with a\ncorresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost\n- No fractional digits will be emitted\n- The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\"\n- 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a\nfloating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed,\nbut will be re-emitted in their canonical form. (So always use canonical\nform, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without\nwriting some sort of special handling code in the hopes that that will\ncause implementors to also use a fixed point implementation.\n\n+protobuf=true\n+protobuf.embed=string\n+protobuf.options.marshal=false\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:deepcopy-gen=true\n+k8s:openapi-gen=true",
      "required": [
        "string"
      ]
    },
    "v1AWSElasticBlockStoreVolumeSource": {
      "type": "object",
      "properties": {
        "volumeID": {
          "type": "string",
          "title": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
        },
        "partition": {
          "type": "integer",
          "format": "int32",
          "title": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional"
        }
      },
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk\nmust also be in the same AWS zone as the kubelet. An AWS EBS disk\ncan only be mounted as read/write once. AWS EBS volumes support\nownership management and SELinux relabeling.",
      "required": [
        "volumeID",
        "fsType",
        "partition",
        "readOnly"
      ]
    },
    "v1Affinity": {
      "type": "object",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/v1NodeAffinity",
          "title": "Describes node affinity scheduling rules for the pod.\n+optional"
        },
        "podAffinity": {
          "$ref": "#/definitions/v1PodAffinity",
          "title": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\n+optional"
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/v1PodAntiAffinity",
          "title": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\n+optional"
        }
      },
      "description": "Affinity is a group of affinity scheduling rules.",
      "required": [
        "nodeAffinity",
        "podAffinity",
        "podAntiAffinity"
      ]
    },
    "v1AppArmorProfile": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "title": "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.\n+unionDiscriminator"
        },
        "localhostProfile": {
          "type": "string",
          "title": "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".\n+optional"
        }
      },
      "title": "AppArmorProfile defines a pod or container's AppArmor settings.\n+union",
      "required": [
        "type",
        "localhostProfile"
      ]
    },
    "v1AzureDiskVolumeSource": {
      "type": "object",
      "properties": {
        "diskName": {
          "type": "string",
          "title": "diskName is the Name of the data disk in the blob storage"
        },
        "diskURI": {
          "type": "string",
          "title": "diskURI is the URI of data disk in the blob storage"
        },
        "cachingMode": {
          "type": "string",
          "title": "cachingMode is the Host Caching mode: None, Read Only, Read Write.\n+optional"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional"
        },
        "kind": {
          "type": "string",
          "title": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared"
        }
      },
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "required": [
        "diskName",
        "diskURI",
        "cachingMode",
        "fsType",
        "readOnly",
        "kind"
      ]
    },
    "v1AzureFileVolumeSource": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string",
          "title": "secretName is the  name of secret that contains Azure Storage Account Name and Key"
        },
        "shareName": {
          "type": "string",
          "title": "shareName is the azure share Name"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional"
        }
      },
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "required": [
        "secretName",
        "shareName",
        "readOnly"
      ]
    },
    "v1CSIVolumeSource": {
      "type": "object",
      "properties": {
        "driver": {
          "type": "string",
          "description": "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster."
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).\n+optional"
        },
        "fsType": {
          "type": "string",
          "title": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.\n+optional"
        },
        "volumeAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.\n+optional"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "title": "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.\n+optional"
        }
      },
      "title": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "required": [
        "driver",
        "readOnly",
        "fsType",
        "volumeAttributes",
        "nodePublishSecretRef"
      ]
    },
    "v1Capabilities": {
      "type": "object",
      "properties": {
        "add": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Added capabilities\n+optional\n+listType=atomic"
        },
        "drop": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Removed capabilities\n+optional\n+listType=atomic"
        }
      },
      "description": "Adds and removes POSIX capabilities from running containers.",
      "required": [
        "add",
        "drop"
      ]
    },
    "v1CephFSVolumeSource": {
      "type": "object",
      "properties": {
        "monitors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+listType=atomic"
        },
        "path": {
          "type": "string",
          "title": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /\n+optional"
        },
        "user": {
          "type": "string",
          "title": "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional"
        },
        "secretFile": {
          "type": "string",
          "title": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "title": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it\n+optional"
        }
      },
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod\nCephfs volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "monitors",
        "path",
        "user",
        "secretFile",
        "secretRef",
        "readOnly"
      ]
    },
    "v1CinderVolumeSource": {
      "type": "object",
      "properties": {
        "volumeID": {
          "type": "string",
          "title": "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "title": "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.\n+optional"
        }
      },
      "description": "Represents a cinder volume resource in Openstack.\nA Cinder volume must exist before mounting to a container.\nThe volume must also be in the same region as the kubelet.\nCinder volumes support ownership management and SELinux relabeling.",
      "required": [
        "volumeID",
        "fsType",
        "readOnly",
        "secretRef"
      ]
    },
    "v1ClaimSource": {
      "type": "object",
      "properties": {
        "resourceClaimName": {
          "type": "string",
          "description": "ResourceClaimName is the name of a ResourceClaim object in the same\nnamespace as this pod."
        },
        "resourceClaimTemplateName": {
          "type": "string",
          "description": "ResourceClaimTemplateName is the name of a ResourceClaimTemplate\nobject in the same namespace as this pod.\n\nThe template will be used to create a new ResourceClaim, which will\nbe bound to this pod. When this pod is deleted, the ResourceClaim\nwill also be deleted. The pod name and resource name, along with a\ngenerated component, will be used to form a unique name for the\nResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.\n\nThis field is immutable and no changes will be made to the\ncorresponding ResourceClaim by the control plane after creating the\nResourceClaim."
        }
      },
      "description": "ClaimSource describes a reference to a ResourceClaim.\n\nExactly one of these fields should be set.  Consumers of this type must\ntreat an empty object as if it has an unknown value.",
      "required": [
        "resourceClaimName",
        "resourceClaimTemplateName"
      ]
    },
    "v1ClusterTrustBundleProjection": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.\n+optional"
        },
        "signerName": {
          "type": "string",
          "title": "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.\n+optional"
        },
        "labelSelector": {
          "$ref": "#/definitions/v1LabelSelector",
          "title": "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as \"match nothing\".  If set but empty, interpreted as \"match\neverything\".\n+optional"
        },
        "optional": {
          "type": "boolean",
          "title": "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.\n+optional"
        },
        "path": {
          "type": "string",
          "description": "Relative path from the volume root to write the bundle."
        }
      },
      "description": "ClusterTrustBundleProjection describes how to select a set of\nClusterTrustBundle objects and project their contents into the pod\nfilesystem.",
      "required": [
        "name",
        "signerName",
        "labelSelector",
        "optional",
        "path"
      ]
    },
    "v1ConfigMapEnvSource": {
      "type": "object",
      "properties": {
        "localObjectReference": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "description": "The ConfigMap to select from."
        },
        "optional": {
          "type": "boolean",
          "title": "Specify whether the ConfigMap must be defined\n+optional"
        }
      },
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment\nvariables with.\n\nThe contents of the target ConfigMap's Data field will represent the\nkey-value pairs as environment variables.",
      "required": [
        "localObjectReference",
        "optional"
      ]
    },
    "v1ConfigMapKeySelector": {
      "type": "object",
      "properties": {
        "localObjectReference": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "description": "The ConfigMap to select from."
        },
        "key": {
          "type": "string",
          "description": "The key to select."
        },
        "optional": {
          "type": "boolean",
          "title": "Specify whether the ConfigMap or its key must be defined\n+optional"
        }
      },
      "title": "Selects a key from a ConfigMap.\n+structType=atomic",
      "required": [
        "localObjectReference",
        "key",
        "optional"
      ]
    },
    "v1ConfigMapProjection": {
      "type": "object",
      "properties": {
        "localObjectReference": {
          "$ref": "#/definitions/v1LocalObjectReference"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyToPath"
          },
          "title": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic"
        },
        "optional": {
          "type": "boolean",
          "title": "optional specify whether the ConfigMap or its keys must be defined\n+optional"
        }
      },
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a\nprojected volume as files using the keys in the Data field as the file names,\nunless the items element is populated with specific mappings of keys to paths.\nNote that this is identical to a configmap volume source without the default\nmode.",
      "required": [
        "localObjectReference",
        "items",
        "optional"
      ]
    },
    "v1ConfigMapVolumeSource": {
      "type": "object",
      "properties": {
        "localObjectReference": {
          "$ref": "#/definitions/v1LocalObjectReference"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyToPath"
          },
          "title": "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic"
        },
        "defaultMode": {
          "type": "integer",
          "format": "int32",
          "title": "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
        },
        "optional": {
          "type": "boolean",
          "title": "optional specify whether the ConfigMap or its keys must be defined\n+optional"
        }
      },
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a\nvolume as files using the keys in the Data field as the file names, unless\nthe items element is populated with specific mappings of keys to paths.\nConfigMap volumes support ownership management and SELinux relabeling.",
      "required": [
        "localObjectReference",
        "items",
        "defaultMode",
        "optional"
      ]
    },
    "v1Container": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated."
        },
        "image": {
          "type": "string",
          "title": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.\n+optional"
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic"
        },
        "workingDir": {
          "type": "string",
          "title": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ContainerPort"
          },
          "title": "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol"
        },
        "envFrom": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EnvFromSource"
          },
          "title": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic"
        },
        "env": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EnvVar"
          },
          "title": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name"
        },
        "resources": {
          "$ref": "#/definitions/corev1ResourceRequirements",
          "title": "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        },
        "resizePolicy": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ContainerResizePolicy"
          },
          "title": "Resources resize policy for the container.\n+featureGate=InPlacePodVerticalScaling\n+optional\n+listType=atomic"
        },
        "restartPolicy": {
          "type": "string",
          "title": "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.\n+featureGate=SidecarContainers\n+optional"
        },
        "volumeMounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VolumeMount"
          },
          "title": "Pod volumes to mount into the container's filesystem.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=map\n+listMapKey=mountPath"
        },
        "volumeDevices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VolumeDevice"
          },
          "title": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+listType=map\n+listMapKey=devicePath\n+optional"
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1Probe",
          "title": "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1Probe",
          "title": "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "startupProbe": {
          "$ref": "#/definitions/v1Probe",
          "title": "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "lifecycle": {
          "$ref": "#/definitions/v1Lifecycle",
          "title": "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.\n+optional"
        },
        "terminationMessagePath": {
          "type": "string",
          "title": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional"
        },
        "terminationMessagePolicy": {
          "type": "string",
          "title": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional"
        },
        "imagePullPolicy": {
          "type": "string",
          "title": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional"
        },
        "securityContext": {
          "$ref": "#/definitions/v1SecurityContext",
          "title": "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/\n+optional"
        },
        "stdin": {
          "type": "boolean",
          "title": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional"
        },
        "stdinOnce": {
          "type": "boolean",
          "title": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional"
        },
        "tty": {
          "type": "boolean",
          "title": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional"
        }
      },
      "description": "A single application container that you want to run within a pod.",
      "required": [
        "name",
        "image",
        "command",
        "args",
        "workingDir",
        "ports",
        "envFrom",
        "env",
        "resources",
        "resizePolicy",
        "restartPolicy",
        "volumeMounts",
        "volumeDevices",
        "livenessProbe",
        "readinessProbe",
        "startupProbe",
        "lifecycle",
        "terminationMessagePath",
        "terminationMessagePolicy",
        "imagePullPolicy",
        "securityContext",
        "stdin",
        "stdinOnce",
        "tty"
      ]
    },
    "v1ContainerPort": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "名称"
        },
        "hostPort": {
          "type": "integer",
          "format": "int32",
          "title": "宿主机端口"
        },
        "containerPort": {
          "type": "integer",
          "format": "int32",
          "title": "容器端口"
        },
        "protocol": {
          "type": "string",
          "title": "Protocol for port. Must be UDP, TCP, or SCTP.\n协议"
        },
        "hostIP": {
          "type": "string",
          "title": "What host IP to bind the external port to.\n+optional"
        }
      },
      "description": "ContainerPort represents a network port in a single container.",
      "required": [
        "name",
        "hostPort",
        "containerPort",
        "protocol",
        "hostIP"
      ]
    },
    "v1ContainerResizePolicy": {
      "type": "object",
      "properties": {
        "resourceName": {
          "type": "string",
          "description": "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory."
        },
        "restartPolicy": {
          "type": "string",
          "description": "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired."
        }
      },
      "description": "ContainerResizePolicy represents resource resize policy for the container.",
      "required": [
        "resourceName",
        "restartPolicy"
      ]
    },
    "v1DownwardAPIProjection": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DownwardAPIVolumeFile"
          },
          "title": "Items is a list of DownwardAPIVolume file\n+optional\n+listType=atomic"
        }
      },
      "description": "Represents downward API info for projecting into a projected volume.\nNote that this is identical to a downwardAPI volume source without the default\nmode.",
      "required": [
        "items"
      ]
    },
    "v1DownwardAPIVolumeFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
        },
        "fieldRef": {
          "$ref": "#/definitions/v1ObjectFieldSelector",
          "title": "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.\n+optional"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1ResourceFieldSelector",
          "title": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.\n+optional"
        },
        "mode": {
          "type": "integer",
          "format": "int32",
          "title": "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
        }
      },
      "title": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "required": [
        "path",
        "fieldRef",
        "resourceFieldRef",
        "mode"
      ]
    },
    "v1DownwardAPIVolumeSource": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DownwardAPIVolumeFile"
          },
          "title": "Items is a list of downward API volume file\n+optional\n+listType=atomic"
        },
        "defaultMode": {
          "type": "integer",
          "format": "int32",
          "title": "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
        }
      },
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info.\nDownward API volumes support ownership management and SELinux relabeling.",
      "required": [
        "items",
        "defaultMode"
      ]
    },
    "v1EmptyDirVolumeSource": {
      "type": "object",
      "properties": {
        "medium": {
          "type": "string",
          "title": "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional"
        },
        "sizeLimit": {
          "$ref": "#/definitions/resourceQuantity",
          "title": "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional"
        }
      },
      "description": "Represents an empty directory for a pod.\nEmpty directory volumes support ownership management and SELinux relabeling.",
      "required": [
        "medium",
        "sizeLimit"
      ]
    },
    "v1EnvFromSource": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string",
          "title": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.\n+optional"
        },
        "configMapRef": {
          "$ref": "#/definitions/v1ConfigMapEnvSource",
          "title": "The ConfigMap to select from\n+optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1SecretEnvSource",
          "title": "The Secret to select from\n+optional"
        }
      },
      "title": "EnvFromSource represents the source of a set of ConfigMaps",
      "required": [
        "prefix",
        "configMapRef",
        "secretRef"
      ]
    },
    "v1EnvVar": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the environment variable. Must be a C_IDENTIFIER."
        },
        "value": {
          "type": "string",
          "title": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".\n+optional"
        },
        "valueFrom": {
          "$ref": "#/definitions/v1EnvVarSource",
          "title": "Source for the environment variable's value. Cannot be used if value is not empty.\n+optional"
        }
      },
      "description": "EnvVar represents an environment variable present in a Container.",
      "required": [
        "name",
        "value",
        "valueFrom"
      ]
    },
    "v1EnvVarSource": {
      "type": "object",
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/v1ObjectFieldSelector",
          "title": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.\n+optional"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/v1ResourceFieldSelector",
          "title": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.\n+optional"
        },
        "configMapKeyRef": {
          "$ref": "#/definitions/v1ConfigMapKeySelector",
          "title": "Selects a key of a ConfigMap.\n+optional"
        },
        "secretKeyRef": {
          "$ref": "#/definitions/v1SecretKeySelector",
          "title": "Selects a key of a secret in the pod's namespace\n+optional"
        }
      },
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "required": [
        "fieldRef",
        "resourceFieldRef",
        "configMapKeyRef",
        "secretKeyRef"
      ]
    },
    "v1EphemeralContainer": {
      "type": "object",
      "properties": {
        "ephemeralContainerCommon": {
          "$ref": "#/definitions/v1EphemeralContainerCommon",
          "description": "Ephemeral containers have all of the fields of Container, plus additional fields\nspecific to ephemeral containers. Fields in common with Container are in the\nfollowing inlined struct so than an EphemeralContainer may easily be converted\nto a Container."
        },
        "targetContainerName": {
          "type": "string",
          "description": "If set, the name of the container from PodSpec that this ephemeral container targets.\nThe ephemeral container will be run in the namespaces (IPC, PID, etc) of this container.\nIf not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not\nsupport namespace targeting then the result of setting this field is undefined.\n+optional"
        }
      },
      "description": "An EphemeralContainer is a temporary container that you may add to an existing Pod for\nuser-initiated activities such as debugging. Ephemeral containers have no resource or\nscheduling guarantees, and they will not be restarted when they exit or when a Pod is\nremoved or restarted. The kubelet may evict a Pod if an ephemeral container causes the\nPod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing\nPod. Ephemeral containers may not be removed or restarted.",
      "required": [
        "ephemeralContainerCommon",
        "targetContainerName"
      ]
    },
    "v1EphemeralContainerCommon": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the ephemeral container specified as a DNS_LABEL.\nThis name must be unique among all containers, init containers and ephemeral containers."
        },
        "image": {
          "type": "string",
          "title": "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images"
        },
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Entrypoint array. Not executed within a shell.\nThe image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Arguments to the entrypoint.\nThe image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n+optional\n+listType=atomic"
        },
        "workingDir": {
          "type": "string",
          "title": "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.\n+optional"
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ContainerPort"
          },
          "title": "Ports are not allowed for ephemeral containers.\n+optional\n+patchMergeKey=containerPort\n+patchStrategy=merge\n+listType=map\n+listMapKey=containerPort\n+listMapKey=protocol"
        },
        "envFrom": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EnvFromSource"
          },
          "title": "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.\n+optional\n+listType=atomic"
        },
        "env": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EnvVar"
          },
          "title": "List of environment variables to set in the container.\nCannot be updated.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name"
        },
        "resources": {
          "$ref": "#/definitions/corev1ResourceRequirements",
          "title": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources\nalready allocated to the pod.\n+optional"
        },
        "resizePolicy": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ContainerResizePolicy"
          },
          "title": "Resources resize policy for the container.\n+featureGate=InPlacePodVerticalScaling\n+optional\n+listType=atomic"
        },
        "restartPolicy": {
          "type": "string",
          "title": "Restart policy for the container to manage the restart behavior of each\ncontainer within a pod.\nThis may only be set for init containers. You cannot set this field on\nephemeral containers.\n+featureGate=SidecarContainers\n+optional"
        },
        "volumeMounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VolumeMount"
          },
          "title": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers.\nCannot be updated.\n+optional\n+patchMergeKey=mountPath\n+patchStrategy=merge\n+listType=map\n+listMapKey=mountPath"
        },
        "volumeDevices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VolumeDevice"
          },
          "title": "volumeDevices is the list of block devices to be used by the container.\n+patchMergeKey=devicePath\n+patchStrategy=merge\n+listType=map\n+listMapKey=devicePath\n+optional"
        },
        "livenessProbe": {
          "$ref": "#/definitions/v1Probe",
          "title": "Probes are not allowed for ephemeral containers.\n+optional"
        },
        "readinessProbe": {
          "$ref": "#/definitions/v1Probe",
          "title": "Probes are not allowed for ephemeral containers.\n+optional"
        },
        "startupProbe": {
          "$ref": "#/definitions/v1Probe",
          "title": "Probes are not allowed for ephemeral containers.\n+optional"
        },
        "lifecycle": {
          "$ref": "#/definitions/v1Lifecycle",
          "title": "Lifecycle is not allowed for ephemeral containers.\n+optional"
        },
        "terminationMessagePath": {
          "type": "string",
          "title": "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.\n+optional"
        },
        "terminationMessagePolicy": {
          "type": "string",
          "title": "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.\n+optional"
        },
        "imagePullPolicy": {
          "type": "string",
          "title": "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n+optional"
        },
        "securityContext": {
          "$ref": "#/definitions/v1SecurityContext",
          "title": "Optional: SecurityContext defines the security options the ephemeral container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\n+optional"
        },
        "stdin": {
          "type": "boolean",
          "title": "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.\n+optional"
        },
        "stdinOnce": {
          "type": "boolean",
          "title": "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false\n+optional"
        },
        "tty": {
          "type": "boolean",
          "title": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.\n+optional"
        }
      },
      "description": "EphemeralContainerCommon is a copy of all fields in Container to be inlined in\nEphemeralContainer. This separate type allows easy conversion from EphemeralContainer\nto Container and allows separate documentation for the fields of EphemeralContainer.\nWhen a new field is added to Container it must be added here as well.",
      "required": [
        "name",
        "image",
        "command",
        "args",
        "workingDir",
        "ports",
        "envFrom",
        "env",
        "resources",
        "resizePolicy",
        "restartPolicy",
        "volumeMounts",
        "volumeDevices",
        "livenessProbe",
        "readinessProbe",
        "startupProbe",
        "lifecycle",
        "terminationMessagePath",
        "terminationMessagePolicy",
        "imagePullPolicy",
        "securityContext",
        "stdin",
        "stdinOnce",
        "tty"
      ]
    },
    "v1EphemeralVolumeSource": {
      "type": "object",
      "properties": {
        "volumeClaimTemplate": {
          "$ref": "#/definitions/v1PersistentVolumeClaimTemplate",
          "description": "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `\u003cpod name\u003e-\u003cvolume name\u003e` where\n`\u003cvolume name\u003e` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil."
        }
      },
      "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
      "required": [
        "volumeClaimTemplate"
      ]
    },
    "v1ExecAction": {
      "type": "object",
      "properties": {
        "command": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.\n+optional\n+listType=atomic"
        }
      },
      "description": "ExecAction describes a \"run in container\" action.",
      "required": [
        "command"
      ]
    },
    "v1FCVolumeSource": {
      "type": "object",
      "properties": {
        "targetWWNs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "targetWWNs is Optional: FC target worldwide names (WWNs)\n+optional\n+listType=atomic"
        },
        "lun": {
          "type": "integer",
          "format": "int32",
          "title": "lun is Optional: FC target lun number\n+optional"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional"
        },
        "wwids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.\n+optional\n+listType=atomic"
        }
      },
      "description": "Represents a Fibre Channel volume.\nFibre Channel volumes can only be mounted as read/write once.\nFibre Channel volumes support ownership management and SELinux relabeling.",
      "required": [
        "targetWWNs",
        "lun",
        "fsType",
        "readOnly",
        "wwids"
      ]
    },
    "v1FieldsV1": {
      "type": "object",
      "properties": {
        "Raw": {
          "type": "string",
          "format": "byte",
          "description": "Raw is the underlying serialization of this object."
        }
      },
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set,\nor a string representing a sub-field or item. The string will follow one of these four formats:\n'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map\n'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item\n'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list\n'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values\nIf a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff\n+protobuf.options.(gogoproto.goproto_stringer)=false",
      "required": [
        "Raw"
      ]
    },
    "v1FlexVolumeSource": {
      "type": "object",
      "properties": {
        "driver": {
          "type": "string",
          "description": "driver is the name of the driver to use for this volume."
        },
        "fsType": {
          "type": "string",
          "title": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.\n+optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "title": "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "options is Optional: this field holds extra command options if any.\n+optional"
        }
      },
      "description": "FlexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.",
      "required": [
        "driver",
        "fsType",
        "secretRef",
        "readOnly",
        "options"
      ]
    },
    "v1FlockerVolumeSource": {
      "type": "object",
      "properties": {
        "datasetName": {
          "type": "string",
          "title": "datasetName is Name of the dataset stored as metadata -\u003e name on the dataset for Flocker\nshould be considered as deprecated\n+optional"
        },
        "datasetUUID": {
          "type": "string",
          "title": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset\n+optional"
        }
      },
      "description": "Represents a Flocker volume mounted by the Flocker agent.\nOne and only one of datasetName and datasetUUID should be set.\nFlocker volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "datasetName",
        "datasetUUID"
      ]
    },
    "v1GCEPersistentDiskVolumeSource": {
      "type": "object",
      "properties": {
        "pdName": {
          "type": "string",
          "title": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
        },
        "partition": {
          "type": "integer",
          "format": "int32",
          "title": "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional"
        }
      },
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must\nalso be in the same GCE project and zone as the kubelet. A GCE PD\ncan only be mounted as read/write once or read-only many times. GCE\nPDs support ownership management and SELinux relabeling.",
      "required": [
        "pdName",
        "fsType",
        "partition",
        "readOnly"
      ]
    },
    "v1GRPCAction": {
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535."
        },
        "service": {
          "type": "string",
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.\n+optional\n+default=\"\""
        }
      },
      "required": [
        "port",
        "service"
      ]
    },
    "v1GitRepoVolumeSource": {
      "type": "object",
      "properties": {
        "repository": {
          "type": "string",
          "title": "repository is the URL"
        },
        "revision": {
          "type": "string",
          "title": "revision is the commit hash for the specified revision.\n+optional"
        },
        "directory": {
          "type": "string",
          "title": "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.\n+optional"
        }
      },
      "description": "Represents a volume that is populated with the contents of a git repository.\nGit repo volumes do not support ownership management.\nGit repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.",
      "required": [
        "repository",
        "revision",
        "directory"
      ]
    },
    "v1GlusterfsVolumeSource": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "string",
          "title": "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        },
        "path": {
          "type": "string",
          "title": "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod\n+optional"
        }
      },
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod.\nGlusterfs volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "endpoints",
        "path",
        "readOnly"
      ]
    },
    "v1HTTPGetAction": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "Path to access on the HTTP server.\n+optional"
        },
        "port": {
          "$ref": "#/definitions/intstrIntOrString",
          "description": "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME."
        },
        "host": {
          "type": "string",
          "title": "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.\n+optional"
        },
        "scheme": {
          "type": "string",
          "title": "Scheme to use for connecting to the host.\nDefaults to HTTP.\n+optional"
        },
        "httpHeaders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1HTTPHeader"
          },
          "title": "Custom headers to set in the request. HTTP allows repeated headers.\n+optional\n+listType=atomic"
        }
      },
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "required": [
        "path",
        "port",
        "host",
        "scheme",
        "httpHeaders"
      ]
    },
    "v1HTTPHeader": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header."
        },
        "value": {
          "type": "string",
          "title": "The header field value"
        }
      },
      "title": "HTTPHeader describes a custom header to be used in HTTP probes",
      "required": [
        "name",
        "value"
      ]
    },
    "v1HostAlias": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "title": "IP address of the host file entry.\n+required"
        },
        "hostnames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Hostnames for the above IP address.\n+listType=atomic"
        }
      },
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the\npod's hosts file.",
      "required": [
        "ip",
        "hostnames"
      ]
    },
    "v1HostIP": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "title": "IP is the IP address assigned to the host"
        }
      },
      "description": "HostIP represents a single IP address allocated to the host.",
      "required": [
        "ip"
      ]
    },
    "v1HostPathVolumeSource": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "title": "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "type": {
          "type": "string",
          "title": "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n+optional"
        }
      },
      "description": "Represents a host path mapped into a pod.\nHost path volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "path",
        "type"
      ]
    },
    "v1ISCSIVolumeSource": {
      "type": "object",
      "properties": {
        "targetPortal": {
          "type": "string",
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260)."
        },
        "iqn": {
          "type": "string",
          "description": "iqn is the target iSCSI Qualified Name."
        },
        "lun": {
          "type": "integer",
          "format": "int32",
          "description": "lun represents iSCSI Target Lun number."
        },
        "iscsiInterface": {
          "type": "string",
          "title": "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).\n+optional"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\n+optional"
        },
        "portals": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).\n+optional\n+listType=atomic"
        },
        "chapAuthDiscovery": {
          "type": "boolean",
          "title": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication\n+optional"
        },
        "chapAuthSession": {
          "type": "boolean",
          "title": "chapAuthSession defines whether support iSCSI Session CHAP authentication\n+optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "title": "secretRef is the CHAP Secret for iSCSI target and initiator authentication\n+optional"
        },
        "initiatorName": {
          "type": "string",
          "title": "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n\u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.\n+optional"
        }
      },
      "description": "Represents an ISCSI disk.\nISCSI volumes can only be mounted as read/write once.\nISCSI volumes support ownership management and SELinux relabeling.",
      "required": [
        "targetPortal",
        "iqn",
        "lun",
        "iscsiInterface",
        "fsType",
        "readOnly",
        "portals",
        "chapAuthDiscovery",
        "chapAuthSession",
        "secretRef",
        "initiatorName"
      ]
    },
    "v1KeyToPath": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the key to project."
        },
        "path": {
          "type": "string",
          "description": "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'."
        },
        "mode": {
          "type": "integer",
          "format": "int32",
          "title": "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
        }
      },
      "description": "Maps a string key to a path within a volume.",
      "required": [
        "key",
        "path",
        "mode"
      ]
    },
    "v1LabelSelector": {
      "type": "object",
      "properties": {
        "matchLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n+optional"
        },
        "matchExpressions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LabelSelectorRequirement"
          },
          "title": "matchExpressions is a list of label selector requirements. The requirements are ANDed.\n+optional\n+listType=atomic"
        }
      },
      "title": "A label selector is a label query over a set of resources. The result of matchLabels and\nmatchExpressions are ANDed. An empty label selector matches all objects. A null\nlabel selector matches no objects.\n+structType=atomic",
      "required": [
        "matchLabels",
        "matchExpressions"
      ]
    },
    "v1LabelSelectorRequirement": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.\n+optional\n+listType=atomic"
        }
      },
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
      "required": [
        "key",
        "operator",
        "values"
      ]
    },
    "v1Lifecycle": {
      "type": "object",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/v1LifecycleHandler",
          "title": "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional"
        },
        "preStop": {
          "$ref": "#/definitions/v1LifecycleHandler",
          "title": "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks\n+optional"
        }
      },
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle\nevents. For the PostStart and PreStop lifecycle handlers, management of the container blocks\nuntil the action is complete, unless the container process fails, in which case the handler is aborted.",
      "required": [
        "postStart",
        "preStop"
      ]
    },
    "v1LifecycleHandler": {
      "type": "object",
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1ExecAction",
          "title": "Exec specifies the action to take.\n+optional"
        },
        "httpGet": {
          "$ref": "#/definitions/v1HTTPGetAction",
          "title": "HTTPGet specifies the http request to perform.\n+optional"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1TCPSocketAction",
          "title": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor the backward compatibility. There are no validation of this field and\nlifecycle hooks will fail in runtime when tcp handler is specified.\n+optional"
        },
        "sleep": {
          "$ref": "#/definitions/v1SleepAction",
          "title": "Sleep represents the duration that the container should sleep before being terminated.\n+featureGate=PodLifecycleSleepAction\n+optional"
        }
      },
      "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle\nhook. One and only one of the fields, except TCPSocket must be specified.",
      "required": [
        "exec",
        "httpGet",
        "tcpSocket",
        "sleep"
      ]
    },
    "v1LocalObjectReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nTODO: Add other useful fields. apiVersion, kind, uid?\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\n+optional\n+default=\"\"\n+kubebuilder:default=\"\"\nTODO: Drop `kubebuilder:default` when controller-gen doesn't need it https://github.com/kubernetes-sigs/kubebuilder/issues/3896."
        }
      },
      "title": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.\n+structType=atomic",
      "required": [
        "name"
      ]
    },
    "v1ManagedFieldsEntry": {
      "type": "object",
      "properties": {
        "manager": {
          "type": "string",
          "description": "Manager is an identifier of the workflow managing these fields."
        },
        "operation": {
          "type": "string",
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created.\nThe only valid values for this field are 'Apply' and 'Update'."
        },
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the version of this resource that this field set\napplies to. The format is \"group/version\" just like the top-level\nAPIVersion field. It is necessary to track the version of a field\nset because it cannot be automatically converted."
        },
        "time": {
          "$ref": "#/definitions/v1Time",
          "title": "Time is the timestamp of when the ManagedFields entry was added. The\ntimestamp will also be updated if a field is added, the manager\nchanges any of the owned fields value or removes a field. The\ntimestamp does not update when a field is removed from the entry\nbecause another manager took it over.\n+optional"
        },
        "fieldsType": {
          "type": "string",
          "title": "FieldsType is the discriminator for the different fields format and version.\nThere is currently only one possible value: \"FieldsV1\""
        },
        "fieldsV1": {
          "$ref": "#/definitions/v1FieldsV1",
          "title": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.\n+optional"
        },
        "subresource": {
          "type": "string",
          "description": "Subresource is the name of the subresource used to update that object, or\nempty string if the object was updated through the main resource. The\nvalue of this field is used to distinguish between managers, even if they\nshare the same name. For example, a status update will be distinct from a\nregular update using the same manager name.\nNote that the APIVersion field is not related to the Subresource field and\nit always corresponds to the version of the main resource."
        }
      },
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource\nthat the fieldset applies to.",
      "required": [
        "manager",
        "operation",
        "apiVersion",
        "time",
        "fieldsType",
        "fieldsV1",
        "subresource"
      ]
    },
    "v1NFSVolumeSource": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string",
          "title": "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "path": {
          "type": "string",
          "title": "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional"
        }
      },
      "description": "Represents an NFS mount that lasts the lifetime of a pod.\nNFS volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "server",
        "path",
        "readOnly"
      ]
    },
    "v1NodeAffinity": {
      "type": "object",
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/v1NodeSelector",
          "title": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.\n+optional"
        },
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PreferredSchedulingTerm"
          },
          "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic"
        }
      },
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "required": [
        "requiredDuringSchedulingIgnoredDuringExecution",
        "preferredDuringSchedulingIgnoredDuringExecution"
      ]
    },
    "v1NodeSelector": {
      "type": "object",
      "properties": {
        "nodeSelectorTerms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NodeSelectorTerm"
          },
          "title": "Required. A list of node selector terms. The terms are ORed.\n+listType=atomic"
        }
      },
      "title": "A node selector represents the union of the results of one or more label queries\nover a set of nodes; that is, it represents the OR of the selectors represented\nby the node selector terms.\n+structType=atomic",
      "required": [
        "nodeSelectorTerms"
      ]
    },
    "v1NodeSelectorRequirement": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.\n+optional\n+listType=atomic"
        }
      },
      "description": "A node selector requirement is a selector that contains values, a key, and an operator\nthat relates the key and values.",
      "required": [
        "key",
        "operator",
        "values"
      ]
    },
    "v1NodeSelectorTerm": {
      "type": "object",
      "properties": {
        "matchExpressions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NodeSelectorRequirement"
          },
          "title": "A list of node selector requirements by node's labels.\n+optional\n+listType=atomic"
        },
        "matchFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NodeSelectorRequirement"
          },
          "title": "A list of node selector requirements by node's fields.\n+optional\n+listType=atomic"
        }
      },
      "title": "A null or empty node selector term matches no objects. The requirements of\nthem are ANDed.\nThe TopologySelectorTerm type implements a subset of the NodeSelectorTerm.\n+structType=atomic",
      "required": [
        "matchExpressions",
        "matchFields"
      ]
    },
    "v1NodeSystemInfo": {
      "type": "object",
      "properties": {
        "machineID": {
          "type": "string",
          "title": "MachineID"
        },
        "systemUUID": {
          "type": "string",
          "title": "SystemUUID"
        },
        "bootID": {
          "type": "string",
          "description": "Boot ID."
        },
        "kernelVersion": {
          "type": "string",
          "description": "Kernel Version 内核版本."
        },
        "osImage": {
          "type": "string",
          "description": "OS Image 系统镜像."
        },
        "containerRuntimeVersion": {
          "type": "string",
          "description": "ContainerRuntime Version."
        },
        "kubeletVersion": {
          "type": "string",
          "description": "Kubelet Version ."
        },
        "kubeProxyVersion": {
          "type": "string",
          "description": "KubeProxy Version."
        },
        "operatingSystem": {
          "type": "string",
          "description": "Operating System 操作系统."
        },
        "architecture": {
          "type": "string",
          "title": "Architecture 架构"
        }
      },
      "description": "NodeSystemInfo is a set of ids/uuids to uniquely identify the node.",
      "required": [
        "machineID",
        "systemUUID",
        "bootID",
        "kernelVersion",
        "osImage",
        "containerRuntimeVersion",
        "kubeletVersion",
        "kubeProxyVersion",
        "operatingSystem",
        "architecture"
      ]
    },
    "v1ObjectFieldSelector": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "title": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".\n+optional"
        },
        "fieldPath": {
          "type": "string",
          "description": "Path of the field to select in the specified API version."
        }
      },
      "title": "ObjectFieldSelector selects an APIVersioned field of an object.\n+structType=atomic",
      "required": [
        "apiVersion",
        "fieldPath"
      ]
    },
    "v1ObjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n+optional\npod 名称"
        },
        "generateName": {
          "type": "string",
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique\nname ONLY IF the Name field has not been provided.\nIf this field is used, the name returned to the client will be different\nthan the name passed. This value will also be combined with a unique suffix.\nThe provided value has the same validation rules as the Name field,\nand may be truncated by the length of the suffix required to make the value\nunique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n+optional"
        },
        "namespace": {
          "type": "string",
          "title": "+optional\npod 命名空间"
        },
        "selfLink": {
          "type": "string",
          "title": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional"
        },
        "uid": {
          "type": "string",
          "title": "More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n+optional"
        },
        "resourceVersion": {
          "type": "string",
          "title": "Value must be treated as opaque by clients and .\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional\npod 资源版本"
        },
        "generation": {
          "type": "string",
          "format": "int64",
          "title": "A sequence number representing a specific generation of the desired state.\nPopulated by the system. Read-only.\n+optional"
        },
        "creationTimestamp": {
          "type": "string",
          "title": "+optional\npod 创建时间 [UTC时区]"
        },
        "deletionTimestamp": {
          "type": "string",
          "title": "pod 删除时间 [UTC时区]"
        },
        "deletionGracePeriodSeconds": {
          "type": "string",
          "format": "int64",
          "title": "Number of seconds allowed for this object to gracefully terminate before\nit will be removed from the system. Only set when deletionTimestamp is also set.\nMay only be shortened.\nRead-only.\n+optional"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "+optional\npod 标签"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "+optional\npod 注解"
        },
        "ownerReferences": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OwnerReference"
          },
          "title": "List of objects depended by this object. If ALL objects in the list have\nbeen deleted, this object will be garbage collected. If this object is managed by a controller,\nthen an entry in this list will point to this controller, with the controller field set to true.\nThere cannot be more than one managing controller.\n+optional\n+patchMergeKey=uid\n+patchStrategy=merge\n+listType=map\n+listMapKey=uid"
        },
        "finalizers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Must be empty before the object is deleted from the registry. Each entry\nis an identifier for the responsible component that will remove the entry\nfrom the list. If the deletionTimestamp of the object is non-nil, entries\nin this list can only be removed.\nFinalizers may be processed and removed in any order.  Order is NOT enforced\nbecause it introduces significant risk of stuck finalizers.\nfinalizers is a shared field, any actor with permission can reorder it.\nIf the finalizer list is processed in order, then this can lead to a situation\nin which the component responsible for the first finalizer in the list is\nwaiting for a signal (field value, external system, or other) produced by a\ncomponent responsible for a finalizer later in the list, resulting in a deadlock.\nWithout enforced ordering finalizers are free to order amongst themselves and\nare not vulnerable to ordering changes in the list.\n+optional\n+patchStrategy=merge\n+listType=set"
        },
        "managedFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ManagedFieldsEntry"
          },
          "description": "ManagedFields maps workflow-id and version to the set of fields\nthat are managed by that workflow. This is mostly for internal\nhousekeeping, and users typically shouldn't need to set or\nunderstand this field. A workflow can be the user's name, a\ncontroller's name, or the name of a specific apply path like\n\"ci-cd\". The set of fields is always in the version that the\nworkflow used when modifying the object.\n\n+optional\n+listType=atomic"
        }
      },
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects\nusers must create.",
      "required": [
        "name",
        "generateName",
        "namespace",
        "selfLink",
        "uid",
        "resourceVersion",
        "generation",
        "creationTimestamp",
        "deletionTimestamp",
        "deletionGracePeriodSeconds",
        "labels",
        "annotations",
        "ownerReferences",
        "finalizers",
        "managedFields"
      ]
    },
    "v1OwnerReference": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent."
        },
        "kind": {
          "type": "string",
          "title": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        },
        "name": {
          "type": "string",
          "title": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names"
        },
        "uid": {
          "type": "string",
          "title": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids"
        },
        "controller": {
          "type": "boolean",
          "title": "If true, this reference points to the managing controller.\n+optional"
        },
        "blockOwnerDeletion": {
          "type": "boolean",
          "title": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then\nthe owner cannot be deleted from the key-value store until this\nreference is removed.\nSee https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion\nfor how the garbage collector interacts with this field and enforces the foreground deletion.\nDefaults to false.\nTo set this field, a user needs \"delete\" permission of the owner,\notherwise 422 (Unprocessable Entity) will be returned.\n+optional"
        }
      },
      "title": "OwnerReference contains enough information to let you identify an owning\nobject. An owning object must be in the same namespace as the dependent, or\nbe cluster-scoped, so there is no namespace field.\n+structType=atomic",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid",
        "controller",
        "blockOwnerDeletion"
      ]
    },
    "v1PersistentVolumeClaimSpec": {
      "type": "object",
      "properties": {
        "accessModes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n+optional\n+listType=atomic"
        },
        "selector": {
          "$ref": "#/definitions/v1LabelSelector",
          "title": "selector is a label query over volumes to consider for binding.\n+optional"
        },
        "resources": {
          "$ref": "#/definitions/v1VolumeResourceRequirements",
          "title": "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources\n+optional"
        },
        "volumeName": {
          "type": "string",
          "title": "volumeName is the binding reference to the PersistentVolume backing this claim.\n+optional"
        },
        "storageClassName": {
          "type": "string",
          "title": "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1\n+optional"
        },
        "volumeMode": {
          "type": "string",
          "title": "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.\n+optional"
        },
        "dataSource": {
          "$ref": "#/definitions/v1TypedLocalObjectReference",
          "title": "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.\n+optional"
        },
        "dataSourceRef": {
          "$ref": "#/definitions/v1TypedObjectReference",
          "title": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+optional"
        },
        "volumeAttributesClassName": {
          "type": "string",
          "title": "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.\n+featureGate=VolumeAttributesClass\n+optional"
        }
      },
      "title": "PersistentVolumeClaimSpec describes the common attributes of storage devices\nand allows a Source for provider-specific attributes",
      "required": [
        "accessModes",
        "selector",
        "resources",
        "volumeName",
        "storageClassName",
        "volumeMode",
        "dataSource",
        "dataSourceRef",
        "volumeAttributesClassName"
      ]
    },
    "v1PersistentVolumeClaimTemplate": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta",
          "description": "May contain labels and annotations that will be copied into the PVC\nwhen creating it. No other fields are allowed and will be rejected during\nvalidation.\n\n+optional"
        },
        "spec": {
          "$ref": "#/definitions/v1PersistentVolumeClaimSpec",
          "description": "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here."
        }
      },
      "description": "PersistentVolumeClaimTemplate is used to produce\nPersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
      "required": [
        "metadata",
        "spec"
      ]
    },
    "v1PersistentVolumeClaimVolumeSource": {
      "type": "object",
      "properties": {
        "claimName": {
          "type": "string",
          "title": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.\n+optional"
        }
      },
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace.\nThis volume finds the bound PV and mounts that volume for the pod. A\nPersistentVolumeClaimVolumeSource is, essentially, a wrapper around another\ntype of volume that is owned by someone else (the system).",
      "required": [
        "claimName",
        "readOnly"
      ]
    },
    "v1PhotonPersistentDiskVolumeSource": {
      "type": "object",
      "properties": {
        "pdID": {
          "type": "string",
          "title": "pdID is the ID that identifies Photon Controller persistent disk"
        },
        "fsType": {
          "type": "string",
          "description": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
        }
      },
      "description": "Represents a Photon Controller persistent disk resource.",
      "required": [
        "pdID",
        "fsType"
      ]
    },
    "v1Pod": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta",
          "title": "Standard object's metadata.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n+optional"
        },
        "spec": {
          "$ref": "#/definitions/v1PodSpec",
          "title": "Specification of the desired behavior of the pod.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional"
        },
        "status": {
          "$ref": "#/definitions/v1PodStatus",
          "title": "Most recently observed status of the pod.\nThis data may not be up to date.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status\n+optional"
        }
      },
      "description": "Pod is a collection of containers that can run on a host. This resource is created\nby clients and scheduled onto hosts.",
      "required": [
        "metadata",
        "spec",
        "status"
      ]
    },
    "v1PodAffinity": {
      "type": "object",
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PodAffinityTerm"
          },
          "title": "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic"
        },
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WeightedPodAffinityTerm"
          },
          "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic"
        }
      },
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "required": [
        "requiredDuringSchedulingIgnoredDuringExecution",
        "preferredDuringSchedulingIgnoredDuringExecution"
      ]
    },
    "v1PodAffinityTerm": {
      "type": "object",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/v1LabelSelector",
          "title": "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.\n+optional"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".\n+optional\n+listType=atomic"
        },
        "topologyKey": {
          "type": "string",
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed."
        },
        "namespaceSelector": {
          "$ref": "#/definitions/v1LabelSelector",
          "title": "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.\n+optional"
        },
        "matchLabelKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\n+listType=atomic\n+optional"
        },
        "mismatchLabelKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.\nThis is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.\n+listType=atomic\n+optional"
        }
      },
      "title": "Defines a set of pods (namely those matching the labelSelector\nrelative to the given namespace(s)) that this pod should be\nco-located (affinity) or not co-located (anti-affinity) with,\nwhere co-located is defined as running on a node whose value of\nthe label with key \u003ctopologyKey\u003e matches that of any node on which\na pod of the set of pods is running",
      "required": [
        "labelSelector",
        "namespaces",
        "topologyKey",
        "namespaceSelector",
        "matchLabelKeys",
        "mismatchLabelKeys"
      ]
    },
    "v1PodAntiAffinity": {
      "type": "object",
      "properties": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PodAffinityTerm"
          },
          "title": "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.\n+optional\n+listType=atomic"
        },
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WeightedPodAffinityTerm"
          },
          "title": "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.\n+optional\n+listType=atomic"
        }
      },
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "required": [
        "requiredDuringSchedulingIgnoredDuringExecution",
        "preferredDuringSchedulingIgnoredDuringExecution"
      ]
    },
    "v1PodDNSConfig": {
      "type": "object",
      "properties": {
        "nameservers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.\nDuplicated nameservers will be removed.\n+optional\n+listType=atomic"
        },
        "searches": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.\nDuplicated search paths will be removed.\n+optional\n+listType=atomic"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PodDNSConfigOption"
          },
          "title": "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nDuplicated entries will be removed. Resolution options given in Options\nwill override those that appear in the base DNSPolicy.\n+optional\n+listType=atomic"
        }
      },
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to\nthose generated from DNSPolicy.",
      "required": [
        "nameservers",
        "searches",
        "options"
      ]
    },
    "v1PodDNSConfigOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required."
        },
        "value": {
          "type": "string",
          "title": "+optional"
        }
      },
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "required": [
        "name",
        "value"
      ]
    },
    "v1PodIP": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string",
          "title": "IP is the IP address assigned to the pod"
        }
      },
      "description": "PodIP represents a single IP address allocated to the pod.",
      "required": [
        "ip"
      ]
    },
    "v1PodOS": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name is the name of the operating system. The currently supported values are linux and windows.\nAdditional value may be defined in future and can be one of:\nhttps://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration\nClients should expect to handle additional values and treat unrecognized values in this field as os: null"
        }
      },
      "description": "PodOS defines the OS parameters of a pod.",
      "required": [
        "name"
      ]
    },
    "v1PodReadinessGate": {
      "type": "object",
      "properties": {
        "conditionType": {
          "type": "string",
          "description": "ConditionType refers to a condition in the pod's condition list with matching type."
        }
      },
      "title": "PodReadinessGate contains the reference to a pod condition",
      "required": [
        "conditionType"
      ]
    },
    "v1PodResourceClaim": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name uniquely identifies this resource claim inside the pod.\nThis must be a DNS_LABEL."
        },
        "source": {
          "$ref": "#/definitions/v1ClaimSource",
          "description": "Source describes where to find the ResourceClaim."
        }
      },
      "description": "PodResourceClaim references exactly one ResourceClaim through a ClaimSource.\nIt adds a name to it that uniquely identifies the ResourceClaim inside the Pod.\nContainers that need access to the ResourceClaim reference it with this name.",
      "required": [
        "name",
        "source"
      ]
    },
    "v1PodResourceClaimStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name uniquely identifies this resource claim inside the pod.\nThis must match the name of an entry in pod.spec.resourceClaims,\nwhich implies that the string must be a DNS_LABEL."
        },
        "resourceClaimName": {
          "type": "string",
          "description": "ResourceClaimName is the name of the ResourceClaim that was\ngenerated for the Pod in the namespace of the Pod. It this is\nunset, then generating a ResourceClaim was not necessary. The\npod.spec.resourceClaims entry can be ignored in this case.\n\n+optional"
        }
      },
      "description": "PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim\nwhich references a ResourceClaimTemplate. It stores the generated name for\nthe corresponding ResourceClaim.",
      "required": [
        "name",
        "resourceClaimName"
      ]
    },
    "v1PodSchedulingGate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the scheduling gate.\nEach scheduling gate must have a unique name field."
        }
      },
      "description": "PodSchedulingGate is associated to a Pod to guard its scheduling.",
      "required": [
        "name"
      ]
    },
    "v1PodSecurityContext": {
      "type": "object",
      "properties": {
        "seLinuxOptions": {
          "$ref": "#/definitions/v1SELinuxOptions",
          "title": "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "windowsOptions": {
          "$ref": "#/definitions/v1WindowsSecurityContextOptions",
          "title": "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional"
        },
        "runAsUser": {
          "type": "string",
          "format": "int64",
          "title": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "runAsGroup": {
          "type": "string",
          "format": "int64",
          "title": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "runAsNonRoot": {
          "type": "boolean",
          "title": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional"
        },
        "supplementalGroups": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          },
          "title": "A list of groups applied to the first process run in each container, in addition\nto the container's primary GID, the fsGroup (if specified), and group memberships\ndefined in the container image for the uid of the container process. If unspecified,\nno additional groups are added to any container. Note that group memberships\ndefined in the container image for the uid of the container process are still effective,\neven if they are not included in this list.\nNote that this field cannot be set when spec.os.name is windows.\n+optional\n+listType=atomic"
        },
        "fsGroup": {
          "type": "string",
          "format": "int64",
          "description": "1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.\n+optional",
          "title": "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:"
        },
        "sysctls": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Sysctl"
          },
          "title": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.\n+optional\n+listType=atomic"
        },
        "fsGroupChangePolicy": {
          "type": "string",
          "title": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "seccompProfile": {
          "$ref": "#/definitions/v1SeccompProfile",
          "title": "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "appArmorProfile": {
          "$ref": "#/definitions/v1AppArmorProfile",
          "title": "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        }
      },
      "description": "PodSecurityContext holds pod-level security attributes and common container settings.\nSome fields are also present in container.securityContext.  Field values of\ncontainer.securityContext take precedence over field values of PodSecurityContext.",
      "required": [
        "seLinuxOptions",
        "windowsOptions",
        "runAsUser",
        "runAsGroup",
        "runAsNonRoot",
        "supplementalGroups",
        "fsGroup",
        "sysctls",
        "fsGroupChangePolicy",
        "seccompProfile",
        "appArmorProfile"
      ]
    },
    "v1PodSpec": {
      "type": "object",
      "properties": {
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Volume"
          },
          "title": "List of volumes that can be mounted by containers belonging to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes\n+optional\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=map\n+listMapKey=name\n挂载"
        },
        "initContainers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Container"
          },
          "title": "List of initialization containers belonging to the pod.\nInit containers are executed in order prior to containers being started. If any\ninit container fails, the pod is considered to have failed and is handled according\nto its restartPolicy. The name for an init container or normal container must be\nunique among all containers.\nInit containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes.\nThe resourceRequirements of an init container are taken into account during scheduling\nby finding the highest request/limit for each resource type, and then using the max of\nof that value or the sum of the normal containers. Limits are applied to init containers\nin a similar fashion.\nInit containers cannot currently be added or removed.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name\n 初始化容器"
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Container"
          },
          "title": "List of containers belonging to the pod.\nContainers cannot currently be added or removed.\nThere must be at least one container in a Pod.\nCannot be updated.\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name\n容器"
        },
        "ephemeralContainers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EphemeralContainer"
          },
          "title": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing\npod to perform user-initiated actions such as debugging. This list cannot be specified when\ncreating a pod, and it cannot be modified by updating the pod spec. In order to add an\nephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name"
        },
        "restartPolicy": {
          "type": "string",
          "title": "Restart policy for all containers within the pod.\nOne of Always, OnFailure, Never. In some contexts, only a subset of those values may be permitted.\nDefault to Always.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n+optional\n重启策略"
        },
        "terminationGracePeriodSeconds": {
          "type": "string",
          "format": "int64",
          "title": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nIf this value is nil, the default grace period will be used instead.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nDefaults to 30 seconds.\n+optional"
        },
        "activeDeadlineSeconds": {
          "type": "string",
          "format": "int64",
          "title": "Optional duration in seconds the pod may be active on the node relative to\nStartTime before the system will actively try to mark it failed and kill associated containers.\nValue must be a positive integer.\n+optional"
        },
        "dnsPolicy": {
          "type": "string",
          "title": "Set DNS policy for the pod.\nDefaults to \"ClusterFirst\".\nValid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.\nDNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.\nTo have DNS options set along with hostNetwork, you have to specify DNS policy\nexplicitly to 'ClusterFirstWithHostNet'.\n+optional"
        },
        "nodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "NodeSelector is a selector which must be true for the pod to fit on a node.\nSelector which must match a node's labels for the pod to be scheduled on that node.\nMore info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n+optional\n+mapType=atomic"
        },
        "serviceAccountName": {
          "type": "string",
          "title": "ServiceAccountName is the name of the ServiceAccount to use to run this pod.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n+optional"
        },
        "serviceAccount": {
          "type": "string",
          "title": "DeprecatedServiceAccount is a deprecated alias for ServiceAccountName.\nDeprecated: Use serviceAccountName instead.\n+k8s:conversion-gen=false\n+optional"
        },
        "automountServiceAccountToken": {
          "type": "boolean",
          "title": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.\n+optional"
        },
        "nodeName": {
          "type": "string",
          "title": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty,\nthe scheduler simply schedules this pod onto that node, assuming that it fits resource\nrequirements.\n+optional\n节点名称"
        },
        "hostNetwork": {
          "type": "boolean",
          "title": "Host networking requested for this pod. Use the host's network namespace.\nIf this option is set, the ports that will be used must be specified.\nDefault to false.\n+k8s:conversion-gen=false\n+optional"
        },
        "hostPID": {
          "type": "boolean",
          "title": "Use the host's pid namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional"
        },
        "hostIPC": {
          "type": "boolean",
          "title": "Use the host's ipc namespace.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional"
        },
        "shareProcessNamespace": {
          "type": "boolean",
          "title": "Share a single process namespace between all of the containers in a pod.\nWhen this is set containers will be able to view and signal processes from other containers\nin the same pod, and the first process in each container will not be assigned PID 1.\nHostPID and ShareProcessNamespace cannot both be set.\nOptional: Default to false.\n+k8s:conversion-gen=false\n+optional"
        },
        "securityContext": {
          "$ref": "#/definitions/v1PodSecurityContext",
          "title": "SecurityContext holds pod-level security attributes and common container settings.\nOptional: Defaults to empty.  See type description for default values of each field.\n+optional"
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocalObjectReference"
          },
          "title": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.\nIf specified, these secrets will be passed to individual puller implementations for them to use.\nMore info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod\n+optional\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name"
        },
        "hostname": {
          "type": "string",
          "title": "Specifies the hostname of the Pod\nIf not specified, the pod's hostname will be set to a system-defined value.\n+optional\npod 主机名"
        },
        "subdomain": {
          "type": "string",
          "title": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\".\nIf not specified, the pod will not have a domainname at all.\n+optional"
        },
        "affinity": {
          "$ref": "#/definitions/v1Affinity",
          "title": "If specified, the pod's scheduling constraints\n+optional"
        },
        "schedulerName": {
          "type": "string",
          "title": "If specified, the pod will be dispatched by specified scheduler.\nIf not specified, the pod will be dispatched by default scheduler.\n+optional"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Toleration"
          },
          "title": "If specified, the pod's tolerations.\n+optional\n+listType=atomic"
        },
        "hostAliases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1HostAlias"
          },
          "title": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts\nfile if specified.\n+optional\n+patchMergeKey=ip\n+patchStrategy=merge\n+listType=map\n+listMapKey=ip"
        },
        "priorityClassName": {
          "type": "string",
          "title": "If specified, indicates the pod's priority. \"system-node-critical\" and\n\"system-cluster-critical\" are two special keywords which indicate the\nhighest priorities with the former being the highest priority. Any other\nname must be defined by creating a PriorityClass object with that name.\nIf not specified, the pod priority will be default or zero if there is no\ndefault.\n+optional"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "The priority value. Various system components use this field to find the\npriority of the pod. When Priority Admission Controller is enabled, it\nprevents users from setting this field. The admission controller populates\nthis field from PriorityClassName.\nThe higher the value, the higher the priority.\n+optional"
        },
        "dnsConfig": {
          "$ref": "#/definitions/v1PodDNSConfig",
          "title": "Specifies the DNS parameters of a pod.\nParameters specified here will be merged to the generated DNS\nconfiguration based on DNSPolicy.\n+optional"
        },
        "readinessGates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PodReadinessGate"
          },
          "title": "If specified, all readiness gates will be evaluated for pod readiness.\nA pod is ready when all its containers are ready AND\nall conditions specified in the readiness gates have status equal to \"True\"\nMore info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates\n+optional\n+listType=atomic"
        },
        "runtimeClassName": {
          "type": "string",
          "title": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used\nto run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.\nIf unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an\nempty definition that uses the default runtime handler.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class\n+optional"
        },
        "enableServiceLinks": {
          "type": "boolean",
          "title": "EnableServiceLinks indicates whether information about services should be injected into pod's\nenvironment variables, matching the syntax of Docker links.\nOptional: Defaults to true.\n+optional"
        },
        "preemptionPolicy": {
          "type": "string",
          "title": "PreemptionPolicy is the Policy for preempting pods with lower priority.\nOne of Never, PreemptLowerPriority.\nDefaults to PreemptLowerPriority if unset.\n+optional"
        },
        "overhead": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resourceQuantity"
          },
          "title": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.\nThis field will be autopopulated at admission time by the RuntimeClass admission controller. If\nthe RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.\nThe RuntimeClass admission controller will reject Pod create requests which have the overhead already\nset. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value\ndefined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero.\nMore info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md\n+optional"
        },
        "topologySpreadConstraints": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TopologySpreadConstraint"
          },
          "title": "TopologySpreadConstraints describes how a group of pods ought to spread across topology\ndomains. Scheduler will schedule pods in a way which abides by the constraints.\nAll topologySpreadConstraints are ANDed.\n+optional\n+patchMergeKey=topologyKey\n+patchStrategy=merge\n+listType=map\n+listMapKey=topologyKey\n+listMapKey=whenUnsatisfiable"
        },
        "setHostnameAsFQDN": {
          "type": "boolean",
          "title": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default).\nIn Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname).\nIn Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN.\nIf a pod does not have FQDN, this has no effect.\nDefault to false.\n+optional"
        },
        "os": {
          "$ref": "#/definitions/v1PodOS",
          "description": "Specifies the OS of the containers in the pod.\nSome pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset:\n-securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset:\n- spec.hostPID\n- spec.hostIPC\n- spec.hostUsers\n- spec.securityContext.appArmorProfile\n- spec.securityContext.seLinuxOptions\n- spec.securityContext.seccompProfile\n- spec.securityContext.fsGroup\n- spec.securityContext.fsGroupChangePolicy\n- spec.securityContext.sysctls\n- spec.shareProcessNamespace\n- spec.securityContext.runAsUser\n- spec.securityContext.runAsGroup\n- spec.securityContext.supplementalGroups\n- spec.containers[*].securityContext.appArmorProfile\n- spec.containers[*].securityContext.seLinuxOptions\n- spec.containers[*].securityContext.seccompProfile\n- spec.containers[*].securityContext.capabilities\n- spec.containers[*].securityContext.readOnlyRootFilesystem\n- spec.containers[*].securityContext.privileged\n- spec.containers[*].securityContext.allowPrivilegeEscalation\n- spec.containers[*].securityContext.procMount\n- spec.containers[*].securityContext.runAsUser\n- spec.containers[*].securityContext.runAsGroup\n+optional"
        },
        "hostUsers": {
          "type": "boolean",
          "title": "Use the host's user namespace.\nOptional: Default to true.\nIf set to true or not present, the pod will be run in the host user namespace, useful\nfor when the pod needs a feature only available to the host user namespace, such as\nloading a kernel module with CAP_SYS_MODULE.\nWhen set to false, a new userns is created for the pod. Setting false is useful for\nmitigating container breakout vulnerabilities even allowing users to run their\ncontainers as root without actually having root privileges on the host.\nThis field is alpha-level and is only honored by servers that enable the UserNamespacesSupport feature.\n+k8s:conversion-gen=false\n+optional"
        },
        "schedulingGates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PodSchedulingGate"
          },
          "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod.\nIf schedulingGates is not empty, the pod will stay in the SchedulingGated state and the\nscheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.\n\n+patchMergeKey=name\n+patchStrategy=merge\n+listType=map\n+listMapKey=name\n+optional"
        },
        "resourceClaims": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PodResourceClaim"
          },
          "description": "ResourceClaims defines which ResourceClaims must be allocated\nand reserved before the Pod is allowed to start. The resources\nwill be made available to those containers which consume them\nby name.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable.\n\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional"
        }
      },
      "description": "PodSpec is a description of a pod.",
      "required": [
        "volumes",
        "initContainers",
        "containers",
        "ephemeralContainers",
        "restartPolicy",
        "terminationGracePeriodSeconds",
        "activeDeadlineSeconds",
        "dnsPolicy",
        "nodeSelector",
        "serviceAccountName",
        "serviceAccount",
        "automountServiceAccountToken",
        "nodeName",
        "hostNetwork",
        "hostPID",
        "hostIPC",
        "shareProcessNamespace",
        "securityContext",
        "imagePullSecrets",
        "hostname",
        "subdomain",
        "affinity",
        "schedulerName",
        "tolerations",
        "hostAliases",
        "priorityClassName",
        "priority",
        "dnsConfig",
        "readinessGates",
        "runtimeClassName",
        "enableServiceLinks",
        "preemptionPolicy",
        "overhead",
        "topologySpreadConstraints",
        "setHostnameAsFQDN",
        "os",
        "hostUsers",
        "schedulingGates",
        "resourceClaims"
      ]
    },
    "v1PodStatus": {
      "type": "object",
      "properties": {
        "phase": {
          "type": "string",
          "description": "Pending: The pod has been accepted by the Kubernetes system, but one or more of the\ncontainer images has not been created. This includes time before being scheduled as\nwell as time spent downloading images over the network, which could take a while.\nRunning: The pod has been bound to a node, and all of the containers have been created.\nAt least one container is still running, or is in the process of starting or restarting.\nSucceeded: All containers in the pod have terminated in success, and will not be restarted.\nFailed: All containers in the pod have terminated, and at least one container has\nterminated in failure. The container either exited with non-zero status or was terminated\nby the system.\nUnknown: For some reason the state of the pod could not be obtained, typically due to an\nerror in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\n+optional",
          "title": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle.\nThe conditions array, the reason and message fields, and the individual container status\narrays contain more detail about the pod's status.\nThere are five possible phase values:"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/corev1PodCondition"
          },
          "title": "Current service state of pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\n+optional\n+patchMergeKey=type\n+patchStrategy=merge\n+listType=map\n+listMapKey=type\n健康检查"
        },
        "message": {
          "type": "string",
          "title": "A human readable message indicating details about why the pod is in this condition.\n+optional"
        },
        "reason": {
          "type": "string",
          "title": "A brief CamelCase message indicating details about why the pod is in this state.\ne.g. 'Evicted'\n+optional"
        },
        "nominatedNodeName": {
          "type": "string",
          "title": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be\nscheduled right away as preemption victims receive their graceful termination periods.\nThis field does not guarantee that the pod will be scheduled on this node. Scheduler may decide\nto place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to\ngive the resources on this node to a higher priority pod that is created after preemption.\nAs a result, this field may be different than PodSpec.nodeName when the pod is\nscheduled.\n+optional"
        },
        "hostIP": {
          "type": "string",
          "title": "hostIP holds the IP address of the host to which the pod is assigned. Empty if the pod has not started yet.\nA pod can be assigned to a node that has a problem in kubelet which in turns mean that HostIP will\nnot be updated even if there is a node is assigned to pod\n+optional\n主机IP"
        },
        "hostIPs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1HostIP"
          },
          "title": "hostIPs holds the IP addresses allocated to the host. If this field is specified, the first entry must\nmatch the hostIP field. This list is empty if the pod has not started yet.\nA pod can be assigned to a node that has a problem in kubelet which in turns means that HostIPs will\nnot be updated even if there is a node is assigned to this pod.\n+optional\n+patchStrategy=merge\n+patchMergeKey=ip\n+listType=atomic"
        },
        "podIP": {
          "type": "string",
          "title": "podIP address allocated to the pod. Routable at least within the cluster.\nEmpty if not yet allocated.\n+optional\n实例IP"
        },
        "podIPs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PodIP"
          },
          "title": "podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must\nmatch the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list\nis empty if no IPs have been allocated yet.\n+optional\n+patchStrategy=merge\n+patchMergeKey=ip\n+listType=map\n+listMapKey=ip"
        },
        "startTime": {
          "type": "string",
          "title": "RFC 3339 date and time at which the object was acknowledged by the Kubelet.\nThis is before the Kubelet pulled the container image(s) for the pod.\n+optional\n optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 7;"
        },
        "initContainerStatuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/corev1ContainerStatus"
          },
          "title": "The list has one entry per init container in the manifest. The most recent successful\ninit container will have ready = true, the most recently started container will have\nstartTime set.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\n+listType=atomic"
        },
        "containerStatuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/corev1ContainerStatus"
          },
          "title": "The list has one entry per container in the manifest.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status\n+optional\n+listType=atomic"
        },
        "qosClass": {
          "type": "string",
          "title": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements\nSee PodQOSClass type for available QOS classes\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/#quality-of-service-classes\n+optional"
        },
        "ephemeralContainerStatuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/corev1ContainerStatus"
          },
          "title": "Status for any ephemeral containers that have run in this pod.\n+optional\n+listType=atomic"
        },
        "resize": {
          "type": "string",
          "title": "Status of resources resize desired for pod's containers.\nIt is empty if no resources resize is pending.\nAny changes to container resources will automatically set this to \"Proposed\"\n+featureGate=InPlacePodVerticalScaling\n+optional"
        },
        "resourceClaimStatuses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PodResourceClaimStatus"
          },
          "title": "Status of resource claims.\n+patchMergeKey=name\n+patchStrategy=merge,retainKeys\n+listType=map\n+listMapKey=name\n+featureGate=DynamicResourceAllocation\n+optional"
        }
      },
      "description": "PodStatus represents information about the status of a pod. Status may trail the actual\nstate of a system, especially if the node that hosts the pod cannot contact the control\nplane.",
      "required": [
        "phase",
        "conditions",
        "message",
        "reason",
        "nominatedNodeName",
        "hostIP",
        "hostIPs",
        "podIP",
        "podIPs",
        "startTime",
        "initContainerStatuses",
        "containerStatuses",
        "qosClass",
        "ephemeralContainerStatuses",
        "resize",
        "resourceClaimStatuses"
      ]
    },
    "v1PortworxVolumeSource": {
      "type": "object",
      "properties": {
        "volumeID": {
          "type": "string",
          "title": "volumeID uniquely identifies a Portworx volume"
        },
        "fsType": {
          "type": "string",
          "description": "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified."
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional"
        }
      },
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "required": [
        "volumeID",
        "fsType",
        "readOnly"
      ]
    },
    "v1PreferredSchedulingTerm": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "integer",
          "format": "int32",
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
        },
        "preference": {
          "$ref": "#/definitions/v1NodeSelectorTerm",
          "description": "A node selector term, associated with the corresponding weight."
        }
      },
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0\n(i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "required": [
        "weight",
        "preference"
      ]
    },
    "v1Probe": {
      "type": "object",
      "properties": {
        "handler": {
          "$ref": "#/definitions/v1ProbeHandler",
          "title": "The action taken to determine the health of a container"
        },
        "initialDelaySeconds": {
          "type": "integer",
          "format": "int32",
          "title": "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "timeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "title": "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\n+optional"
        },
        "periodSeconds": {
          "type": "integer",
          "format": "int32",
          "title": "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.\n+optional"
        },
        "successThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.\n+optional"
        },
        "failureThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.\n+optional"
        },
        "terminationGracePeriodSeconds": {
          "type": "string",
          "format": "int64",
          "title": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.\n+optional"
        }
      },
      "description": "Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.",
      "required": [
        "handler",
        "initialDelaySeconds",
        "timeoutSeconds",
        "periodSeconds",
        "successThreshold",
        "failureThreshold",
        "terminationGracePeriodSeconds"
      ]
    },
    "v1ProbeHandler": {
      "type": "object",
      "properties": {
        "exec": {
          "$ref": "#/definitions/v1ExecAction",
          "title": "Exec specifies the action to take.\n+optional"
        },
        "httpGet": {
          "$ref": "#/definitions/v1HTTPGetAction",
          "title": "HTTPGet specifies the http request to perform.\n+optional"
        },
        "tcpSocket": {
          "$ref": "#/definitions/v1TCPSocketAction",
          "title": "TCPSocket specifies an action involving a TCP port.\n+optional"
        },
        "grpc": {
          "$ref": "#/definitions/v1GRPCAction",
          "title": "GRPC specifies an action involving a GRPC port.\n+optional"
        }
      },
      "description": "ProbeHandler defines a specific action that should be taken in a probe.\nOne and only one of the fields must be specified.",
      "required": [
        "exec",
        "httpGet",
        "tcpSocket",
        "grpc"
      ]
    },
    "v1ProjectedVolumeSource": {
      "type": "object",
      "properties": {
        "sources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1VolumeProjection"
          },
          "title": "sources is the list of volume projections\n+optional\n+listType=atomic"
        },
        "defaultMode": {
          "type": "integer",
          "format": "int32",
          "title": "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
        }
      },
      "title": "Represents a projected volume source",
      "required": [
        "sources",
        "defaultMode"
      ]
    },
    "v1QuobyteVolumeSource": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string",
          "title": "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes"
        },
        "volume": {
          "type": "string",
          "description": "volume is a string that references an already created Quobyte volume by name."
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.\n+optional"
        },
        "user": {
          "type": "string",
          "title": "user to map volume access to\nDefaults to serivceaccount user\n+optional"
        },
        "group": {
          "type": "string",
          "title": "group to map volume access to\nDefault is no group\n+optional"
        },
        "tenant": {
          "type": "string",
          "title": "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin\n+optional"
        }
      },
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod.\nQuobyte volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "registry",
        "volume",
        "readOnly",
        "user",
        "group",
        "tenant"
      ]
    },
    "v1RBDVolumeSource": {
      "type": "object",
      "properties": {
        "monitors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+listType=atomic"
        },
        "image": {
          "type": "string",
          "title": "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd\nTODO: how do we prevent errors in the filesystem from compromising the machine\n+optional"
        },
        "pool": {
          "type": "string",
          "title": "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
        },
        "user": {
          "type": "string",
          "title": "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
        },
        "keyring": {
          "type": "string",
          "title": "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "title": "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it\n+optional"
        }
      },
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod.\nRBD volumes support ownership management and SELinux relabeling.",
      "required": [
        "monitors",
        "image",
        "fsType",
        "pool",
        "user",
        "keyring",
        "secretRef",
        "readOnly"
      ]
    },
    "v1ResourceClaim": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container."
        }
      },
      "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
      "required": [
        "name"
      ]
    },
    "v1ResourceFieldSelector": {
      "type": "object",
      "properties": {
        "containerName": {
          "type": "string",
          "title": "Container name: required for volumes, optional for env vars\n+optional"
        },
        "resource": {
          "type": "string",
          "title": "Required: resource to select"
        },
        "divisor": {
          "$ref": "#/definitions/resourceQuantity",
          "title": "Specifies the output format of the exposed resources, defaults to \"1\"\n+optional"
        }
      },
      "title": "ResourceFieldSelector represents container resources (cpu, memory) and their output format\n+structType=atomic",
      "required": [
        "containerName",
        "resource",
        "divisor"
      ]
    },
    "v1SELinuxOptions": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "title": "User is a SELinux user label that applies to the container.\n+optional"
        },
        "role": {
          "type": "string",
          "title": "Role is a SELinux role label that applies to the container.\n+optional"
        },
        "type": {
          "type": "string",
          "title": "Type is a SELinux type label that applies to the container.\n+optional"
        },
        "level": {
          "type": "string",
          "title": "Level is SELinux level label that applies to the container.\n+optional"
        }
      },
      "title": "SELinuxOptions are the labels to be applied to the container",
      "required": [
        "user",
        "role",
        "type",
        "level"
      ]
    },
    "v1ScaleIOVolumeSource": {
      "type": "object",
      "properties": {
        "gateway": {
          "type": "string",
          "description": "gateway is the host address of the ScaleIO API Gateway."
        },
        "system": {
          "type": "string",
          "description": "system is the name of the storage system as configured in ScaleIO."
        },
        "secretRef": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "description": "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "type": "boolean",
          "title": "sslEnabled Flag enable/disable SSL communication with Gateway, default false\n+optional"
        },
        "protectionDomain": {
          "type": "string",
          "title": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.\n+optional"
        },
        "storagePool": {
          "type": "string",
          "title": "storagePool is the ScaleIO Storage Pool associated with the protection domain.\n+optional"
        },
        "storageMode": {
          "type": "string",
          "title": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.\n+optional"
        },
        "volumeName": {
          "type": "string",
          "description": "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source."
        },
        "fsType": {
          "type": "string",
          "title": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional"
        }
      },
      "title": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "required": [
        "gateway",
        "system",
        "secretRef",
        "sslEnabled",
        "protectionDomain",
        "storagePool",
        "storageMode",
        "volumeName",
        "fsType",
        "readOnly"
      ]
    },
    "v1SeccompProfile": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Localhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.\n+unionDiscriminator",
          "title": "type indicates which kind of seccomp profile will be applied.\nValid options are:"
        },
        "localhostProfile": {
          "type": "string",
          "title": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.\n+optional"
        }
      },
      "title": "SeccompProfile defines a pod/container's seccomp profile settings.\nOnly one profile source may be set.\n+union",
      "required": [
        "type",
        "localhostProfile"
      ]
    },
    "v1SecretEnvSource": {
      "type": "object",
      "properties": {
        "localObjectReference": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "description": "The Secret to select from."
        },
        "optional": {
          "type": "boolean",
          "title": "Specify whether the Secret must be defined\n+optional"
        }
      },
      "description": "SecretEnvSource selects a Secret to populate the environment\nvariables with.\n\nThe contents of the target Secret's Data field will represent the\nkey-value pairs as environment variables.",
      "required": [
        "localObjectReference",
        "optional"
      ]
    },
    "v1SecretKeySelector": {
      "type": "object",
      "properties": {
        "localObjectReference": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "description": "The name of the secret in the pod's namespace to select from."
        },
        "key": {
          "type": "string",
          "description": "The key of the secret to select from.  Must be a valid secret key."
        },
        "optional": {
          "type": "boolean",
          "title": "Specify whether the Secret or its key must be defined\n+optional"
        }
      },
      "title": "SecretKeySelector selects a key of a Secret.\n+structType=atomic",
      "required": [
        "localObjectReference",
        "key",
        "optional"
      ]
    },
    "v1SecretProjection": {
      "type": "object",
      "properties": {
        "localObjectReference": {
          "$ref": "#/definitions/v1LocalObjectReference"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyToPath"
          },
          "title": "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic"
        },
        "optional": {
          "type": "boolean",
          "title": "optional field specify whether the Secret or its key must be defined\n+optional"
        }
      },
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a\nprojected volume as files using the keys in the Data field as the file names.\nNote that this is identical to a secret volume source without the default\nmode.",
      "required": [
        "localObjectReference",
        "items",
        "optional"
      ]
    },
    "v1SecretVolumeSource": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string",
          "title": "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyToPath"
          },
          "title": "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional\n+listType=atomic"
        },
        "defaultMode": {
          "type": "integer",
          "format": "int32",
          "title": "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
        },
        "optional": {
          "type": "boolean",
          "title": "optional field specify whether the Secret or its keys must be defined\n+optional"
        }
      },
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume\nas files using the keys in the Data field as the file names.\nSecret volumes support ownership management and SELinux relabeling.",
      "required": [
        "secretName",
        "items",
        "defaultMode",
        "optional"
      ]
    },
    "v1SecurityContext": {
      "type": "object",
      "properties": {
        "capabilities": {
          "$ref": "#/definitions/v1Capabilities",
          "title": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "privileged": {
          "type": "boolean",
          "title": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/v1SELinuxOptions",
          "title": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "windowsOptions": {
          "$ref": "#/definitions/v1WindowsSecurityContextOptions",
          "title": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.\n+optional"
        },
        "runAsUser": {
          "type": "string",
          "format": "int64",
          "title": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "runAsGroup": {
          "type": "string",
          "format": "int64",
          "title": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "runAsNonRoot": {
          "type": "boolean",
          "title": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional"
        },
        "readOnlyRootFilesystem": {
          "type": "boolean",
          "title": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "allowPrivilegeEscalation": {
          "type": "boolean",
          "title": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "procMount": {
          "type": "string",
          "title": "procMount denotes the type of proc mount to use for the containers.\nThe default is DefaultProcMount which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "seccompProfile": {
          "$ref": "#/definitions/v1SeccompProfile",
          "title": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod \u0026 container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        },
        "appArmorProfile": {
          "$ref": "#/definitions/v1AppArmorProfile",
          "title": "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.\n+optional"
        }
      },
      "description": "SecurityContext holds security configuration that will be applied to a container.\nSome fields are present in both SecurityContext and PodSecurityContext.  When both\nare set, the values in SecurityContext take precedence.",
      "required": [
        "capabilities",
        "privileged",
        "seLinuxOptions",
        "windowsOptions",
        "runAsUser",
        "runAsGroup",
        "runAsNonRoot",
        "readOnlyRootFilesystem",
        "allowPrivilegeEscalation",
        "procMount",
        "seccompProfile",
        "appArmorProfile"
      ]
    },
    "v1ServiceAccountTokenProjection": {
      "type": "object",
      "properties": {
        "audience": {
          "type": "string",
          "title": "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.\n+optional"
        },
        "expirationSeconds": {
          "type": "string",
          "format": "int64",
          "title": "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.\n+optional"
        },
        "path": {
          "type": "string",
          "description": "path is the path relative to the mount point of the file to project the\ntoken into."
        }
      },
      "description": "ServiceAccountTokenProjection represents a projected service account token\nvolume. This projection can be used to insert a service account token into\nthe pods runtime filesystem for use against APIs (Kubernetes API Server or\notherwise).",
      "required": [
        "audience",
        "expirationSeconds",
        "path"
      ]
    },
    "v1SleepAction": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64",
          "description": "Seconds is the number of seconds to sleep."
        }
      },
      "description": "SleepAction describes a \"sleep\" action.",
      "required": [
        "seconds"
      ]
    },
    "v1StorageOSVolumeSource": {
      "type": "object",
      "properties": {
        "volumeName": {
          "type": "string",
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace."
        },
        "volumeNamespace": {
          "type": "string",
          "title": "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.\n+optional"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional"
        },
        "readOnly": {
          "type": "boolean",
          "title": "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\n+optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1LocalObjectReference",
          "title": "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.\n+optional"
        }
      },
      "description": "Represents a StorageOS persistent volume resource.",
      "required": [
        "volumeName",
        "volumeNamespace",
        "fsType",
        "readOnly",
        "secretRef"
      ]
    },
    "v1Sysctl": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of a property to set"
        },
        "value": {
          "type": "string",
          "title": "Value of a property to set"
        }
      },
      "title": "Sysctl defines a kernel parameter to be set",
      "required": [
        "name",
        "value"
      ]
    },
    "v1TCPSocketAction": {
      "type": "object",
      "properties": {
        "port": {
          "$ref": "#/definitions/intstrIntOrString",
          "description": "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME."
        },
        "host": {
          "type": "string",
          "title": "Optional: Host name to connect to, defaults to the pod IP.\n+optional"
        }
      },
      "title": "TCPSocketAction describes an action based on opening a socket",
      "required": [
        "port",
        "host"
      ]
    },
    "v1Taint": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Required. The taint key to be applied to a node."
        },
        "value": {
          "type": "string",
          "title": "The taint value corresponding to the taint key.\n+optional"
        },
        "effect": {
          "type": "string",
          "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute."
        },
        "timeAdded": {
          "$ref": "#/definitions/v1Time",
          "title": "TimeAdded represents the time at which the taint was added.\nIt is only written for NoExecute taints.\n+optional"
        }
      },
      "description": "The node this Taint is attached to has the \"effect\" on\nany pod that does not tolerate the Taint.",
      "required": [
        "key",
        "value",
        "effect",
        "timeAdded"
      ]
    },
    "v1Time": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64",
          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
        },
        "nanos": {
          "type": "integer",
          "format": "int32",
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context."
        }
      },
      "description": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false",
      "required": [
        "seconds",
        "nanos"
      ]
    },
    "v1Toleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.\n+optional"
        },
        "operator": {
          "type": "string",
          "title": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.\n+optional"
        },
        "value": {
          "type": "string",
          "title": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.\n+optional"
        },
        "effect": {
          "type": "string",
          "title": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n+optional"
        },
        "tolerationSeconds": {
          "type": "string",
          "format": "int64",
          "title": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.\n+optional"
        }
      },
      "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "required": [
        "key",
        "operator",
        "value",
        "effect",
        "tolerationSeconds"
      ]
    },
    "v1TopologySpreadConstraint": {
      "type": "object",
      "properties": {
        "maxSkew": {
          "type": "integer",
          "format": "int32",
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |   P   |\n+-------+-------+-------+\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed."
        },
        "topologyKey": {
          "type": "string",
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field."
        },
        "whenUnsatisfiable": {
          "type": "string",
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n| P P P |   P   |   P   |\n+-------+-------+-------+\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field."
        },
        "labelSelector": {
          "$ref": "#/definitions/v1LabelSelector",
          "title": "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.\n+optional"
        },
        "minDomains": {
          "type": "integer",
          "format": "int32",
          "description": "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n+-------+-------+-------+\n| zone1 | zone2 | zone3 |\n+-------+-------+-------+\n|  P P  |  P P  |  P P  |\n+-------+-------+-------+\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.\n+optional"
        },
        "nodeAffinityPolicy": {
          "type": "string",
          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional"
        },
        "nodeTaintsPolicy": {
          "type": "string",
          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.\nThis is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.\n+optional"
        },
        "matchLabelKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).\n+listType=atomic\n+optional"
        }
      },
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable",
        "labelSelector",
        "minDomains",
        "nodeAffinityPolicy",
        "nodeTaintsPolicy",
        "matchLabelKeys"
      ]
    },
    "v1TypedLocalObjectReference": {
      "type": "object",
      "properties": {
        "apiGroup": {
          "type": "string",
          "title": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional"
        },
        "kind": {
          "type": "string",
          "title": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "title": "Name is the name of resource being referenced"
        }
      },
      "title": "TypedLocalObjectReference contains enough information to let you locate the\ntyped referenced object inside the same namespace.\n+structType=atomic",
      "required": [
        "apiGroup",
        "kind",
        "name"
      ]
    },
    "v1TypedObjectReference": {
      "type": "object",
      "properties": {
        "apiGroup": {
          "type": "string",
          "title": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.\n+optional"
        },
        "kind": {
          "type": "string",
          "title": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "title": "Name is the name of resource being referenced"
        },
        "namespace": {
          "type": "string",
          "title": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.\n+featureGate=CrossNamespaceVolumeDataSource\n+optional"
        }
      },
      "required": [
        "apiGroup",
        "kind",
        "name",
        "namespace"
      ]
    },
    "v1Volume": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names"
        },
        "volumeSource": {
          "$ref": "#/definitions/v1VolumeSource",
          "description": "volumeSource represents the location and type of the mounted volume.\nIf not specified, the Volume is implied to be an EmptyDir.\nThis implied behavior is deprecated and will be removed in a future version."
        }
      },
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "required": [
        "name",
        "volumeSource"
      ]
    },
    "v1VolumeDevice": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name must match the name of a persistentVolumeClaim in the pod"
        },
        "devicePath": {
          "type": "string",
          "description": "devicePath is the path inside of the container that the device will be mapped to."
        }
      },
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "required": [
        "name",
        "devicePath"
      ]
    },
    "v1VolumeMount": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "This must match the Name of a Volume."
        },
        "readOnly": {
          "type": "boolean",
          "title": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional"
        },
        "recursiveReadOnly": {
          "type": "string",
          "description": "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.\n\n+featureGate=RecursiveReadOnlyMounts\n+optional"
        },
        "mountPath": {
          "type": "string",
          "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'."
        },
        "subPath": {
          "type": "string",
          "title": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional"
        },
        "mountPropagation": {
          "type": "string",
          "title": "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).\n+optional"
        },
        "subPathExpr": {
          "type": "string",
          "title": "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.\n+optional"
        }
      },
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "required": [
        "name",
        "readOnly",
        "recursiveReadOnly",
        "mountPath",
        "subPath",
        "mountPropagation",
        "subPathExpr"
      ]
    },
    "v1VolumeMountStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name corresponds to the name of the original VolumeMount."
        },
        "mountPath": {
          "type": "string",
          "description": "MountPath corresponds to the original VolumeMount."
        },
        "readOnly": {
          "type": "boolean",
          "title": "ReadOnly corresponds to the original VolumeMount.\n+optional"
        },
        "recursiveReadOnly": {
          "type": "string",
          "title": "RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts).\nAn IfPossible value in the original VolumeMount must be translated to Disabled or Enabled,\ndepending on the mount result.\n+featureGate=RecursiveReadOnlyMounts\n+optional"
        }
      },
      "description": "VolumeMountStatus shows status of volume mounts.",
      "required": [
        "name",
        "mountPath",
        "readOnly",
        "recursiveReadOnly"
      ]
    },
    "v1VolumeProjection": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/v1SecretProjection",
          "title": "secret information about the secret data to project\n+optional"
        },
        "downwardAPI": {
          "$ref": "#/definitions/v1DownwardAPIProjection",
          "title": "downwardAPI information about the downwardAPI data to project\n+optional"
        },
        "configMap": {
          "$ref": "#/definitions/v1ConfigMapProjection",
          "title": "configMap information about the configMap data to project\n+optional"
        },
        "serviceAccountToken": {
          "$ref": "#/definitions/v1ServiceAccountTokenProjection",
          "title": "serviceAccountToken is information about the serviceAccountToken data to project\n+optional"
        },
        "clusterTrustBundle": {
          "$ref": "#/definitions/v1ClusterTrustBundleProjection",
          "description": "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.\n\n+featureGate=ClusterTrustBundleProjection\n+optional"
        }
      },
      "title": "Projection that may be projected along with other supported volume types",
      "required": [
        "secret",
        "downwardAPI",
        "configMap",
        "serviceAccountToken",
        "clusterTrustBundle"
      ]
    },
    "v1VolumeResourceRequirements": {
      "type": "object",
      "properties": {
        "limits": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resourceQuantity"
          },
          "title": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        },
        "requests": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resourceQuantity"
          },
          "title": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional"
        }
      },
      "description": "VolumeResourceRequirements describes the storage resource requirements for a volume.",
      "required": [
        "limits",
        "requests"
      ]
    },
    "v1VolumeSource": {
      "type": "object",
      "properties": {
        "hostPath": {
          "$ref": "#/definitions/v1HostPathVolumeSource",
          "title": "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n---\nTODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not\nmount host directories as read/write.\n+optional"
        },
        "emptyDir": {
          "$ref": "#/definitions/v1EmptyDirVolumeSource",
          "title": "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir\n+optional"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/v1GCEPersistentDiskVolumeSource",
          "title": "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk\n+optional"
        },
        "awsElasticBlockStore": {
          "$ref": "#/definitions/v1AWSElasticBlockStoreVolumeSource",
          "title": "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n+optional"
        },
        "gitRepo": {
          "$ref": "#/definitions/v1GitRepoVolumeSource",
          "title": "gitRepo represents a git repository at a particular revision.\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.\n+optional"
        },
        "secret": {
          "$ref": "#/definitions/v1SecretVolumeSource",
          "title": "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional"
        },
        "nfs": {
          "$ref": "#/definitions/v1NFSVolumeSource",
          "title": "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs\n+optional"
        },
        "iscsi": {
          "$ref": "#/definitions/v1ISCSIVolumeSource",
          "title": "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md\n+optional"
        },
        "glusterfs": {
          "$ref": "#/definitions/v1GlusterfsVolumeSource",
          "title": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md\n+optional"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/v1PersistentVolumeClaimVolumeSource",
          "title": "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n+optional"
        },
        "rbd": {
          "$ref": "#/definitions/v1RBDVolumeSource",
          "title": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nMore info: https://examples.k8s.io/volumes/rbd/README.md\n+optional"
        },
        "flexVolume": {
          "$ref": "#/definitions/v1FlexVolumeSource",
          "title": "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\n+optional"
        },
        "cinder": {
          "$ref": "#/definitions/v1CinderVolumeSource",
          "title": "cinder represents a cinder volume attached and mounted on kubelets host machine.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md\n+optional"
        },
        "cephfs": {
          "$ref": "#/definitions/v1CephFSVolumeSource",
          "title": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime\n+optional"
        },
        "flocker": {
          "$ref": "#/definitions/v1FlockerVolumeSource",
          "title": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running\n+optional"
        },
        "downwardAPI": {
          "$ref": "#/definitions/v1DownwardAPIVolumeSource",
          "title": "downwardAPI represents downward API about the pod that should populate this volume\n+optional"
        },
        "fc": {
          "$ref": "#/definitions/v1FCVolumeSource",
          "title": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.\n+optional"
        },
        "azureFile": {
          "$ref": "#/definitions/v1AzureFileVolumeSource",
          "title": "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\n+optional"
        },
        "configMap": {
          "$ref": "#/definitions/v1ConfigMapVolumeSource",
          "title": "configMap represents a configMap that should populate this volume\n+optional"
        },
        "vsphereVolume": {
          "$ref": "#/definitions/v1VsphereVirtualDiskVolumeSource",
          "title": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine\n+optional"
        },
        "quobyte": {
          "$ref": "#/definitions/v1QuobyteVolumeSource",
          "title": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime\n+optional"
        },
        "azureDisk": {
          "$ref": "#/definitions/v1AzureDiskVolumeSource",
          "title": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\n+optional"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/v1PhotonPersistentDiskVolumeSource",
          "title": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "projected": {
          "$ref": "#/definitions/v1ProjectedVolumeSource",
          "title": "projected items for all in one resources secrets, configmaps, and downward API"
        },
        "portworxVolume": {
          "$ref": "#/definitions/v1PortworxVolumeSource",
          "title": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine\n+optional"
        },
        "scaleIO": {
          "$ref": "#/definitions/v1ScaleIOVolumeSource",
          "title": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\n+optional"
        },
        "storageos": {
          "$ref": "#/definitions/v1StorageOSVolumeSource",
          "title": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\n+optional"
        },
        "csi": {
          "$ref": "#/definitions/v1CSIVolumeSource",
          "title": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).\n+optional"
        },
        "ephemeral": {
          "$ref": "#/definitions/v1EphemeralVolumeSource",
          "description": "ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.\n\n+optional"
        }
      },
      "description": "Represents the source of a volume to mount.\nOnly one of its members may be specified.",
      "required": [
        "hostPath",
        "emptyDir",
        "gcePersistentDisk",
        "awsElasticBlockStore",
        "gitRepo",
        "secret",
        "nfs",
        "iscsi",
        "glusterfs",
        "persistentVolumeClaim",
        "rbd",
        "flexVolume",
        "cinder",
        "cephfs",
        "flocker",
        "downwardAPI",
        "fc",
        "azureFile",
        "configMap",
        "vsphereVolume",
        "quobyte",
        "azureDisk",
        "photonPersistentDisk",
        "projected",
        "portworxVolume",
        "scaleIO",
        "storageos",
        "csi",
        "ephemeral"
      ]
    },
    "v1VsphereVirtualDiskVolumeSource": {
      "type": "object",
      "properties": {
        "volumePath": {
          "type": "string",
          "title": "volumePath is the path that identifies vSphere volume vmdk"
        },
        "fsType": {
          "type": "string",
          "title": "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\n+optional"
        },
        "storagePolicyName": {
          "type": "string",
          "title": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.\n+optional"
        },
        "storagePolicyID": {
          "type": "string",
          "title": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.\n+optional"
        }
      },
      "description": "Represents a vSphere volume resource.",
      "required": [
        "volumePath",
        "fsType",
        "storagePolicyName",
        "storagePolicyID"
      ]
    },
    "v1WeightedPodAffinityTerm": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "integer",
          "format": "int32",
          "description": "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100."
        },
        "podAffinityTerm": {
          "$ref": "#/definitions/v1PodAffinityTerm",
          "description": "Required. A pod affinity term, associated with the corresponding weight."
        }
      },
      "title": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "required": [
        "weight",
        "podAffinityTerm"
      ]
    },
    "v1WindowsSecurityContextOptions": {
      "type": "object",
      "properties": {
        "gmsaCredentialSpecName": {
          "type": "string",
          "title": "GMSACredentialSpecName is the name of the GMSA credential spec to use.\n+optional"
        },
        "gmsaCredentialSpec": {
          "type": "string",
          "title": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.\n+optional"
        },
        "runAsUserName": {
          "type": "string",
          "title": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\n+optional"
        },
        "hostProcess": {
          "type": "boolean",
          "title": "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.\n+optional"
        }
      },
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
      "required": [
        "gmsaCredentialSpecName",
        "gmsaCredentialSpec",
        "runAsUserName",
        "hostProcess"
      ]
    }
  }
}
