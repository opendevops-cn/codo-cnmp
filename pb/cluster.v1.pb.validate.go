// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/cluster.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ImportDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImportDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImportDetailMultiError, or
// nil if none found.
func (m *ImportDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubeConfig

	// no validation rules for Token

	// no validation rules for ApiServer

	// no validation rules for CaData

	// no validation rules for Context

	// no validation rules for Agent

	// no validation rules for AgentImage

	// no validation rules for AgentProxy

	if len(errors) > 0 {
		return ImportDetailMultiError(errors)
	}

	return nil
}

// ImportDetailMultiError is an error wrapping multiple validation errors
// returned by ImportDetail.ValidateAll() if the designated constraints aren't met.
type ImportDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportDetailMultiError) AllErrors() []error { return m }

// ImportDetailValidationError is the validation error returned by
// ImportDetail.Validate if the designated constraints aren't met.
type ImportDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDetailValidationError) ErrorName() string { return "ImportDetailValidationError" }

// Error satisfies the builtin error interface
func (e ImportDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDetailValidationError{}

// Validate checks the field values on ImportClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportClusterRequestMultiError, or nil if none found.
func (m *ImportClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := ImportClusterRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 1000 {
		err := ImportClusterRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ImportType_name[int32(m.GetImportType())]; !ok {
		err := ImportClusterRequestValidationError{
			field:  "ImportType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetImportDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportClusterRequestValidationError{
					field:  "ImportDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportClusterRequestValidationError{
					field:  "ImportDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImportDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportClusterRequestValidationError{
				field:  "ImportDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetIdip()) > 100 {
		err := ImportClusterRequestValidationError{
			field:  "Idip",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppId()) > 100 {
		err := ImportClusterRequestValidationError{
			field:  "AppId",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppSecret()) > 500 {
		err := ImportClusterRequestValidationError{
			field:  "AppSecret",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ConnectType_name[int32(m.GetConnectType())]; !ok {
		err := ImportClusterRequestValidationError{
			field:  "ConnectType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DstAgentId

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportClusterRequestValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportClusterRequestValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportClusterRequestValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportClusterRequestMultiError(errors)
	}

	return nil
}

// ImportClusterRequestMultiError is an error wrapping multiple validation
// errors returned by ImportClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportClusterRequestMultiError) AllErrors() []error { return m }

// ImportClusterRequestValidationError is the validation error returned by
// ImportClusterRequest.Validate if the designated constraints aren't met.
type ImportClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportClusterRequestValidationError) ErrorName() string {
	return "ImportClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportClusterRequestValidationError{}

// Validate checks the field values on ImportClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportClusterResponseMultiError, or nil if none found.
func (m *ImportClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ImportClusterResponseMultiError(errors)
	}

	return nil
}

// ImportClusterResponseMultiError is an error wrapping multiple validation
// errors returned by ImportClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportClusterResponseMultiError) AllErrors() []error { return m }

// ImportClusterResponseValidationError is the validation error returned by
// ImportClusterResponse.Validate if the designated constraints aren't met.
type ImportClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportClusterResponseValidationError) ErrorName() string {
	return "ImportClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportClusterResponseValidationError{}

// Validate checks the field values on ListClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClusterRequestMultiError, or nil if none found.
func (m *ListClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) > 100 {
		err := ListClusterRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if m.AuthFilter != nil {
		// no validation rules for AuthFilter
	}

	if len(errors) > 0 {
		return ListClusterRequestMultiError(errors)
	}

	return nil
}

// ListClusterRequestMultiError is an error wrapping multiple validation errors
// returned by ListClusterRequest.ValidateAll() if the designated constraints
// aren't met.
type ListClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClusterRequestMultiError) AllErrors() []error { return m }

// ListClusterRequestValidationError is the validation error returned by
// ListClusterRequest.Validate if the designated constraints aren't met.
type ListClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterRequestValidationError) ErrorName() string {
	return "ListClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterRequestValidationError{}

// Validate checks the field values on ListClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClusterResponseMultiError, or nil if none found.
func (m *ListClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClusterResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClusterResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClusterResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListClusterResponseMultiError(errors)
	}

	return nil
}

// ListClusterResponseMultiError is an error wrapping multiple validation
// errors returned by ListClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type ListClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClusterResponseMultiError) AllErrors() []error { return m }

// ListClusterResponseValidationError is the validation error returned by
// ListClusterResponse.Validate if the designated constraints aren't met.
type ListClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClusterResponseValidationError) ErrorName() string {
	return "ListClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClusterResponseValidationError{}

// Validate checks the field values on Link with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Link) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Link with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LinkMultiError, or nil if none found.
func (m *Link) ValidateAll() error {
	return m.validate(true)
}

func (m *Link) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := LinkValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUrl()); l < 1 || l > 1000 {
		err := LinkValidationError{
			field:  "Url",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LinkMultiError(errors)
	}

	return nil
}

// LinkMultiError is an error wrapping multiple validation errors returned by
// Link.ValidateAll() if the designated constraints aren't met.
type LinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkMultiError) AllErrors() []error { return m }

// LinkValidationError is the validation error returned by Link.Validate if the
// designated constraints aren't met.
type LinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkValidationError) ErrorName() string { return "LinkValidationError" }

// Error satisfies the builtin error interface
func (e LinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkValidationError{}

// Validate checks the field values on ClusterItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClusterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClusterItemMultiError, or
// nil if none found.
func (m *ClusterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetDescription()) > 1000 {
		err := ClusterItemValidationError{
			field:  "Description",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ClusterState_name[int32(m.GetClusterState())]; !ok {
		err := ClusterItemValidationError{
			field:  "ClusterState",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetHealthState()); l < 1 || l > 10 {
		err := ClusterItemValidationError{
			field:  "HealthState",
			reason: "value must contain between 1 and 10 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BuildDate

	// no validation rules for NodeCount

	// no validation rules for CpuUsage

	// no validation rules for MemoryUsage

	// no validation rules for Id

	if _, ok := ImportType_name[int32(m.GetImportType())]; !ok {
		err := ClusterItemValidationError{
			field:  "ImportType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServerVersion

	// no validation rules for CpuTotal

	// no validation rules for MemoryTotal

	// no validation rules for Uid

	// no validation rules for IsFollowed

	if utf8.RuneCountInString(m.GetIdip()) > 100 {
		err := ClusterItemValidationError{
			field:  "Idip",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppId()) > 100 {
		err := ClusterItemValidationError{
			field:  "AppId",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppSecret()) > 500 {
		err := ClusterItemValidationError{
			field:  "AppSecret",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ConnectType_name[int32(m.GetConnectType())]; !ok {
		err := ClusterItemValidationError{
			field:  "ConnectType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DstAgentId

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClusterItemValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClusterItemValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClusterItemValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetImportDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterItemValidationError{
					field:  "ImportDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterItemValidationError{
					field:  "ImportDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImportDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterItemValidationError{
				field:  "ImportDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterItemMultiError(errors)
	}

	return nil
}

// ClusterItemMultiError is an error wrapping multiple validation errors
// returned by ClusterItem.ValidateAll() if the designated constraints aren't met.
type ClusterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterItemMultiError) AllErrors() []error { return m }

// ClusterItemValidationError is the validation error returned by
// ClusterItem.Validate if the designated constraints aren't met.
type ClusterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterItemValidationError) ErrorName() string { return "ClusterItemValidationError" }

// Error satisfies the builtin error interface
func (e ClusterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterItemValidationError{}

// Validate checks the field values on DeleteClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClusterRequestMultiError, or nil if none found.
func (m *DeleteClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteClusterRequestMultiError(errors)
	}

	return nil
}

// DeleteClusterRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClusterRequestMultiError) AllErrors() []error { return m }

// DeleteClusterRequestValidationError is the validation error returned by
// DeleteClusterRequest.Validate if the designated constraints aren't met.
type DeleteClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterRequestValidationError) ErrorName() string {
	return "DeleteClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterRequestValidationError{}

// Validate checks the field values on DeleteClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClusterResponseMultiError, or nil if none found.
func (m *DeleteClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteClusterResponseMultiError(errors)
	}

	return nil
}

// DeleteClusterResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClusterResponseMultiError) AllErrors() []error { return m }

// DeleteClusterResponseValidationError is the validation error returned by
// DeleteClusterResponse.Validate if the designated constraints aren't met.
type DeleteClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterResponseValidationError) ErrorName() string {
	return "DeleteClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterResponseValidationError{}

// Validate checks the field values on ClusterOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterOverviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterOverviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterOverviewRequestMultiError, or nil if none found.
func (m *ClusterOverviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterOverviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ClusterOverviewRequestMultiError(errors)
	}

	return nil
}

// ClusterOverviewRequestMultiError is an error wrapping multiple validation
// errors returned by ClusterOverviewRequest.ValidateAll() if the designated
// constraints aren't met.
type ClusterOverviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterOverviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterOverviewRequestMultiError) AllErrors() []error { return m }

// ClusterOverviewRequestValidationError is the validation error returned by
// ClusterOverviewRequest.Validate if the designated constraints aren't met.
type ClusterOverviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterOverviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterOverviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterOverviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterOverviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterOverviewRequestValidationError) ErrorName() string {
	return "ClusterOverviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterOverviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterOverviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterOverviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterOverviewRequestValidationError{}

// Validate checks the field values on ClusterOverview with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClusterOverview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterOverview with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterOverviewMultiError, or nil if none found.
func (m *ClusterOverview) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterOverview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for RunningTotal

	// no validation rules for ErrorTotal

	// no validation rules for OfflineTotal

	if len(errors) > 0 {
		return ClusterOverviewMultiError(errors)
	}

	return nil
}

// ClusterOverviewMultiError is an error wrapping multiple validation errors
// returned by ClusterOverview.ValidateAll() if the designated constraints
// aren't met.
type ClusterOverviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterOverviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterOverviewMultiError) AllErrors() []error { return m }

// ClusterOverviewValidationError is the validation error returned by
// ClusterOverview.Validate if the designated constraints aren't met.
type ClusterOverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterOverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterOverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterOverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterOverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterOverviewValidationError) ErrorName() string { return "ClusterOverviewValidationError" }

// Error satisfies the builtin error interface
func (e ClusterOverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterOverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterOverviewValidationError{}

// Validate checks the field values on NodeOverview with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeOverview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeOverview with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeOverviewMultiError, or
// nil if none found.
func (m *NodeOverview) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeOverview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for RunningTotal

	// no validation rules for ErrorTotal

	if len(errors) > 0 {
		return NodeOverviewMultiError(errors)
	}

	return nil
}

// NodeOverviewMultiError is an error wrapping multiple validation errors
// returned by NodeOverview.ValidateAll() if the designated constraints aren't met.
type NodeOverviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeOverviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeOverviewMultiError) AllErrors() []error { return m }

// NodeOverviewValidationError is the validation error returned by
// NodeOverview.Validate if the designated constraints aren't met.
type NodeOverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeOverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeOverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeOverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeOverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeOverviewValidationError) ErrorName() string { return "NodeOverviewValidationError" }

// Error satisfies the builtin error interface
func (e NodeOverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeOverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeOverviewValidationError{}

// Validate checks the field values on CpuOverview with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CpuOverview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CpuOverview with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CpuOverviewMultiError, or
// nil if none found.
func (m *CpuOverview) ValidateAll() error {
	return m.validate(true)
}

func (m *CpuOverview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for UnallocatedTotal

	// no validation rules for AllocatedTotal

	if len(errors) > 0 {
		return CpuOverviewMultiError(errors)
	}

	return nil
}

// CpuOverviewMultiError is an error wrapping multiple validation errors
// returned by CpuOverview.ValidateAll() if the designated constraints aren't met.
type CpuOverviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CpuOverviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CpuOverviewMultiError) AllErrors() []error { return m }

// CpuOverviewValidationError is the validation error returned by
// CpuOverview.Validate if the designated constraints aren't met.
type CpuOverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CpuOverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CpuOverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CpuOverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CpuOverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CpuOverviewValidationError) ErrorName() string { return "CpuOverviewValidationError" }

// Error satisfies the builtin error interface
func (e CpuOverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCpuOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CpuOverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CpuOverviewValidationError{}

// Validate checks the field values on MemoryOverview with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemoryOverview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoryOverview with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemoryOverviewMultiError,
// or nil if none found.
func (m *MemoryOverview) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoryOverview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for UnallocatedTotal

	// no validation rules for AllocatedTotal

	if len(errors) > 0 {
		return MemoryOverviewMultiError(errors)
	}

	return nil
}

// MemoryOverviewMultiError is an error wrapping multiple validation errors
// returned by MemoryOverview.ValidateAll() if the designated constraints
// aren't met.
type MemoryOverviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryOverviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryOverviewMultiError) AllErrors() []error { return m }

// MemoryOverviewValidationError is the validation error returned by
// MemoryOverview.Validate if the designated constraints aren't met.
type MemoryOverviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryOverviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryOverviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryOverviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryOverviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryOverviewValidationError) ErrorName() string { return "MemoryOverviewValidationError" }

// Error satisfies the builtin error interface
func (e MemoryOverviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoryOverview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryOverviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryOverviewValidationError{}

// Validate checks the field values on OverView with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OverView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OverView with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OverViewMultiError, or nil
// if none found.
func (m *OverView) ValidateAll() error {
	return m.validate(true)
}

func (m *OverView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OverViewValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OverViewValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OverViewValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OverViewValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OverViewValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OverViewValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCpu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OverViewValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OverViewValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OverViewValidationError{
				field:  "Cpu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OverViewValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OverViewValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OverViewValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OverViewMultiError(errors)
	}

	return nil
}

// OverViewMultiError is an error wrapping multiple validation errors returned
// by OverView.ValidateAll() if the designated constraints aren't met.
type OverViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverViewMultiError) AllErrors() []error { return m }

// OverViewValidationError is the validation error returned by
// OverView.Validate if the designated constraints aren't met.
type OverViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverViewValidationError) ErrorName() string { return "OverViewValidationError" }

// Error satisfies the builtin error interface
func (e OverViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverViewValidationError{}

// Validate checks the field values on ErrorClusterItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ErrorClusterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorClusterItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorClusterItemMultiError, or nil if none found.
func (m *ErrorClusterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorClusterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ErrorClusterItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ErrorClusterItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorClusterItemValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ErrorClusterItemMultiError(errors)
	}

	return nil
}

// ErrorClusterItemMultiError is an error wrapping multiple validation errors
// returned by ErrorClusterItem.ValidateAll() if the designated constraints
// aren't met.
type ErrorClusterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorClusterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorClusterItemMultiError) AllErrors() []error { return m }

// ErrorClusterItemValidationError is the validation error returned by
// ErrorClusterItem.Validate if the designated constraints aren't met.
type ErrorClusterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorClusterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorClusterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorClusterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorClusterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorClusterItemValidationError) ErrorName() string { return "ErrorClusterItemValidationError" }

// Error satisfies the builtin error interface
func (e ErrorClusterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorClusterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorClusterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorClusterItemValidationError{}

// Validate checks the field values on FollowClusterItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FollowClusterItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FollowClusterItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FollowClusterItemMultiError, or nil if none found.
func (m *FollowClusterItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FollowClusterItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FollowClusterItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FollowClusterItemValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FollowClusterItemValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FollowClusterItemMultiError(errors)
	}

	return nil
}

// FollowClusterItemMultiError is an error wrapping multiple validation errors
// returned by FollowClusterItem.ValidateAll() if the designated constraints
// aren't met.
type FollowClusterItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FollowClusterItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FollowClusterItemMultiError) AllErrors() []error { return m }

// FollowClusterItemValidationError is the validation error returned by
// FollowClusterItem.Validate if the designated constraints aren't met.
type FollowClusterItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FollowClusterItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FollowClusterItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FollowClusterItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FollowClusterItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FollowClusterItemValidationError) ErrorName() string {
	return "FollowClusterItemValidationError"
}

// Error satisfies the builtin error interface
func (e FollowClusterItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFollowClusterItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FollowClusterItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FollowClusterItemValidationError{}

// Validate checks the field values on ClusterOverviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClusterOverviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterOverviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterOverviewResponseMultiError, or nil if none found.
func (m *ClusterOverviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterOverviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOverview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterOverviewResponseValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterOverviewResponseValidationError{
					field:  "Overview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterOverviewResponseValidationError{
				field:  "Overview",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFollow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterOverviewResponseValidationError{
					field:  "Follow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterOverviewResponseValidationError{
					field:  "Follow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFollow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterOverviewResponseValidationError{
				field:  "Follow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterOverviewResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterOverviewResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterOverviewResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterOverviewResponseMultiError(errors)
	}

	return nil
}

// ClusterOverviewResponseMultiError is an error wrapping multiple validation
// errors returned by ClusterOverviewResponse.ValidateAll() if the designated
// constraints aren't met.
type ClusterOverviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterOverviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterOverviewResponseMultiError) AllErrors() []error { return m }

// ClusterOverviewResponseValidationError is the validation error returned by
// ClusterOverviewResponse.Validate if the designated constraints aren't met.
type ClusterOverviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterOverviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterOverviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterOverviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterOverviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterOverviewResponseValidationError) ErrorName() string {
	return "ClusterOverviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterOverviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterOverviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterOverviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterOverviewResponseValidationError{}

// Validate checks the field values on UpdateClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClusterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClusterRequestMultiError, or nil if none found.
func (m *UpdateClusterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClusterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := UpdateClusterRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 1000 {
		err := UpdateClusterRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIdip()) > 100 {
		err := UpdateClusterRequestValidationError{
			field:  "Idip",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppId()) > 100 {
		err := UpdateClusterRequestValidationError{
			field:  "AppId",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppSecret()) > 500 {
		err := UpdateClusterRequestValidationError{
			field:  "AppSecret",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ConnectType_name[int32(m.GetConnectType())]; !ok {
		err := UpdateClusterRequestValidationError{
			field:  "ConnectType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DstAgentId

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateClusterRequestValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateClusterRequestValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateClusterRequestValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetImportDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateClusterRequestValidationError{
					field:  "ImportDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateClusterRequestValidationError{
					field:  "ImportDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImportDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClusterRequestValidationError{
				field:  "ImportDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateClusterRequestMultiError(errors)
	}

	return nil
}

// UpdateClusterRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateClusterRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateClusterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClusterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClusterRequestMultiError) AllErrors() []error { return m }

// UpdateClusterRequestValidationError is the validation error returned by
// UpdateClusterRequest.Validate if the designated constraints aren't met.
type UpdateClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterRequestValidationError) ErrorName() string {
	return "UpdateClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterRequestValidationError{}

// Validate checks the field values on UpdateClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClusterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClusterResponseMultiError, or nil if none found.
func (m *UpdateClusterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClusterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateClusterResponseMultiError(errors)
	}

	return nil
}

// UpdateClusterResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateClusterResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateClusterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClusterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClusterResponseMultiError) AllErrors() []error { return m }

// UpdateClusterResponseValidationError is the validation error returned by
// UpdateClusterResponse.Validate if the designated constraints aren't met.
type UpdateClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClusterResponseValidationError) ErrorName() string {
	return "UpdateClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClusterResponseValidationError{}

// Validate checks the field values on PingIdipRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PingIdipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingIdipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingIdipRequestMultiError, or nil if none found.
func (m *PingIdipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingIdipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetIdip()) > 100 {
		err := PingIdipRequestValidationError{
			field:  "Idip",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PingIdipRequestMultiError(errors)
	}

	return nil
}

// PingIdipRequestMultiError is an error wrapping multiple validation errors
// returned by PingIdipRequest.ValidateAll() if the designated constraints
// aren't met.
type PingIdipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingIdipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingIdipRequestMultiError) AllErrors() []error { return m }

// PingIdipRequestValidationError is the validation error returned by
// PingIdipRequest.Validate if the designated constraints aren't met.
type PingIdipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingIdipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingIdipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingIdipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingIdipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingIdipRequestValidationError) ErrorName() string { return "PingIdipRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingIdipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingIdipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingIdipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingIdipRequestValidationError{}

// Validate checks the field values on PingIdipResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PingIdipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingIdipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PingIdipResponseMultiError, or nil if none found.
func (m *PingIdipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingIdipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Connected

	if len(errors) > 0 {
		return PingIdipResponseMultiError(errors)
	}

	return nil
}

// PingIdipResponseMultiError is an error wrapping multiple validation errors
// returned by PingIdipResponse.ValidateAll() if the designated constraints
// aren't met.
type PingIdipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingIdipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingIdipResponseMultiError) AllErrors() []error { return m }

// PingIdipResponseValidationError is the validation error returned by
// PingIdipResponse.Validate if the designated constraints aren't met.
type PingIdipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingIdipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingIdipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingIdipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingIdipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingIdipResponseValidationError) ErrorName() string { return "PingIdipResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingIdipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingIdipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingIdipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingIdipResponseValidationError{}

// Validate checks the field values on GetClusterDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterDetailRequestMultiError, or nil if none found.
func (m *GetClusterDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetClusterDetailRequestMultiError(errors)
	}

	return nil
}

// GetClusterDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetClusterDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClusterDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterDetailRequestMultiError) AllErrors() []error { return m }

// GetClusterDetailRequestValidationError is the validation error returned by
// GetClusterDetailRequest.Validate if the designated constraints aren't met.
type GetClusterDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterDetailRequestValidationError) ErrorName() string {
	return "GetClusterDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterDetailRequestValidationError{}

// Validate checks the field values on GetClusterDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClusterDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClusterDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClusterDetailResponseMultiError, or nil if none found.
func (m *GetClusterDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClusterDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClusterDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClusterDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClusterDetailResponseMultiError(errors)
	}

	return nil
}

// GetClusterDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetClusterDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClusterDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClusterDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClusterDetailResponseMultiError) AllErrors() []error { return m }

// GetClusterDetailResponseValidationError is the validation error returned by
// GetClusterDetailResponse.Validate if the designated constraints aren't met.
type GetClusterDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterDetailResponseValidationError) ErrorName() string {
	return "GetClusterDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterDetailResponseValidationError{}

// Validate checks the field values on DownloadKubeConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadKubeConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadKubeConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadKubeConfigRequestMultiError, or nil if none found.
func (m *DownloadKubeConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadKubeConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DownloadKubeConfigRequestMultiError(errors)
	}

	return nil
}

// DownloadKubeConfigRequestMultiError is an error wrapping multiple validation
// errors returned by DownloadKubeConfigRequest.ValidateAll() if the
// designated constraints aren't met.
type DownloadKubeConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadKubeConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadKubeConfigRequestMultiError) AllErrors() []error { return m }

// DownloadKubeConfigRequestValidationError is the validation error returned by
// DownloadKubeConfigRequest.Validate if the designated constraints aren't met.
type DownloadKubeConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadKubeConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadKubeConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadKubeConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadKubeConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadKubeConfigRequestValidationError) ErrorName() string {
	return "DownloadKubeConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadKubeConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadKubeConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadKubeConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadKubeConfigRequestValidationError{}

// Validate checks the field values on DownloadKubeConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadKubeConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadKubeConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadKubeConfigResponseMultiError, or nil if none found.
func (m *DownloadKubeConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadKubeConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubeConfig

	if len(errors) > 0 {
		return DownloadKubeConfigResponseMultiError(errors)
	}

	return nil
}

// DownloadKubeConfigResponseMultiError is an error wrapping multiple
// validation errors returned by DownloadKubeConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type DownloadKubeConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadKubeConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadKubeConfigResponseMultiError) AllErrors() []error { return m }

// DownloadKubeConfigResponseValidationError is the validation error returned
// by DownloadKubeConfigResponse.Validate if the designated constraints aren't met.
type DownloadKubeConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadKubeConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadKubeConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadKubeConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadKubeConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadKubeConfigResponseValidationError) ErrorName() string {
	return "DownloadKubeConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadKubeConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadKubeConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadKubeConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadKubeConfigResponseValidationError{}
