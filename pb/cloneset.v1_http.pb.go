// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/cloneset.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationCloneSetListCloneSet = "/cloneset.CloneSet/ListCloneSet"
const OperationCloneSetCreateOrUpdateCloneSetByYaml = "/cloneset.CloneSet/CreateOrUpdateCloneSetByYaml"
const OperationCloneSetDeleteCloneSet = "/cloneset.CloneSet/DeleteCloneSet"
const OperationCloneSetRestartCloneSet = "/cloneset.CloneSet/RestartCloneSet"
const OperationCloneSetScaleCloneSet = "/cloneset.CloneSet/ScaleCloneSet"
const OperationCloneSetGetCloneSetDetail = "/cloneset.CloneSet/GetCloneSetDetail"
const OperationCloneSetRollbackCloneSet = "/cloneset.CloneSet/RollbackCloneSet"
const OperationCloneSetDeleteCloneSetPods = "/cloneset.CloneSet/DeleteCloneSetPods"
const OperationCloneSetUpdateScaleStrategy = "/cloneset.CloneSet/UpdateScaleStrategy"
const OperationCloneSetUpdateUpgradeStrategy = "/cloneset.CloneSet/UpdateUpgradeStrategy"
const OperationCloneSetListCloneSetControllerRevision = "/cloneset.CloneSet/ListCloneSetControllerRevision"

type CloneSetHTTPServer interface {
	// ListCloneSet查看-云原生管理-CloneSet-列表
	ListCloneSet(context.Context, *ListCloneSetRequest) (*ListCloneSetResponse, error)
	// CreateOrUpdateCloneSetByYaml管理-云原生管理-CloneSet-yaml创建更新
	CreateOrUpdateCloneSetByYaml(context.Context, *CreateOrUpdateCloneSetByYamlRequest) (*CreateOrUpdateCloneSetByYamlResponse, error)
	// DeleteCloneSet管理-云原生管理-CloneSet-删除
	DeleteCloneSet(context.Context, *DeleteCloneSetRequest) (*DeleteCloneSetResponse, error)
	// RestartCloneSet管理-云原生管理-CloneSet-重启
	RestartCloneSet(context.Context, *RestartCloneSetRequest) (*RestartCloneSetResponse, error)
	// ScaleCloneSet管理-云原生管理-CloneSet-伸缩
	ScaleCloneSet(context.Context, *ScaleCloneSetRequest) (*ScaleCloneSetResponse, error)
	// GetCloneSetDetail查看-云原生管理-CloneSet-详情
	GetCloneSetDetail(context.Context, *CloneSetDetailRequest) (*CloneSetDetailResponse, error)
	// RollbackCloneSet管理-云原生管理-CloneSet-回滚
	RollbackCloneSet(context.Context, *RollbackCloneSetRequest) (*RollbackCloneSetResponse, error)
	// DeleteCloneSetPods管理-云原生管理-CloneSet-删除pod
	DeleteCloneSetPods(context.Context, *DeleteCloneSetPodRequest) (*DeleteCloneSetPodResponse, error)
	// UpdateScaleStrategy管理-云原生管理-CloneSet-流式扩容
	UpdateScaleStrategy(context.Context, *UpdateScaleStrategyRequest) (*UpdateScaleStrategyResponse, error)
	// UpdateUpgradeStrategy管理-云原生管理-CloneSet-升级策略
	UpdateUpgradeStrategy(context.Context, *UpdateUpgradeStrategyRequest) (*UpdateUpgradeStrategyResponse, error)
	// ListCloneSetControllerRevision查看-云原生管理-CloneSet-历史版本
	ListCloneSetControllerRevision(context.Context, *ListCloneSetReversionRequest) (*ListCloneSetReversionResponse, error)
}

func NewCloneSetHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationCloneSetListCloneSet).Build(),
		selector.Server().Path(OperationCloneSetCreateOrUpdateCloneSetByYaml).Build(),
		selector.Server().Path(OperationCloneSetDeleteCloneSet).Build(),
		selector.Server().Path(OperationCloneSetRestartCloneSet).Build(),
		selector.Server().Path(OperationCloneSetScaleCloneSet).Build(),
		selector.Server().Path(OperationCloneSetGetCloneSetDetail).Build(),
		selector.Server().Path(OperationCloneSetRollbackCloneSet).Build(),
		selector.Server().Path(OperationCloneSetDeleteCloneSetPods).Build(),
		selector.Server().Path(OperationCloneSetUpdateScaleStrategy).Build(),
		selector.Server().Path(OperationCloneSetUpdateUpgradeStrategy).Build(),
		selector.Server().Path(OperationCloneSetListCloneSetControllerRevision).Build(),
	).Path(
		OperationCloneSetListCloneSet,
		OperationCloneSetCreateOrUpdateCloneSetByYaml,
		OperationCloneSetDeleteCloneSet,
		OperationCloneSetRestartCloneSet,
		OperationCloneSetScaleCloneSet,
		OperationCloneSetGetCloneSetDetail,
		OperationCloneSetRollbackCloneSet,
		OperationCloneSetDeleteCloneSetPods,
		OperationCloneSetUpdateScaleStrategy,
		OperationCloneSetUpdateUpgradeStrategy,
		OperationCloneSetListCloneSetControllerRevision,
	).Build()
}

func RegisterCloneSetHTTPServer(s *http.Server, srv CloneSetHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/cloneset/list", _CloneSet_ListCloneSet0_HTTP_Handler(srv))
	r.POST("/api/v1/cloneset/create_or_update_by_yaml", _CloneSet_CreateOrUpdateCloneSetByYaml0_HTTP_Handler(srv))
	r.POST("/api/v1/cloneset/delete", _CloneSet_DeleteCloneSet0_HTTP_Handler(srv))
	r.POST("/api/v1/cloneset/restart", _CloneSet_RestartCloneSet0_HTTP_Handler(srv))
	r.POST("/api/v1/cloneset/scale", _CloneSet_ScaleCloneSet0_HTTP_Handler(srv))
	r.GET("/api/v1/cloneset/detail", _CloneSet_GetCloneSetDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/cloneset/rollback", _CloneSet_RollbackCloneSet0_HTTP_Handler(srv))
	r.POST("/api/v1/cloneset/pod/delete", _CloneSet_DeleteCloneSetPods0_HTTP_Handler(srv))
	r.POST("/api/v1/cloneset/scale_stream", _CloneSet_UpdateScaleStrategy0_HTTP_Handler(srv))
	r.POST("/api/v1/cloneset/upgrade_strategy/update", _CloneSet_UpdateUpgradeStrategy0_HTTP_Handler(srv))
	r.GET("/api/v1/cloneset/controller_reversion/list", _CloneSet_ListCloneSetControllerRevision0_HTTP_Handler(srv))
}

func GenerateCloneSetHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 11)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/cloneset/list",
		Comment: "查看-云原生管理-CloneSet-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cloneset/create_or_update_by_yaml",
		Comment: "管理-云原生管理-CloneSet-yaml创建更新",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cloneset/delete",
		Comment: "管理-云原生管理-CloneSet-删除",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cloneset/restart",
		Comment: "管理-云原生管理-CloneSet-重启",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cloneset/scale",
		Comment: "管理-云原生管理-CloneSet-伸缩",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/cloneset/detail",
		Comment: "查看-云原生管理-CloneSet-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cloneset/rollback",
		Comment: "管理-云原生管理-CloneSet-回滚",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cloneset/pod/delete",
		Comment: "管理-云原生管理-CloneSet-删除pod",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cloneset/scale_stream",
		Comment: "管理-云原生管理-CloneSet-流式扩容",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cloneset/upgrade_strategy/update",
		Comment: "管理-云原生管理-CloneSet-升级策略",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/cloneset/controller_reversion/list",
		Comment: "查看-云原生管理-CloneSet-历史版本",
	})
	return routes
}

func _CloneSet_ListCloneSet0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListCloneSetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetListCloneSet)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCloneSet(ctx, req.(*ListCloneSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCloneSetResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_CreateOrUpdateCloneSetByYaml0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateCloneSetByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetCreateOrUpdateCloneSetByYaml)
		auditRule := audit.NewAudit(
			"cloneSet",
			"yaml创建更新",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cloneset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateCloneSetByYaml(ctx, req.(*CreateOrUpdateCloneSetByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateCloneSetByYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_DeleteCloneSet0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteCloneSetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetDeleteCloneSet)
		auditRule := audit.NewAudit(
			"cloneSet",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cloneset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCloneSet(ctx, req.(*DeleteCloneSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCloneSetResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_RestartCloneSet0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in RestartCloneSetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetRestartCloneSet)
		auditRule := audit.NewAudit(
			"cloneSet",
			"重启",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cloneset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RestartCloneSet(ctx, req.(*RestartCloneSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RestartCloneSetResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_ScaleCloneSet0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ScaleCloneSetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetScaleCloneSet)
		auditRule := audit.NewAudit(
			"cloneSet",
			"伸缩",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cloneset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScaleCloneSet(ctx, req.(*ScaleCloneSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScaleCloneSetResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_GetCloneSetDetail0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CloneSetDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetGetCloneSetDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCloneSetDetail(ctx, req.(*CloneSetDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CloneSetDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_RollbackCloneSet0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in RollbackCloneSetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetRollbackCloneSet)
		auditRule := audit.NewAudit(
			"cloneSet",
			"回滚",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cloneset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RollbackCloneSet(ctx, req.(*RollbackCloneSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RollbackCloneSetResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_DeleteCloneSetPods0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteCloneSetPodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetDeleteCloneSetPods)
		auditRule := audit.NewAudit(
			"cloneSet",
			"删除pod",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cloneset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCloneSetPods(ctx, req.(*DeleteCloneSetPodRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCloneSetPodResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_UpdateScaleStrategy0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateScaleStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetUpdateScaleStrategy)
		auditRule := audit.NewAudit(
			"cloneSet",
			"流式扩容",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cloneset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateScaleStrategy(ctx, req.(*UpdateScaleStrategyRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateScaleStrategyResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_UpdateUpgradeStrategy0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateUpgradeStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetUpdateUpgradeStrategy)
		auditRule := audit.NewAudit(
			"cloneSet",
			"编辑升级策略",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cloneset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUpgradeStrategy(ctx, req.(*UpdateUpgradeStrategyRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUpgradeStrategyResponse)
		return ctx.Result(200, reply)
	}
}

func _CloneSet_ListCloneSetControllerRevision0_HTTP_Handler(srv CloneSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListCloneSetReversionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSetListCloneSetControllerRevision)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCloneSetControllerRevision(ctx, req.(*ListCloneSetReversionRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCloneSetReversionResponse)
		return ctx.Result(200, reply)
	}
}

type CloneSetHTTPClient interface {
	ListCloneSet(ctx context.Context, req *ListCloneSetRequest, opts ...http.CallOption) (rsp *ListCloneSetResponse, err error)
	CreateOrUpdateCloneSetByYaml(ctx context.Context, req *CreateOrUpdateCloneSetByYamlRequest, opts ...http.CallOption) (rsp *CreateOrUpdateCloneSetByYamlResponse, err error)
	DeleteCloneSet(ctx context.Context, req *DeleteCloneSetRequest, opts ...http.CallOption) (rsp *DeleteCloneSetResponse, err error)
	RestartCloneSet(ctx context.Context, req *RestartCloneSetRequest, opts ...http.CallOption) (rsp *RestartCloneSetResponse, err error)
	ScaleCloneSet(ctx context.Context, req *ScaleCloneSetRequest, opts ...http.CallOption) (rsp *ScaleCloneSetResponse, err error)
	GetCloneSetDetail(ctx context.Context, req *CloneSetDetailRequest, opts ...http.CallOption) (rsp *CloneSetDetailResponse, err error)
	RollbackCloneSet(ctx context.Context, req *RollbackCloneSetRequest, opts ...http.CallOption) (rsp *RollbackCloneSetResponse, err error)
	DeleteCloneSetPods(ctx context.Context, req *DeleteCloneSetPodRequest, opts ...http.CallOption) (rsp *DeleteCloneSetPodResponse, err error)
	UpdateScaleStrategy(ctx context.Context, req *UpdateScaleStrategyRequest, opts ...http.CallOption) (rsp *UpdateScaleStrategyResponse, err error)
	UpdateUpgradeStrategy(ctx context.Context, req *UpdateUpgradeStrategyRequest, opts ...http.CallOption) (rsp *UpdateUpgradeStrategyResponse, err error)
	ListCloneSetControllerRevision(ctx context.Context, req *ListCloneSetReversionRequest, opts ...http.CallOption) (rsp *ListCloneSetReversionResponse, err error)
}

type CloneSetHTTPClientImpl struct {
	cc *http.Client
}

func NewCloneSetHTTPClient(client *http.Client) CloneSetHTTPClient {
	return &CloneSetHTTPClientImpl{client}
}

func (c *CloneSetHTTPClientImpl) ListCloneSet(ctx context.Context, in *ListCloneSetRequest, opts ...http.CallOption) (*ListCloneSetResponse, error) {
	var out ListCloneSetResponse
	pattern := "/api/v1/cloneset/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCloneSetListCloneSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) CreateOrUpdateCloneSetByYaml(ctx context.Context, in *CreateOrUpdateCloneSetByYamlRequest, opts ...http.CallOption) (*CreateOrUpdateCloneSetByYamlResponse, error) {
	var out CreateOrUpdateCloneSetByYamlResponse
	pattern := "/api/v1/cloneset/create_or_update_by_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSetCreateOrUpdateCloneSetByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) DeleteCloneSet(ctx context.Context, in *DeleteCloneSetRequest, opts ...http.CallOption) (*DeleteCloneSetResponse, error) {
	var out DeleteCloneSetResponse
	pattern := "/api/v1/cloneset/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSetDeleteCloneSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) RestartCloneSet(ctx context.Context, in *RestartCloneSetRequest, opts ...http.CallOption) (*RestartCloneSetResponse, error) {
	var out RestartCloneSetResponse
	pattern := "/api/v1/cloneset/restart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSetRestartCloneSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) ScaleCloneSet(ctx context.Context, in *ScaleCloneSetRequest, opts ...http.CallOption) (*ScaleCloneSetResponse, error) {
	var out ScaleCloneSetResponse
	pattern := "/api/v1/cloneset/scale"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSetScaleCloneSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) GetCloneSetDetail(ctx context.Context, in *CloneSetDetailRequest, opts ...http.CallOption) (*CloneSetDetailResponse, error) {
	var out CloneSetDetailResponse
	pattern := "/api/v1/cloneset/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCloneSetGetCloneSetDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) RollbackCloneSet(ctx context.Context, in *RollbackCloneSetRequest, opts ...http.CallOption) (*RollbackCloneSetResponse, error) {
	var out RollbackCloneSetResponse
	pattern := "/api/v1/cloneset/rollback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSetRollbackCloneSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) DeleteCloneSetPods(ctx context.Context, in *DeleteCloneSetPodRequest, opts ...http.CallOption) (*DeleteCloneSetPodResponse, error) {
	var out DeleteCloneSetPodResponse
	pattern := "/api/v1/cloneset/pod/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSetDeleteCloneSetPods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) UpdateScaleStrategy(ctx context.Context, in *UpdateScaleStrategyRequest, opts ...http.CallOption) (*UpdateScaleStrategyResponse, error) {
	var out UpdateScaleStrategyResponse
	pattern := "/api/v1/cloneset/scale_stream"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSetUpdateScaleStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) UpdateUpgradeStrategy(ctx context.Context, in *UpdateUpgradeStrategyRequest, opts ...http.CallOption) (*UpdateUpgradeStrategyResponse, error) {
	var out UpdateUpgradeStrategyResponse
	pattern := "/api/v1/cloneset/upgrade_strategy/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSetUpdateUpgradeStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloneSetHTTPClientImpl) ListCloneSetControllerRevision(ctx context.Context, in *ListCloneSetReversionRequest, opts ...http.CallOption) (*ListCloneSetReversionResponse, error) {
	var out ListCloneSetReversionResponse
	pattern := "/api/v1/cloneset/controller_reversion/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCloneSetListCloneSetControllerRevision))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
