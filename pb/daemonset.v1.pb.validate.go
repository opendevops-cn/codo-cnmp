// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/daemonset.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DaemonSetCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DaemonSetCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonSetCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DaemonSetConditionMultiError, or nil if none found.
func (m *DaemonSetCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonSetCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastUpdateTime

	// no validation rules for LastTransitionTime

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return DaemonSetConditionMultiError(errors)
	}

	return nil
}

// DaemonSetConditionMultiError is an error wrapping multiple validation errors
// returned by DaemonSetCondition.ValidateAll() if the designated constraints
// aren't met.
type DaemonSetConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonSetConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonSetConditionMultiError) AllErrors() []error { return m }

// DaemonSetConditionValidationError is the validation error returned by
// DaemonSetCondition.Validate if the designated constraints aren't met.
type DaemonSetConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonSetConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonSetConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonSetConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonSetConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonSetConditionValidationError) ErrorName() string {
	return "DaemonSetConditionValidationError"
}

// Error satisfies the builtin error interface
func (e DaemonSetConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonSetCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonSetConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonSetConditionValidationError{}

// Validate checks the field values on DaemonSetStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DaemonSetStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonSetStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DaemonSetStatusMultiError, or nil if none found.
func (m *DaemonSetStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonSetStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObservedGeneration

	// no validation rules for Replicas

	// no validation rules for UpdatedReplicas

	// no validation rules for ReadyReplicas

	// no validation rules for AvailableReplicas

	// no validation rules for UnavailableReplicas

	// no validation rules for CollisionCount

	if len(errors) > 0 {
		return DaemonSetStatusMultiError(errors)
	}

	return nil
}

// DaemonSetStatusMultiError is an error wrapping multiple validation errors
// returned by DaemonSetStatus.ValidateAll() if the designated constraints
// aren't met.
type DaemonSetStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonSetStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonSetStatusMultiError) AllErrors() []error { return m }

// DaemonSetStatusValidationError is the validation error returned by
// DaemonSetStatus.Validate if the designated constraints aren't met.
type DaemonSetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonSetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonSetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonSetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonSetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonSetStatusValidationError) ErrorName() string { return "DaemonSetStatusValidationError" }

// Error satisfies the builtin error interface
func (e DaemonSetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonSetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonSetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonSetStatusValidationError{}

// Validate checks the field values on DaemonSetStrategy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DaemonSetStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonSetStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DaemonSetStrategyMultiError, or nil if none found.
func (m *DaemonSetStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonSetStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := DaemonSetStrategy_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := DaemonSetStrategyValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxUnavailable

	// no validation rules for MaxSurge

	if len(errors) > 0 {
		return DaemonSetStrategyMultiError(errors)
	}

	return nil
}

// DaemonSetStrategyMultiError is an error wrapping multiple validation errors
// returned by DaemonSetStrategy.ValidateAll() if the designated constraints
// aren't met.
type DaemonSetStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonSetStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonSetStrategyMultiError) AllErrors() []error { return m }

// DaemonSetStrategyValidationError is the validation error returned by
// DaemonSetStrategy.Validate if the designated constraints aren't met.
type DaemonSetStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonSetStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonSetStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonSetStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonSetStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonSetStrategyValidationError) ErrorName() string {
	return "DaemonSetStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e DaemonSetStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonSetStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonSetStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonSetStrategyValidationError{}

// Validate checks the field values on DaemonSetItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DaemonSetItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonSetItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DaemonSetItemMultiError, or
// nil if none found.
func (m *DaemonSetItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonSetItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DaemonSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DaemonSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DaemonSetItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DaemonSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DaemonSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DaemonSetItemValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for Labels

	// no validation rules for Yaml

	// no validation rules for Annotations

	// no validation rules for Replicas

	if all {
		switch v := interface{}(m.GetUpdateStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DaemonSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DaemonSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DaemonSetItemValidationError{
				field:  "UpdateStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DaemonSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DaemonSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DaemonSetItemValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DaemonSetItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DaemonSetItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DaemonSetItemValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SpecReplicas

	// no validation rules for IsFollowed

	if len(errors) > 0 {
		return DaemonSetItemMultiError(errors)
	}

	return nil
}

// DaemonSetItemMultiError is an error wrapping multiple validation errors
// returned by DaemonSetItem.ValidateAll() if the designated constraints
// aren't met.
type DaemonSetItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonSetItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonSetItemMultiError) AllErrors() []error { return m }

// DaemonSetItemValidationError is the validation error returned by
// DaemonSetItem.Validate if the designated constraints aren't met.
type DaemonSetItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonSetItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonSetItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonSetItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonSetItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonSetItemValidationError) ErrorName() string { return "DaemonSetItemValidationError" }

// Error satisfies the builtin error interface
func (e DaemonSetItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonSetItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonSetItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonSetItemValidationError{}

// Validate checks the field values on ListDaemonSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDaemonSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDaemonSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDaemonSetRequestMultiError, or nil if none found.
func (m *ListDaemonSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDaemonSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListDaemonSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListDaemonSetRequestMultiError(errors)
	}

	return nil
}

// ListDaemonSetRequestMultiError is an error wrapping multiple validation
// errors returned by ListDaemonSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDaemonSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDaemonSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDaemonSetRequestMultiError) AllErrors() []error { return m }

// ListDaemonSetRequestValidationError is the validation error returned by
// ListDaemonSetRequest.Validate if the designated constraints aren't met.
type ListDaemonSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDaemonSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDaemonSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDaemonSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDaemonSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDaemonSetRequestValidationError) ErrorName() string {
	return "ListDaemonSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDaemonSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDaemonSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDaemonSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDaemonSetRequestValidationError{}

// Validate checks the field values on ListDaemonSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDaemonSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDaemonSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDaemonSetResponseMultiError, or nil if none found.
func (m *ListDaemonSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDaemonSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDaemonSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDaemonSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDaemonSetResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDaemonSetResponseMultiError(errors)
	}

	return nil
}

// ListDaemonSetResponseMultiError is an error wrapping multiple validation
// errors returned by ListDaemonSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDaemonSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDaemonSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDaemonSetResponseMultiError) AllErrors() []error { return m }

// ListDaemonSetResponseValidationError is the validation error returned by
// ListDaemonSetResponse.Validate if the designated constraints aren't met.
type ListDaemonSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDaemonSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDaemonSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDaemonSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDaemonSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDaemonSetResponseValidationError) ErrorName() string {
	return "ListDaemonSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDaemonSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDaemonSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDaemonSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDaemonSetResponseValidationError{}

// Validate checks the field values on CreateOrUpdateDaemonSetByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateDaemonSetByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateDaemonSetByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateDaemonSetByYamlRequestMultiError, or nil if none found.
func (m *CreateOrUpdateDaemonSetByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateDaemonSetByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateOrUpdateDaemonSetByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := CreateOrUpdateDaemonSetByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrUpdateDaemonSetByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateDaemonSetByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateDaemonSetByYamlRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateDaemonSetByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateDaemonSetByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateDaemonSetByYamlRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateDaemonSetByYamlRequestValidationError is the validation error
// returned by CreateOrUpdateDaemonSetByYamlRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateDaemonSetByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateDaemonSetByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateDaemonSetByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateDaemonSetByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateDaemonSetByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateDaemonSetByYamlRequestValidationError) ErrorName() string {
	return "CreateOrUpdateDaemonSetByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateDaemonSetByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateDaemonSetByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateDaemonSetByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateDaemonSetByYamlRequestValidationError{}

// Validate checks the field values on CreateOrUpdateDaemonSetByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateDaemonSetByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateDaemonSetByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateDaemonSetByYamlResponseMultiError, or nil if none found.
func (m *CreateOrUpdateDaemonSetByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateDaemonSetByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrUpdateDaemonSetByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateDaemonSetByYamlResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateDaemonSetByYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateDaemonSetByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateDaemonSetByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateDaemonSetByYamlResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateDaemonSetByYamlResponseValidationError is the validation error
// returned by CreateOrUpdateDaemonSetByYamlResponse.Validate if the
// designated constraints aren't met.
type CreateOrUpdateDaemonSetByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateDaemonSetByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateDaemonSetByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateDaemonSetByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateDaemonSetByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateDaemonSetByYamlResponseValidationError) ErrorName() string {
	return "CreateOrUpdateDaemonSetByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateDaemonSetByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateDaemonSetByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateDaemonSetByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateDaemonSetByYamlResponseValidationError{}

// Validate checks the field values on DeleteDaemonSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDaemonSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDaemonSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDaemonSetRequestMultiError, or nil if none found.
func (m *DeleteDaemonSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDaemonSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteDaemonSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteDaemonSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteDaemonSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDaemonSetRequestMultiError(errors)
	}

	return nil
}

// DeleteDaemonSetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDaemonSetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDaemonSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDaemonSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDaemonSetRequestMultiError) AllErrors() []error { return m }

// DeleteDaemonSetRequestValidationError is the validation error returned by
// DeleteDaemonSetRequest.Validate if the designated constraints aren't met.
type DeleteDaemonSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDaemonSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDaemonSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDaemonSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDaemonSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDaemonSetRequestValidationError) ErrorName() string {
	return "DeleteDaemonSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDaemonSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDaemonSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDaemonSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDaemonSetRequestValidationError{}

// Validate checks the field values on DeleteDaemonSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDaemonSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDaemonSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDaemonSetResponseMultiError, or nil if none found.
func (m *DeleteDaemonSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDaemonSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDaemonSetResponseMultiError(errors)
	}

	return nil
}

// DeleteDaemonSetResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDaemonSetResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDaemonSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDaemonSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDaemonSetResponseMultiError) AllErrors() []error { return m }

// DeleteDaemonSetResponseValidationError is the validation error returned by
// DeleteDaemonSetResponse.Validate if the designated constraints aren't met.
type DeleteDaemonSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDaemonSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDaemonSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDaemonSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDaemonSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDaemonSetResponseValidationError) ErrorName() string {
	return "DeleteDaemonSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDaemonSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDaemonSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDaemonSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDaemonSetResponseValidationError{}

// Validate checks the field values on RestartDaemonSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartDaemonSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartDaemonSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartDaemonSetRequestMultiError, or nil if none found.
func (m *RestartDaemonSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartDaemonSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RestartDaemonSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RestartDaemonSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RestartDaemonSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestartDaemonSetRequestMultiError(errors)
	}

	return nil
}

// RestartDaemonSetRequestMultiError is an error wrapping multiple validation
// errors returned by RestartDaemonSetRequest.ValidateAll() if the designated
// constraints aren't met.
type RestartDaemonSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartDaemonSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartDaemonSetRequestMultiError) AllErrors() []error { return m }

// RestartDaemonSetRequestValidationError is the validation error returned by
// RestartDaemonSetRequest.Validate if the designated constraints aren't met.
type RestartDaemonSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartDaemonSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartDaemonSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartDaemonSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartDaemonSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartDaemonSetRequestValidationError) ErrorName() string {
	return "RestartDaemonSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartDaemonSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartDaemonSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartDaemonSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartDaemonSetRequestValidationError{}

// Validate checks the field values on RestartDaemonSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartDaemonSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartDaemonSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartDaemonSetResponseMultiError, or nil if none found.
func (m *RestartDaemonSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartDaemonSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartDaemonSetResponseMultiError(errors)
	}

	return nil
}

// RestartDaemonSetResponseMultiError is an error wrapping multiple validation
// errors returned by RestartDaemonSetResponse.ValidateAll() if the designated
// constraints aren't met.
type RestartDaemonSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartDaemonSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartDaemonSetResponseMultiError) AllErrors() []error { return m }

// RestartDaemonSetResponseValidationError is the validation error returned by
// RestartDaemonSetResponse.Validate if the designated constraints aren't met.
type RestartDaemonSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartDaemonSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartDaemonSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartDaemonSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartDaemonSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartDaemonSetResponseValidationError) ErrorName() string {
	return "RestartDaemonSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartDaemonSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartDaemonSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartDaemonSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartDaemonSetResponseValidationError{}

// Validate checks the field values on GetDaemonSetDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDaemonSetDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDaemonSetDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDaemonSetDetailRequestMultiError, or nil if none found.
func (m *GetDaemonSetDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDaemonSetDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetDaemonSetDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetDaemonSetDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetDaemonSetDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDaemonSetDetailRequestMultiError(errors)
	}

	return nil
}

// GetDaemonSetDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetDaemonSetDetailRequest.ValidateAll() if the
// designated constraints aren't met.
type GetDaemonSetDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDaemonSetDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDaemonSetDetailRequestMultiError) AllErrors() []error { return m }

// GetDaemonSetDetailRequestValidationError is the validation error returned by
// GetDaemonSetDetailRequest.Validate if the designated constraints aren't met.
type GetDaemonSetDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDaemonSetDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDaemonSetDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDaemonSetDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDaemonSetDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDaemonSetDetailRequestValidationError) ErrorName() string {
	return "GetDaemonSetDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDaemonSetDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDaemonSetDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDaemonSetDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDaemonSetDetailRequestValidationError{}

// Validate checks the field values on GetDaemonSetDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDaemonSetDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDaemonSetDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDaemonSetDetailResponseMultiError, or nil if none found.
func (m *GetDaemonSetDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDaemonSetDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDaemonSetDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDaemonSetDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDaemonSetDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDaemonSetDetailResponseMultiError(errors)
	}

	return nil
}

// GetDaemonSetDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetDaemonSetDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDaemonSetDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDaemonSetDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDaemonSetDetailResponseMultiError) AllErrors() []error { return m }

// GetDaemonSetDetailResponseValidationError is the validation error returned
// by GetDaemonSetDetailResponse.Validate if the designated constraints aren't met.
type GetDaemonSetDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDaemonSetDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDaemonSetDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDaemonSetDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDaemonSetDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDaemonSetDetailResponseValidationError) ErrorName() string {
	return "GetDaemonSetDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDaemonSetDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDaemonSetDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDaemonSetDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDaemonSetDetailResponseValidationError{}

// Validate checks the field values on RollbackDaemonSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackDaemonSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackDaemonSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackDaemonSetRequestMultiError, or nil if none found.
func (m *RollbackDaemonSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackDaemonSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RollbackDaemonSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RollbackDaemonSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RollbackDaemonSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := RollbackDaemonSetRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RollbackDaemonSetRequestMultiError(errors)
	}

	return nil
}

// RollbackDaemonSetRequestMultiError is an error wrapping multiple validation
// errors returned by RollbackDaemonSetRequest.ValidateAll() if the designated
// constraints aren't met.
type RollbackDaemonSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackDaemonSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackDaemonSetRequestMultiError) AllErrors() []error { return m }

// RollbackDaemonSetRequestValidationError is the validation error returned by
// RollbackDaemonSetRequest.Validate if the designated constraints aren't met.
type RollbackDaemonSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackDaemonSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackDaemonSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackDaemonSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackDaemonSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackDaemonSetRequestValidationError) ErrorName() string {
	return "RollbackDaemonSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackDaemonSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackDaemonSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackDaemonSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackDaemonSetRequestValidationError{}

// Validate checks the field values on RollbackDaemonSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackDaemonSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackDaemonSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackDaemonSetResponseMultiError, or nil if none found.
func (m *RollbackDaemonSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackDaemonSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RollbackDaemonSetResponseMultiError(errors)
	}

	return nil
}

// RollbackDaemonSetResponseMultiError is an error wrapping multiple validation
// errors returned by RollbackDaemonSetResponse.ValidateAll() if the
// designated constraints aren't met.
type RollbackDaemonSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackDaemonSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackDaemonSetResponseMultiError) AllErrors() []error { return m }

// RollbackDaemonSetResponseValidationError is the validation error returned by
// RollbackDaemonSetResponse.Validate if the designated constraints aren't met.
type RollbackDaemonSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackDaemonSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackDaemonSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackDaemonSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackDaemonSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackDaemonSetResponseValidationError) ErrorName() string {
	return "RollbackDaemonSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackDaemonSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackDaemonSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackDaemonSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackDaemonSetResponseValidationError{}

// Validate checks the field values on GetDaemonSetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDaemonSetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDaemonSetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDaemonSetHistoryRequestMultiError, or nil if none found.
func (m *GetDaemonSetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDaemonSetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetDaemonSetHistoryRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetDaemonSetHistoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetDaemonSetHistoryRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDaemonSetHistoryRequestMultiError(errors)
	}

	return nil
}

// GetDaemonSetHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetDaemonSetHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDaemonSetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDaemonSetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDaemonSetHistoryRequestMultiError) AllErrors() []error { return m }

// GetDaemonSetHistoryRequestValidationError is the validation error returned
// by GetDaemonSetHistoryRequest.Validate if the designated constraints aren't met.
type GetDaemonSetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDaemonSetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDaemonSetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDaemonSetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDaemonSetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDaemonSetHistoryRequestValidationError) ErrorName() string {
	return "GetDaemonSetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDaemonSetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDaemonSetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDaemonSetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDaemonSetHistoryRequestValidationError{}

// Validate checks the field values on DaemonSetControllerReversionItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DaemonSetControllerReversionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DaemonSetControllerReversionItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DaemonSetControllerReversionItemMultiError, or nil if none found.
func (m *DaemonSetControllerReversionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DaemonSetControllerReversionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Yaml

	// no validation rules for CreateTime

	// no validation rules for IsCurrent

	if len(errors) > 0 {
		return DaemonSetControllerReversionItemMultiError(errors)
	}

	return nil
}

// DaemonSetControllerReversionItemMultiError is an error wrapping multiple
// validation errors returned by
// DaemonSetControllerReversionItem.ValidateAll() if the designated
// constraints aren't met.
type DaemonSetControllerReversionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DaemonSetControllerReversionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DaemonSetControllerReversionItemMultiError) AllErrors() []error { return m }

// DaemonSetControllerReversionItemValidationError is the validation error
// returned by DaemonSetControllerReversionItem.Validate if the designated
// constraints aren't met.
type DaemonSetControllerReversionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DaemonSetControllerReversionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DaemonSetControllerReversionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DaemonSetControllerReversionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DaemonSetControllerReversionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DaemonSetControllerReversionItemValidationError) ErrorName() string {
	return "DaemonSetControllerReversionItemValidationError"
}

// Error satisfies the builtin error interface
func (e DaemonSetControllerReversionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDaemonSetControllerReversionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DaemonSetControllerReversionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DaemonSetControllerReversionItemValidationError{}

// Validate checks the field values on GetDaemonSetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDaemonSetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDaemonSetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDaemonSetHistoryResponseMultiError, or nil if none found.
func (m *GetDaemonSetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDaemonSetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDaemonSetHistoryResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDaemonSetHistoryResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDaemonSetHistoryResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetDaemonSetHistoryResponseMultiError(errors)
	}

	return nil
}

// GetDaemonSetHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetDaemonSetHistoryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDaemonSetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDaemonSetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDaemonSetHistoryResponseMultiError) AllErrors() []error { return m }

// GetDaemonSetHistoryResponseValidationError is the validation error returned
// by GetDaemonSetHistoryResponse.Validate if the designated constraints
// aren't met.
type GetDaemonSetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDaemonSetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDaemonSetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDaemonSetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDaemonSetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDaemonSetHistoryResponseValidationError) ErrorName() string {
	return "GetDaemonSetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDaemonSetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDaemonSetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDaemonSetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDaemonSetHistoryResponseValidationError{}

// Validate checks the field values on UpdateDaemonSetUpdateStrategyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateDaemonSetUpdateStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDaemonSetUpdateStrategyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateDaemonSetUpdateStrategyRequestMultiError, or nil if none found.
func (m *UpdateDaemonSetUpdateStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDaemonSetUpdateStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateDaemonSetUpdateStrategyRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateDaemonSetUpdateStrategyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateDaemonSetUpdateStrategyRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := UpdateDaemonSetUpdateStrategyRequestValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxUnavailable

	// no validation rules for MaxSurge

	if len(errors) > 0 {
		return UpdateDaemonSetUpdateStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateDaemonSetUpdateStrategyRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDaemonSetUpdateStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDaemonSetUpdateStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDaemonSetUpdateStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDaemonSetUpdateStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateDaemonSetUpdateStrategyRequestValidationError is the validation error
// returned by UpdateDaemonSetUpdateStrategyRequest.Validate if the designated
// constraints aren't met.
type UpdateDaemonSetUpdateStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDaemonSetUpdateStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDaemonSetUpdateStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDaemonSetUpdateStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDaemonSetUpdateStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDaemonSetUpdateStrategyRequestValidationError) ErrorName() string {
	return "UpdateDaemonSetUpdateStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDaemonSetUpdateStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDaemonSetUpdateStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDaemonSetUpdateStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDaemonSetUpdateStrategyRequestValidationError{}

// Validate checks the field values on UpdateDaemonSetUpdateStrategyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateDaemonSetUpdateStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDaemonSetUpdateStrategyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateDaemonSetUpdateStrategyResponseMultiError, or nil if none found.
func (m *UpdateDaemonSetUpdateStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDaemonSetUpdateStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDaemonSetUpdateStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateDaemonSetUpdateStrategyResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateDaemonSetUpdateStrategyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDaemonSetUpdateStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDaemonSetUpdateStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDaemonSetUpdateStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateDaemonSetUpdateStrategyResponseValidationError is the validation error
// returned by UpdateDaemonSetUpdateStrategyResponse.Validate if the
// designated constraints aren't met.
type UpdateDaemonSetUpdateStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDaemonSetUpdateStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDaemonSetUpdateStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDaemonSetUpdateStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDaemonSetUpdateStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDaemonSetUpdateStrategyResponseValidationError) ErrorName() string {
	return "UpdateDaemonSetUpdateStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDaemonSetUpdateStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDaemonSetUpdateStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDaemonSetUpdateStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDaemonSetUpdateStrategyResponseValidationError{}
