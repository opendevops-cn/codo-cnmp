// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/ezrollout.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationEzRolloutListEzRollout = "/ezrollout.v1.EzRollout/ListEzRollout"
const OperationEzRolloutCreateEzRollout = "/ezrollout.v1.EzRollout/CreateEzRollout"
const OperationEzRolloutUpdateEzRollout = "/ezrollout.v1.EzRollout/UpdateEzRollout"
const OperationEzRolloutDeleteEzRollout = "/ezrollout.v1.EzRollout/DeleteEzRollout"
const OperationEzRolloutCreateOrUpdateEzRolloutByYaml = "/ezrollout.v1.EzRollout/CreateOrUpdateEzRolloutByYaml"
const OperationEzRolloutGetEzRolloutDetail = "/ezrollout.v1.EzRollout/GetEzRolloutDetail"

type EzRolloutHTTPServer interface {
	// ListEzRollout查看-云原生管理-版本伸缩-列表
	ListEzRollout(context.Context, *ListEzRolloutRequest) (*ListEzRolloutResponse, error)
	// CreateEzRollout查看-云原生管理-版本伸缩-创建
	CreateEzRollout(context.Context, *CreateEzRolloutRequest) (*CreateEzRolloutResponse, error)
	// UpdateEzRollout管理-云原生管理-版本伸缩-编辑
	UpdateEzRollout(context.Context, *UpdateEzRolloutRequest) (*UpdateEzRolloutResponse, error)
	// DeleteEzRollout管理-云原生管理-版本伸缩-删除
	DeleteEzRollout(context.Context, *DeleteEzRolloutRequest) (*DeleteEzRolloutResponse, error)
	// CreateOrUpdateEzRolloutByYaml管理-云原生管理-版本伸缩-yaml创建/更新
	CreateOrUpdateEzRolloutByYaml(context.Context, *CreateOrUpdateEzRolloutByYamlRequest) (*CreateOrUpdateEzRolloutByYamlResponse, error)
	// GetEzRolloutDetail查看-云原生管理-版本伸缩-详情
	GetEzRolloutDetail(context.Context, *EzRolloutDetailRequest) (*EzRolloutDetailResponse, error)
}

func NewEzRolloutHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationEzRolloutListEzRollout).Build(),
		selector.Server().Path(OperationEzRolloutCreateEzRollout).Build(),
		selector.Server().Path(OperationEzRolloutUpdateEzRollout).Build(),
		selector.Server().Path(OperationEzRolloutDeleteEzRollout).Build(),
		selector.Server().Path(OperationEzRolloutCreateOrUpdateEzRolloutByYaml).Build(),
		selector.Server().Path(OperationEzRolloutGetEzRolloutDetail).Build(),
	).Path(
		OperationEzRolloutListEzRollout,
		OperationEzRolloutCreateEzRollout,
		OperationEzRolloutUpdateEzRollout,
		OperationEzRolloutDeleteEzRollout,
		OperationEzRolloutCreateOrUpdateEzRolloutByYaml,
		OperationEzRolloutGetEzRolloutDetail,
	).Build()
}

func RegisterEzRolloutHTTPServer(s *http.Server, srv EzRolloutHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/ezrollout/list", _EzRollout_ListEzRollout0_HTTP_Handler(srv))
	r.POST("/api/v1/ezrollout/create", _EzRollout_CreateEzRollout0_HTTP_Handler(srv))
	r.POST("/api/v1/ezrollout/update", _EzRollout_UpdateEzRollout0_HTTP_Handler(srv))
	r.POST("/api/v1/ezrollout/delete", _EzRollout_DeleteEzRollout0_HTTP_Handler(srv))
	r.POST("/api/v1/ezrollout/create_or_update_by_yaml", _EzRollout_CreateOrUpdateEzRolloutByYaml0_HTTP_Handler(srv))
	r.GET("/api/v1/ezrollout/detail", _EzRollout_GetEzRolloutDetail0_HTTP_Handler(srv))
}

func GenerateEzRolloutHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 6)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/ezrollout/list",
		Comment: "查看-云原生管理-版本伸缩-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/ezrollout/create",
		Comment: "查看-云原生管理-版本伸缩-创建",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/ezrollout/update",
		Comment: "管理-云原生管理-版本伸缩-编辑",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/ezrollout/delete",
		Comment: "管理-云原生管理-版本伸缩-删除",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/ezrollout/create_or_update_by_yaml",
		Comment: "管理-云原生管理-版本伸缩-yaml创建/更新",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/ezrollout/detail",
		Comment: "查看-云原生管理-版本伸缩-详情",
	})
	return routes
}

func _EzRollout_ListEzRollout0_HTTP_Handler(srv EzRolloutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListEzRolloutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEzRolloutListEzRollout)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEzRollout(ctx, req.(*ListEzRolloutRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEzRolloutResponse)
		return ctx.Result(200, reply)
	}
}

func _EzRollout_CreateEzRollout0_HTTP_Handler(srv EzRolloutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateEzRolloutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEzRolloutCreateEzRollout)
		auditRule := audit.NewAudit(
			"版本伸缩",
			"创建",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "版本伸缩",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateEzRollout(ctx, req.(*CreateEzRolloutRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEzRolloutResponse)
		return ctx.Result(200, reply)
	}
}

func _EzRollout_UpdateEzRollout0_HTTP_Handler(srv EzRolloutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateEzRolloutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEzRolloutUpdateEzRollout)
		auditRule := audit.NewAudit(
			"版本伸缩",
			"编辑",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "版本伸缩",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateEzRollout(ctx, req.(*UpdateEzRolloutRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEzRolloutResponse)
		return ctx.Result(200, reply)
	}
}

func _EzRollout_DeleteEzRollout0_HTTP_Handler(srv EzRolloutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteEzRolloutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEzRolloutDeleteEzRollout)
		auditRule := audit.NewAudit(
			"版本伸缩",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "版本伸缩",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteEzRollout(ctx, req.(*DeleteEzRolloutRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEzRolloutResponse)
		return ctx.Result(200, reply)
	}
}

func _EzRollout_CreateOrUpdateEzRolloutByYaml0_HTTP_Handler(srv EzRolloutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateEzRolloutByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEzRolloutCreateOrUpdateEzRolloutByYaml)
		auditRule := audit.NewAudit(
			"版本伸缩",
			"Yaml创建更新",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "版本伸缩",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateEzRolloutByYaml(ctx, req.(*CreateOrUpdateEzRolloutByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateEzRolloutByYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _EzRollout_GetEzRolloutDetail0_HTTP_Handler(srv EzRolloutHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in EzRolloutDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEzRolloutGetEzRolloutDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEzRolloutDetail(ctx, req.(*EzRolloutDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EzRolloutDetailResponse)
		return ctx.Result(200, reply)
	}
}

type EzRolloutHTTPClient interface {
	ListEzRollout(ctx context.Context, req *ListEzRolloutRequest, opts ...http.CallOption) (rsp *ListEzRolloutResponse, err error)
	CreateEzRollout(ctx context.Context, req *CreateEzRolloutRequest, opts ...http.CallOption) (rsp *CreateEzRolloutResponse, err error)
	UpdateEzRollout(ctx context.Context, req *UpdateEzRolloutRequest, opts ...http.CallOption) (rsp *UpdateEzRolloutResponse, err error)
	DeleteEzRollout(ctx context.Context, req *DeleteEzRolloutRequest, opts ...http.CallOption) (rsp *DeleteEzRolloutResponse, err error)
	CreateOrUpdateEzRolloutByYaml(ctx context.Context, req *CreateOrUpdateEzRolloutByYamlRequest, opts ...http.CallOption) (rsp *CreateOrUpdateEzRolloutByYamlResponse, err error)
	GetEzRolloutDetail(ctx context.Context, req *EzRolloutDetailRequest, opts ...http.CallOption) (rsp *EzRolloutDetailResponse, err error)
}

type EzRolloutHTTPClientImpl struct {
	cc *http.Client
}

func NewEzRolloutHTTPClient(client *http.Client) EzRolloutHTTPClient {
	return &EzRolloutHTTPClientImpl{client}
}

func (c *EzRolloutHTTPClientImpl) ListEzRollout(ctx context.Context, in *ListEzRolloutRequest, opts ...http.CallOption) (*ListEzRolloutResponse, error) {
	var out ListEzRolloutResponse
	pattern := "/api/v1/ezrollout/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEzRolloutListEzRollout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EzRolloutHTTPClientImpl) CreateEzRollout(ctx context.Context, in *CreateEzRolloutRequest, opts ...http.CallOption) (*CreateEzRolloutResponse, error) {
	var out CreateEzRolloutResponse
	pattern := "/api/v1/ezrollout/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEzRolloutCreateEzRollout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EzRolloutHTTPClientImpl) UpdateEzRollout(ctx context.Context, in *UpdateEzRolloutRequest, opts ...http.CallOption) (*UpdateEzRolloutResponse, error) {
	var out UpdateEzRolloutResponse
	pattern := "/api/v1/ezrollout/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEzRolloutUpdateEzRollout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EzRolloutHTTPClientImpl) DeleteEzRollout(ctx context.Context, in *DeleteEzRolloutRequest, opts ...http.CallOption) (*DeleteEzRolloutResponse, error) {
	var out DeleteEzRolloutResponse
	pattern := "/api/v1/ezrollout/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEzRolloutDeleteEzRollout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EzRolloutHTTPClientImpl) CreateOrUpdateEzRolloutByYaml(ctx context.Context, in *CreateOrUpdateEzRolloutByYamlRequest, opts ...http.CallOption) (*CreateOrUpdateEzRolloutByYamlResponse, error) {
	var out CreateOrUpdateEzRolloutByYamlResponse
	pattern := "/api/v1/ezrollout/create_or_update_by_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEzRolloutCreateOrUpdateEzRolloutByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EzRolloutHTTPClientImpl) GetEzRolloutDetail(ctx context.Context, in *EzRolloutDetailRequest, opts ...http.CallOption) (*EzRolloutDetailResponse, error) {
	var out EzRolloutDetailResponse
	pattern := "/api/v1/ezrollout/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEzRolloutGetEzRolloutDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
