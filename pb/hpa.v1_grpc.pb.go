// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/hpa.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HPA_ListHpa_FullMethodName                 = "/hpa.v1.HPA/ListHpa"
	HPA_CreateOrUpdateHpaByYaml_FullMethodName = "/hpa.v1.HPA/CreateOrUpdateHpaByYaml"
	HPA_DeleteHpa_FullMethodName               = "/hpa.v1.HPA/DeleteHpa"
	HPA_GetHpaDetail_FullMethodName            = "/hpa.v1.HPA/GetHpaDetail"
)

// HPAClient is the client API for HPA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HPAClient interface {
	// 查看-云原生管理-HPA-列表
	ListHpa(ctx context.Context, in *ListHpaRequest, opts ...grpc.CallOption) (*ListHpaResponse, error)
	// 管理-云原生管理-HPA-Yaml创建更新
	CreateOrUpdateHpaByYaml(ctx context.Context, in *CreateOrUpdateHpaByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateHpaByYamlResponse, error)
	// 管理-云原生管理-HPA-删除
	DeleteHpa(ctx context.Context, in *DeleteHpaRequest, opts ...grpc.CallOption) (*DeleteHpaResponse, error)
	// 查看-云原生管理-HPA-详情
	GetHpaDetail(ctx context.Context, in *HpaDetailRequest, opts ...grpc.CallOption) (*HpaDetailResponse, error)
}

type hPAClient struct {
	cc grpc.ClientConnInterface
}

func NewHPAClient(cc grpc.ClientConnInterface) HPAClient {
	return &hPAClient{cc}
}

func (c *hPAClient) ListHpa(ctx context.Context, in *ListHpaRequest, opts ...grpc.CallOption) (*ListHpaResponse, error) {
	out := new(ListHpaResponse)
	err := c.cc.Invoke(ctx, HPA_ListHpa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) CreateOrUpdateHpaByYaml(ctx context.Context, in *CreateOrUpdateHpaByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateHpaByYamlResponse, error) {
	out := new(CreateOrUpdateHpaByYamlResponse)
	err := c.cc.Invoke(ctx, HPA_CreateOrUpdateHpaByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) DeleteHpa(ctx context.Context, in *DeleteHpaRequest, opts ...grpc.CallOption) (*DeleteHpaResponse, error) {
	out := new(DeleteHpaResponse)
	err := c.cc.Invoke(ctx, HPA_DeleteHpa_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hPAClient) GetHpaDetail(ctx context.Context, in *HpaDetailRequest, opts ...grpc.CallOption) (*HpaDetailResponse, error) {
	out := new(HpaDetailResponse)
	err := c.cc.Invoke(ctx, HPA_GetHpaDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HPAServer is the server API for HPA service.
// All implementations must embed UnimplementedHPAServer
// for forward compatibility
type HPAServer interface {
	// 查看-云原生管理-HPA-列表
	ListHpa(context.Context, *ListHpaRequest) (*ListHpaResponse, error)
	// 管理-云原生管理-HPA-Yaml创建更新
	CreateOrUpdateHpaByYaml(context.Context, *CreateOrUpdateHpaByYamlRequest) (*CreateOrUpdateHpaByYamlResponse, error)
	// 管理-云原生管理-HPA-删除
	DeleteHpa(context.Context, *DeleteHpaRequest) (*DeleteHpaResponse, error)
	// 查看-云原生管理-HPA-详情
	GetHpaDetail(context.Context, *HpaDetailRequest) (*HpaDetailResponse, error)
	mustEmbedUnimplementedHPAServer()
}

// UnimplementedHPAServer must be embedded to have forward compatible implementations.
type UnimplementedHPAServer struct {
}

func (UnimplementedHPAServer) ListHpa(context.Context, *ListHpaRequest) (*ListHpaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHpa not implemented")
}
func (UnimplementedHPAServer) CreateOrUpdateHpaByYaml(context.Context, *CreateOrUpdateHpaByYamlRequest) (*CreateOrUpdateHpaByYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateHpaByYaml not implemented")
}
func (UnimplementedHPAServer) DeleteHpa(context.Context, *DeleteHpaRequest) (*DeleteHpaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHpa not implemented")
}
func (UnimplementedHPAServer) GetHpaDetail(context.Context, *HpaDetailRequest) (*HpaDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHpaDetail not implemented")
}
func (UnimplementedHPAServer) mustEmbedUnimplementedHPAServer() {}

// UnsafeHPAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HPAServer will
// result in compilation errors.
type UnsafeHPAServer interface {
	mustEmbedUnimplementedHPAServer()
}

func RegisterHPAServer(s grpc.ServiceRegistrar, srv HPAServer) {
	s.RegisterService(&HPA_ServiceDesc, srv)
}

func _HPA_ListHpa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHpaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).ListHpa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPA_ListHpa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).ListHpa(ctx, req.(*ListHpaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_CreateOrUpdateHpaByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateHpaByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).CreateOrUpdateHpaByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPA_CreateOrUpdateHpaByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).CreateOrUpdateHpaByYaml(ctx, req.(*CreateOrUpdateHpaByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_DeleteHpa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHpaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).DeleteHpa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPA_DeleteHpa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).DeleteHpa(ctx, req.(*DeleteHpaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HPA_GetHpaDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HpaDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HPAServer).GetHpaDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HPA_GetHpaDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HPAServer).GetHpaDetail(ctx, req.(*HpaDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HPA_ServiceDesc is the grpc.ServiceDesc for HPA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HPA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hpa.v1.HPA",
	HandlerType: (*HPAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHpa",
			Handler:    _HPA_ListHpa_Handler,
		},
		{
			MethodName: "CreateOrUpdateHpaByYaml",
			Handler:    _HPA_CreateOrUpdateHpaByYaml_Handler,
		},
		{
			MethodName: "DeleteHpa",
			Handler:    _HPA_DeleteHpa_Handler,
		},
		{
			MethodName: "GetHpaDetail",
			Handler:    _HPA_GetHpaDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/hpa.v1.proto",
}
