// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/statefulset.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StatefulSet_ListStatefulSet_FullMethodName                 = "/statefulset.StatefulSet/ListStatefulSet"
	StatefulSet_CreateOrUpdateStatefulSetByYaml_FullMethodName = "/statefulset.StatefulSet/CreateOrUpdateStatefulSetByYaml"
	StatefulSet_DeleteStatefulSet_FullMethodName               = "/statefulset.StatefulSet/DeleteStatefulSet"
	StatefulSet_RestartStatefulSet_FullMethodName              = "/statefulset.StatefulSet/RestartStatefulSet"
	StatefulSet_ScaleStatefulSet_FullMethodName                = "/statefulset.StatefulSet/ScaleStatefulSet"
	StatefulSet_GetStatefulSetDetail_FullMethodName            = "/statefulset.StatefulSet/GetStatefulSetDetail"
	StatefulSet_GetStatefulSetRevisions_FullMethodName         = "/statefulset.StatefulSet/GetStatefulSetRevisions"
	StatefulSet_RollbackStatefulSet_FullMethodName             = "/statefulset.StatefulSet/RollbackStatefulSet"
	StatefulSet_UpdateStatefulSetUpdateStrategy_FullMethodName = "/statefulset.StatefulSet/UpdateStatefulSetUpdateStrategy"
)

// StatefulSetClient is the client API for StatefulSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatefulSetClient interface {
	// 查看-云原生管理-StatefulSet-列表
	ListStatefulSet(ctx context.Context, in *ListStatefulSetRequest, opts ...grpc.CallOption) (*ListStatefulSetResponse, error)
	// 管理-云原生管理-StatefulSet-Yaml创建更新
	CreateOrUpdateStatefulSetByYaml(ctx context.Context, in *CreateOrUpdateStatefulSetByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateStatefulSetByYamlResponse, error)
	// 管理-云原生管理-StatefulSet-删除
	DeleteStatefulSet(ctx context.Context, in *DeleteStatefulSetRequest, opts ...grpc.CallOption) (*DeleteStatefulSetResponse, error)
	// 管理-云原生管理-StatefulSet-重启
	RestartStatefulSet(ctx context.Context, in *RestartStatefulSetRequest, opts ...grpc.CallOption) (*RestartStatefulSetResponse, error)
	// 管理-云原生管理-StatefulSet-伸缩
	ScaleStatefulSet(ctx context.Context, in *ScaleStatefulSetRequest, opts ...grpc.CallOption) (*ScaleStatefulSetResponse, error)
	// 查看-云原生管理-StatefulSet-详情
	GetStatefulSetDetail(ctx context.Context, in *GetStatefulSetDetailRequest, opts ...grpc.CallOption) (*GetStatefulSetDetailResponse, error)
	// 查看-云原生管理-StatefulSet-历史版本
	GetStatefulSetRevisions(ctx context.Context, in *GetStatefulSetHistoryRequest, opts ...grpc.CallOption) (*GetStatefulSetHistoryResponse, error)
	// 管理-云原生管理-StatefulSet-回滚
	RollbackStatefulSet(ctx context.Context, in *RollbackStatefulSetRequest, opts ...grpc.CallOption) (*RollbackStatefulSetResponse, error)
	// 管理-云原生管理-StatefulSet-更新策略
	UpdateStatefulSetUpdateStrategy(ctx context.Context, in *UpdateStatefulSetUpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateStatefulSetUpdateStrategyResponse, error)
}

type statefulSetClient struct {
	cc grpc.ClientConnInterface
}

func NewStatefulSetClient(cc grpc.ClientConnInterface) StatefulSetClient {
	return &statefulSetClient{cc}
}

func (c *statefulSetClient) ListStatefulSet(ctx context.Context, in *ListStatefulSetRequest, opts ...grpc.CallOption) (*ListStatefulSetResponse, error) {
	out := new(ListStatefulSetResponse)
	err := c.cc.Invoke(ctx, StatefulSet_ListStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statefulSetClient) CreateOrUpdateStatefulSetByYaml(ctx context.Context, in *CreateOrUpdateStatefulSetByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateStatefulSetByYamlResponse, error) {
	out := new(CreateOrUpdateStatefulSetByYamlResponse)
	err := c.cc.Invoke(ctx, StatefulSet_CreateOrUpdateStatefulSetByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statefulSetClient) DeleteStatefulSet(ctx context.Context, in *DeleteStatefulSetRequest, opts ...grpc.CallOption) (*DeleteStatefulSetResponse, error) {
	out := new(DeleteStatefulSetResponse)
	err := c.cc.Invoke(ctx, StatefulSet_DeleteStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statefulSetClient) RestartStatefulSet(ctx context.Context, in *RestartStatefulSetRequest, opts ...grpc.CallOption) (*RestartStatefulSetResponse, error) {
	out := new(RestartStatefulSetResponse)
	err := c.cc.Invoke(ctx, StatefulSet_RestartStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statefulSetClient) ScaleStatefulSet(ctx context.Context, in *ScaleStatefulSetRequest, opts ...grpc.CallOption) (*ScaleStatefulSetResponse, error) {
	out := new(ScaleStatefulSetResponse)
	err := c.cc.Invoke(ctx, StatefulSet_ScaleStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statefulSetClient) GetStatefulSetDetail(ctx context.Context, in *GetStatefulSetDetailRequest, opts ...grpc.CallOption) (*GetStatefulSetDetailResponse, error) {
	out := new(GetStatefulSetDetailResponse)
	err := c.cc.Invoke(ctx, StatefulSet_GetStatefulSetDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statefulSetClient) GetStatefulSetRevisions(ctx context.Context, in *GetStatefulSetHistoryRequest, opts ...grpc.CallOption) (*GetStatefulSetHistoryResponse, error) {
	out := new(GetStatefulSetHistoryResponse)
	err := c.cc.Invoke(ctx, StatefulSet_GetStatefulSetRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statefulSetClient) RollbackStatefulSet(ctx context.Context, in *RollbackStatefulSetRequest, opts ...grpc.CallOption) (*RollbackStatefulSetResponse, error) {
	out := new(RollbackStatefulSetResponse)
	err := c.cc.Invoke(ctx, StatefulSet_RollbackStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statefulSetClient) UpdateStatefulSetUpdateStrategy(ctx context.Context, in *UpdateStatefulSetUpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateStatefulSetUpdateStrategyResponse, error) {
	out := new(UpdateStatefulSetUpdateStrategyResponse)
	err := c.cc.Invoke(ctx, StatefulSet_UpdateStatefulSetUpdateStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatefulSetServer is the server API for StatefulSet service.
// All implementations must embed UnimplementedStatefulSetServer
// for forward compatibility
type StatefulSetServer interface {
	// 查看-云原生管理-StatefulSet-列表
	ListStatefulSet(context.Context, *ListStatefulSetRequest) (*ListStatefulSetResponse, error)
	// 管理-云原生管理-StatefulSet-Yaml创建更新
	CreateOrUpdateStatefulSetByYaml(context.Context, *CreateOrUpdateStatefulSetByYamlRequest) (*CreateOrUpdateStatefulSetByYamlResponse, error)
	// 管理-云原生管理-StatefulSet-删除
	DeleteStatefulSet(context.Context, *DeleteStatefulSetRequest) (*DeleteStatefulSetResponse, error)
	// 管理-云原生管理-StatefulSet-重启
	RestartStatefulSet(context.Context, *RestartStatefulSetRequest) (*RestartStatefulSetResponse, error)
	// 管理-云原生管理-StatefulSet-伸缩
	ScaleStatefulSet(context.Context, *ScaleStatefulSetRequest) (*ScaleStatefulSetResponse, error)
	// 查看-云原生管理-StatefulSet-详情
	GetStatefulSetDetail(context.Context, *GetStatefulSetDetailRequest) (*GetStatefulSetDetailResponse, error)
	// 查看-云原生管理-StatefulSet-历史版本
	GetStatefulSetRevisions(context.Context, *GetStatefulSetHistoryRequest) (*GetStatefulSetHistoryResponse, error)
	// 管理-云原生管理-StatefulSet-回滚
	RollbackStatefulSet(context.Context, *RollbackStatefulSetRequest) (*RollbackStatefulSetResponse, error)
	// 管理-云原生管理-StatefulSet-更新策略
	UpdateStatefulSetUpdateStrategy(context.Context, *UpdateStatefulSetUpdateStrategyRequest) (*UpdateStatefulSetUpdateStrategyResponse, error)
	mustEmbedUnimplementedStatefulSetServer()
}

// UnimplementedStatefulSetServer must be embedded to have forward compatible implementations.
type UnimplementedStatefulSetServer struct {
}

func (UnimplementedStatefulSetServer) ListStatefulSet(context.Context, *ListStatefulSetRequest) (*ListStatefulSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatefulSet not implemented")
}
func (UnimplementedStatefulSetServer) CreateOrUpdateStatefulSetByYaml(context.Context, *CreateOrUpdateStatefulSetByYamlRequest) (*CreateOrUpdateStatefulSetByYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateStatefulSetByYaml not implemented")
}
func (UnimplementedStatefulSetServer) DeleteStatefulSet(context.Context, *DeleteStatefulSetRequest) (*DeleteStatefulSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatefulSet not implemented")
}
func (UnimplementedStatefulSetServer) RestartStatefulSet(context.Context, *RestartStatefulSetRequest) (*RestartStatefulSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartStatefulSet not implemented")
}
func (UnimplementedStatefulSetServer) ScaleStatefulSet(context.Context, *ScaleStatefulSetRequest) (*ScaleStatefulSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleStatefulSet not implemented")
}
func (UnimplementedStatefulSetServer) GetStatefulSetDetail(context.Context, *GetStatefulSetDetailRequest) (*GetStatefulSetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatefulSetDetail not implemented")
}
func (UnimplementedStatefulSetServer) GetStatefulSetRevisions(context.Context, *GetStatefulSetHistoryRequest) (*GetStatefulSetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatefulSetRevisions not implemented")
}
func (UnimplementedStatefulSetServer) RollbackStatefulSet(context.Context, *RollbackStatefulSetRequest) (*RollbackStatefulSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackStatefulSet not implemented")
}
func (UnimplementedStatefulSetServer) UpdateStatefulSetUpdateStrategy(context.Context, *UpdateStatefulSetUpdateStrategyRequest) (*UpdateStatefulSetUpdateStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatefulSetUpdateStrategy not implemented")
}
func (UnimplementedStatefulSetServer) mustEmbedUnimplementedStatefulSetServer() {}

// UnsafeStatefulSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatefulSetServer will
// result in compilation errors.
type UnsafeStatefulSetServer interface {
	mustEmbedUnimplementedStatefulSetServer()
}

func RegisterStatefulSetServer(s grpc.ServiceRegistrar, srv StatefulSetServer) {
	s.RegisterService(&StatefulSet_ServiceDesc, srv)
}

func _StatefulSet_ListStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).ListStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_ListStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).ListStatefulSet(ctx, req.(*ListStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatefulSet_CreateOrUpdateStatefulSetByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateStatefulSetByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).CreateOrUpdateStatefulSetByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_CreateOrUpdateStatefulSetByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).CreateOrUpdateStatefulSetByYaml(ctx, req.(*CreateOrUpdateStatefulSetByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatefulSet_DeleteStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).DeleteStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_DeleteStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).DeleteStatefulSet(ctx, req.(*DeleteStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatefulSet_RestartStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).RestartStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_RestartStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).RestartStatefulSet(ctx, req.(*RestartStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatefulSet_ScaleStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).ScaleStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_ScaleStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).ScaleStatefulSet(ctx, req.(*ScaleStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatefulSet_GetStatefulSetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatefulSetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).GetStatefulSetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_GetStatefulSetDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).GetStatefulSetDetail(ctx, req.(*GetStatefulSetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatefulSet_GetStatefulSetRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatefulSetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).GetStatefulSetRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_GetStatefulSetRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).GetStatefulSetRevisions(ctx, req.(*GetStatefulSetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatefulSet_RollbackStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).RollbackStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_RollbackStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).RollbackStatefulSet(ctx, req.(*RollbackStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatefulSet_UpdateStatefulSetUpdateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatefulSetUpdateStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatefulSetServer).UpdateStatefulSetUpdateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatefulSet_UpdateStatefulSetUpdateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatefulSetServer).UpdateStatefulSetUpdateStrategy(ctx, req.(*UpdateStatefulSetUpdateStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatefulSet_ServiceDesc is the grpc.ServiceDesc for StatefulSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatefulSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statefulset.StatefulSet",
	HandlerType: (*StatefulSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStatefulSet",
			Handler:    _StatefulSet_ListStatefulSet_Handler,
		},
		{
			MethodName: "CreateOrUpdateStatefulSetByYaml",
			Handler:    _StatefulSet_CreateOrUpdateStatefulSetByYaml_Handler,
		},
		{
			MethodName: "DeleteStatefulSet",
			Handler:    _StatefulSet_DeleteStatefulSet_Handler,
		},
		{
			MethodName: "RestartStatefulSet",
			Handler:    _StatefulSet_RestartStatefulSet_Handler,
		},
		{
			MethodName: "ScaleStatefulSet",
			Handler:    _StatefulSet_ScaleStatefulSet_Handler,
		},
		{
			MethodName: "GetStatefulSetDetail",
			Handler:    _StatefulSet_GetStatefulSetDetail_Handler,
		},
		{
			MethodName: "GetStatefulSetRevisions",
			Handler:    _StatefulSet_GetStatefulSetRevisions_Handler,
		},
		{
			MethodName: "RollbackStatefulSet",
			Handler:    _StatefulSet_RollbackStatefulSet_Handler,
		},
		{
			MethodName: "UpdateStatefulSetUpdateStrategy",
			Handler:    _StatefulSet_UpdateStatefulSetUpdateStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/statefulset.v1.proto",
}
