// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/agent.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationAgentListAgent = "/agent.Agent/ListAgent"
const OperationAgentCreateAgent = "/agent.Agent/CreateAgent"
const OperationAgentDeleteAgent = "/agent.Agent/DeleteAgent"
const OperationAgentUpdateAgent = "/agent.Agent/UpdateAgent"

type AgentHTTPServer interface {
	// ListAgent查看-云原生管理-Agent-列表
	ListAgent(context.Context, *ListAgentRequest) (*ListAgentResponse, error)
	// CreateAgent管理-云原生管理-Agent-创建
	CreateAgent(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error)
	// DeleteAgent管理-云原生管理-Agent-删除
	DeleteAgent(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error)
	// UpdateAgent管理-云原生管理-Agent-编辑
	UpdateAgent(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error)
}

func NewAgentHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationAgentListAgent).Build(),
		selector.Server().Path(OperationAgentCreateAgent).Build(),
		selector.Server().Path(OperationAgentDeleteAgent).Build(),
		selector.Server().Path(OperationAgentUpdateAgent).Build(),
	).Path(
		OperationAgentListAgent,
		OperationAgentCreateAgent,
		OperationAgentDeleteAgent,
		OperationAgentUpdateAgent,
	).Build()
}

func RegisterAgentHTTPServer(s *http.Server, srv AgentHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/agent/list", _Agent_ListAgent0_HTTP_Handler(srv))
	r.POST("/api/v1/agent/create", _Agent_CreateAgent0_HTTP_Handler(srv))
	r.POST("/api/v1/agent/delete", _Agent_DeleteAgent0_HTTP_Handler(srv))
	r.POST("/api/v1/agent/update", _Agent_UpdateAgent0_HTTP_Handler(srv))
}

func GenerateAgentHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 4)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/agent/list",
		Comment: "查看-云原生管理-Agent-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/agent/create",
		Comment: "管理-云原生管理-Agent-创建",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/agent/delete",
		Comment: "管理-云原生管理-Agent-删除",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/agent/update",
		Comment: "管理-云原生管理-Agent-编辑",
	})
	return routes
}

func _Agent_ListAgent0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListAgentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentListAgent)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAgent(ctx, req.(*ListAgentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAgentResponse)
		return ctx.Result(200, reply)
	}
}

func _Agent_CreateAgent0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateAgentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentCreateAgent)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAgent(ctx, req.(*CreateAgentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAgentResponse)
		return ctx.Result(200, reply)
	}
}

func _Agent_DeleteAgent0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteAgentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentDeleteAgent)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAgent(ctx, req.(*DeleteAgentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAgentResponse)
		return ctx.Result(200, reply)
	}
}

func _Agent_UpdateAgent0_HTTP_Handler(srv AgentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateAgentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAgentUpdateAgent)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAgent(ctx, req.(*UpdateAgentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAgentResponse)
		return ctx.Result(200, reply)
	}
}

type AgentHTTPClient interface {
	ListAgent(ctx context.Context, req *ListAgentRequest, opts ...http.CallOption) (rsp *ListAgentResponse, err error)
	CreateAgent(ctx context.Context, req *CreateAgentRequest, opts ...http.CallOption) (rsp *CreateAgentResponse, err error)
	DeleteAgent(ctx context.Context, req *DeleteAgentRequest, opts ...http.CallOption) (rsp *DeleteAgentResponse, err error)
	UpdateAgent(ctx context.Context, req *UpdateAgentRequest, opts ...http.CallOption) (rsp *UpdateAgentResponse, err error)
}

type AgentHTTPClientImpl struct {
	cc *http.Client
}

func NewAgentHTTPClient(client *http.Client) AgentHTTPClient {
	return &AgentHTTPClientImpl{client}
}

func (c *AgentHTTPClientImpl) ListAgent(ctx context.Context, in *ListAgentRequest, opts ...http.CallOption) (*ListAgentResponse, error) {
	var out ListAgentResponse
	pattern := "/api/v1/agent/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAgentListAgent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AgentHTTPClientImpl) CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...http.CallOption) (*CreateAgentResponse, error) {
	var out CreateAgentResponse
	pattern := "/api/v1/agent/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAgentCreateAgent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AgentHTTPClientImpl) DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...http.CallOption) (*DeleteAgentResponse, error) {
	var out DeleteAgentResponse
	pattern := "/api/v1/agent/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAgentDeleteAgent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AgentHTTPClientImpl) UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...http.CallOption) (*UpdateAgentResponse, error) {
	var out UpdateAgentResponse
	pattern := "/api/v1/agent/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAgentUpdateAgent))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
