// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/user.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationUserFollowCreateUserFollow = "/user.UserFollow/CreateUserFollow"
const OperationUserFollowDeleteUserFollow = "/user.UserFollow/DeleteUserFollow"
const OperationUserFollowListUserFollow = "/user.UserFollow/ListUserFollow"

type UserFollowHTTPServer interface {
	// CreateUserFollow管理-云原生管理-我的关注
	CreateUserFollow(context.Context, *UserFollowRequest) (*UserFollowResponse, error)
	// DeleteUserFollow管理-云原生管理-取消关注
	DeleteUserFollow(context.Context, *DeleteUserFollowRequest) (*DeleteUserFollowResponse, error)
	// ListUserFollow查看-云原生管理-用户关注列表
	ListUserFollow(context.Context, *ListUserFollowRequest) (*ListUserFollowResponse, error)
}

func NewUserFollowHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationUserFollowCreateUserFollow).Build(),
		selector.Server().Path(OperationUserFollowDeleteUserFollow).Build(),
		selector.Server().Path(OperationUserFollowListUserFollow).Build(),
	).Path(
		OperationUserFollowCreateUserFollow,
		OperationUserFollowDeleteUserFollow,
		OperationUserFollowListUserFollow,
	).Build()
}

func RegisterUserFollowHTTPServer(s *http.Server, srv UserFollowHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/user/follow/create", _UserFollow_CreateUserFollow0_HTTP_Handler(srv))
	r.POST("/api/v1/user/follow/delete", _UserFollow_DeleteUserFollow0_HTTP_Handler(srv))
	r.GET("/api/v1/user/follow/list", _UserFollow_ListUserFollow0_HTTP_Handler(srv))
}

func GenerateUserFollowHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 3)
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/user/follow/create",
		Comment: "管理-云原生管理-我的关注",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/user/follow/delete",
		Comment: "管理-云原生管理-取消关注",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/user/follow/list",
		Comment: "查看-云原生管理-用户关注列表",
	})
	return routes
}

func _UserFollow_CreateUserFollow0_HTTP_Handler(srv UserFollowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UserFollowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserFollowCreateUserFollow)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserFollow(ctx, req.(*UserFollowRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserFollowResponse)
		return ctx.Result(200, reply)
	}
}

func _UserFollow_DeleteUserFollow0_HTTP_Handler(srv UserFollowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteUserFollowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserFollowDeleteUserFollow)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserFollow(ctx, req.(*DeleteUserFollowRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserFollowResponse)
		return ctx.Result(200, reply)
	}
}

func _UserFollow_ListUserFollow0_HTTP_Handler(srv UserFollowHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListUserFollowRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserFollowListUserFollow)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserFollow(ctx, req.(*ListUserFollowRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserFollowResponse)
		return ctx.Result(200, reply)
	}
}

type UserFollowHTTPClient interface {
	CreateUserFollow(ctx context.Context, req *UserFollowRequest, opts ...http.CallOption) (rsp *UserFollowResponse, err error)
	DeleteUserFollow(ctx context.Context, req *DeleteUserFollowRequest, opts ...http.CallOption) (rsp *DeleteUserFollowResponse, err error)
	ListUserFollow(ctx context.Context, req *ListUserFollowRequest, opts ...http.CallOption) (rsp *ListUserFollowResponse, err error)
}

type UserFollowHTTPClientImpl struct {
	cc *http.Client
}

func NewUserFollowHTTPClient(client *http.Client) UserFollowHTTPClient {
	return &UserFollowHTTPClientImpl{client}
}

func (c *UserFollowHTTPClientImpl) CreateUserFollow(ctx context.Context, in *UserFollowRequest, opts ...http.CallOption) (*UserFollowResponse, error) {
	var out UserFollowResponse
	pattern := "/api/v1/user/follow/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserFollowCreateUserFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserFollowHTTPClientImpl) DeleteUserFollow(ctx context.Context, in *DeleteUserFollowRequest, opts ...http.CallOption) (*DeleteUserFollowResponse, error) {
	var out DeleteUserFollowResponse
	pattern := "/api/v1/user/follow/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserFollowDeleteUserFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserFollowHTTPClientImpl) ListUserFollow(ctx context.Context, in *ListUserFollowRequest, opts ...http.CallOption) (*ListUserFollowResponse, error) {
	var out ListUserFollowResponse
	pattern := "/api/v1/user/follow/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserFollowListUserFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
