// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/secret.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationSecretListSecret = "/secret.v1.Secret/ListSecret"
const OperationSecretCreateOrUpdateSecretByYaml = "/secret.v1.Secret/CreateOrUpdateSecretByYaml"
const OperationSecretDeleteSecret = "/secret.v1.Secret/DeleteSecret"
const OperationSecretGetSecretDetail = "/secret.v1.Secret/GetSecretDetail"
const OperationSecretCreateSecret = "/secret.v1.Secret/CreateSecret"
const OperationSecretUpdateSecret = "/secret.v1.Secret/UpdateSecret"

type SecretHTTPServer interface {
	// ListSecret查看-云原生管理-Secret-列表
	ListSecret(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	// CreateOrUpdateSecretByYaml管理-云原生管理-Secret-Yaml创建更新
	CreateOrUpdateSecretByYaml(context.Context, *CreateOrUpdateSecretByYamlRequest) (*CreateOrUpdateSecretByYamlResponse, error)
	// DeleteSecret管理-云原生管理-Secret-删除
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	// GetSecretDetail查看-云原生管理-Secret-详情
	GetSecretDetail(context.Context, *SecretDetailRequest) (*SecretDetailResponse, error)
	// CreateSecret管理-云原生管理-Secret-创建
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	// UpdateSecret管理-云原生管理-Secret-更新
	UpdateSecret(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error)
}

func NewSecretHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationSecretListSecret).Build(),
		selector.Server().Path(OperationSecretCreateOrUpdateSecretByYaml).Build(),
		selector.Server().Path(OperationSecretDeleteSecret).Build(),
		selector.Server().Path(OperationSecretGetSecretDetail).Build(),
		selector.Server().Path(OperationSecretCreateSecret).Build(),
		selector.Server().Path(OperationSecretUpdateSecret).Build(),
	).Path(
		OperationSecretListSecret,
		OperationSecretCreateOrUpdateSecretByYaml,
		OperationSecretDeleteSecret,
		OperationSecretGetSecretDetail,
		OperationSecretCreateSecret,
		OperationSecretUpdateSecret,
	).Build()
}

func RegisterSecretHTTPServer(s *http.Server, srv SecretHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/secret/list", _Secret_ListSecret0_HTTP_Handler(srv))
	r.POST("/api/v1/secret/create_or_update_by_yaml", _Secret_CreateOrUpdateSecretByYaml0_HTTP_Handler(srv))
	r.POST("/api/v1/secret/delete", _Secret_DeleteSecret0_HTTP_Handler(srv))
	r.GET("/api/v1/secret/detail", _Secret_GetSecretDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/secret/create", _Secret_CreateSecret0_HTTP_Handler(srv))
	r.POST("/api/v1/secret/update", _Secret_UpdateSecret0_HTTP_Handler(srv))
}

func GenerateSecretHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 6)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/secret/list",
		Comment: "查看-云原生管理-Secret-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/secret/create_or_update_by_yaml",
		Comment: "管理-云原生管理-Secret-Yaml创建更新",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/secret/delete",
		Comment: "管理-云原生管理-Secret-删除",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/secret/detail",
		Comment: "查看-云原生管理-Secret-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/secret/create",
		Comment: "管理-云原生管理-Secret-创建",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/secret/update",
		Comment: "管理-云原生管理-Secret-更新",
	})
	return routes
}

func _Secret_ListSecret0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListSecretsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretListSecret)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSecret(ctx, req.(*ListSecretsRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSecretsResponse)
		return ctx.Result(200, reply)
	}
}

func _Secret_CreateOrUpdateSecretByYaml0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateSecretByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretCreateOrUpdateSecretByYaml)
		auditRule := audit.NewAudit(
			"secret",
			"Yaml创建更新",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "Secret",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateSecretByYaml(ctx, req.(*CreateOrUpdateSecretByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateSecretByYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _Secret_DeleteSecret0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteSecretRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretDeleteSecret)
		auditRule := audit.NewAudit(
			"secret",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "secret",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSecret(ctx, req.(*DeleteSecretRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSecretResponse)
		return ctx.Result(200, reply)
	}
}

func _Secret_GetSecretDetail0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in SecretDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretGetSecretDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSecretDetail(ctx, req.(*SecretDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SecretDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Secret_CreateSecret0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateSecretRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretCreateSecret)
		auditRule := audit.NewAudit(
			"secret",
			"创建",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "secret",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSecret(ctx, req.(*CreateSecretRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSecretResponse)
		return ctx.Result(200, reply)
	}
}

func _Secret_UpdateSecret0_HTTP_Handler(srv SecretHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateSecretRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSecretUpdateSecret)
		auditRule := audit.NewAudit(
			"secret",
			"更新",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "secret",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSecret(ctx, req.(*UpdateSecretRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSecretResponse)
		return ctx.Result(200, reply)
	}
}

type SecretHTTPClient interface {
	ListSecret(ctx context.Context, req *ListSecretsRequest, opts ...http.CallOption) (rsp *ListSecretsResponse, err error)
	CreateOrUpdateSecretByYaml(ctx context.Context, req *CreateOrUpdateSecretByYamlRequest, opts ...http.CallOption) (rsp *CreateOrUpdateSecretByYamlResponse, err error)
	DeleteSecret(ctx context.Context, req *DeleteSecretRequest, opts ...http.CallOption) (rsp *DeleteSecretResponse, err error)
	GetSecretDetail(ctx context.Context, req *SecretDetailRequest, opts ...http.CallOption) (rsp *SecretDetailResponse, err error)
	CreateSecret(ctx context.Context, req *CreateSecretRequest, opts ...http.CallOption) (rsp *CreateSecretResponse, err error)
	UpdateSecret(ctx context.Context, req *UpdateSecretRequest, opts ...http.CallOption) (rsp *UpdateSecretResponse, err error)
}

type SecretHTTPClientImpl struct {
	cc *http.Client
}

func NewSecretHTTPClient(client *http.Client) SecretHTTPClient {
	return &SecretHTTPClientImpl{client}
}

func (c *SecretHTTPClientImpl) ListSecret(ctx context.Context, in *ListSecretsRequest, opts ...http.CallOption) (*ListSecretsResponse, error) {
	var out ListSecretsResponse
	pattern := "/api/v1/secret/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSecretListSecret))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SecretHTTPClientImpl) CreateOrUpdateSecretByYaml(ctx context.Context, in *CreateOrUpdateSecretByYamlRequest, opts ...http.CallOption) (*CreateOrUpdateSecretByYamlResponse, error) {
	var out CreateOrUpdateSecretByYamlResponse
	pattern := "/api/v1/secret/create_or_update_by_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretCreateOrUpdateSecretByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SecretHTTPClientImpl) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...http.CallOption) (*DeleteSecretResponse, error) {
	var out DeleteSecretResponse
	pattern := "/api/v1/secret/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretDeleteSecret))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SecretHTTPClientImpl) GetSecretDetail(ctx context.Context, in *SecretDetailRequest, opts ...http.CallOption) (*SecretDetailResponse, error) {
	var out SecretDetailResponse
	pattern := "/api/v1/secret/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSecretGetSecretDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SecretHTTPClientImpl) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...http.CallOption) (*CreateSecretResponse, error) {
	var out CreateSecretResponse
	pattern := "/api/v1/secret/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretCreateSecret))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *SecretHTTPClientImpl) UpdateSecret(ctx context.Context, in *UpdateSecretRequest, opts ...http.CallOption) (*UpdateSecretResponse, error) {
	var out UpdateSecretResponse
	pattern := "/api/v1/secret/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSecretUpdateSecret))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
