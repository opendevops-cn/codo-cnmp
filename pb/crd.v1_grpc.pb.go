// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/crd.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CRD_ListCRD_FullMethodName         = "/crd.v1.CRD/ListCRD"
	CRD_ListCRDInstance_FullMethodName = "/crd.v1.CRD/ListCRDInstance"
	CRD_DeleteCRD_FullMethodName       = "/crd.v1.CRD/DeleteCRD"
)

// CRDClient is the client API for CRD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRDClient interface {
	// 查看-云原生管理-CRD-列表
	ListCRD(ctx context.Context, in *ListCRDRequest, opts ...grpc.CallOption) (*ListCRDResponse, error)
	// 查看-云原生管理-CRD实例-列表
	ListCRDInstance(ctx context.Context, in *ListCRDInstanceRequest, opts ...grpc.CallOption) (*ListCRDInstanceResponse, error)
	// 管理-云原生管理-CRD-删除
	DeleteCRD(ctx context.Context, in *DeleteCRDRequest, opts ...grpc.CallOption) (*DeleteCRDResponse, error)
}

type cRDClient struct {
	cc grpc.ClientConnInterface
}

func NewCRDClient(cc grpc.ClientConnInterface) CRDClient {
	return &cRDClient{cc}
}

func (c *cRDClient) ListCRD(ctx context.Context, in *ListCRDRequest, opts ...grpc.CallOption) (*ListCRDResponse, error) {
	out := new(ListCRDResponse)
	err := c.cc.Invoke(ctx, CRD_ListCRD_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDClient) ListCRDInstance(ctx context.Context, in *ListCRDInstanceRequest, opts ...grpc.CallOption) (*ListCRDInstanceResponse, error) {
	out := new(ListCRDInstanceResponse)
	err := c.cc.Invoke(ctx, CRD_ListCRDInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDClient) DeleteCRD(ctx context.Context, in *DeleteCRDRequest, opts ...grpc.CallOption) (*DeleteCRDResponse, error) {
	out := new(DeleteCRDResponse)
	err := c.cc.Invoke(ctx, CRD_DeleteCRD_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRDServer is the server API for CRD service.
// All implementations must embed UnimplementedCRDServer
// for forward compatibility
type CRDServer interface {
	// 查看-云原生管理-CRD-列表
	ListCRD(context.Context, *ListCRDRequest) (*ListCRDResponse, error)
	// 查看-云原生管理-CRD实例-列表
	ListCRDInstance(context.Context, *ListCRDInstanceRequest) (*ListCRDInstanceResponse, error)
	// 管理-云原生管理-CRD-删除
	DeleteCRD(context.Context, *DeleteCRDRequest) (*DeleteCRDResponse, error)
	mustEmbedUnimplementedCRDServer()
}

// UnimplementedCRDServer must be embedded to have forward compatible implementations.
type UnimplementedCRDServer struct {
}

func (UnimplementedCRDServer) ListCRD(context.Context, *ListCRDRequest) (*ListCRDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCRD not implemented")
}
func (UnimplementedCRDServer) ListCRDInstance(context.Context, *ListCRDInstanceRequest) (*ListCRDInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCRDInstance not implemented")
}
func (UnimplementedCRDServer) DeleteCRD(context.Context, *DeleteCRDRequest) (*DeleteCRDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCRD not implemented")
}
func (UnimplementedCRDServer) mustEmbedUnimplementedCRDServer() {}

// UnsafeCRDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRDServer will
// result in compilation errors.
type UnsafeCRDServer interface {
	mustEmbedUnimplementedCRDServer()
}

func RegisterCRDServer(s grpc.ServiceRegistrar, srv CRDServer) {
	s.RegisterService(&CRD_ServiceDesc, srv)
}

func _CRD_ListCRD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCRDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRDServer).ListCRD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRD_ListCRD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRDServer).ListCRD(ctx, req.(*ListCRDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRD_ListCRDInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCRDInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRDServer).ListCRDInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRD_ListCRDInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRDServer).ListCRDInstance(ctx, req.(*ListCRDInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRD_DeleteCRD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCRDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRDServer).DeleteCRD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRD_DeleteCRD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRDServer).DeleteCRD(ctx, req.(*DeleteCRDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CRD_ServiceDesc is the grpc.ServiceDesc for CRD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crd.v1.CRD",
	HandlerType: (*CRDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCRD",
			Handler:    _CRD_ListCRD_Handler,
		},
		{
			MethodName: "ListCRDInstance",
			Handler:    _CRD_ListCRDInstance_Handler,
		},
		{
			MethodName: "DeleteCRD",
			Handler:    _CRD_DeleteCRD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/crd.v1.proto",
}
