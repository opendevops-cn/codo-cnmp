// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/pvc.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PersistentVolumeClaim_ListPersistentVolumeClaim_FullMethodName   = "/pvc.v1.PersistentVolumeClaim/ListPersistentVolumeClaim"
	PersistentVolumeClaim_DeletePersistentVolumeClaim_FullMethodName = "/pvc.v1.PersistentVolumeClaim/DeletePersistentVolumeClaim"
)

// PersistentVolumeClaimClient is the client API for PersistentVolumeClaim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersistentVolumeClaimClient interface {
	// 查看-云原生管理-PersistentVolumeClaim-列表
	ListPersistentVolumeClaim(ctx context.Context, in *ListPersistentVolumeClaimRequest, opts ...grpc.CallOption) (*ListPersistentVolumeClaimResponse, error)
	// 管理-云原生管理-PersistentVolumeClaim-删除
	DeletePersistentVolumeClaim(ctx context.Context, in *DeletePersistentVolumeClaimRequest, opts ...grpc.CallOption) (*DeletePersistentVolumeClaimResponse, error)
}

type persistentVolumeClaimClient struct {
	cc grpc.ClientConnInterface
}

func NewPersistentVolumeClaimClient(cc grpc.ClientConnInterface) PersistentVolumeClaimClient {
	return &persistentVolumeClaimClient{cc}
}

func (c *persistentVolumeClaimClient) ListPersistentVolumeClaim(ctx context.Context, in *ListPersistentVolumeClaimRequest, opts ...grpc.CallOption) (*ListPersistentVolumeClaimResponse, error) {
	out := new(ListPersistentVolumeClaimResponse)
	err := c.cc.Invoke(ctx, PersistentVolumeClaim_ListPersistentVolumeClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentVolumeClaimClient) DeletePersistentVolumeClaim(ctx context.Context, in *DeletePersistentVolumeClaimRequest, opts ...grpc.CallOption) (*DeletePersistentVolumeClaimResponse, error) {
	out := new(DeletePersistentVolumeClaimResponse)
	err := c.cc.Invoke(ctx, PersistentVolumeClaim_DeletePersistentVolumeClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersistentVolumeClaimServer is the server API for PersistentVolumeClaim service.
// All implementations must embed UnimplementedPersistentVolumeClaimServer
// for forward compatibility
type PersistentVolumeClaimServer interface {
	// 查看-云原生管理-PersistentVolumeClaim-列表
	ListPersistentVolumeClaim(context.Context, *ListPersistentVolumeClaimRequest) (*ListPersistentVolumeClaimResponse, error)
	// 管理-云原生管理-PersistentVolumeClaim-删除
	DeletePersistentVolumeClaim(context.Context, *DeletePersistentVolumeClaimRequest) (*DeletePersistentVolumeClaimResponse, error)
	mustEmbedUnimplementedPersistentVolumeClaimServer()
}

// UnimplementedPersistentVolumeClaimServer must be embedded to have forward compatible implementations.
type UnimplementedPersistentVolumeClaimServer struct {
}

func (UnimplementedPersistentVolumeClaimServer) ListPersistentVolumeClaim(context.Context, *ListPersistentVolumeClaimRequest) (*ListPersistentVolumeClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersistentVolumeClaim not implemented")
}
func (UnimplementedPersistentVolumeClaimServer) DeletePersistentVolumeClaim(context.Context, *DeletePersistentVolumeClaimRequest) (*DeletePersistentVolumeClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersistentVolumeClaim not implemented")
}
func (UnimplementedPersistentVolumeClaimServer) mustEmbedUnimplementedPersistentVolumeClaimServer() {}

// UnsafePersistentVolumeClaimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersistentVolumeClaimServer will
// result in compilation errors.
type UnsafePersistentVolumeClaimServer interface {
	mustEmbedUnimplementedPersistentVolumeClaimServer()
}

func RegisterPersistentVolumeClaimServer(s grpc.ServiceRegistrar, srv PersistentVolumeClaimServer) {
	s.RegisterService(&PersistentVolumeClaim_ServiceDesc, srv)
}

func _PersistentVolumeClaim_ListPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersistentVolumeClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimServer).ListPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistentVolumeClaim_ListPersistentVolumeClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimServer).ListPersistentVolumeClaim(ctx, req.(*ListPersistentVolumeClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentVolumeClaim_DeletePersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersistentVolumeClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentVolumeClaimServer).DeletePersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersistentVolumeClaim_DeletePersistentVolumeClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentVolumeClaimServer).DeletePersistentVolumeClaim(ctx, req.(*DeletePersistentVolumeClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersistentVolumeClaim_ServiceDesc is the grpc.ServiceDesc for PersistentVolumeClaim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersistentVolumeClaim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pvc.v1.PersistentVolumeClaim",
	HandlerType: (*PersistentVolumeClaimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPersistentVolumeClaim",
			Handler:    _PersistentVolumeClaim_ListPersistentVolumeClaim_Handler,
		},
		{
			MethodName: "DeletePersistentVolumeClaim",
			Handler:    _PersistentVolumeClaim_DeletePersistentVolumeClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pvc.v1.proto",
}
