// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/svc.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SvcType int32

const (
	// 未知
	SvcType_SVC_TYPE_UNSPECIFIED SvcType = 0
	// ClusterIP
	SvcType_ClusterIP SvcType = 1
	// NodePort
	SvcType_NodePort SvcType = 2
	// LoadBalancer
	SvcType_LoadBalancer SvcType = 3
	// ExternalName
	SvcType_ExternalName SvcType = 4
)

// Enum value maps for SvcType.
var (
	SvcType_name = map[int32]string{
		0: "SVC_TYPE_UNSPECIFIED",
		1: "ClusterIP",
		2: "NodePort",
		3: "LoadBalancer",
		4: "ExternalName",
	}
	SvcType_value = map[string]int32{
		"SVC_TYPE_UNSPECIFIED": 0,
		"ClusterIP":            1,
		"NodePort":             2,
		"LoadBalancer":         3,
		"ExternalName":         4,
	}
)

func (x SvcType) Enum() *SvcType {
	p := new(SvcType)
	*p = x
	return p
}

func (x SvcType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SvcType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_svc_v1_proto_enumTypes[0].Descriptor()
}

func (SvcType) Type() protoreflect.EnumType {
	return &file_pb_svc_v1_proto_enumTypes[0]
}

func (x SvcType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SvcType.Descriptor instead.
func (SvcType) EnumDescriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{0}
}

type SessionAffinity int32

const (
	// 未知
	SessionAffinity_SESSION_AFFINITY_UNSPECIFIED SessionAffinity = 0
	// None
	SessionAffinity_None SessionAffinity = 1
	// ClientIP
	SessionAffinity_ClientIP SessionAffinity = 2
)

// Enum value maps for SessionAffinity.
var (
	SessionAffinity_name = map[int32]string{
		0: "SESSION_AFFINITY_UNSPECIFIED",
		1: "None",
		2: "ClientIP",
	}
	SessionAffinity_value = map[string]int32{
		"SESSION_AFFINITY_UNSPECIFIED": 0,
		"None":                         1,
		"ClientIP":                     2,
	}
)

func (x SessionAffinity) Enum() *SessionAffinity {
	p := new(SessionAffinity)
	*p = x
	return p
}

func (x SessionAffinity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionAffinity) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_svc_v1_proto_enumTypes[1].Descriptor()
}

func (SessionAffinity) Type() protoreflect.EnumType {
	return &file_pb_svc_v1_proto_enumTypes[1]
}

func (x SessionAffinity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionAffinity.Descriptor instead.
func (SessionAffinity) EnumDescriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{1}
}

// Svc列表请求
type ListSvcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,7,opt,name=list_all,json=listAll,proto3" json:"list_all,optional"`
	// svcType
	SvcType SvcType `protobuf:"varint,8,opt,name=svc_type,json=svcType,proto3,enum=svc.v1.SvcType" json:"svc_type,optional"`
}

func (x *ListSvcRequest) Reset() {
	*x = ListSvcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSvcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSvcRequest) ProtoMessage() {}

func (x *ListSvcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSvcRequest.ProtoReflect.Descriptor instead.
func (*ListSvcRequest) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListSvcRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListSvcRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListSvcRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListSvcRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSvcRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSvcRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

func (x *ListSvcRequest) GetSvcType() SvcType {
	if x != nil {
		return x.SvcType
	}
	return SvcType_SVC_TYPE_UNSPECIFIED
}

type SvcReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源类型
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
}

func (x *SvcReference) Reset() {
	*x = SvcReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcReference) ProtoMessage() {}

func (x *SvcReference) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcReference.ProtoReflect.Descriptor instead.
func (*SvcReference) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{1}
}

func (x *SvcReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SvcReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,optional"`
	// 协议. Supports "TCP", "UDP", and "SCTP".
	Protocol *string `protobuf:"bytes,2,opt,name=protocol,proto3,oneof" json:"protocol,optional"`
	// application protocol for the port.
	AppProtocol *string `protobuf:"bytes,6,opt,name=appProtocol,proto3,oneof" json:"appProtocol,optional"`
	// 端口
	Port *int32 `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,optional"`
	// 目标端口
	TargetPort *string `protobuf:"bytes,4,opt,name=targetPort,proto3,oneof" json:"targetPort,optional"`
	// 节点端口
	NodePort *int32 `protobuf:"varint,5,opt,name=nodePort,proto3,oneof" json:"nodePort,optional"`
}

func (x *ServicePort) Reset() {
	*x = ServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePort) ProtoMessage() {}

func (x *ServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePort.ProtoReflect.Descriptor instead.
func (*ServicePort) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{2}
}

func (x *ServicePort) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServicePort) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *ServicePort) GetAppProtocol() string {
	if x != nil && x.AppProtocol != nil {
		return *x.AppProtocol
	}
	return ""
}

func (x *ServicePort) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *ServicePort) GetTargetPort() string {
	if x != nil && x.TargetPort != nil {
		return *x.TargetPort
	}
	return ""
}

func (x *ServicePort) GetNodePort() int32 {
	if x != nil && x.NodePort != nil {
		return *x.NodePort
	}
	return 0
}

// Svc列表项
type SvcItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// svc 类型
	SvcType SvcType `protobuf:"varint,3,opt,name=svc_type,json=svcType,proto3,enum=svc.v1.SvcType" json:"svc_type,optional"`
	// cluster ip
	ClusterIp string `protobuf:"bytes,4,opt,name=cluster_ip,json=clusterIp,proto3" json:"cluster_ip,optional"`
	// 端口
	Ports []*ServicePort `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,7,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
	// yaml
	Yaml string `protobuf:"bytes,8,opt,name=yaml,proto3" json:"yaml,optional"`
	// 关联pod数量
	RefCount uint32 `protobuf:"varint,9,opt,name=ref_count,json=refCount,proto3" json:"ref_count,optional"`
	// 引用资源
	Refs []*SvcReference `protobuf:"bytes,10,rep,name=refs,proto3" json:"refs,optional"`
	// vip
	Vip string `protobuf:"bytes,11,opt,name=vip,proto3" json:"vip,optional"`
	// 标签
	Labels map[string]string `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注解
	Annotations map[string]string `protobuf:"bytes,13,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 选择器
	Selector map[string]string `protobuf:"bytes,14,rep,name=selector,proto3" json:"selector,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 回话保持
	SessionAffinity SessionAffinity `protobuf:"varint,15,opt,name=session_affinity,json=sessionAffinity,proto3,enum=svc.v1.SessionAffinity" json:"session_affinity,optional"`
	// 更新时间
	UpdateTime uint64 `protobuf:"varint,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,optional"`
	// ExternalName
	ExternalName string `protobuf:"bytes,17,opt,name=external_name,json=externalName,proto3" json:"external_name,optional"`
	// Headless
	Headless bool `protobuf:"varint,18,opt,name=headless,proto3" json:"headless,optional"`
	// 回话保持时间
	SessionAffinitySeconds *uint32 `protobuf:"varint,19,opt,name=session_affinity_seconds,json=sessionAffinitySeconds,proto3,oneof" json:"session_affinity_seconds,optional"`
	// 是否发布未就绪地址
	PublishNotReadyAddresses *bool `protobuf:"varint,20,opt,name=publish_not_ready_addresses,json=publishNotReadyAddresses,proto3,oneof" json:"publish_not_ready_addresses,optional"`
	// 外部ip
	ExternalIps []string `protobuf:"bytes,21,rep,name=external_ips,json=externalIps,proto3" json:"external_ips,optional"`
}

func (x *SvcItem) Reset() {
	*x = SvcItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcItem) ProtoMessage() {}

func (x *SvcItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcItem.ProtoReflect.Descriptor instead.
func (*SvcItem) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{3}
}

func (x *SvcItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SvcItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SvcItem) GetSvcType() SvcType {
	if x != nil {
		return x.SvcType
	}
	return SvcType_SVC_TYPE_UNSPECIFIED
}

func (x *SvcItem) GetClusterIp() string {
	if x != nil {
		return x.ClusterIp
	}
	return ""
}

func (x *SvcItem) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *SvcItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SvcItem) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

func (x *SvcItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *SvcItem) GetRefCount() uint32 {
	if x != nil {
		return x.RefCount
	}
	return 0
}

func (x *SvcItem) GetRefs() []*SvcReference {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *SvcItem) GetVip() string {
	if x != nil {
		return x.Vip
	}
	return ""
}

func (x *SvcItem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SvcItem) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *SvcItem) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *SvcItem) GetSessionAffinity() SessionAffinity {
	if x != nil {
		return x.SessionAffinity
	}
	return SessionAffinity_SESSION_AFFINITY_UNSPECIFIED
}

func (x *SvcItem) GetUpdateTime() uint64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SvcItem) GetExternalName() string {
	if x != nil {
		return x.ExternalName
	}
	return ""
}

func (x *SvcItem) GetHeadless() bool {
	if x != nil {
		return x.Headless
	}
	return false
}

func (x *SvcItem) GetSessionAffinitySeconds() uint32 {
	if x != nil && x.SessionAffinitySeconds != nil {
		return *x.SessionAffinitySeconds
	}
	return 0
}

func (x *SvcItem) GetPublishNotReadyAddresses() bool {
	if x != nil && x.PublishNotReadyAddresses != nil {
		return *x.PublishNotReadyAddresses
	}
	return false
}

func (x *SvcItem) GetExternalIps() []string {
	if x != nil {
		return x.ExternalIps
	}
	return nil
}

// Svc列表响应
type ListSvcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 列表
	List []*SvcItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListSvcResponse) Reset() {
	*x = ListSvcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSvcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSvcResponse) ProtoMessage() {}

func (x *ListSvcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSvcResponse.ProtoReflect.Descriptor instead.
func (*ListSvcResponse) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{4}
}

func (x *ListSvcResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListSvcResponse) GetList() []*SvcItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 删除Svc请求
type DeleteSvcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *DeleteSvcRequest) Reset() {
	*x = DeleteSvcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSvcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSvcRequest) ProtoMessage() {}

func (x *DeleteSvcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSvcRequest.ProtoReflect.Descriptor instead.
func (*DeleteSvcRequest) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSvcRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteSvcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteSvcRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 删除Svc响应
type DeleteSvcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSvcResponse) Reset() {
	*x = DeleteSvcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSvcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSvcResponse) ProtoMessage() {}

func (x *DeleteSvcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSvcResponse.ProtoReflect.Descriptor instead.
func (*DeleteSvcResponse) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{6}
}

// 查看Svc详情请求
type SvcDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *SvcDetailRequest) Reset() {
	*x = SvcDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcDetailRequest) ProtoMessage() {}

func (x *SvcDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcDetailRequest.ProtoReflect.Descriptor instead.
func (*SvcDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{7}
}

func (x *SvcDetailRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SvcDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SvcDetailRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 查看Svc详情响应
type SvcDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础信息
	Detail *SvcItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *SvcDetailResponse) Reset() {
	*x = SvcDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcDetailResponse) ProtoMessage() {}

func (x *SvcDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcDetailResponse.ProtoReflect.Descriptor instead.
func (*SvcDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{8}
}

func (x *SvcDetailResponse) GetDetail() *SvcItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 创建Svc请求
type CreateSvcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,optional"`
	// svc 类型
	SvcType SvcType `protobuf:"varint,4,opt,name=svc_type,json=svcType,proto3,enum=svc.v1.SvcType" json:"svc_type,optional"`
	// 是否发布未就绪地址
	PublishNotReadyAddresses *bool `protobuf:"varint,5,opt,name=publish_not_ready_addresses,json=publishNotReadyAddresses,proto3,oneof" json:"publish_not_ready_addresses,optional"`
	// 端口映射
	Ports       []*ServicePort `protobuf:"bytes,6,rep,name=ports,proto3" json:"ports,optional"`
	ExternalIps []string       `protobuf:"bytes,7,rep,name=external_ips,json=externalIps,proto3" json:"external_ips,optional"`
	// 回话保持
	SessionAffinity *SessionAffinity `protobuf:"varint,8,opt,name=session_affinity,json=sessionAffinity,proto3,enum=svc.v1.SessionAffinity,oneof" json:"session_affinity,optional"`
	// 回话保持时间
	SessionAffinitySeconds *uint32 `protobuf:"varint,9,opt,name=session_affinity_seconds,json=sessionAffinitySeconds,proto3,oneof" json:"session_affinity_seconds,optional"`
	// labels
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// selector
	Selector map[string]string `protobuf:"bytes,11,rep,name=selector,proto3" json:"selector,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注解
	Annotations map[string]string `protobuf:"bytes,12,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 设置为Headless
	Headless     *bool   `protobuf:"varint,13,opt,name=headless,proto3,oneof" json:"headless,optional"`
	ExternalName *string `protobuf:"bytes,14,opt,name=external_name,json=externalName,proto3,oneof" json:"external_name,optional"`
}

func (x *CreateSvcRequest) Reset() {
	*x = CreateSvcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSvcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSvcRequest) ProtoMessage() {}

func (x *CreateSvcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSvcRequest.ProtoReflect.Descriptor instead.
func (*CreateSvcRequest) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{9}
}

func (x *CreateSvcRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateSvcRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateSvcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSvcRequest) GetSvcType() SvcType {
	if x != nil {
		return x.SvcType
	}
	return SvcType_SVC_TYPE_UNSPECIFIED
}

func (x *CreateSvcRequest) GetPublishNotReadyAddresses() bool {
	if x != nil && x.PublishNotReadyAddresses != nil {
		return *x.PublishNotReadyAddresses
	}
	return false
}

func (x *CreateSvcRequest) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *CreateSvcRequest) GetExternalIps() []string {
	if x != nil {
		return x.ExternalIps
	}
	return nil
}

func (x *CreateSvcRequest) GetSessionAffinity() SessionAffinity {
	if x != nil && x.SessionAffinity != nil {
		return *x.SessionAffinity
	}
	return SessionAffinity_SESSION_AFFINITY_UNSPECIFIED
}

func (x *CreateSvcRequest) GetSessionAffinitySeconds() uint32 {
	if x != nil && x.SessionAffinitySeconds != nil {
		return *x.SessionAffinitySeconds
	}
	return 0
}

func (x *CreateSvcRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateSvcRequest) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *CreateSvcRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateSvcRequest) GetHeadless() bool {
	if x != nil && x.Headless != nil {
		return *x.Headless
	}
	return false
}

func (x *CreateSvcRequest) GetExternalName() string {
	if x != nil && x.ExternalName != nil {
		return *x.ExternalName
	}
	return ""
}

// 创建Svc响应
type CreateSvcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSvcResponse) Reset() {
	*x = CreateSvcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_svc_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSvcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSvcResponse) ProtoMessage() {}

func (x *CreateSvcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_svc_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSvcResponse.ProtoReflect.Descriptor instead.
func (*CreateSvcResponse) Descriptor() ([]byte, []int) {
	return file_pb_svc_v1_proto_rawDescGZIP(), []int{10}
}

var File_pb_svc_v1_proto protoreflect.FileDescriptor

var file_pb_svc_v1_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x62, 0x2f, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x02, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x73,
	0x76, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x0c,
	0x53, 0x76, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0xd3, 0x09, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x0a,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x76, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03, 0x76, 0x69, 0x70, 0x12, 0x38,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x76, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x76, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x76, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x65,
	0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x18, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x18, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x76, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x76,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x53, 0x76, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x41, 0x0a, 0x11, 0x53, 0x76, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x76, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd3, 0x08, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47,
	0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x18, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x73, 0x12,
	0x4c, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x13, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2a, 0x64, 0x0a, 0x07, 0x53, 0x76, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x56, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x04, 0x2a, 0x4b, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x50, 0x10, 0x02, 0x32, 0xb9, 0x06, 0x0a, 0x03, 0x53, 0x56, 0x43, 0x12, 0x59, 0x0a,
	0x07, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x63, 0x12, 0x16, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x76,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x76, 0x63, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xce, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x76, 0x63, 0x12, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0xc2, 0xdb,
	0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x64, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x09, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x73, 0x76, 0x63, 0x1a, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0f, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x0c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x76, 0x63, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x76, 0x63, 0x12, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0xc2,
	0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x64, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x09, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0x73, 0x76, 0x63, 0x1a, 0x17, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0f,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x76, 0x63, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x76, 0x63, 0x12, 0x18, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x76, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01,
	0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x64, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x09, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x73, 0x76, 0x63, 0x1a, 0x17,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a,
	0x0f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x76, 0x63, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x53, 0x76, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x76, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x76, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x76, 0x63, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f, 0x70,
	0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_svc_v1_proto_rawDescOnce sync.Once
	file_pb_svc_v1_proto_rawDescData = file_pb_svc_v1_proto_rawDesc
)

func file_pb_svc_v1_proto_rawDescGZIP() []byte {
	file_pb_svc_v1_proto_rawDescOnce.Do(func() {
		file_pb_svc_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_svc_v1_proto_rawDescData)
	})
	return file_pb_svc_v1_proto_rawDescData
}

var file_pb_svc_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_svc_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pb_svc_v1_proto_goTypes = []interface{}{
	(SvcType)(0),              // 0: svc.v1.SvcType
	(SessionAffinity)(0),      // 1: svc.v1.SessionAffinity
	(*ListSvcRequest)(nil),    // 2: svc.v1.ListSvcRequest
	(*SvcReference)(nil),      // 3: svc.v1.SvcReference
	(*ServicePort)(nil),       // 4: svc.v1.ServicePort
	(*SvcItem)(nil),           // 5: svc.v1.SvcItem
	(*ListSvcResponse)(nil),   // 6: svc.v1.ListSvcResponse
	(*DeleteSvcRequest)(nil),  // 7: svc.v1.DeleteSvcRequest
	(*DeleteSvcResponse)(nil), // 8: svc.v1.DeleteSvcResponse
	(*SvcDetailRequest)(nil),  // 9: svc.v1.SvcDetailRequest
	(*SvcDetailResponse)(nil), // 10: svc.v1.SvcDetailResponse
	(*CreateSvcRequest)(nil),  // 11: svc.v1.CreateSvcRequest
	(*CreateSvcResponse)(nil), // 12: svc.v1.CreateSvcResponse
	nil,                       // 13: svc.v1.SvcItem.LabelsEntry
	nil,                       // 14: svc.v1.SvcItem.AnnotationsEntry
	nil,                       // 15: svc.v1.SvcItem.SelectorEntry
	nil,                       // 16: svc.v1.CreateSvcRequest.LabelsEntry
	nil,                       // 17: svc.v1.CreateSvcRequest.SelectorEntry
	nil,                       // 18: svc.v1.CreateSvcRequest.AnnotationsEntry
}
var file_pb_svc_v1_proto_depIdxs = []int32{
	0,  // 0: svc.v1.ListSvcRequest.svc_type:type_name -> svc.v1.SvcType
	0,  // 1: svc.v1.SvcItem.svc_type:type_name -> svc.v1.SvcType
	4,  // 2: svc.v1.SvcItem.ports:type_name -> svc.v1.ServicePort
	3,  // 3: svc.v1.SvcItem.refs:type_name -> svc.v1.SvcReference
	13, // 4: svc.v1.SvcItem.labels:type_name -> svc.v1.SvcItem.LabelsEntry
	14, // 5: svc.v1.SvcItem.annotations:type_name -> svc.v1.SvcItem.AnnotationsEntry
	15, // 6: svc.v1.SvcItem.selector:type_name -> svc.v1.SvcItem.SelectorEntry
	1,  // 7: svc.v1.SvcItem.session_affinity:type_name -> svc.v1.SessionAffinity
	5,  // 8: svc.v1.ListSvcResponse.list:type_name -> svc.v1.SvcItem
	5,  // 9: svc.v1.SvcDetailResponse.detail:type_name -> svc.v1.SvcItem
	0,  // 10: svc.v1.CreateSvcRequest.svc_type:type_name -> svc.v1.SvcType
	4,  // 11: svc.v1.CreateSvcRequest.ports:type_name -> svc.v1.ServicePort
	1,  // 12: svc.v1.CreateSvcRequest.session_affinity:type_name -> svc.v1.SessionAffinity
	16, // 13: svc.v1.CreateSvcRequest.labels:type_name -> svc.v1.CreateSvcRequest.LabelsEntry
	17, // 14: svc.v1.CreateSvcRequest.selector:type_name -> svc.v1.CreateSvcRequest.SelectorEntry
	18, // 15: svc.v1.CreateSvcRequest.annotations:type_name -> svc.v1.CreateSvcRequest.AnnotationsEntry
	2,  // 16: svc.v1.SVC.ListSvc:input_type -> svc.v1.ListSvcRequest
	11, // 17: svc.v1.SVC.CreateSvc:input_type -> svc.v1.CreateSvcRequest
	11, // 18: svc.v1.SVC.UpdateSvc:input_type -> svc.v1.CreateSvcRequest
	7,  // 19: svc.v1.SVC.DeleteSvc:input_type -> svc.v1.DeleteSvcRequest
	9,  // 20: svc.v1.SVC.GetSvcDetail:input_type -> svc.v1.SvcDetailRequest
	6,  // 21: svc.v1.SVC.ListSvc:output_type -> svc.v1.ListSvcResponse
	12, // 22: svc.v1.SVC.CreateSvc:output_type -> svc.v1.CreateSvcResponse
	12, // 23: svc.v1.SVC.UpdateSvc:output_type -> svc.v1.CreateSvcResponse
	8,  // 24: svc.v1.SVC.DeleteSvc:output_type -> svc.v1.DeleteSvcResponse
	10, // 25: svc.v1.SVC.GetSvcDetail:output_type -> svc.v1.SvcDetailResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pb_svc_v1_proto_init() }
func file_pb_svc_v1_proto_init() {
	if File_pb_svc_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_svc_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSvcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSvcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSvcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSvcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSvcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_svc_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSvcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_svc_v1_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_pb_svc_v1_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_pb_svc_v1_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_svc_v1_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_svc_v1_proto_goTypes,
		DependencyIndexes: file_pb_svc_v1_proto_depIdxs,
		EnumInfos:         file_pb_svc_v1_proto_enumTypes,
		MessageInfos:      file_pb_svc_v1_proto_msgTypes,
	}.Build()
	File_pb_svc_v1_proto = out.File
	file_pb_svc_v1_proto_rawDesc = nil
	file_pb_svc_v1_proto_goTypes = nil
	file_pb_svc_v1_proto_depIdxs = nil
}
