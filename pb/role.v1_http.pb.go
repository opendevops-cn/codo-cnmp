// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/role.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationRoleServiceListRoles = "/role.RoleService/ListRoles"
const OperationRoleServiceGetRoleDetail = "/role.RoleService/GetRoleDetail"
const OperationRoleServiceDeleteRole = "/role.RoleService/DeleteRole"
const OperationRoleServiceUpdateRole = "/role.RoleService/UpdateRole"
const OperationRoleServiceCreateRole = "/role.RoleService/CreateRole"
const OperationRoleServiceListRoleBinding = "/role.RoleService/ListRoleBinding"
const OperationRoleServiceUpdateRoleBinding = "/role.RoleService/UpdateRoleBinding"

type RoleServiceHTTPServer interface {
	// ListRoles查看-云原生管理-角色-列表
	ListRoles(context.Context, *ListRoleRequest) (*ListRoleResponse, error)
	// GetRoleDetail查看-云原生管理-角色-详情
	GetRoleDetail(context.Context, *GetRoleDetailRequest) (*GetRoleDetailResponse, error)
	// DeleteRole管理-云原生管理-角色-删除
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// UpdateRole管理-云原生管理-角色-编辑
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// CreateRole管理-云原生管理-角色-新增
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// ListRoleBinding查看-云原生管理-角色绑定-列表
	ListRoleBinding(context.Context, *ListRoleBindingRequest) (*ListRoleBindingResponse, error)
	// UpdateRoleBinding管理-云原生管理-角色绑定-编辑
	UpdateRoleBinding(context.Context, *UpdateRoleBindingRequest) (*UpdateRoleBindingResponse, error)
}

func NewRoleServiceHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationRoleServiceListRoles).Build(),
		selector.Server().Path(OperationRoleServiceGetRoleDetail).Build(),
		selector.Server().Path(OperationRoleServiceDeleteRole).Build(),
		selector.Server().Path(OperationRoleServiceUpdateRole).Build(),
		selector.Server().Path(OperationRoleServiceCreateRole).Build(),
		selector.Server().Path(OperationRoleServiceListRoleBinding).Build(),
		selector.Server().Path(OperationRoleServiceUpdateRoleBinding).Build(),
	).Path(
		OperationRoleServiceListRoles,
		OperationRoleServiceGetRoleDetail,
		OperationRoleServiceDeleteRole,
		OperationRoleServiceUpdateRole,
		OperationRoleServiceCreateRole,
		OperationRoleServiceListRoleBinding,
		OperationRoleServiceUpdateRoleBinding,
	).Build()
}

func RegisterRoleServiceHTTPServer(s *http.Server, srv RoleServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/role/list", _RoleService_ListRoles0_HTTP_Handler(srv))
	r.GET("/api/v1/role/detail", _RoleService_GetRoleDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/role/delete", _RoleService_DeleteRole0_HTTP_Handler(srv))
	r.POST("/api/v1/role/update", _RoleService_UpdateRole0_HTTP_Handler(srv))
	r.POST("/api/v1/role/create", _RoleService_CreateRole0_HTTP_Handler(srv))
	r.GET("/api/v1/role/binding/list", _RoleService_ListRoleBinding0_HTTP_Handler(srv))
	r.POST("/api/v1/role/binding/update", _RoleService_UpdateRoleBinding0_HTTP_Handler(srv))
}

func GenerateRoleServiceHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 7)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/role/list",
		Comment: "查看-云原生管理-角色-列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/role/detail",
		Comment: "查看-云原生管理-角色-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/role/delete",
		Comment: "管理-云原生管理-角色-删除",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/role/update",
		Comment: "管理-云原生管理-角色-编辑",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/role/create",
		Comment: "管理-云原生管理-角色-新增",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/role/binding/list",
		Comment: "查看-云原生管理-角色绑定-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/role/binding/update",
		Comment: "管理-云原生管理-角色绑定-编辑",
	})
	return routes
}

func _RoleService_ListRoles0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceListRoles)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoles(ctx, req.(*ListRoleRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_GetRoleDetail0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetRoleDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceGetRoleDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleDetail(ctx, req.(*GetRoleDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_DeleteRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceDeleteRole)
		auditRule := audit.NewAudit(
			"角色管理",
			"删除角色",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "角色",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "id",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_UpdateRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceUpdateRole)
		auditRule := audit.NewAudit(
			"角色管理",
			"编辑角色",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "角色",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_CreateRole0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceCreateRole)
		auditRule := audit.NewAudit(
			"角色管理",
			"新增角色",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "role",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "id",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_ListRoleBinding0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListRoleBindingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceListRoleBinding)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleBinding(ctx, req.(*ListRoleBindingRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleBindingResponse)
		return ctx.Result(200, reply)
	}
}

func _RoleService_UpdateRoleBinding0_HTTP_Handler(srv RoleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateRoleBindingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRoleServiceUpdateRoleBinding)
		auditRule := audit.NewAudit(
			"角色管理",
			"编辑角色",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "role",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "role_id",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoleBinding(ctx, req.(*UpdateRoleBindingRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleBindingResponse)
		return ctx.Result(200, reply)
	}
}

type RoleServiceHTTPClient interface {
	ListRoles(ctx context.Context, req *ListRoleRequest, opts ...http.CallOption) (rsp *ListRoleResponse, err error)
	GetRoleDetail(ctx context.Context, req *GetRoleDetailRequest, opts ...http.CallOption) (rsp *GetRoleDetailResponse, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *DeleteRoleResponse, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleRequest, opts ...http.CallOption) (rsp *UpdateRoleResponse, err error)
	CreateRole(ctx context.Context, req *CreateRoleRequest, opts ...http.CallOption) (rsp *CreateRoleResponse, err error)
	ListRoleBinding(ctx context.Context, req *ListRoleBindingRequest, opts ...http.CallOption) (rsp *ListRoleBindingResponse, err error)
	UpdateRoleBinding(ctx context.Context, req *UpdateRoleBindingRequest, opts ...http.CallOption) (rsp *UpdateRoleBindingResponse, err error)
}

type RoleServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewRoleServiceHTTPClient(client *http.Client) RoleServiceHTTPClient {
	return &RoleServiceHTTPClientImpl{client}
}

func (c *RoleServiceHTTPClientImpl) ListRoles(ctx context.Context, in *ListRoleRequest, opts ...http.CallOption) (*ListRoleResponse, error) {
	var out ListRoleResponse
	pattern := "/api/v1/role/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceListRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleServiceHTTPClientImpl) GetRoleDetail(ctx context.Context, in *GetRoleDetailRequest, opts ...http.CallOption) (*GetRoleDetailResponse, error) {
	var out GetRoleDetailResponse
	pattern := "/api/v1/role/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceGetRoleDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleServiceHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*DeleteRoleResponse, error) {
	var out DeleteRoleResponse
	pattern := "/api/v1/role/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleServiceHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...http.CallOption) (*UpdateRoleResponse, error) {
	var out UpdateRoleResponse
	pattern := "/api/v1/role/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleServiceHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...http.CallOption) (*CreateRoleResponse, error) {
	var out CreateRoleResponse
	pattern := "/api/v1/role/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleServiceHTTPClientImpl) ListRoleBinding(ctx context.Context, in *ListRoleBindingRequest, opts ...http.CallOption) (*ListRoleBindingResponse, error) {
	var out ListRoleBindingResponse
	pattern := "/api/v1/role/binding/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRoleServiceListRoleBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RoleServiceHTTPClientImpl) UpdateRoleBinding(ctx context.Context, in *UpdateRoleBindingRequest, opts ...http.CallOption) (*UpdateRoleBindingResponse, error) {
	var out UpdateRoleBindingResponse
	pattern := "/api/v1/role/binding/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRoleServiceUpdateRoleBinding))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
