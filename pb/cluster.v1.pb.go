// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/cluster.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImportType int32

const (
	// 未指定
	ImportType_UnSpecified ImportType = 0
	// token导入
	ImportType_Token ImportType = 1
	// kubeConfig导入
	ImportType_KubeConfig ImportType = 2
)

// Enum value maps for ImportType.
var (
	ImportType_name = map[int32]string{
		0: "UnSpecified",
		1: "Token",
		2: "KubeConfig",
	}
	ImportType_value = map[string]int32{
		"UnSpecified": 0,
		"Token":       1,
		"KubeConfig":  2,
	}
)

func (x ImportType) Enum() *ImportType {
	p := new(ImportType)
	*p = x
	return p
}

func (x ImportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_cluster_v1_proto_enumTypes[0].Descriptor()
}

func (ImportType) Type() protoreflect.EnumType {
	return &file_pb_cluster_v1_proto_enumTypes[0]
}

func (x ImportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportType.Descriptor instead.
func (ImportType) EnumDescriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{0}
}

type ConnectType int32

const (
	// 未指定
	ConnectType_UnSpecifiedConnectType ConnectType = 0
	// 直连
	ConnectType_Direct ConnectType = 1
	// 组网
	ConnectType_Mesh ConnectType = 2
)

// Enum value maps for ConnectType.
var (
	ConnectType_name = map[int32]string{
		0: "UnSpecifiedConnectType",
		1: "Direct",
		2: "Mesh",
	}
	ConnectType_value = map[string]int32{
		"UnSpecifiedConnectType": 0,
		"Direct":                 1,
		"Mesh":                   2,
	}
)

func (x ConnectType) Enum() *ConnectType {
	p := new(ConnectType)
	*p = x
	return p
}

func (x ConnectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_cluster_v1_proto_enumTypes[1].Descriptor()
}

func (ConnectType) Type() protoreflect.EnumType {
	return &file_pb_cluster_v1_proto_enumTypes[1]
}

func (x ConnectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectType.Descriptor instead.
func (ConnectType) EnumDescriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{1}
}

// 集群状态
type NodeState int32

const (
	// 运行中
	NodeState_NodeReady NodeState = 0
	// 异常
	NodeState_NodeError NodeState = 1
)

// Enum value maps for NodeState.
var (
	NodeState_name = map[int32]string{
		0: "NodeReady",
		1: "NodeError",
	}
	NodeState_value = map[string]int32{
		"NodeReady": 0,
		"NodeError": 1,
	}
)

func (x NodeState) Enum() *NodeState {
	p := new(NodeState)
	*p = x
	return p
}

func (x NodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_cluster_v1_proto_enumTypes[2].Descriptor()
}

func (NodeState) Type() protoreflect.EnumType {
	return &file_pb_cluster_v1_proto_enumTypes[2]
}

func (x NodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeState.Descriptor instead.
func (NodeState) EnumDescriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{2}
}

type ClusterState int32

const (
	// 运行中
	ClusterState_ClusterReady ClusterState = 0
	// 异常
	ClusterState_ClusterError ClusterState = 1
	// 离线
	ClusterState_ClusterOffline ClusterState = 2
)

// Enum value maps for ClusterState.
var (
	ClusterState_name = map[int32]string{
		0: "ClusterReady",
		1: "ClusterError",
		2: "ClusterOffline",
	}
	ClusterState_value = map[string]int32{
		"ClusterReady":   0,
		"ClusterError":   1,
		"ClusterOffline": 2,
	}
)

func (x ClusterState) Enum() *ClusterState {
	p := new(ClusterState)
	*p = x
	return p
}

func (x ClusterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_cluster_v1_proto_enumTypes[3].Descriptor()
}

func (ClusterState) Type() protoreflect.EnumType {
	return &file_pb_cluster_v1_proto_enumTypes[3]
}

func (x ClusterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterState.Descriptor instead.
func (ClusterState) EnumDescriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{3}
}

// 集群健康检查状态
type HealthState int32

const (
	// 健康（所有节点ready、API server可用、scheduler可用、controller manager可用、etcd可用）
	HealthState_Healthy HealthState = 0
	// 异常 内存使用量过80%（所有节点）
	HealthState_MemoryUsageHigh HealthState = 1
	// 离线 （API server不可用）
	HealthState_APIServerUnHealthy HealthState = 2
	// 异常 Cpu使用量过80%（所有节点）
	HealthState_CpuUsageHigh HealthState = 3
	// 异常 磁盘使用量过80%（所有节点）
	HealthState_DiskUsageHigh HealthState = 4
	// 异常 网路IO过高（所有节点）
	HealthState_NetworkIOHigh HealthState = 5
	// 异常 节点状态异常（非ready）
	HealthState_NodeNotReady HealthState = 6
	// 异常 调度器异常（非healthy)
	HealthState_SchedulerUnhealthy HealthState = 7
	// 异常 控制器管理器异常（非healthy)
	HealthState_ControllerManagerUnhealthy HealthState = 8
	// 异常 存储异常（非healthy)
	HealthState_EtcdUnhealthy HealthState = 9
)

// Enum value maps for HealthState.
var (
	HealthState_name = map[int32]string{
		0: "Healthy",
		1: "MemoryUsageHigh",
		2: "APIServerUnHealthy",
		3: "CpuUsageHigh",
		4: "DiskUsageHigh",
		5: "NetworkIOHigh",
		6: "NodeNotReady",
		7: "SchedulerUnhealthy",
		8: "ControllerManagerUnhealthy",
		9: "EtcdUnhealthy",
	}
	HealthState_value = map[string]int32{
		"Healthy":                    0,
		"MemoryUsageHigh":            1,
		"APIServerUnHealthy":         2,
		"CpuUsageHigh":               3,
		"DiskUsageHigh":              4,
		"NetworkIOHigh":              5,
		"NodeNotReady":               6,
		"SchedulerUnhealthy":         7,
		"ControllerManagerUnhealthy": 8,
		"EtcdUnhealthy":              9,
	}
)

func (x HealthState) Enum() *HealthState {
	p := new(HealthState)
	*p = x
	return p
}

func (x HealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_cluster_v1_proto_enumTypes[4].Descriptor()
}

func (HealthState) Type() protoreflect.EnumType {
	return &file_pb_cluster_v1_proto_enumTypes[4]
}

func (x HealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthState.Descriptor instead.
func (HealthState) EnumDescriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{4}
}

type ImportDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kubeConfig详情
	KubeConfig string `protobuf:"bytes,1,opt,name=kube_config,proto3" json:"kube_config,optional"`
	// token详情
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,optional"`
	// apiServer地址
	ApiServer string `protobuf:"bytes,3,opt,name=api_server,proto3" json:"api_server,optional"`
	// ca证书数据
	CaData string `protobuf:"bytes,4,opt,name=ca_data,proto3" json:"ca_data,optional"`
	// context名称
	Context string `protobuf:"bytes,5,opt,name=context,proto3" json:"context,optional"`
	// agent名称
	Agent string `protobuf:"bytes,6,opt,name=agent,proto3" json:"agent,optional"`
	// agent镜像
	AgentImage string `protobuf:"bytes,7,opt,name=agent_image,proto3" json:"agent_image,optional"`
	// agent proxy地址
	AgentProxy string `protobuf:"bytes,8,opt,name=agent_proxy,proto3" json:"agent_proxy,optional"`
}

func (x *ImportDetail) Reset() {
	*x = ImportDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDetail) ProtoMessage() {}

func (x *ImportDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDetail.ProtoReflect.Descriptor instead.
func (*ImportDetail) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ImportDetail) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *ImportDetail) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ImportDetail) GetApiServer() string {
	if x != nil {
		return x.ApiServer
	}
	return ""
}

func (x *ImportDetail) GetCaData() string {
	if x != nil {
		return x.CaData
	}
	return ""
}

func (x *ImportDetail) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ImportDetail) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *ImportDetail) GetAgentImage() string {
	if x != nil {
		return x.AgentImage
	}
	return ""
}

func (x *ImportDetail) GetAgentProxy() string {
	if x != nil {
		return x.AgentProxy
	}
	return ""
}

// 导入集群请求
type ImportClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 集群描述
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,optional"`
	// 导入类型
	ImportType ImportType `protobuf:"varint,3,opt,name=import_type,proto3,enum=cluster.ImportType" json:"import_type,optional"`
	// 导入详情
	ImportDetail *ImportDetail `protobuf:"bytes,4,opt,name=import_detail,proto3" json:"import_detail,optional"`
	// IDIP地址
	Idip string `protobuf:"bytes,5,opt,name=idip,proto3" json:"idip,optional"`
	// appId
	AppId     string `protobuf:"bytes,6,opt,name=app_id,proto3" json:"app_id,optional"`
	AppSecret string `protobuf:"bytes,7,opt,name=app_secret,proto3" json:"app_secret,optional"`
	// 运维人员
	Ops []string `protobuf:"bytes,8,rep,name=ops,proto3" json:"ops,optional"`
	// 连接类型
	ConnectType ConnectType `protobuf:"varint,9,opt,name=connect_type,json=connectType,proto3,enum=cluster.ConnectType" json:"connect_type,optional"`
	// dest agent 的id 字段
	DstAgentId uint32 `protobuf:"varint,10,opt,name=dst_agent_id,proto3" json:"dst_agent_id,optional"`
	// links
	Links []*Link `protobuf:"bytes,11,rep,name=links,proto3" json:"links,optional"`
}

func (x *ImportClusterRequest) Reset() {
	*x = ImportClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportClusterRequest) ProtoMessage() {}

func (x *ImportClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportClusterRequest.ProtoReflect.Descriptor instead.
func (*ImportClusterRequest) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{1}
}

func (x *ImportClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImportClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ImportClusterRequest) GetImportType() ImportType {
	if x != nil {
		return x.ImportType
	}
	return ImportType_UnSpecified
}

func (x *ImportClusterRequest) GetImportDetail() *ImportDetail {
	if x != nil {
		return x.ImportDetail
	}
	return nil
}

func (x *ImportClusterRequest) GetIdip() string {
	if x != nil {
		return x.Idip
	}
	return ""
}

func (x *ImportClusterRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ImportClusterRequest) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *ImportClusterRequest) GetOps() []string {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *ImportClusterRequest) GetConnectType() ConnectType {
	if x != nil {
		return x.ConnectType
	}
	return ConnectType_UnSpecifiedConnectType
}

func (x *ImportClusterRequest) GetDstAgentId() uint32 {
	if x != nil {
		return x.DstAgentId
	}
	return 0
}

func (x *ImportClusterRequest) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// 导入集群响应
type ImportClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,optional"`
}

func (x *ImportClusterResponse) Reset() {
	*x = ImportClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportClusterResponse) ProtoMessage() {}

func (x *ImportClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportClusterResponse.ProtoReflect.Descriptor instead.
func (*ImportClusterResponse) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{2}
}

func (x *ImportClusterResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 查询集群请求
type ListClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 查询关键字
	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 是否查询所有
	ListAll uint32 `protobuf:"varint,4,opt,name=list_all,json=listAll,proto3" json:"list_all,optional"`
	// 是否权限过滤
	AuthFilter *uint32 `protobuf:"varint,5,opt,name=auth_filter,json=authFilter,proto3,oneof" json:"auth_filter,optional"`
}

func (x *ListClusterRequest) Reset() {
	*x = ListClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterRequest) ProtoMessage() {}

func (x *ListClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterRequest.ProtoReflect.Descriptor instead.
func (*ListClusterRequest) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{3}
}

func (x *ListClusterRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListClusterRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListClusterRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

func (x *ListClusterRequest) GetAuthFilter() uint32 {
	if x != nil && x.AuthFilter != nil {
		return *x.AuthFilter
	}
	return 0
}

// 查询集群响应
type ListClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 集群信息列表
	List []*ClusterItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListClusterResponse) Reset() {
	*x = ListClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterResponse) ProtoMessage() {}

func (x *ListClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterResponse.ProtoReflect.Descriptor instead.
func (*ListClusterResponse) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{4}
}

func (x *ListClusterResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListClusterResponse) GetList() []*ClusterItem {
	if x != nil {
		return x.List
	}
	return nil
}

type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 链接名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 链接地址
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,optional"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{5}
}

func (x *Link) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Link) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 集群信息
type ClusterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 集群描述
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,optional"`
	// 集群状态
	ClusterState ClusterState `protobuf:"varint,3,opt,name=cluster_state,proto3,enum=cluster.ClusterState" json:"cluster_state,optional"`
	// 集群健康状态
	HealthState []HealthState `protobuf:"varint,4,rep,packed,name=health_state,proto3,enum=cluster.HealthState" json:"health_state,optional"`
	// 构建日期
	BuildDate uint64 `protobuf:"varint,5,opt,name=build_date,proto3" json:"build_date,optional"`
	// 节点数量
	NodeCount uint32 `protobuf:"varint,6,opt,name=node_count,proto3" json:"node_count,optional"`
	// CPU使用量
	CpuUsage float32 `protobuf:"fixed32,7,opt,name=cpu_usage,proto3" json:"cpu_usage,optional"`
	// 内存使用量
	MemoryUsage float32 `protobuf:"fixed32,8,opt,name=memory_usage,proto3" json:"memory_usage,optional"`
	// 集群ID
	Id uint32 `protobuf:"varint,9,opt,name=id,proto3" json:"id,optional"`
	// 导入类型
	ImportType ImportType `protobuf:"varint,10,opt,name=import_type,proto3,enum=cluster.ImportType" json:"import_type,optional"`
	// 版本
	ServerVersion string `protobuf:"bytes,11,opt,name=server_version,proto3" json:"server_version,optional"`
	// CPU总数
	CpuTotal float32 `protobuf:"fixed32,12,opt,name=cpu_total,proto3" json:"cpu_total,optional"`
	// 内存总数
	MemoryTotal float32 `protobuf:"fixed32,13,opt,name=memory_total,proto3" json:"memory_total,optional"`
	// UID
	Uid string `protobuf:"bytes,14,opt,name=uid,proto3" json:"uid,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,15,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
	// idiP地址
	Idip string `protobuf:"bytes,16,opt,name=idip,proto3" json:"idip,optional"`
	// appId
	AppId string `protobuf:"bytes,17,opt,name=app_id,proto3" json:"app_id,optional"`
	// appSecret
	AppSecret string `protobuf:"bytes,18,opt,name=app_secret,proto3" json:"app_secret,optional"`
	// 运维人员
	Ops []string `protobuf:"bytes,19,rep,name=ops,proto3" json:"ops,optional"`
	// 连接类型
	ConnectType ConnectType `protobuf:"varint,20,opt,name=connect_type,json=connectType,proto3,enum=cluster.ConnectType" json:"connect_type,optional"`
	// dest agent 的id 字段
	DstAgentId uint32  `protobuf:"varint,21,opt,name=dst_agent_id,proto3" json:"dst_agent_id,optional"`
	Links      []*Link `protobuf:"bytes,22,rep,name=links,proto3" json:"links,optional"`
	// 导入详情
	ImportDetail *ImportDetail `protobuf:"bytes,23,opt,name=import_detail,proto3" json:"import_detail,optional"`
}

func (x *ClusterItem) Reset() {
	*x = ClusterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterItem) ProtoMessage() {}

func (x *ClusterItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterItem.ProtoReflect.Descriptor instead.
func (*ClusterItem) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{6}
}

func (x *ClusterItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClusterItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ClusterItem) GetClusterState() ClusterState {
	if x != nil {
		return x.ClusterState
	}
	return ClusterState_ClusterReady
}

func (x *ClusterItem) GetHealthState() []HealthState {
	if x != nil {
		return x.HealthState
	}
	return nil
}

func (x *ClusterItem) GetBuildDate() uint64 {
	if x != nil {
		return x.BuildDate
	}
	return 0
}

func (x *ClusterItem) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *ClusterItem) GetCpuUsage() float32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *ClusterItem) GetMemoryUsage() float32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *ClusterItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClusterItem) GetImportType() ImportType {
	if x != nil {
		return x.ImportType
	}
	return ImportType_UnSpecified
}

func (x *ClusterItem) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *ClusterItem) GetCpuTotal() float32 {
	if x != nil {
		return x.CpuTotal
	}
	return 0
}

func (x *ClusterItem) GetMemoryTotal() float32 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *ClusterItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ClusterItem) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

func (x *ClusterItem) GetIdip() string {
	if x != nil {
		return x.Idip
	}
	return ""
}

func (x *ClusterItem) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ClusterItem) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *ClusterItem) GetOps() []string {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *ClusterItem) GetConnectType() ConnectType {
	if x != nil {
		return x.ConnectType
	}
	return ConnectType_UnSpecifiedConnectType
}

func (x *ClusterItem) GetDstAgentId() uint32 {
	if x != nil {
		return x.DstAgentId
	}
	return 0
}

func (x *ClusterItem) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ClusterItem) GetImportDetail() *ImportDetail {
	if x != nil {
		return x.ImportDetail
	}
	return nil
}

type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,optional"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteClusterRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{8}
}

type ClusterOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClusterOverviewRequest) Reset() {
	*x = ClusterOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOverviewRequest) ProtoMessage() {}

func (x *ClusterOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterOverviewRequest.ProtoReflect.Descriptor instead.
func (*ClusterOverviewRequest) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{9}
}

type ClusterOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 运行中总数
	RunningTotal uint32 `protobuf:"varint,2,opt,name=running_total,json=runningTotal,proto3" json:"running_total,optional"`
	// 异常总数
	ErrorTotal uint32 `protobuf:"varint,3,opt,name=error_total,json=errorTotal,proto3" json:"error_total,optional"`
	// 离线总数
	OfflineTotal uint32 `protobuf:"varint,4,opt,name=offline_total,json=offlineTotal,proto3" json:"offline_total,optional"`
}

func (x *ClusterOverview) Reset() {
	*x = ClusterOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOverview) ProtoMessage() {}

func (x *ClusterOverview) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterOverview.ProtoReflect.Descriptor instead.
func (*ClusterOverview) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{10}
}

func (x *ClusterOverview) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ClusterOverview) GetRunningTotal() uint32 {
	if x != nil {
		return x.RunningTotal
	}
	return 0
}

func (x *ClusterOverview) GetErrorTotal() uint32 {
	if x != nil {
		return x.ErrorTotal
	}
	return 0
}

func (x *ClusterOverview) GetOfflineTotal() uint32 {
	if x != nil {
		return x.OfflineTotal
	}
	return 0
}

type NodeOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 节点总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 运行中总数
	RunningTotal uint32 `protobuf:"varint,2,opt,name=running_total,json=runningTotal,proto3" json:"running_total,optional"`
	// 异常总数
	ErrorTotal uint32 `protobuf:"varint,3,opt,name=error_total,json=errorTotal,proto3" json:"error_total,optional"`
}

func (x *NodeOverview) Reset() {
	*x = NodeOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeOverview) ProtoMessage() {}

func (x *NodeOverview) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeOverview.ProtoReflect.Descriptor instead.
func (*NodeOverview) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{11}
}

func (x *NodeOverview) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NodeOverview) GetRunningTotal() uint32 {
	if x != nil {
		return x.RunningTotal
	}
	return 0
}

func (x *NodeOverview) GetErrorTotal() uint32 {
	if x != nil {
		return x.ErrorTotal
	}
	return 0
}

type CpuOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU总数
	Total float32 `protobuf:"fixed32,1,opt,name=total,proto3" json:"total,optional"`
	// 未分配
	UnallocatedTotal float32 `protobuf:"fixed32,2,opt,name=unallocated_total,json=unallocatedTotal,proto3" json:"unallocated_total,optional"`
	// 已分配
	AllocatedTotal float32 `protobuf:"fixed32,3,opt,name=allocated_total,json=allocatedTotal,proto3" json:"allocated_total,optional"`
}

func (x *CpuOverview) Reset() {
	*x = CpuOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuOverview) ProtoMessage() {}

func (x *CpuOverview) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuOverview.ProtoReflect.Descriptor instead.
func (*CpuOverview) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{12}
}

func (x *CpuOverview) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CpuOverview) GetUnallocatedTotal() float32 {
	if x != nil {
		return x.UnallocatedTotal
	}
	return 0
}

func (x *CpuOverview) GetAllocatedTotal() float32 {
	if x != nil {
		return x.AllocatedTotal
	}
	return 0
}

type MemoryOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 内存总数
	Total float32 `protobuf:"fixed32,1,opt,name=total,proto3" json:"total,optional"`
	// 未分配
	UnallocatedTotal float32 `protobuf:"fixed32,2,opt,name=unallocated_total,json=unallocatedTotal,proto3" json:"unallocated_total,optional"`
	// 已分配
	AllocatedTotal float32 `protobuf:"fixed32,3,opt,name=allocated_total,json=allocatedTotal,proto3" json:"allocated_total,optional"`
}

func (x *MemoryOverview) Reset() {
	*x = MemoryOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryOverview) ProtoMessage() {}

func (x *MemoryOverview) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryOverview.ProtoReflect.Descriptor instead.
func (*MemoryOverview) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{13}
}

func (x *MemoryOverview) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryOverview) GetUnallocatedTotal() float32 {
	if x != nil {
		return x.UnallocatedTotal
	}
	return 0
}

func (x *MemoryOverview) GetAllocatedTotal() float32 {
	if x != nil {
		return x.AllocatedTotal
	}
	return 0
}

type OverView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群总数
	Cluster *ClusterOverview `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,optional"`
	// 节点总数
	Node *NodeOverview `protobuf:"bytes,2,opt,name=node,proto3" json:"node,optional"`
	// CPU总数
	Cpu *CpuOverview `protobuf:"bytes,3,opt,name=cpu,proto3" json:"cpu,optional"`
	// 内存总数
	Memory *MemoryOverview `protobuf:"bytes,4,opt,name=memory,proto3" json:"memory,optional"`
}

func (x *OverView) Reset() {
	*x = OverView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverView) ProtoMessage() {}

func (x *OverView) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverView.ProtoReflect.Descriptor instead.
func (*OverView) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{14}
}

func (x *OverView) GetCluster() *ClusterOverview {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *OverView) GetNode() *NodeOverview {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *OverView) GetCpu() *CpuOverview {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *OverView) GetMemory() *MemoryOverview {
	if x != nil {
		return x.Memory
	}
	return nil
}

type ErrorClusterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 异常集群
	List []*ClusterItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,optional"`
}

func (x *ErrorClusterItem) Reset() {
	*x = ErrorClusterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorClusterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorClusterItem) ProtoMessage() {}

func (x *ErrorClusterItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorClusterItem.ProtoReflect.Descriptor instead.
func (*ErrorClusterItem) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{15}
}

func (x *ErrorClusterItem) GetList() []*ClusterItem {
	if x != nil {
		return x.List
	}
	return nil
}

type FollowClusterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 我的关注
	List []*ClusterItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,optional"`
}

func (x *FollowClusterItem) Reset() {
	*x = FollowClusterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowClusterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowClusterItem) ProtoMessage() {}

func (x *FollowClusterItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowClusterItem.ProtoReflect.Descriptor instead.
func (*FollowClusterItem) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{16}
}

func (x *FollowClusterItem) GetList() []*ClusterItem {
	if x != nil {
		return x.List
	}
	return nil
}

type ClusterOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资源概览
	Overview *OverView `protobuf:"bytes,1,opt,name=overview,proto3" json:"overview,optional"`
	// 我的关注
	Follow *FollowClusterItem `protobuf:"bytes,2,opt,name=follow,proto3" json:"follow,optional"`
	// 异常集群
	Error *ErrorClusterItem `protobuf:"bytes,3,opt,name=error,proto3" json:"error,optional"`
}

func (x *ClusterOverviewResponse) Reset() {
	*x = ClusterOverviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterOverviewResponse) ProtoMessage() {}

func (x *ClusterOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterOverviewResponse.ProtoReflect.Descriptor instead.
func (*ClusterOverviewResponse) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{17}
}

func (x *ClusterOverviewResponse) GetOverview() *OverView {
	if x != nil {
		return x.Overview
	}
	return nil
}

func (x *ClusterOverviewResponse) GetFollow() *FollowClusterItem {
	if x != nil {
		return x.Follow
	}
	return nil
}

func (x *ClusterOverviewResponse) GetError() *ErrorClusterItem {
	if x != nil {
		return x.Error
	}
	return nil
}

type UpdateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,optional"`
	// 集群名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 集群描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,optional"`
	// idip地址
	Idip string `protobuf:"bytes,4,opt,name=idip,proto3" json:"idip,optional"`
	// appId
	AppId     string `protobuf:"bytes,5,opt,name=app_id,proto3" json:"app_id,optional"`
	AppSecret string `protobuf:"bytes,6,opt,name=app_secret,proto3" json:"app_secret,optional"`
	// 运维人员
	Ops []string `protobuf:"bytes,7,rep,name=ops,proto3" json:"ops,optional"`
	// 连接类型
	ConnectType ConnectType `protobuf:"varint,8,opt,name=connect_type,json=connectType,proto3,enum=cluster.ConnectType" json:"connect_type,optional"`
	// dest agent 的id 字段
	DstAgentId uint32 `protobuf:"varint,9,opt,name=dst_agent_id,proto3" json:"dst_agent_id,optional"`
	// links
	Links []*Link `protobuf:"bytes,10,rep,name=links,proto3" json:"links,optional"`
	// importDetail
	ImportDetail *ImportDetail `protobuf:"bytes,11,opt,name=import_detail,proto3" json:"import_detail,optional"`
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateClusterRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetIdip() string {
	if x != nil {
		return x.Idip
	}
	return ""
}

func (x *UpdateClusterRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *UpdateClusterRequest) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *UpdateClusterRequest) GetOps() []string {
	if x != nil {
		return x.Ops
	}
	return nil
}

func (x *UpdateClusterRequest) GetConnectType() ConnectType {
	if x != nil {
		return x.ConnectType
	}
	return ConnectType_UnSpecifiedConnectType
}

func (x *UpdateClusterRequest) GetDstAgentId() uint32 {
	if x != nil {
		return x.DstAgentId
	}
	return 0
}

func (x *UpdateClusterRequest) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *UpdateClusterRequest) GetImportDetail() *ImportDetail {
	if x != nil {
		return x.ImportDetail
	}
	return nil
}

type UpdateClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateClusterResponse) Reset() {
	*x = UpdateClusterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterResponse) ProtoMessage() {}

func (x *UpdateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterResponse) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{19}
}

type PingIdipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idip string `protobuf:"bytes,1,opt,name=idip,proto3" json:"idip,optional"`
}

func (x *PingIdipRequest) Reset() {
	*x = PingIdipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingIdipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingIdipRequest) ProtoMessage() {}

func (x *PingIdipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingIdipRequest.ProtoReflect.Descriptor instead.
func (*PingIdipRequest) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{20}
}

func (x *PingIdipRequest) GetIdip() string {
	if x != nil {
		return x.Idip
	}
	return ""
}

type PingIdipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connected bool `protobuf:"varint,1,opt,name=connected,proto3" json:"connected,optional"`
}

func (x *PingIdipResponse) Reset() {
	*x = PingIdipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingIdipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingIdipResponse) ProtoMessage() {}

func (x *PingIdipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingIdipResponse.ProtoReflect.Descriptor instead.
func (*PingIdipResponse) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{21}
}

func (x *PingIdipResponse) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

type GetClusterDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,optional"`
}

func (x *GetClusterDetailRequest) Reset() {
	*x = GetClusterDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterDetailRequest) ProtoMessage() {}

func (x *GetClusterDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterDetailRequest.ProtoReflect.Descriptor instead.
func (*GetClusterDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{22}
}

func (x *GetClusterDetailRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetClusterDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群信息
	Detail *ClusterItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *GetClusterDetailResponse) Reset() {
	*x = GetClusterDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterDetailResponse) ProtoMessage() {}

func (x *GetClusterDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterDetailResponse.ProtoReflect.Descriptor instead.
func (*GetClusterDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{23}
}

func (x *GetClusterDetailResponse) GetDetail() *ClusterItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

type DownloadKubeConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,optional"`
}

func (x *DownloadKubeConfigRequest) Reset() {
	*x = DownloadKubeConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadKubeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadKubeConfigRequest) ProtoMessage() {}

func (x *DownloadKubeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadKubeConfigRequest.ProtoReflect.Descriptor instead.
func (*DownloadKubeConfigRequest) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{24}
}

func (x *DownloadKubeConfigRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DownloadKubeConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kubeConfig
	KubeConfig string `protobuf:"bytes,1,opt,name=kube_config,proto3" json:"kube_config,optional"`
}

func (x *DownloadKubeConfigResponse) Reset() {
	*x = DownloadKubeConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cluster_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadKubeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadKubeConfigResponse) ProtoMessage() {}

func (x *DownloadKubeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cluster_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadKubeConfigResponse.ProtoReflect.Descriptor instead.
func (*DownloadKubeConfigResponse) Descriptor() ([]byte, []int) {
	return file_pb_cluster_v1_proto_rawDescGZIP(), []int{25}
}

func (x *DownloadKubeConfigResponse) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

var File_pb_cluster_v1_proto protoreflect.FileDescriptor

var file_pb_cluster_v1_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68,
	0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9c, 0x02, 0x0a, 0x0c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6b, 0x75,
	0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x07, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x22, 0x96, 0x04, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1e, 0x0a, 0x04, 0x69, 0x64, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x01, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x04, 0x69, 0x64, 0x69, 0x70,
	0x12, 0x22, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05,
	0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1d, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b,
	0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x73,
	0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x2c, 0x0a, 0x15, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x29, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x04, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xe8,
	0x07, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xf7, 0x07, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xe8,
	0x07, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08,
	0x01, 0x10, 0x0a, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0b,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x09, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x04, 0x69, 0x64, 0x69, 0x70, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52,
	0x04, 0x69, 0x64, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x64, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0,
	0x41, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00,
	0x52, 0x03, 0x6f, 0x70, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x64,
	0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x40,
	0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x2b, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x0c, 0x4e, 0x6f, 0x64,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x0b, 0x43, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x30, 0x0a, 0x11, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x10, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x8b, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a,
	0x11, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x75,
	0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd6, 0x01,
	0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x70, 0x75, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x34, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x41, 0x0a, 0x10, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x11, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbc, 0x01,
	0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x37, 0x0a,
	0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe4, 0x03, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xe8, 0x07, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x69,
	0x64, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x01, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x04, 0x69, 0x64, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x01,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xf4, 0x03,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x03,
	0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x01, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x0f,
	0x50, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x04, 0x69, 0x64, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x64, 0x52, 0x04, 0x69, 0x64, 0x69, 0x70, 0x22,
	0x35, 0x0a, 0x10, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x2e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x30, 0x0a, 0x19, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x1a, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0x38, 0x0a, 0x0a,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x65, 0x73, 0x68, 0x10, 0x02, 0x2a, 0x29, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x01, 0x2a, 0x46, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x2a, 0xdc, 0x01, 0x0a, 0x0b, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x6e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x69, 0x67, 0x68, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x4f, 0x48, 0x69, 0x67, 0x68, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x55, 0x6e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x74, 0x63, 0x64, 0x55, 0x6e,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x09, 0x32, 0xf8, 0x09, 0x0a, 0x07, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xd3, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb,
	0xaa, 0x03, 0x57, 0x0a, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0x12, 0x0c, 0xe5, 0xaf, 0xbc, 0xe5, 0x85, 0xa5, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x1a,
	0x0b, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x00, 0x1a, 0x0d, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x00, 0x1a, 0x0f, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x1a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x0c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x6a, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x69, 0x70, 0x12, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x64, 0x69, 0x70, 0x2f, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0xd5, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x59,
	0x0a, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x0c,
	0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0x1a, 0x0d, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x02, 0x69, 0x64, 0x1a, 0x0d, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x00, 0x1a, 0x0f, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x1a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x0c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a,
	0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x0f, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0xd5, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0xca, 0xdb, 0xaa, 0x03, 0x59, 0x0a, 0x0c, 0xe9, 0x9b, 0x86, 0xe7, 0xbe, 0xa4, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x12, 0x0c, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe9, 0x9b, 0x86, 0xe7, 0xbe,
	0xa4, 0x1a, 0x0d, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x02, 0x69, 0x64,
	0x1a, 0x0d, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x00, 0x1a,
	0x0f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x92, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x75, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x63, 0x6e, 0x6d,
	0x70, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_cluster_v1_proto_rawDescOnce sync.Once
	file_pb_cluster_v1_proto_rawDescData = file_pb_cluster_v1_proto_rawDesc
)

func file_pb_cluster_v1_proto_rawDescGZIP() []byte {
	file_pb_cluster_v1_proto_rawDescOnce.Do(func() {
		file_pb_cluster_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_cluster_v1_proto_rawDescData)
	})
	return file_pb_cluster_v1_proto_rawDescData
}

var file_pb_cluster_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_pb_cluster_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_pb_cluster_v1_proto_goTypes = []interface{}{
	(ImportType)(0),                    // 0: cluster.ImportType
	(ConnectType)(0),                   // 1: cluster.ConnectType
	(NodeState)(0),                     // 2: cluster.NodeState
	(ClusterState)(0),                  // 3: cluster.ClusterState
	(HealthState)(0),                   // 4: cluster.HealthState
	(*ImportDetail)(nil),               // 5: cluster.ImportDetail
	(*ImportClusterRequest)(nil),       // 6: cluster.ImportClusterRequest
	(*ImportClusterResponse)(nil),      // 7: cluster.ImportClusterResponse
	(*ListClusterRequest)(nil),         // 8: cluster.ListClusterRequest
	(*ListClusterResponse)(nil),        // 9: cluster.ListClusterResponse
	(*Link)(nil),                       // 10: cluster.Link
	(*ClusterItem)(nil),                // 11: cluster.ClusterItem
	(*DeleteClusterRequest)(nil),       // 12: cluster.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),      // 13: cluster.DeleteClusterResponse
	(*ClusterOverviewRequest)(nil),     // 14: cluster.ClusterOverviewRequest
	(*ClusterOverview)(nil),            // 15: cluster.ClusterOverview
	(*NodeOverview)(nil),               // 16: cluster.NodeOverview
	(*CpuOverview)(nil),                // 17: cluster.CpuOverview
	(*MemoryOverview)(nil),             // 18: cluster.MemoryOverview
	(*OverView)(nil),                   // 19: cluster.OverView
	(*ErrorClusterItem)(nil),           // 20: cluster.ErrorClusterItem
	(*FollowClusterItem)(nil),          // 21: cluster.FollowClusterItem
	(*ClusterOverviewResponse)(nil),    // 22: cluster.ClusterOverviewResponse
	(*UpdateClusterRequest)(nil),       // 23: cluster.UpdateClusterRequest
	(*UpdateClusterResponse)(nil),      // 24: cluster.UpdateClusterResponse
	(*PingIdipRequest)(nil),            // 25: cluster.PingIdipRequest
	(*PingIdipResponse)(nil),           // 26: cluster.PingIdipResponse
	(*GetClusterDetailRequest)(nil),    // 27: cluster.GetClusterDetailRequest
	(*GetClusterDetailResponse)(nil),   // 28: cluster.GetClusterDetailResponse
	(*DownloadKubeConfigRequest)(nil),  // 29: cluster.DownloadKubeConfigRequest
	(*DownloadKubeConfigResponse)(nil), // 30: cluster.DownloadKubeConfigResponse
}
var file_pb_cluster_v1_proto_depIdxs = []int32{
	0,  // 0: cluster.ImportClusterRequest.import_type:type_name -> cluster.ImportType
	5,  // 1: cluster.ImportClusterRequest.import_detail:type_name -> cluster.ImportDetail
	1,  // 2: cluster.ImportClusterRequest.connect_type:type_name -> cluster.ConnectType
	10, // 3: cluster.ImportClusterRequest.links:type_name -> cluster.Link
	11, // 4: cluster.ListClusterResponse.list:type_name -> cluster.ClusterItem
	3,  // 5: cluster.ClusterItem.cluster_state:type_name -> cluster.ClusterState
	4,  // 6: cluster.ClusterItem.health_state:type_name -> cluster.HealthState
	0,  // 7: cluster.ClusterItem.import_type:type_name -> cluster.ImportType
	1,  // 8: cluster.ClusterItem.connect_type:type_name -> cluster.ConnectType
	10, // 9: cluster.ClusterItem.links:type_name -> cluster.Link
	5,  // 10: cluster.ClusterItem.import_detail:type_name -> cluster.ImportDetail
	15, // 11: cluster.OverView.cluster:type_name -> cluster.ClusterOverview
	16, // 12: cluster.OverView.node:type_name -> cluster.NodeOverview
	17, // 13: cluster.OverView.cpu:type_name -> cluster.CpuOverview
	18, // 14: cluster.OverView.memory:type_name -> cluster.MemoryOverview
	11, // 15: cluster.ErrorClusterItem.list:type_name -> cluster.ClusterItem
	11, // 16: cluster.FollowClusterItem.list:type_name -> cluster.ClusterItem
	19, // 17: cluster.ClusterOverviewResponse.overview:type_name -> cluster.OverView
	21, // 18: cluster.ClusterOverviewResponse.follow:type_name -> cluster.FollowClusterItem
	20, // 19: cluster.ClusterOverviewResponse.error:type_name -> cluster.ErrorClusterItem
	1,  // 20: cluster.UpdateClusterRequest.connect_type:type_name -> cluster.ConnectType
	10, // 21: cluster.UpdateClusterRequest.links:type_name -> cluster.Link
	5,  // 22: cluster.UpdateClusterRequest.import_detail:type_name -> cluster.ImportDetail
	11, // 23: cluster.GetClusterDetailResponse.detail:type_name -> cluster.ClusterItem
	6,  // 24: cluster.Cluster.CreateCluster:input_type -> cluster.ImportClusterRequest
	8,  // 25: cluster.Cluster.ListCluster:input_type -> cluster.ListClusterRequest
	27, // 26: cluster.Cluster.GetClusterDetail:input_type -> cluster.GetClusterDetailRequest
	25, // 27: cluster.Cluster.PingIdip:input_type -> cluster.PingIdipRequest
	12, // 28: cluster.Cluster.DeleteCluster:input_type -> cluster.DeleteClusterRequest
	14, // 29: cluster.Cluster.OverviewCluster:input_type -> cluster.ClusterOverviewRequest
	23, // 30: cluster.Cluster.UpdateCluster:input_type -> cluster.UpdateClusterRequest
	29, // 31: cluster.Cluster.DownloadKubeConfig:input_type -> cluster.DownloadKubeConfigRequest
	7,  // 32: cluster.Cluster.CreateCluster:output_type -> cluster.ImportClusterResponse
	9,  // 33: cluster.Cluster.ListCluster:output_type -> cluster.ListClusterResponse
	28, // 34: cluster.Cluster.GetClusterDetail:output_type -> cluster.GetClusterDetailResponse
	26, // 35: cluster.Cluster.PingIdip:output_type -> cluster.PingIdipResponse
	13, // 36: cluster.Cluster.DeleteCluster:output_type -> cluster.DeleteClusterResponse
	22, // 37: cluster.Cluster.OverviewCluster:output_type -> cluster.ClusterOverviewResponse
	24, // 38: cluster.Cluster.UpdateCluster:output_type -> cluster.UpdateClusterResponse
	30, // 39: cluster.Cluster.DownloadKubeConfig:output_type -> cluster.DownloadKubeConfigResponse
	32, // [32:40] is the sub-list for method output_type
	24, // [24:32] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_pb_cluster_v1_proto_init() }
func file_pb_cluster_v1_proto_init() {
	if File_pb_cluster_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_cluster_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorClusterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowClusterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterOverviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingIdipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingIdipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadKubeConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cluster_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadKubeConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_cluster_v1_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_cluster_v1_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_cluster_v1_proto_goTypes,
		DependencyIndexes: file_pb_cluster_v1_proto_depIdxs,
		EnumInfos:         file_pb_cluster_v1_proto_enumTypes,
		MessageInfos:      file_pb_cluster_v1_proto_msgTypes,
	}.Build()
	File_pb_cluster_v1_proto = out.File
	file_pb_cluster_v1_proto_rawDesc = nil
	file_pb_cluster_v1_proto_goTypes = nil
	file_pb_cluster_v1_proto_depIdxs = nil
}
