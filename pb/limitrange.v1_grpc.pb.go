// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/limitrange.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LimitRange_ListLimitRange_FullMethodName           = "/limitrange.v1.LimitRange/ListLimitRange"
	LimitRange_CreateLimitRange_FullMethodName         = "/limitrange.v1.LimitRange/CreateLimitRange"
	LimitRange_UpdateLimitRange_FullMethodName         = "/limitrange.v1.LimitRange/UpdateLimitRange"
	LimitRange_CreateOrUpdateLimitRange_FullMethodName = "/limitrange.v1.LimitRange/CreateOrUpdateLimitRange"
	LimitRange_GetLimitRangeDetail_FullMethodName      = "/limitrange.v1.LimitRange/GetLimitRangeDetail"
	LimitRange_DeleteLimitRange_FullMethodName         = "/limitrange.v1.LimitRange/DeleteLimitRange"
)

// LimitRangeClient is the client API for LimitRange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimitRangeClient interface {
	// 查看-云原生管理-LimitRange-列表
	ListLimitRange(ctx context.Context, in *ListLimitRangeRequest, opts ...grpc.CallOption) (*ListLimitRangeResponse, error)
	// 管理-云原生管理-LimitRange-创建
	CreateLimitRange(ctx context.Context, in *CreateLimitRangeRequest, opts ...grpc.CallOption) (*CreateLimitRangeResponse, error)
	// 管理-云原生管理-LimitRange-编辑
	UpdateLimitRange(ctx context.Context, in *CreateLimitRangeRequest, opts ...grpc.CallOption) (*CreateLimitRangeResponse, error)
	// 管理-云原生管理-LimitRange-创建或编辑
	CreateOrUpdateLimitRange(ctx context.Context, in *CreateLimitRangeRequest, opts ...grpc.CallOption) (*CreateLimitRangeResponse, error)
	// 查看-云原生管理-LimitRange-详情
	GetLimitRangeDetail(ctx context.Context, in *LimitRangeDetailRequest, opts ...grpc.CallOption) (*LimitRangeDetailResponse, error)
	// 管理-云原生管理-LimitRange-删除
	DeleteLimitRange(ctx context.Context, in *DeleteLimitRangeRequest, opts ...grpc.CallOption) (*DeleteLimitRangeResponse, error)
}

type limitRangeClient struct {
	cc grpc.ClientConnInterface
}

func NewLimitRangeClient(cc grpc.ClientConnInterface) LimitRangeClient {
	return &limitRangeClient{cc}
}

func (c *limitRangeClient) ListLimitRange(ctx context.Context, in *ListLimitRangeRequest, opts ...grpc.CallOption) (*ListLimitRangeResponse, error) {
	out := new(ListLimitRangeResponse)
	err := c.cc.Invoke(ctx, LimitRange_ListLimitRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeClient) CreateLimitRange(ctx context.Context, in *CreateLimitRangeRequest, opts ...grpc.CallOption) (*CreateLimitRangeResponse, error) {
	out := new(CreateLimitRangeResponse)
	err := c.cc.Invoke(ctx, LimitRange_CreateLimitRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeClient) UpdateLimitRange(ctx context.Context, in *CreateLimitRangeRequest, opts ...grpc.CallOption) (*CreateLimitRangeResponse, error) {
	out := new(CreateLimitRangeResponse)
	err := c.cc.Invoke(ctx, LimitRange_UpdateLimitRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeClient) CreateOrUpdateLimitRange(ctx context.Context, in *CreateLimitRangeRequest, opts ...grpc.CallOption) (*CreateLimitRangeResponse, error) {
	out := new(CreateLimitRangeResponse)
	err := c.cc.Invoke(ctx, LimitRange_CreateOrUpdateLimitRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeClient) GetLimitRangeDetail(ctx context.Context, in *LimitRangeDetailRequest, opts ...grpc.CallOption) (*LimitRangeDetailResponse, error) {
	out := new(LimitRangeDetailResponse)
	err := c.cc.Invoke(ctx, LimitRange_GetLimitRangeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitRangeClient) DeleteLimitRange(ctx context.Context, in *DeleteLimitRangeRequest, opts ...grpc.CallOption) (*DeleteLimitRangeResponse, error) {
	out := new(DeleteLimitRangeResponse)
	err := c.cc.Invoke(ctx, LimitRange_DeleteLimitRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LimitRangeServer is the server API for LimitRange service.
// All implementations must embed UnimplementedLimitRangeServer
// for forward compatibility
type LimitRangeServer interface {
	// 查看-云原生管理-LimitRange-列表
	ListLimitRange(context.Context, *ListLimitRangeRequest) (*ListLimitRangeResponse, error)
	// 管理-云原生管理-LimitRange-创建
	CreateLimitRange(context.Context, *CreateLimitRangeRequest) (*CreateLimitRangeResponse, error)
	// 管理-云原生管理-LimitRange-编辑
	UpdateLimitRange(context.Context, *CreateLimitRangeRequest) (*CreateLimitRangeResponse, error)
	// 管理-云原生管理-LimitRange-创建或编辑
	CreateOrUpdateLimitRange(context.Context, *CreateLimitRangeRequest) (*CreateLimitRangeResponse, error)
	// 查看-云原生管理-LimitRange-详情
	GetLimitRangeDetail(context.Context, *LimitRangeDetailRequest) (*LimitRangeDetailResponse, error)
	// 管理-云原生管理-LimitRange-删除
	DeleteLimitRange(context.Context, *DeleteLimitRangeRequest) (*DeleteLimitRangeResponse, error)
	mustEmbedUnimplementedLimitRangeServer()
}

// UnimplementedLimitRangeServer must be embedded to have forward compatible implementations.
type UnimplementedLimitRangeServer struct {
}

func (UnimplementedLimitRangeServer) ListLimitRange(context.Context, *ListLimitRangeRequest) (*ListLimitRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLimitRange not implemented")
}
func (UnimplementedLimitRangeServer) CreateLimitRange(context.Context, *CreateLimitRangeRequest) (*CreateLimitRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLimitRange not implemented")
}
func (UnimplementedLimitRangeServer) UpdateLimitRange(context.Context, *CreateLimitRangeRequest) (*CreateLimitRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLimitRange not implemented")
}
func (UnimplementedLimitRangeServer) CreateOrUpdateLimitRange(context.Context, *CreateLimitRangeRequest) (*CreateLimitRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateLimitRange not implemented")
}
func (UnimplementedLimitRangeServer) GetLimitRangeDetail(context.Context, *LimitRangeDetailRequest) (*LimitRangeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimitRangeDetail not implemented")
}
func (UnimplementedLimitRangeServer) DeleteLimitRange(context.Context, *DeleteLimitRangeRequest) (*DeleteLimitRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLimitRange not implemented")
}
func (UnimplementedLimitRangeServer) mustEmbedUnimplementedLimitRangeServer() {}

// UnsafeLimitRangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimitRangeServer will
// result in compilation errors.
type UnsafeLimitRangeServer interface {
	mustEmbedUnimplementedLimitRangeServer()
}

func RegisterLimitRangeServer(s grpc.ServiceRegistrar, srv LimitRangeServer) {
	s.RegisterService(&LimitRange_ServiceDesc, srv)
}

func _LimitRange_ListLimitRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLimitRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeServer).ListLimitRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitRange_ListLimitRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeServer).ListLimitRange(ctx, req.(*ListLimitRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRange_CreateLimitRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLimitRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeServer).CreateLimitRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitRange_CreateLimitRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeServer).CreateLimitRange(ctx, req.(*CreateLimitRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRange_UpdateLimitRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLimitRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeServer).UpdateLimitRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitRange_UpdateLimitRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeServer).UpdateLimitRange(ctx, req.(*CreateLimitRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRange_CreateOrUpdateLimitRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLimitRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeServer).CreateOrUpdateLimitRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitRange_CreateOrUpdateLimitRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeServer).CreateOrUpdateLimitRange(ctx, req.(*CreateLimitRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRange_GetLimitRangeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitRangeDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeServer).GetLimitRangeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitRange_GetLimitRangeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeServer).GetLimitRangeDetail(ctx, req.(*LimitRangeDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitRange_DeleteLimitRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLimitRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitRangeServer).DeleteLimitRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitRange_DeleteLimitRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitRangeServer).DeleteLimitRange(ctx, req.(*DeleteLimitRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LimitRange_ServiceDesc is the grpc.ServiceDesc for LimitRange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LimitRange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "limitrange.v1.LimitRange",
	HandlerType: (*LimitRangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLimitRange",
			Handler:    _LimitRange_ListLimitRange_Handler,
		},
		{
			MethodName: "CreateLimitRange",
			Handler:    _LimitRange_CreateLimitRange_Handler,
		},
		{
			MethodName: "UpdateLimitRange",
			Handler:    _LimitRange_UpdateLimitRange_Handler,
		},
		{
			MethodName: "CreateOrUpdateLimitRange",
			Handler:    _LimitRange_CreateOrUpdateLimitRange_Handler,
		},
		{
			MethodName: "GetLimitRangeDetail",
			Handler:    _LimitRange_GetLimitRangeDetail_Handler,
		},
		{
			MethodName: "DeleteLimitRange",
			Handler:    _LimitRange_DeleteLimitRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/limitrange.v1.proto",
}
