// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/svc.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SVC_ListSvc_FullMethodName      = "/svc.v1.SVC/ListSvc"
	SVC_CreateSvc_FullMethodName    = "/svc.v1.SVC/CreateSvc"
	SVC_UpdateSvc_FullMethodName    = "/svc.v1.SVC/UpdateSvc"
	SVC_DeleteSvc_FullMethodName    = "/svc.v1.SVC/DeleteSvc"
	SVC_GetSvcDetail_FullMethodName = "/svc.v1.SVC/GetSvcDetail"
)

// SVCClient is the client API for SVC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SVCClient interface {
	// 查看-云原生管理-Service-列表
	ListSvc(ctx context.Context, in *ListSvcRequest, opts ...grpc.CallOption) (*ListSvcResponse, error)
	// 管理-云原生管理-Service-创建
	CreateSvc(ctx context.Context, in *CreateSvcRequest, opts ...grpc.CallOption) (*CreateSvcResponse, error)
	// 管理-云原生管理-Service-编辑
	UpdateSvc(ctx context.Context, in *CreateSvcRequest, opts ...grpc.CallOption) (*CreateSvcResponse, error)
	// 管理-云原生管理-Service-删除
	DeleteSvc(ctx context.Context, in *DeleteSvcRequest, opts ...grpc.CallOption) (*DeleteSvcResponse, error)
	// 查看-云原生管理-Service-详情
	GetSvcDetail(ctx context.Context, in *SvcDetailRequest, opts ...grpc.CallOption) (*SvcDetailResponse, error)
}

type sVCClient struct {
	cc grpc.ClientConnInterface
}

func NewSVCClient(cc grpc.ClientConnInterface) SVCClient {
	return &sVCClient{cc}
}

func (c *sVCClient) ListSvc(ctx context.Context, in *ListSvcRequest, opts ...grpc.CallOption) (*ListSvcResponse, error) {
	out := new(ListSvcResponse)
	err := c.cc.Invoke(ctx, SVC_ListSvc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVCClient) CreateSvc(ctx context.Context, in *CreateSvcRequest, opts ...grpc.CallOption) (*CreateSvcResponse, error) {
	out := new(CreateSvcResponse)
	err := c.cc.Invoke(ctx, SVC_CreateSvc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVCClient) UpdateSvc(ctx context.Context, in *CreateSvcRequest, opts ...grpc.CallOption) (*CreateSvcResponse, error) {
	out := new(CreateSvcResponse)
	err := c.cc.Invoke(ctx, SVC_UpdateSvc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVCClient) DeleteSvc(ctx context.Context, in *DeleteSvcRequest, opts ...grpc.CallOption) (*DeleteSvcResponse, error) {
	out := new(DeleteSvcResponse)
	err := c.cc.Invoke(ctx, SVC_DeleteSvc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVCClient) GetSvcDetail(ctx context.Context, in *SvcDetailRequest, opts ...grpc.CallOption) (*SvcDetailResponse, error) {
	out := new(SvcDetailResponse)
	err := c.cc.Invoke(ctx, SVC_GetSvcDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SVCServer is the server API for SVC service.
// All implementations must embed UnimplementedSVCServer
// for forward compatibility
type SVCServer interface {
	// 查看-云原生管理-Service-列表
	ListSvc(context.Context, *ListSvcRequest) (*ListSvcResponse, error)
	// 管理-云原生管理-Service-创建
	CreateSvc(context.Context, *CreateSvcRequest) (*CreateSvcResponse, error)
	// 管理-云原生管理-Service-编辑
	UpdateSvc(context.Context, *CreateSvcRequest) (*CreateSvcResponse, error)
	// 管理-云原生管理-Service-删除
	DeleteSvc(context.Context, *DeleteSvcRequest) (*DeleteSvcResponse, error)
	// 查看-云原生管理-Service-详情
	GetSvcDetail(context.Context, *SvcDetailRequest) (*SvcDetailResponse, error)
	mustEmbedUnimplementedSVCServer()
}

// UnimplementedSVCServer must be embedded to have forward compatible implementations.
type UnimplementedSVCServer struct {
}

func (UnimplementedSVCServer) ListSvc(context.Context, *ListSvcRequest) (*ListSvcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSvc not implemented")
}
func (UnimplementedSVCServer) CreateSvc(context.Context, *CreateSvcRequest) (*CreateSvcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSvc not implemented")
}
func (UnimplementedSVCServer) UpdateSvc(context.Context, *CreateSvcRequest) (*CreateSvcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSvc not implemented")
}
func (UnimplementedSVCServer) DeleteSvc(context.Context, *DeleteSvcRequest) (*DeleteSvcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSvc not implemented")
}
func (UnimplementedSVCServer) GetSvcDetail(context.Context, *SvcDetailRequest) (*SvcDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSvcDetail not implemented")
}
func (UnimplementedSVCServer) mustEmbedUnimplementedSVCServer() {}

// UnsafeSVCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SVCServer will
// result in compilation errors.
type UnsafeSVCServer interface {
	mustEmbedUnimplementedSVCServer()
}

func RegisterSVCServer(s grpc.ServiceRegistrar, srv SVCServer) {
	s.RegisterService(&SVC_ServiceDesc, srv)
}

func _SVC_ListSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVCServer).ListSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SVC_ListSvc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVCServer).ListSvc(ctx, req.(*ListSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVC_CreateSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVCServer).CreateSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SVC_CreateSvc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVCServer).CreateSvc(ctx, req.(*CreateSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVC_UpdateSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVCServer).UpdateSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SVC_UpdateSvc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVCServer).UpdateSvc(ctx, req.(*CreateSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVC_DeleteSvc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVCServer).DeleteSvc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SVC_DeleteSvc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVCServer).DeleteSvc(ctx, req.(*DeleteSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVC_GetSvcDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVCServer).GetSvcDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SVC_GetSvcDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVCServer).GetSvcDetail(ctx, req.(*SvcDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SVC_ServiceDesc is the grpc.ServiceDesc for SVC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SVC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.v1.SVC",
	HandlerType: (*SVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSvc",
			Handler:    _SVC_ListSvc_Handler,
		},
		{
			MethodName: "CreateSvc",
			Handler:    _SVC_CreateSvc_Handler,
		},
		{
			MethodName: "UpdateSvc",
			Handler:    _SVC_UpdateSvc_Handler,
		},
		{
			MethodName: "DeleteSvc",
			Handler:    _SVC_DeleteSvc_Handler,
		},
		{
			MethodName: "GetSvcDetail",
			Handler:    _SVC_GetSvcDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/svc.v1.proto",
}
