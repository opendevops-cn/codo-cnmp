// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/svc.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListSvcRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSvcRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSvcRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSvcRequestMultiError,
// or nil if none found.
func (m *ListSvcRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSvcRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListSvcRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	// no validation rules for SvcType

	if len(errors) > 0 {
		return ListSvcRequestMultiError(errors)
	}

	return nil
}

// ListSvcRequestMultiError is an error wrapping multiple validation errors
// returned by ListSvcRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSvcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSvcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSvcRequestMultiError) AllErrors() []error { return m }

// ListSvcRequestValidationError is the validation error returned by
// ListSvcRequest.Validate if the designated constraints aren't met.
type ListSvcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSvcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSvcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSvcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSvcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSvcRequestValidationError) ErrorName() string { return "ListSvcRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListSvcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSvcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSvcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSvcRequestValidationError{}

// Validate checks the field values on SvcReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SvcReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SvcReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SvcReferenceMultiError, or
// nil if none found.
func (m *SvcReference) ValidateAll() error {
	return m.validate(true)
}

func (m *SvcReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Kind

	// no validation rules for Name

	if len(errors) > 0 {
		return SvcReferenceMultiError(errors)
	}

	return nil
}

// SvcReferenceMultiError is an error wrapping multiple validation errors
// returned by SvcReference.ValidateAll() if the designated constraints aren't met.
type SvcReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SvcReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SvcReferenceMultiError) AllErrors() []error { return m }

// SvcReferenceValidationError is the validation error returned by
// SvcReference.Validate if the designated constraints aren't met.
type SvcReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcReferenceValidationError) ErrorName() string { return "SvcReferenceValidationError" }

// Error satisfies the builtin error interface
func (e SvcReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcReferenceValidationError{}

// Validate checks the field values on ServicePort with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServicePort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicePort with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServicePortMultiError, or
// nil if none found.
func (m *ServicePort) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicePort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Protocol != nil {
		// no validation rules for Protocol
	}

	if m.AppProtocol != nil {
		// no validation rules for AppProtocol
	}

	if m.Port != nil {
		// no validation rules for Port
	}

	if m.TargetPort != nil {
		// no validation rules for TargetPort
	}

	if m.NodePort != nil {
		// no validation rules for NodePort
	}

	if len(errors) > 0 {
		return ServicePortMultiError(errors)
	}

	return nil
}

// ServicePortMultiError is an error wrapping multiple validation errors
// returned by ServicePort.ValidateAll() if the designated constraints aren't met.
type ServicePortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicePortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicePortMultiError) AllErrors() []error { return m }

// ServicePortValidationError is the validation error returned by
// ServicePort.Validate if the designated constraints aren't met.
type ServicePortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicePortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicePortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicePortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicePortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicePortValidationError) ErrorName() string { return "ServicePortValidationError" }

// Error satisfies the builtin error interface
func (e ServicePortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicePort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicePortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicePortValidationError{}

// Validate checks the field values on SvcItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SvcItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SvcItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SvcItemMultiError, or nil if none found.
func (m *SvcItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SvcItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SvcItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := SvcItemValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := SvcType_name[int32(m.GetSvcType())]; !ok {
		err := SvcItemValidationError{
			field:  "SvcType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ClusterIp

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SvcItemValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SvcItemValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SvcItemValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	// no validation rules for IsFollowed

	// no validation rules for Yaml

	// no validation rules for RefCount

	for idx, item := range m.GetRefs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SvcItemValidationError{
						field:  fmt.Sprintf("Refs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SvcItemValidationError{
						field:  fmt.Sprintf("Refs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SvcItemValidationError{
					field:  fmt.Sprintf("Refs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Vip

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for Selector

	// no validation rules for SessionAffinity

	// no validation rules for UpdateTime

	// no validation rules for ExternalName

	// no validation rules for Headless

	if m.SessionAffinitySeconds != nil {
		// no validation rules for SessionAffinitySeconds
	}

	if m.PublishNotReadyAddresses != nil {
		// no validation rules for PublishNotReadyAddresses
	}

	if len(errors) > 0 {
		return SvcItemMultiError(errors)
	}

	return nil
}

// SvcItemMultiError is an error wrapping multiple validation errors returned
// by SvcItem.ValidateAll() if the designated constraints aren't met.
type SvcItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SvcItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SvcItemMultiError) AllErrors() []error { return m }

// SvcItemValidationError is the validation error returned by SvcItem.Validate
// if the designated constraints aren't met.
type SvcItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcItemValidationError) ErrorName() string { return "SvcItemValidationError" }

// Error satisfies the builtin error interface
func (e SvcItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcItemValidationError{}

// Validate checks the field values on ListSvcResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSvcResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSvcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSvcResponseMultiError, or nil if none found.
func (m *ListSvcResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSvcResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSvcResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSvcResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSvcResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSvcResponseMultiError(errors)
	}

	return nil
}

// ListSvcResponseMultiError is an error wrapping multiple validation errors
// returned by ListSvcResponse.ValidateAll() if the designated constraints
// aren't met.
type ListSvcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSvcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSvcResponseMultiError) AllErrors() []error { return m }

// ListSvcResponseValidationError is the validation error returned by
// ListSvcResponse.Validate if the designated constraints aren't met.
type ListSvcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSvcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSvcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSvcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSvcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSvcResponseValidationError) ErrorName() string { return "ListSvcResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListSvcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSvcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSvcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSvcResponseValidationError{}

// Validate checks the field values on DeleteSvcRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSvcRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSvcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSvcRequestMultiError, or nil if none found.
func (m *DeleteSvcRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSvcRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteSvcRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteSvcRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteSvcRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSvcRequestMultiError(errors)
	}

	return nil
}

// DeleteSvcRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteSvcRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteSvcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSvcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSvcRequestMultiError) AllErrors() []error { return m }

// DeleteSvcRequestValidationError is the validation error returned by
// DeleteSvcRequest.Validate if the designated constraints aren't met.
type DeleteSvcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSvcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSvcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSvcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSvcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSvcRequestValidationError) ErrorName() string { return "DeleteSvcRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSvcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSvcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSvcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSvcRequestValidationError{}

// Validate checks the field values on DeleteSvcResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSvcResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSvcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSvcResponseMultiError, or nil if none found.
func (m *DeleteSvcResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSvcResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSvcResponseMultiError(errors)
	}

	return nil
}

// DeleteSvcResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteSvcResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteSvcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSvcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSvcResponseMultiError) AllErrors() []error { return m }

// DeleteSvcResponseValidationError is the validation error returned by
// DeleteSvcResponse.Validate if the designated constraints aren't met.
type DeleteSvcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSvcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSvcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSvcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSvcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSvcResponseValidationError) ErrorName() string {
	return "DeleteSvcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSvcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSvcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSvcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSvcResponseValidationError{}

// Validate checks the field values on SvcDetailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SvcDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SvcDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SvcDetailRequestMultiError, or nil if none found.
func (m *SvcDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SvcDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := SvcDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SvcDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := SvcDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SvcDetailRequestMultiError(errors)
	}

	return nil
}

// SvcDetailRequestMultiError is an error wrapping multiple validation errors
// returned by SvcDetailRequest.ValidateAll() if the designated constraints
// aren't met.
type SvcDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SvcDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SvcDetailRequestMultiError) AllErrors() []error { return m }

// SvcDetailRequestValidationError is the validation error returned by
// SvcDetailRequest.Validate if the designated constraints aren't met.
type SvcDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcDetailRequestValidationError) ErrorName() string { return "SvcDetailRequestValidationError" }

// Error satisfies the builtin error interface
func (e SvcDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcDetailRequestValidationError{}

// Validate checks the field values on SvcDetailResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SvcDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SvcDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SvcDetailResponseMultiError, or nil if none found.
func (m *SvcDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SvcDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SvcDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SvcDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SvcDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SvcDetailResponseMultiError(errors)
	}

	return nil
}

// SvcDetailResponseMultiError is an error wrapping multiple validation errors
// returned by SvcDetailResponse.ValidateAll() if the designated constraints
// aren't met.
type SvcDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SvcDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SvcDetailResponseMultiError) AllErrors() []error { return m }

// SvcDetailResponseValidationError is the validation error returned by
// SvcDetailResponse.Validate if the designated constraints aren't met.
type SvcDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SvcDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SvcDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SvcDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SvcDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SvcDetailResponseValidationError) ErrorName() string {
	return "SvcDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SvcDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSvcDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SvcDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SvcDetailResponseValidationError{}

// Validate checks the field values on CreateSvcRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSvcRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSvcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSvcRequestMultiError, or nil if none found.
func (m *CreateSvcRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSvcRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateSvcRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateSvcRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateSvcRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := SvcType_name[int32(m.GetSvcType())]; !ok {
		err := CreateSvcRequestValidationError{
			field:  "SvcType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSvcRequestValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSvcRequestValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSvcRequestValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Labels

	// no validation rules for Selector

	// no validation rules for Annotations

	if m.PublishNotReadyAddresses != nil {
		// no validation rules for PublishNotReadyAddresses
	}

	if m.SessionAffinity != nil {
		// no validation rules for SessionAffinity
	}

	if m.SessionAffinitySeconds != nil {
		// no validation rules for SessionAffinitySeconds
	}

	if m.Headless != nil {
		// no validation rules for Headless
	}

	if m.ExternalName != nil {
		// no validation rules for ExternalName
	}

	if len(errors) > 0 {
		return CreateSvcRequestMultiError(errors)
	}

	return nil
}

// CreateSvcRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSvcRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSvcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSvcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSvcRequestMultiError) AllErrors() []error { return m }

// CreateSvcRequestValidationError is the validation error returned by
// CreateSvcRequest.Validate if the designated constraints aren't met.
type CreateSvcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSvcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSvcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSvcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSvcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSvcRequestValidationError) ErrorName() string { return "CreateSvcRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateSvcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSvcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSvcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSvcRequestValidationError{}

// Validate checks the field values on CreateSvcResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSvcResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSvcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSvcResponseMultiError, or nil if none found.
func (m *CreateSvcResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSvcResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSvcResponseMultiError(errors)
	}

	return nil
}

// CreateSvcResponseMultiError is an error wrapping multiple validation errors
// returned by CreateSvcResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateSvcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSvcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSvcResponseMultiError) AllErrors() []error { return m }

// CreateSvcResponseValidationError is the validation error returned by
// CreateSvcResponse.Validate if the designated constraints aren't met.
type CreateSvcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSvcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSvcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSvcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSvcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSvcResponseValidationError) ErrorName() string {
	return "CreateSvcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSvcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSvcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSvcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSvcResponseValidationError{}
