// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/usergroup.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserGroupService_GrantUserGroup_FullMethodName            = "/usergroup.UserGroupService/GrantUserGroup"
	UserGroupService_ListGrantedUserGroup_FullMethodName      = "/usergroup.UserGroupService/ListGrantedUserGroup"
	UserGroupService_DeleteGrantedUserGroup_FullMethodName    = "/usergroup.UserGroupService/DeleteGrantedUserGroup"
	UserGroupService_UpdateGrantedUserGroup_FullMethodName    = "/usergroup.UserGroupService/UpdateGrantedUserGroup"
	UserGroupService_GetGrantedUserGroupDetail_FullMethodName = "/usergroup.UserGroupService/GetGrantedUserGroupDetail"
	UserGroupService_ListUserGroup_FullMethodName             = "/usergroup.UserGroupService/ListUserGroup"
	UserGroupService_ListUserGroupUsers_FullMethodName        = "/usergroup.UserGroupService/ListUserGroupUsers"
	UserGroupService_ListUser_FullMethodName                  = "/usergroup.UserGroupService/ListUser"
)

// UserGroupServiceClient is the client API for UserGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGroupServiceClient interface {
	// 管理-云原生管理-用户组-授权
	GrantUserGroup(ctx context.Context, in *GrantUserGroupRequest, opts ...grpc.CallOption) (*GrantUserGroupResponse, error)
	// 查看-云原生管理-用户组-授权列表
	ListGrantedUserGroup(ctx context.Context, in *ListGrantedUserGroupRequest, opts ...grpc.CallOption) (*ListGrantedUserGroupResponse, error)
	// 管理-云原生管理-用户组-删除授权
	DeleteGrantedUserGroup(ctx context.Context, in *DeleteGrantedUserGroupRequest, opts ...grpc.CallOption) (*DeleteGrantedUserGroupResponse, error)
	// 管理-云原生管理-用户组-编辑授权
	UpdateGrantedUserGroup(ctx context.Context, in *UpdateGrantedUserGroupRequest, opts ...grpc.CallOption) (*UpdateGrantedUserGroupResponse, error)
	// 查看-云原生管理-用户组-授权详情
	GetGrantedUserGroupDetail(ctx context.Context, in *GetGrantedUserGroupDetailRequest, opts ...grpc.CallOption) (*GetGrantedUserGroupDetailResponse, error)
	// 查看-云原生管理-用户组-列表
	ListUserGroup(ctx context.Context, in *ListUserGroupRequest, opts ...grpc.CallOption) (*ListUserGroupResponse, error)
	// 查看-云原生管理-用户组-成员列表
	ListUserGroupUsers(ctx context.Context, in *ListUserGroupUsersRequest, opts ...grpc.CallOption) (*ListUserGroupUsersResponse, error)
	// 查看-云原生管理-用户列表
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
}

type userGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGroupServiceClient(cc grpc.ClientConnInterface) UserGroupServiceClient {
	return &userGroupServiceClient{cc}
}

func (c *userGroupServiceClient) GrantUserGroup(ctx context.Context, in *GrantUserGroupRequest, opts ...grpc.CallOption) (*GrantUserGroupResponse, error) {
	out := new(GrantUserGroupResponse)
	err := c.cc.Invoke(ctx, UserGroupService_GrantUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) ListGrantedUserGroup(ctx context.Context, in *ListGrantedUserGroupRequest, opts ...grpc.CallOption) (*ListGrantedUserGroupResponse, error) {
	out := new(ListGrantedUserGroupResponse)
	err := c.cc.Invoke(ctx, UserGroupService_ListGrantedUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) DeleteGrantedUserGroup(ctx context.Context, in *DeleteGrantedUserGroupRequest, opts ...grpc.CallOption) (*DeleteGrantedUserGroupResponse, error) {
	out := new(DeleteGrantedUserGroupResponse)
	err := c.cc.Invoke(ctx, UserGroupService_DeleteGrantedUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) UpdateGrantedUserGroup(ctx context.Context, in *UpdateGrantedUserGroupRequest, opts ...grpc.CallOption) (*UpdateGrantedUserGroupResponse, error) {
	out := new(UpdateGrantedUserGroupResponse)
	err := c.cc.Invoke(ctx, UserGroupService_UpdateGrantedUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) GetGrantedUserGroupDetail(ctx context.Context, in *GetGrantedUserGroupDetailRequest, opts ...grpc.CallOption) (*GetGrantedUserGroupDetailResponse, error) {
	out := new(GetGrantedUserGroupDetailResponse)
	err := c.cc.Invoke(ctx, UserGroupService_GetGrantedUserGroupDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) ListUserGroup(ctx context.Context, in *ListUserGroupRequest, opts ...grpc.CallOption) (*ListUserGroupResponse, error) {
	out := new(ListUserGroupResponse)
	err := c.cc.Invoke(ctx, UserGroupService_ListUserGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) ListUserGroupUsers(ctx context.Context, in *ListUserGroupUsersRequest, opts ...grpc.CallOption) (*ListUserGroupUsersResponse, error) {
	out := new(ListUserGroupUsersResponse)
	err := c.cc.Invoke(ctx, UserGroupService_ListUserGroupUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, UserGroupService_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGroupServiceServer is the server API for UserGroupService service.
// All implementations must embed UnimplementedUserGroupServiceServer
// for forward compatibility
type UserGroupServiceServer interface {
	// 管理-云原生管理-用户组-授权
	GrantUserGroup(context.Context, *GrantUserGroupRequest) (*GrantUserGroupResponse, error)
	// 查看-云原生管理-用户组-授权列表
	ListGrantedUserGroup(context.Context, *ListGrantedUserGroupRequest) (*ListGrantedUserGroupResponse, error)
	// 管理-云原生管理-用户组-删除授权
	DeleteGrantedUserGroup(context.Context, *DeleteGrantedUserGroupRequest) (*DeleteGrantedUserGroupResponse, error)
	// 管理-云原生管理-用户组-编辑授权
	UpdateGrantedUserGroup(context.Context, *UpdateGrantedUserGroupRequest) (*UpdateGrantedUserGroupResponse, error)
	// 查看-云原生管理-用户组-授权详情
	GetGrantedUserGroupDetail(context.Context, *GetGrantedUserGroupDetailRequest) (*GetGrantedUserGroupDetailResponse, error)
	// 查看-云原生管理-用户组-列表
	ListUserGroup(context.Context, *ListUserGroupRequest) (*ListUserGroupResponse, error)
	// 查看-云原生管理-用户组-成员列表
	ListUserGroupUsers(context.Context, *ListUserGroupUsersRequest) (*ListUserGroupUsersResponse, error)
	// 查看-云原生管理-用户列表
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	mustEmbedUnimplementedUserGroupServiceServer()
}

// UnimplementedUserGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserGroupServiceServer struct {
}

func (UnimplementedUserGroupServiceServer) GrantUserGroup(context.Context, *GrantUserGroupRequest) (*GrantUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) ListGrantedUserGroup(context.Context, *ListGrantedUserGroupRequest) (*ListGrantedUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGrantedUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) DeleteGrantedUserGroup(context.Context, *DeleteGrantedUserGroupRequest) (*DeleteGrantedUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGrantedUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) UpdateGrantedUserGroup(context.Context, *UpdateGrantedUserGroupRequest) (*UpdateGrantedUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGrantedUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) GetGrantedUserGroupDetail(context.Context, *GetGrantedUserGroupDetailRequest) (*GetGrantedUserGroupDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrantedUserGroupDetail not implemented")
}
func (UnimplementedUserGroupServiceServer) ListUserGroup(context.Context, *ListUserGroupRequest) (*ListUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroup not implemented")
}
func (UnimplementedUserGroupServiceServer) ListUserGroupUsers(context.Context, *ListUserGroupUsersRequest) (*ListUserGroupUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroupUsers not implemented")
}
func (UnimplementedUserGroupServiceServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedUserGroupServiceServer) mustEmbedUnimplementedUserGroupServiceServer() {}

// UnsafeUserGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGroupServiceServer will
// result in compilation errors.
type UnsafeUserGroupServiceServer interface {
	mustEmbedUnimplementedUserGroupServiceServer()
}

func RegisterUserGroupServiceServer(s grpc.ServiceRegistrar, srv UserGroupServiceServer) {
	s.RegisterService(&UserGroupService_ServiceDesc, srv)
}

func _UserGroupService_GrantUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).GrantUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupService_GrantUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).GrantUserGroup(ctx, req.(*GrantUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_ListGrantedUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGrantedUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).ListGrantedUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupService_ListGrantedUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).ListGrantedUserGroup(ctx, req.(*ListGrantedUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_DeleteGrantedUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGrantedUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).DeleteGrantedUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupService_DeleteGrantedUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).DeleteGrantedUserGroup(ctx, req.(*DeleteGrantedUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_UpdateGrantedUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGrantedUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).UpdateGrantedUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupService_UpdateGrantedUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).UpdateGrantedUserGroup(ctx, req.(*UpdateGrantedUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_GetGrantedUserGroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrantedUserGroupDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).GetGrantedUserGroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupService_GetGrantedUserGroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).GetGrantedUserGroupDetail(ctx, req.(*GetGrantedUserGroupDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_ListUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).ListUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupService_ListUserGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).ListUserGroup(ctx, req.(*ListUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_ListUserGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).ListUserGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupService_ListUserGroupUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).ListUserGroupUsers(ctx, req.(*ListUserGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGroupService_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGroupService_ServiceDesc is the grpc.ServiceDesc for UserGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usergroup.UserGroupService",
	HandlerType: (*UserGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrantUserGroup",
			Handler:    _UserGroupService_GrantUserGroup_Handler,
		},
		{
			MethodName: "ListGrantedUserGroup",
			Handler:    _UserGroupService_ListGrantedUserGroup_Handler,
		},
		{
			MethodName: "DeleteGrantedUserGroup",
			Handler:    _UserGroupService_DeleteGrantedUserGroup_Handler,
		},
		{
			MethodName: "UpdateGrantedUserGroup",
			Handler:    _UserGroupService_UpdateGrantedUserGroup_Handler,
		},
		{
			MethodName: "GetGrantedUserGroupDetail",
			Handler:    _UserGroupService_GetGrantedUserGroupDetail_Handler,
		},
		{
			MethodName: "ListUserGroup",
			Handler:    _UserGroupService_ListUserGroup_Handler,
		},
		{
			MethodName: "ListUserGroupUsers",
			Handler:    _UserGroupService_ListUserGroupUsers_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _UserGroupService_ListUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/usergroup.v1.proto",
}
