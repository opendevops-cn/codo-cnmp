// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/pvc.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListPersistentVolumeClaimRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListPersistentVolumeClaimRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPersistentVolumeClaimRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPersistentVolumeClaimRequestMultiError, or nil if none found.
func (m *ListPersistentVolumeClaimRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPersistentVolumeClaimRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListPersistentVolumeClaimRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListPersistentVolumeClaimRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListPersistentVolumeClaimRequestMultiError(errors)
	}

	return nil
}

// ListPersistentVolumeClaimRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListPersistentVolumeClaimRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPersistentVolumeClaimRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPersistentVolumeClaimRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPersistentVolumeClaimRequestMultiError) AllErrors() []error { return m }

// ListPersistentVolumeClaimRequestValidationError is the validation error
// returned by ListPersistentVolumeClaimRequest.Validate if the designated
// constraints aren't met.
type ListPersistentVolumeClaimRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersistentVolumeClaimRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersistentVolumeClaimRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersistentVolumeClaimRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersistentVolumeClaimRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersistentVolumeClaimRequestValidationError) ErrorName() string {
	return "ListPersistentVolumeClaimRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersistentVolumeClaimRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersistentVolumeClaimRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersistentVolumeClaimRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersistentVolumeClaimRequestValidationError{}

// Validate checks the field values on PersistentVolumeClaimItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersistentVolumeClaimItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersistentVolumeClaimItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PersistentVolumeClaimItemMultiError, or nil if none found.
func (m *PersistentVolumeClaimItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PersistentVolumeClaimItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PersistentVolumeClaimItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for IsFollowed

	// no validation rules for Yaml

	// no validation rules for Capacity

	// no validation rules for Status

	// no validation rules for VolumeName

	// no validation rules for StorageClassName

	if len(errors) > 0 {
		return PersistentVolumeClaimItemMultiError(errors)
	}

	return nil
}

// PersistentVolumeClaimItemMultiError is an error wrapping multiple validation
// errors returned by PersistentVolumeClaimItem.ValidateAll() if the
// designated constraints aren't met.
type PersistentVolumeClaimItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersistentVolumeClaimItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersistentVolumeClaimItemMultiError) AllErrors() []error { return m }

// PersistentVolumeClaimItemValidationError is the validation error returned by
// PersistentVolumeClaimItem.Validate if the designated constraints aren't met.
type PersistentVolumeClaimItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersistentVolumeClaimItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersistentVolumeClaimItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersistentVolumeClaimItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersistentVolumeClaimItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersistentVolumeClaimItemValidationError) ErrorName() string {
	return "PersistentVolumeClaimItemValidationError"
}

// Error satisfies the builtin error interface
func (e PersistentVolumeClaimItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersistentVolumeClaimItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersistentVolumeClaimItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersistentVolumeClaimItemValidationError{}

// Validate checks the field values on ListPersistentVolumeClaimResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListPersistentVolumeClaimResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPersistentVolumeClaimResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListPersistentVolumeClaimResponseMultiError, or nil if none found.
func (m *ListPersistentVolumeClaimResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPersistentVolumeClaimResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPersistentVolumeClaimResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPersistentVolumeClaimResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPersistentVolumeClaimResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPersistentVolumeClaimResponseMultiError(errors)
	}

	return nil
}

// ListPersistentVolumeClaimResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListPersistentVolumeClaimResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPersistentVolumeClaimResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPersistentVolumeClaimResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPersistentVolumeClaimResponseMultiError) AllErrors() []error { return m }

// ListPersistentVolumeClaimResponseValidationError is the validation error
// returned by ListPersistentVolumeClaimResponse.Validate if the designated
// constraints aren't met.
type ListPersistentVolumeClaimResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersistentVolumeClaimResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersistentVolumeClaimResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersistentVolumeClaimResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersistentVolumeClaimResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersistentVolumeClaimResponseValidationError) ErrorName() string {
	return "ListPersistentVolumeClaimResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersistentVolumeClaimResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersistentVolumeClaimResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersistentVolumeClaimResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersistentVolumeClaimResponseValidationError{}

// Validate checks the field values on DeletePersistentVolumeClaimRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeletePersistentVolumeClaimRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePersistentVolumeClaimRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeletePersistentVolumeClaimRequestMultiError, or nil if none found.
func (m *DeletePersistentVolumeClaimRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePersistentVolumeClaimRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeletePersistentVolumeClaimRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeletePersistentVolumeClaimRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeletePersistentVolumeClaimRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePersistentVolumeClaimRequestMultiError(errors)
	}

	return nil
}

// DeletePersistentVolumeClaimRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeletePersistentVolumeClaimRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePersistentVolumeClaimRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePersistentVolumeClaimRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePersistentVolumeClaimRequestMultiError) AllErrors() []error { return m }

// DeletePersistentVolumeClaimRequestValidationError is the validation error
// returned by DeletePersistentVolumeClaimRequest.Validate if the designated
// constraints aren't met.
type DeletePersistentVolumeClaimRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePersistentVolumeClaimRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePersistentVolumeClaimRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePersistentVolumeClaimRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePersistentVolumeClaimRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePersistentVolumeClaimRequestValidationError) ErrorName() string {
	return "DeletePersistentVolumeClaimRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePersistentVolumeClaimRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePersistentVolumeClaimRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePersistentVolumeClaimRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePersistentVolumeClaimRequestValidationError{}

// Validate checks the field values on DeletePersistentVolumeClaimResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeletePersistentVolumeClaimResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePersistentVolumeClaimResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeletePersistentVolumeClaimResponseMultiError, or nil if none found.
func (m *DeletePersistentVolumeClaimResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePersistentVolumeClaimResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePersistentVolumeClaimResponseMultiError(errors)
	}

	return nil
}

// DeletePersistentVolumeClaimResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeletePersistentVolumeClaimResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePersistentVolumeClaimResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePersistentVolumeClaimResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePersistentVolumeClaimResponseMultiError) AllErrors() []error { return m }

// DeletePersistentVolumeClaimResponseValidationError is the validation error
// returned by DeletePersistentVolumeClaimResponse.Validate if the designated
// constraints aren't met.
type DeletePersistentVolumeClaimResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePersistentVolumeClaimResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePersistentVolumeClaimResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePersistentVolumeClaimResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePersistentVolumeClaimResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePersistentVolumeClaimResponseValidationError) ErrorName() string {
	return "DeletePersistentVolumeClaimResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePersistentVolumeClaimResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePersistentVolumeClaimResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePersistentVolumeClaimResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePersistentVolumeClaimResponseValidationError{}
