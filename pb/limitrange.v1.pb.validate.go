// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/limitrange.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListLimitRangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLimitRangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLimitRangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLimitRangeRequestMultiError, or nil if none found.
func (m *ListLimitRangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLimitRangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListLimitRangeRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListLimitRangeRequestMultiError(errors)
	}

	return nil
}

// ListLimitRangeRequestMultiError is an error wrapping multiple validation
// errors returned by ListLimitRangeRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLimitRangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLimitRangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLimitRangeRequestMultiError) AllErrors() []error { return m }

// ListLimitRangeRequestValidationError is the validation error returned by
// ListLimitRangeRequest.Validate if the designated constraints aren't met.
type ListLimitRangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLimitRangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLimitRangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLimitRangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLimitRangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLimitRangeRequestValidationError) ErrorName() string {
	return "ListLimitRangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLimitRangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLimitRangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLimitRangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLimitRangeRequestValidationError{}

// Validate checks the field values on ContainerLimitRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerLimitRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerLimitRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerLimitRangeMultiError, or nil if none found.
func (m *ContainerLimitRange) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerLimitRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DefaultCpu

	// no validation rules for DefaultMem

	// no validation rules for DefaultCpuRequest

	// no validation rules for DefaultMemRequest

	// no validation rules for MinCpu

	// no validation rules for MinMem

	// no validation rules for MaxCpu

	// no validation rules for MaxMem

	if len(errors) > 0 {
		return ContainerLimitRangeMultiError(errors)
	}

	return nil
}

// ContainerLimitRangeMultiError is an error wrapping multiple validation
// errors returned by ContainerLimitRange.ValidateAll() if the designated
// constraints aren't met.
type ContainerLimitRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerLimitRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerLimitRangeMultiError) AllErrors() []error { return m }

// ContainerLimitRangeValidationError is the validation error returned by
// ContainerLimitRange.Validate if the designated constraints aren't met.
type ContainerLimitRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerLimitRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerLimitRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerLimitRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerLimitRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerLimitRangeValidationError) ErrorName() string {
	return "ContainerLimitRangeValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerLimitRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerLimitRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerLimitRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerLimitRangeValidationError{}

// Validate checks the field values on PodLimitRange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodLimitRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodLimitRange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodLimitRangeMultiError, or
// nil if none found.
func (m *PodLimitRange) ValidateAll() error {
	return m.validate(true)
}

func (m *PodLimitRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxCpu

	// no validation rules for MaxMem

	if len(errors) > 0 {
		return PodLimitRangeMultiError(errors)
	}

	return nil
}

// PodLimitRangeMultiError is an error wrapping multiple validation errors
// returned by PodLimitRange.ValidateAll() if the designated constraints
// aren't met.
type PodLimitRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodLimitRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodLimitRangeMultiError) AllErrors() []error { return m }

// PodLimitRangeValidationError is the validation error returned by
// PodLimitRange.Validate if the designated constraints aren't met.
type PodLimitRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodLimitRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodLimitRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodLimitRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodLimitRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodLimitRangeValidationError) ErrorName() string { return "PodLimitRangeValidationError" }

// Error satisfies the builtin error interface
func (e PodLimitRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodLimitRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodLimitRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodLimitRangeValidationError{}

// Validate checks the field values on PersistentVolumeClaimLimitRange with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersistentVolumeClaimLimitRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersistentVolumeClaimLimitRange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PersistentVolumeClaimLimitRangeMultiError, or nil if none found.
func (m *PersistentVolumeClaimLimitRange) ValidateAll() error {
	return m.validate(true)
}

func (m *PersistentVolumeClaimLimitRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinResourceStorageRequest

	// no validation rules for MaxResourceStorageRequest

	if len(errors) > 0 {
		return PersistentVolumeClaimLimitRangeMultiError(errors)
	}

	return nil
}

// PersistentVolumeClaimLimitRangeMultiError is an error wrapping multiple
// validation errors returned by PersistentVolumeClaimLimitRange.ValidateAll()
// if the designated constraints aren't met.
type PersistentVolumeClaimLimitRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersistentVolumeClaimLimitRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersistentVolumeClaimLimitRangeMultiError) AllErrors() []error { return m }

// PersistentVolumeClaimLimitRangeValidationError is the validation error
// returned by PersistentVolumeClaimLimitRange.Validate if the designated
// constraints aren't met.
type PersistentVolumeClaimLimitRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersistentVolumeClaimLimitRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersistentVolumeClaimLimitRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersistentVolumeClaimLimitRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersistentVolumeClaimLimitRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersistentVolumeClaimLimitRangeValidationError) ErrorName() string {
	return "PersistentVolumeClaimLimitRangeValidationError"
}

// Error satisfies the builtin error interface
func (e PersistentVolumeClaimLimitRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersistentVolumeClaimLimitRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersistentVolumeClaimLimitRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersistentVolumeClaimLimitRangeValidationError{}

// Validate checks the field values on CreateLimitRangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLimitRangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLimitRangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLimitRangeRequestMultiError, or nil if none found.
func (m *CreateLimitRangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLimitRangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateLimitRangeRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateLimitRangeRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateLimitRangeRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContainerLimitRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLimitRangeRequestValidationError{
					field:  "ContainerLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLimitRangeRequestValidationError{
					field:  "ContainerLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerLimitRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLimitRangeRequestValidationError{
				field:  "ContainerLimitRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPodLimitRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLimitRangeRequestValidationError{
					field:  "PodLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLimitRangeRequestValidationError{
					field:  "PodLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPodLimitRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLimitRangeRequestValidationError{
				field:  "PodLimitRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPersistentVolumeClaimLimitRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLimitRangeRequestValidationError{
					field:  "PersistentVolumeClaimLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLimitRangeRequestValidationError{
					field:  "PersistentVolumeClaimLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPersistentVolumeClaimLimitRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLimitRangeRequestValidationError{
				field:  "PersistentVolumeClaimLimitRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLimitRangeRequestMultiError(errors)
	}

	return nil
}

// CreateLimitRangeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLimitRangeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLimitRangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLimitRangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLimitRangeRequestMultiError) AllErrors() []error { return m }

// CreateLimitRangeRequestValidationError is the validation error returned by
// CreateLimitRangeRequest.Validate if the designated constraints aren't met.
type CreateLimitRangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLimitRangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLimitRangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLimitRangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLimitRangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLimitRangeRequestValidationError) ErrorName() string {
	return "CreateLimitRangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLimitRangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLimitRangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLimitRangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLimitRangeRequestValidationError{}

// Validate checks the field values on LimitRangeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LimitRangeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LimitRangeItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LimitRangeItemMultiError,
// or nil if none found.
func (m *LimitRangeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *LimitRangeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := LimitRangeItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := LimitRangeItemValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContainerLimitRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LimitRangeItemValidationError{
					field:  "ContainerLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LimitRangeItemValidationError{
					field:  "ContainerLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContainerLimitRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LimitRangeItemValidationError{
				field:  "ContainerLimitRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPodLimitRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LimitRangeItemValidationError{
					field:  "PodLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LimitRangeItemValidationError{
					field:  "PodLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPodLimitRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LimitRangeItemValidationError{
				field:  "PodLimitRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPersistentVolumeClaimLimitRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LimitRangeItemValidationError{
					field:  "PersistentVolumeClaimLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LimitRangeItemValidationError{
					field:  "PersistentVolumeClaimLimitRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPersistentVolumeClaimLimitRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LimitRangeItemValidationError{
				field:  "PersistentVolumeClaimLimitRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for Yaml

	if len(errors) > 0 {
		return LimitRangeItemMultiError(errors)
	}

	return nil
}

// LimitRangeItemMultiError is an error wrapping multiple validation errors
// returned by LimitRangeItem.ValidateAll() if the designated constraints
// aren't met.
type LimitRangeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LimitRangeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LimitRangeItemMultiError) AllErrors() []error { return m }

// LimitRangeItemValidationError is the validation error returned by
// LimitRangeItem.Validate if the designated constraints aren't met.
type LimitRangeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LimitRangeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LimitRangeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LimitRangeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LimitRangeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LimitRangeItemValidationError) ErrorName() string { return "LimitRangeItemValidationError" }

// Error satisfies the builtin error interface
func (e LimitRangeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLimitRangeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LimitRangeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LimitRangeItemValidationError{}

// Validate checks the field values on CreateLimitRangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLimitRangeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLimitRangeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLimitRangeResponseMultiError, or nil if none found.
func (m *CreateLimitRangeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLimitRangeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateLimitRangeResponseMultiError(errors)
	}

	return nil
}

// CreateLimitRangeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateLimitRangeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateLimitRangeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLimitRangeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLimitRangeResponseMultiError) AllErrors() []error { return m }

// CreateLimitRangeResponseValidationError is the validation error returned by
// CreateLimitRangeResponse.Validate if the designated constraints aren't met.
type CreateLimitRangeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLimitRangeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLimitRangeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLimitRangeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLimitRangeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLimitRangeResponseValidationError) ErrorName() string {
	return "CreateLimitRangeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLimitRangeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLimitRangeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLimitRangeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLimitRangeResponseValidationError{}

// Validate checks the field values on ListLimitRangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLimitRangeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLimitRangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLimitRangeResponseMultiError, or nil if none found.
func (m *ListLimitRangeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLimitRangeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLimitRangeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLimitRangeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLimitRangeResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLimitRangeResponseMultiError(errors)
	}

	return nil
}

// ListLimitRangeResponseMultiError is an error wrapping multiple validation
// errors returned by ListLimitRangeResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLimitRangeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLimitRangeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLimitRangeResponseMultiError) AllErrors() []error { return m }

// ListLimitRangeResponseValidationError is the validation error returned by
// ListLimitRangeResponse.Validate if the designated constraints aren't met.
type ListLimitRangeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLimitRangeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLimitRangeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLimitRangeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLimitRangeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLimitRangeResponseValidationError) ErrorName() string {
	return "ListLimitRangeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLimitRangeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLimitRangeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLimitRangeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLimitRangeResponseValidationError{}

// Validate checks the field values on LimitRangeDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LimitRangeDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LimitRangeDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LimitRangeDetailRequestMultiError, or nil if none found.
func (m *LimitRangeDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LimitRangeDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := LimitRangeDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := LimitRangeDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := LimitRangeDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LimitRangeDetailRequestMultiError(errors)
	}

	return nil
}

// LimitRangeDetailRequestMultiError is an error wrapping multiple validation
// errors returned by LimitRangeDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type LimitRangeDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LimitRangeDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LimitRangeDetailRequestMultiError) AllErrors() []error { return m }

// LimitRangeDetailRequestValidationError is the validation error returned by
// LimitRangeDetailRequest.Validate if the designated constraints aren't met.
type LimitRangeDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LimitRangeDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LimitRangeDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LimitRangeDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LimitRangeDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LimitRangeDetailRequestValidationError) ErrorName() string {
	return "LimitRangeDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LimitRangeDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLimitRangeDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LimitRangeDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LimitRangeDetailRequestValidationError{}

// Validate checks the field values on LimitRangeDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LimitRangeDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LimitRangeDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LimitRangeDetailResponseMultiError, or nil if none found.
func (m *LimitRangeDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LimitRangeDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LimitRangeDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LimitRangeDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LimitRangeDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LimitRangeDetailResponseMultiError(errors)
	}

	return nil
}

// LimitRangeDetailResponseMultiError is an error wrapping multiple validation
// errors returned by LimitRangeDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type LimitRangeDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LimitRangeDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LimitRangeDetailResponseMultiError) AllErrors() []error { return m }

// LimitRangeDetailResponseValidationError is the validation error returned by
// LimitRangeDetailResponse.Validate if the designated constraints aren't met.
type LimitRangeDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LimitRangeDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LimitRangeDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LimitRangeDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LimitRangeDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LimitRangeDetailResponseValidationError) ErrorName() string {
	return "LimitRangeDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LimitRangeDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLimitRangeDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LimitRangeDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LimitRangeDetailResponseValidationError{}

// Validate checks the field values on DeleteLimitRangeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLimitRangeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLimitRangeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLimitRangeRequestMultiError, or nil if none found.
func (m *DeleteLimitRangeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLimitRangeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteLimitRangeRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteLimitRangeRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteLimitRangeRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteLimitRangeRequestMultiError(errors)
	}

	return nil
}

// DeleteLimitRangeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLimitRangeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteLimitRangeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLimitRangeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLimitRangeRequestMultiError) AllErrors() []error { return m }

// DeleteLimitRangeRequestValidationError is the validation error returned by
// DeleteLimitRangeRequest.Validate if the designated constraints aren't met.
type DeleteLimitRangeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLimitRangeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLimitRangeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLimitRangeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLimitRangeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLimitRangeRequestValidationError) ErrorName() string {
	return "DeleteLimitRangeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLimitRangeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLimitRangeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLimitRangeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLimitRangeRequestValidationError{}

// Validate checks the field values on DeleteLimitRangeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLimitRangeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLimitRangeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLimitRangeResponseMultiError, or nil if none found.
func (m *DeleteLimitRangeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLimitRangeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteLimitRangeResponseMultiError(errors)
	}

	return nil
}

// DeleteLimitRangeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteLimitRangeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteLimitRangeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLimitRangeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLimitRangeResponseMultiError) AllErrors() []error { return m }

// DeleteLimitRangeResponseValidationError is the validation error returned by
// DeleteLimitRangeResponse.Validate if the designated constraints aren't met.
type DeleteLimitRangeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLimitRangeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLimitRangeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLimitRangeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLimitRangeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLimitRangeResponseValidationError) ErrorName() string {
	return "DeleteLimitRangeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLimitRangeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLimitRangeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLimitRangeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLimitRangeResponseValidationError{}
