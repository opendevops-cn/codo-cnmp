// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/pod.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 控制器类型
type ListControllerPodRequest_ControllerType int32

const (
	// Deployment
	ListControllerPodRequest_Deployment ListControllerPodRequest_ControllerType = 0
	// StatefulSet
	ListControllerPodRequest_StatefulSet ListControllerPodRequest_ControllerType = 1
	// DaemonSet
	ListControllerPodRequest_DaemonSet ListControllerPodRequest_ControllerType = 2
	// Job
	ListControllerPodRequest_Job ListControllerPodRequest_ControllerType = 3
	// CloneSet
	ListControllerPodRequest_CloneSet ListControllerPodRequest_ControllerType = 4
	// GameServerSet
	ListControllerPodRequest_GameServerSet ListControllerPodRequest_ControllerType = 5
	// Hpa
	ListControllerPodRequest_Hpa ListControllerPodRequest_ControllerType = 6
	// SideCarSet
	ListControllerPodRequest_SideCarSet ListControllerPodRequest_ControllerType = 7
	// Pod
	ListControllerPodRequest_Pod ListControllerPodRequest_ControllerType = 8
	// Service
	ListControllerPodRequest_Service ListControllerPodRequest_ControllerType = 9
)

// Enum value maps for ListControllerPodRequest_ControllerType.
var (
	ListControllerPodRequest_ControllerType_name = map[int32]string{
		0: "Deployment",
		1: "StatefulSet",
		2: "DaemonSet",
		3: "Job",
		4: "CloneSet",
		5: "GameServerSet",
		6: "Hpa",
		7: "SideCarSet",
		8: "Pod",
		9: "Service",
	}
	ListControllerPodRequest_ControllerType_value = map[string]int32{
		"Deployment":    0,
		"StatefulSet":   1,
		"DaemonSet":     2,
		"Job":           3,
		"CloneSet":      4,
		"GameServerSet": 5,
		"Hpa":           6,
		"SideCarSet":    7,
		"Pod":           8,
		"Service":       9,
	}
)

func (x ListControllerPodRequest_ControllerType) Enum() *ListControllerPodRequest_ControllerType {
	p := new(ListControllerPodRequest_ControllerType)
	*p = x
	return p
}

func (x ListControllerPodRequest_ControllerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListControllerPodRequest_ControllerType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_pod_v1_proto_enumTypes[0].Descriptor()
}

func (ListControllerPodRequest_ControllerType) Type() protoreflect.EnumType {
	return &file_pb_pod_v1_proto_enumTypes[0]
}

func (x ListControllerPodRequest_ControllerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListControllerPodRequest_ControllerType.Descriptor instead.
func (ListControllerPodRequest_ControllerType) EnumDescriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{3, 0}
}

// Pod列表请求
type ListPodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 节点名称
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,7,opt,name=list_all,json=listAll,proto3" json:"list_all,optional"`
}

func (x *ListPodRequest) Reset() {
	*x = ListPodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPodRequest) ProtoMessage() {}

func (x *ListPodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPodRequest.ProtoReflect.Descriptor instead.
func (*ListPodRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListPodRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListPodRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ListPodRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListPodRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListPodRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPodRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPodRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

type PodResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cpu请求
	CpuRequest uint32 `protobuf:"varint,1,opt,name=cpu_request,json=cpuRequest,proto3" json:"cpu_request,optional"`
	// cpu限制
	CpuLimit uint32 `protobuf:"varint,2,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,optional"`
	// 内存请求
	MemoryRequest uint32 `protobuf:"varint,3,opt,name=memory_request,json=memoryRequest,proto3" json:"memory_request,optional"`
	// 内存限制
	MemoryLimit uint32 `protobuf:"varint,4,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,optional"`
	// 临时存储请求
	EphemeralStorageRequest uint32 `protobuf:"varint,5,opt,name=ephemeral_storage_request,json=ephemeralStorageRequest,proto3" json:"ephemeral_storage_request,optional"`
	// 临时存储限制
	EphemeralStorageLimit uint32 `protobuf:"varint,6,opt,name=ephemeral_storage_limit,json=ephemeralStorageLimit,proto3" json:"ephemeral_storage_limit,optional"`
	// 总cpu请求
	TotalCpuRequest uint32 `protobuf:"varint,7,opt,name=total_cpu_request,json=totalCpuRequest,proto3" json:"total_cpu_request,optional"`
	// 总cpu限制
	TotalCpuLimit uint32 `protobuf:"varint,8,opt,name=total_cpu_limit,json=totalCpuLimit,proto3" json:"total_cpu_limit,optional"`
	// 总内存请求
	TotalMemoryRequest uint32 `protobuf:"varint,9,opt,name=total_memory_request,json=totalMemoryRequest,proto3" json:"total_memory_request,optional"`
	// 总内存限制
	TotalMemoryLimit uint32 `protobuf:"varint,10,opt,name=total_memory_limit,json=totalMemoryLimit,proto3" json:"total_memory_limit,optional"`
	// 总临时存储请求
	TotalEphemeralStorageRequest uint32 `protobuf:"varint,11,opt,name=total_ephemeral_storage_request,json=totalEphemeralStorageRequest,proto3" json:"total_ephemeral_storage_request,optional"`
	// 总临时存储限制
	TotalEphemeralStorageLimit uint32 `protobuf:"varint,12,opt,name=total_ephemeral_storage_limit,json=totalEphemeralStorageLimit,proto3" json:"total_ephemeral_storage_limit,optional"`
}

func (x *PodResourceUsage) Reset() {
	*x = PodResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodResourceUsage) ProtoMessage() {}

func (x *PodResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodResourceUsage.ProtoReflect.Descriptor instead.
func (*PodResourceUsage) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{1}
}

func (x *PodResourceUsage) GetCpuRequest() uint32 {
	if x != nil {
		return x.CpuRequest
	}
	return 0
}

func (x *PodResourceUsage) GetCpuLimit() uint32 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *PodResourceUsage) GetMemoryRequest() uint32 {
	if x != nil {
		return x.MemoryRequest
	}
	return 0
}

func (x *PodResourceUsage) GetMemoryLimit() uint32 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *PodResourceUsage) GetEphemeralStorageRequest() uint32 {
	if x != nil {
		return x.EphemeralStorageRequest
	}
	return 0
}

func (x *PodResourceUsage) GetEphemeralStorageLimit() uint32 {
	if x != nil {
		return x.EphemeralStorageLimit
	}
	return 0
}

func (x *PodResourceUsage) GetTotalCpuRequest() uint32 {
	if x != nil {
		return x.TotalCpuRequest
	}
	return 0
}

func (x *PodResourceUsage) GetTotalCpuLimit() uint32 {
	if x != nil {
		return x.TotalCpuLimit
	}
	return 0
}

func (x *PodResourceUsage) GetTotalMemoryRequest() uint32 {
	if x != nil {
		return x.TotalMemoryRequest
	}
	return 0
}

func (x *PodResourceUsage) GetTotalMemoryLimit() uint32 {
	if x != nil {
		return x.TotalMemoryLimit
	}
	return 0
}

func (x *PodResourceUsage) GetTotalEphemeralStorageRequest() uint32 {
	if x != nil {
		return x.TotalEphemeralStorageRequest
	}
	return 0
}

func (x *PodResourceUsage) GetTotalEphemeralStorageLimit() uint32 {
	if x != nil {
		return x.TotalEphemeralStorageLimit
	}
	return 0
}

// Pod列表项
type PodItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pod名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 镜像
	Containers []*v1.Container `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,optional"`
	// 状态
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,optional"`
	// 重启次数
	RestartCount uint32 `protobuf:"varint,5,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,optional"`
	// 运行时间
	CreateTime uint64 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,optional"`
	// 工作负载
	Workload string `protobuf:"bytes,7,opt,name=workload,proto3" json:"workload,optional"`
	// ready数量
	ReadyCount uint32 `protobuf:"varint,8,opt,name=ready_count,json=readyCount,proto3" json:"ready_count,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,9,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
	// 资源使用情况
	ResourceUsage *PodResourceUsage `protobuf:"bytes,10,opt,name=resource_usage,proto3" json:"resource_usage,optional"`
}

func (x *PodItem) Reset() {
	*x = PodItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodItem) ProtoMessage() {}

func (x *PodItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodItem.ProtoReflect.Descriptor instead.
func (*PodItem) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{2}
}

func (x *PodItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PodItem) GetContainers() []*v1.Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *PodItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PodItem) GetRestartCount() uint32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *PodItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *PodItem) GetWorkload() string {
	if x != nil {
		return x.Workload
	}
	return ""
}

func (x *PodItem) GetReadyCount() uint32 {
	if x != nil {
		return x.ReadyCount
	}
	return 0
}

func (x *PodItem) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

func (x *PodItem) GetResourceUsage() *PodResourceUsage {
	if x != nil {
		return x.ResourceUsage
	}
	return nil
}

// 控制器Pod列表请求
type ListControllerPodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 控制器名称[Deployment/StatefulSet/DaemonSet/Job/CloneSet/GameServerSet名称]
	ControllerName string `protobuf:"bytes,2,opt,name=controller_name,json=controllerName,proto3" json:"controller_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 页码
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll        uint32                                  `protobuf:"varint,6,opt,name=list_all,json=listAll,proto3" json:"list_all,optional"`
	ControllerType ListControllerPodRequest_ControllerType `protobuf:"varint,7,opt,name=controller_type,json=controllerType,proto3,enum=pod.ListControllerPodRequest_ControllerType" json:"controller_type,optional"`
}

func (x *ListControllerPodRequest) Reset() {
	*x = ListControllerPodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListControllerPodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListControllerPodRequest) ProtoMessage() {}

func (x *ListControllerPodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListControllerPodRequest.ProtoReflect.Descriptor instead.
func (*ListControllerPodRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{3}
}

func (x *ListControllerPodRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListControllerPodRequest) GetControllerName() string {
	if x != nil {
		return x.ControllerName
	}
	return ""
}

func (x *ListControllerPodRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListControllerPodRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListControllerPodRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListControllerPodRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

func (x *ListControllerPodRequest) GetControllerType() ListControllerPodRequest_ControllerType {
	if x != nil {
		return x.ControllerType
	}
	return ListControllerPodRequest_Deployment
}

// 控制器Pod详情响应
type ListControllerPodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 控制器Pod列表
	List []*ControllerPodItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListControllerPodResponse) Reset() {
	*x = ListControllerPodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListControllerPodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListControllerPodResponse) ProtoMessage() {}

func (x *ListControllerPodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListControllerPodResponse.ProtoReflect.Descriptor instead.
func (*ListControllerPodResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{4}
}

func (x *ListControllerPodResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListControllerPodResponse) GetList() []*ControllerPodItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 控制器Pod列表项
type ControllerPodItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pod名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 状态
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,optional"`
	// PodIP[实例IP]
	PodIp string `protobuf:"bytes,3,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,optional"`
	// NodeIP[节点IP]
	NodeIp string `protobuf:"bytes,4,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,optional"`
	// 创建时间[豪秒级时间戳]
	CreateTime uint64 `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,optional"`
	// pod调度状态
	PodConditions []*PodCondition `protobuf:"bytes,6,rep,name=pod_conditions,json=podConditions,proto3" json:"pod_conditions,optional"`
	// 容器信息
	Containers []*PodContainerDetail `protobuf:"bytes,7,rep,name=containers,proto3" json:"containers,optional"`
	// node名称
	NodeName string `protobuf:"bytes,8,opt,name=node_name,json=nodeName,proto3" json:"node_name,optional"`
	// yaml
	Yaml string `protobuf:"bytes,9,opt,name=yaml,proto3" json:"yaml,optional"`
	// 是否ready
	IsReady bool `protobuf:"varint,10,opt,name=isReady,proto3" json:"isReady,optional"`
	// 工作负载名称
	Workload string `protobuf:"bytes,11,opt,name=workload,proto3" json:"workload,optional"`
	// 工作负载类型
	WorkloadType string `protobuf:"bytes,12,opt,name=workload_type,json=workloadType,proto3" json:"workload_type,optional"`
	// namespace
	Namespace string `protobuf:"bytes,13,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *ControllerPodItem) Reset() {
	*x = ControllerPodItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerPodItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerPodItem) ProtoMessage() {}

func (x *ControllerPodItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerPodItem.ProtoReflect.Descriptor instead.
func (*ControllerPodItem) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ControllerPodItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ControllerPodItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ControllerPodItem) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

func (x *ControllerPodItem) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *ControllerPodItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ControllerPodItem) GetPodConditions() []*PodCondition {
	if x != nil {
		return x.PodConditions
	}
	return nil
}

func (x *ControllerPodItem) GetContainers() []*PodContainerDetail {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *ControllerPodItem) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ControllerPodItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *ControllerPodItem) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *ControllerPodItem) GetWorkload() string {
	if x != nil {
		return x.Workload
	}
	return ""
}

func (x *ControllerPodItem) GetWorkloadType() string {
	if x != nil {
		return x.WorkloadType
	}
	return ""
}

func (x *ControllerPodItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// podConditions
type PodCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	Status             string  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,optional"`
	LastProbeTime      uint64  `protobuf:"varint,3,opt,name=lastProbeTime,proto3" json:"lastProbeTime,optional"`
	LastTransitionTime uint64  `protobuf:"varint,4,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,optional"`
	Reason             *string `protobuf:"bytes,5,opt,name=reason,proto3,oneof" json:"reason,optional"`
	Message            *string `protobuf:"bytes,6,opt,name=message,proto3,oneof" json:"message,optional"`
}

func (x *PodCondition) Reset() {
	*x = PodCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodCondition) ProtoMessage() {}

func (x *PodCondition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodCondition.ProtoReflect.Descriptor instead.
func (*PodCondition) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{6}
}

func (x *PodCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PodCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PodCondition) GetLastProbeTime() uint64 {
	if x != nil {
		return x.LastProbeTime
	}
	return 0
}

func (x *PodCondition) GetLastTransitionTime() uint64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *PodCondition) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *PodCondition) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// ContainerVolumeMount
type ContainerVolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 挂载content
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,optional"`
	// 只读
	ReadOnly bool `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,optional"`
}

func (x *ContainerVolumeMount) Reset() {
	*x = ContainerVolumeMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerVolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerVolumeMount) ProtoMessage() {}

func (x *ContainerVolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerVolumeMount.ProtoReflect.Descriptor instead.
func (*ContainerVolumeMount) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{7}
}

func (x *ContainerVolumeMount) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ContainerVolumeMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits   map[string]string `protobuf:"bytes,1,rep,name=limits,proto3" json:"limits,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Requests map[string]string `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceRequirements) GetLimits() map[string]string {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ResourceRequirements) GetRequests() map[string]string {
	if x != nil {
		return x.Requests
	}
	return nil
}

type ContainerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 等待状态容器的详细信息
	Waiting *ContainerStateWaiting `protobuf:"bytes,1,opt,name=waiting,proto3" json:"waiting,optional"`
	// 运行状态容器的详细信息
	Running *ContainerStateRunning `protobuf:"bytes,2,opt,name=running,proto3" json:"running,optional"`
	// 已终止容器的详细信息
	Terminated *ContainerStateTerminated `protobuf:"bytes,3,opt,name=terminated,proto3" json:"terminated,optional"`
}

func (x *ContainerState) Reset() {
	*x = ContainerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerState) ProtoMessage() {}

func (x *ContainerState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerState.ProtoReflect.Descriptor instead.
func (*ContainerState) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{9}
}

func (x *ContainerState) GetWaiting() *ContainerStateWaiting {
	if x != nil {
		return x.Waiting
	}
	return nil
}

func (x *ContainerState) GetRunning() *ContainerStateRunning {
	if x != nil {
		return x.Running
	}
	return nil
}

func (x *ContainerState) GetTerminated() *ContainerStateTerminated {
	if x != nil {
		return x.Terminated
	}
	return nil
}

// ContainerStateRunning 表示容器的运行状态
type ContainerStateRunning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 容器最后一次（重新）启动的时间
	StartedAt uint64 `protobuf:"varint,1,opt,name=startedAt,proto3" json:"startedAt,optional"`
}

func (x *ContainerStateRunning) Reset() {
	*x = ContainerStateRunning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStateRunning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStateRunning) ProtoMessage() {}

func (x *ContainerStateRunning) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStateRunning.ProtoReflect.Descriptor instead.
func (*ContainerStateRunning) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{10}
}

func (x *ContainerStateRunning) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

// ContainerStateTerminated 表示容器的终止状态
type ContainerStateTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 容器最后终止时的退出状态码
	ExitCode uint32 `protobuf:"varint,1,opt,name=exitCode,proto3" json:"exitCode,optional"`
	// 容器最后终止时的信号
	Signal uint32 `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,optional"`
	// 容器最后终止的（简要）原因
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,optional"`
	// 关于容器最后终止的消息
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,optional"`
	// 容器上一次执行的开始时间
	StartedAt uint64 `protobuf:"varint,5,opt,name=startedAt,proto3" json:"startedAt,optional"`
	// 容器最后终止的时间
	FinishedAt uint64 `protobuf:"varint,6,opt,name=finishedAt,proto3" json:"finishedAt,optional"`
	// 格式为 '<type>://<container_id>' 的容器 ID
	ContainerID string `protobuf:"bytes,7,opt,name=containerID,proto3" json:"containerID,optional"`
}

func (x *ContainerStateTerminated) Reset() {
	*x = ContainerStateTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStateTerminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStateTerminated) ProtoMessage() {}

func (x *ContainerStateTerminated) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStateTerminated.ProtoReflect.Descriptor instead.
func (*ContainerStateTerminated) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{11}
}

func (x *ContainerStateTerminated) GetExitCode() uint32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ContainerStateTerminated) GetSignal() uint32 {
	if x != nil {
		return x.Signal
	}
	return 0
}

func (x *ContainerStateTerminated) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ContainerStateTerminated) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContainerStateTerminated) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *ContainerStateTerminated) GetFinishedAt() uint64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *ContainerStateTerminated) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

// ContainerStateWaiting 表示容器的等待状态
type ContainerStateWaiting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 容器尚未运行的（简要）原因
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,optional"`
	// 关于容器为什么尚未运行的消息
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,optional"`
}

func (x *ContainerStateWaiting) Reset() {
	*x = ContainerStateWaiting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStateWaiting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStateWaiting) ProtoMessage() {}

func (x *ContainerStateWaiting) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStateWaiting.ProtoReflect.Descriptor instead.
func (*ContainerStateWaiting) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{12}
}

func (x *ContainerStateWaiting) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ContainerStateWaiting) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ContainerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 容器名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 容器状态
	State *ContainerState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,optional"`
	// lastState 保存容器的最后终止状态，用于帮助调试容器崩溃和重启。
	// 当容器仍在运行且 RestartCount 为 0 时，此字段不会被填充。
	// +optional
	LastState *ContainerState `protobuf:"bytes,3,opt,name=lastState,proto3" json:"lastState,optional"`
	// ready 指定容器当前是否通过其就绪检查。
	// 该值会随着就绪探针的持续执行而变化。如果未指定就绪探针，
	// 一旦容器完全启动（参见 Started 字段），此字段默认为 true。
	//
	// 此值通常用于确定容器是否已准备好接受流量。
	Ready bool `protobuf:"varint,4,opt,name=ready,proto3" json:"ready,optional"`
	// restartCount 记录容器被重启的次数。
	// Kubelet 会努力始终递增该值，但在某些情况下，由于节点重启可能会丢失状态，
	// 此时该值可能会重置为 0。该值永远不会为负数。
	RestartCount uint32 `protobuf:"varint,5,opt,name=restartCount,proto3" json:"restartCount,optional"`
	// image 是容器正在运行的容器镜像的名称。
	// 容器镜像可能与 PodSpec 中使用的镜像不匹配，
	// 因为它可能已被运行时解析。
	// 更多信息：https://kubernetes.io/docs/concepts/containers/images
	Image string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,optional"`
	// imageID 是容器镜像的镜像 ID。镜像 ID 可能与
	// PodSpec 中使用的镜像 ID 不匹配，因为它可能已被运行时解析。
	ImageID string `protobuf:"bytes,7,opt,name=imageID,proto3" json:"imageID,optional"`
	// containerID 是格式为 '<type>://<container_id>' 的容器 ID。
	// 其中 type 是容器运行时标识符，从 CRI API 的 Version 调用返回
	// （例如 "containerd"）。
	ContainerID string `protobuf:"bytes,8,opt,name=containerID,proto3" json:"containerID,optional"`
	// started 表示容器是否已完成其 postStart 生命周期钩子
	// 并通过了其启动探针。
	// 初始化为 false，在启动探针被认为成功后变为 true。
	// 当容器重启或 kubelet 暂时丢失状态时重置为 false。
	// 在这两种情况下，启动探针都会重新运行。
	// 当没有定义启动探针且容器正在运行并已通过 postStart 生命周期钩子时，
	// 始终为 true。null 值必须与 false 相同对待。
	Started *bool `protobuf:"varint,9,opt,name=started,proto3,oneof" json:"started,optional"`
	// resources 表示在容器启动后或成功调整大小后，
	// 已成功在运行容器上实施的计算资源请求和限制。
	// +featureGate=InPlacePodVerticalScaling
	Resources *ResourceRequirements `protobuf:"bytes,11,opt,name=resources,proto3" json:"resources,optional"`
}

func (x *ContainerStatus) Reset() {
	*x = ContainerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatus) ProtoMessage() {}

func (x *ContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatus.ProtoReflect.Descriptor instead.
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{13}
}

func (x *ContainerStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerStatus) GetState() *ContainerState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ContainerStatus) GetLastState() *ContainerState {
	if x != nil {
		return x.LastState
	}
	return nil
}

func (x *ContainerStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ContainerStatus) GetRestartCount() uint32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *ContainerStatus) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ContainerStatus) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *ContainerStatus) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *ContainerStatus) GetStarted() bool {
	if x != nil && x.Started != nil {
		return *x.Started
	}
	return false
}

func (x *ContainerStatus) GetResources() *ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

// PodContainer详情
type PodContainerDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 容器名称
	ContainerName string `protobuf:"bytes,1,opt,name=container_name,json=containerName,proto3" json:"container_name,optional"`
	// 容器ID
	ContainerId string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,optional"`
	// 镜像
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,optional"`
	// 镜像拉取策略
	ImagePullPolicy string `protobuf:"bytes,4,opt,name=image_pull_policy,json=imagePullPolicy,proto3" json:"image_pull_policy,optional"`
	// 重启次数
	RestartCount uint32 `protobuf:"varint,5,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,optional"`
	// 资源请求/限制
	Resources *ResourceRequirements `protobuf:"bytes,6,opt,name=resources,proto3" json:"resources,optional"`
	// 环境变量
	Env []*v1.EnvVar `protobuf:"bytes,7,rep,name=env,proto3" json:"env,optional"`
	// 端口
	Ports []*v1.ContainerPort `protobuf:"bytes,8,rep,name=ports,proto3" json:"ports,optional"`
	// 挂载
	VolumeMounts []*ContainerVolumeMount `protobuf:"bytes,9,rep,name=volume_mounts,json=volumeMounts,proto3" json:"volume_mounts,optional"`
	// 容器资源使用量
	Usage *ContainerUsage `protobuf:"bytes,10,opt,name=usage,proto3" json:"usage,optional"`
	// 容器状态
	Status *ContainerStatus `protobuf:"bytes,11,opt,name=status,proto3" json:"status,optional"`
	// 存活探针
	LivenessProbe string `protobuf:"bytes,12,opt,name=liveness_probe,json=livenessProbe,proto3" json:"liveness_probe,optional"`
	// 就绪探针
	ReadinessProbe string `protobuf:"bytes,13,opt,name=readiness_probe,json=readinessProbe,proto3" json:"readiness_probe,optional"`
	// 启动探针
	StartupProbe string `protobuf:"bytes,14,opt,name=startup_probe,json=startupProbe,proto3" json:"startup_probe,optional"`
}

func (x *PodContainerDetail) Reset() {
	*x = PodContainerDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodContainerDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodContainerDetail) ProtoMessage() {}

func (x *PodContainerDetail) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodContainerDetail.ProtoReflect.Descriptor instead.
func (*PodContainerDetail) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{14}
}

func (x *PodContainerDetail) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *PodContainerDetail) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *PodContainerDetail) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PodContainerDetail) GetImagePullPolicy() string {
	if x != nil {
		return x.ImagePullPolicy
	}
	return ""
}

func (x *PodContainerDetail) GetRestartCount() uint32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *PodContainerDetail) GetResources() *ResourceRequirements {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *PodContainerDetail) GetEnv() []*v1.EnvVar {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *PodContainerDetail) GetPorts() []*v1.ContainerPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *PodContainerDetail) GetVolumeMounts() []*ContainerVolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *PodContainerDetail) GetUsage() *ContainerUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *PodContainerDetail) GetStatus() *ContainerStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PodContainerDetail) GetLivenessProbe() string {
	if x != nil {
		return x.LivenessProbe
	}
	return ""
}

func (x *PodContainerDetail) GetReadinessProbe() string {
	if x != nil {
		return x.ReadinessProbe
	}
	return ""
}

func (x *PodContainerDetail) GetStartupProbe() string {
	if x != nil {
		return x.StartupProbe
	}
	return ""
}

// 容器资源使用量
type ContainerUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU使用量
	Cpu uint32 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,optional"`
	// CPU单位
	CpuUnit string `protobuf:"bytes,2,opt,name=cpu_unit,json=cpuUnit,proto3" json:"cpu_unit,optional"`
	// 内存使用量
	Memory uint32 `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,optional"`
	// 内存单位
	MemoryUnit string `protobuf:"bytes,4,opt,name=memory_unit,json=memoryUnit,proto3" json:"memory_unit,optional"`
}

func (x *ContainerUsage) Reset() {
	*x = ContainerUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerUsage) ProtoMessage() {}

func (x *ContainerUsage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerUsage.ProtoReflect.Descriptor instead.
func (*ContainerUsage) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{15}
}

func (x *ContainerUsage) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ContainerUsage) GetCpuUnit() string {
	if x != nil {
		return x.CpuUnit
	}
	return ""
}

func (x *ContainerUsage) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ContainerUsage) GetMemoryUnit() string {
	if x != nil {
		return x.MemoryUnit
	}
	return ""
}

// Pod列表响应
type ListPodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 列表
	List []*PodItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListPodResponse) Reset() {
	*x = ListPodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPodResponse) ProtoMessage() {}

func (x *ListPodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPodResponse.ProtoReflect.Descriptor instead.
func (*ListPodResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{16}
}

func (x *ListPodResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPodResponse) GetList() []*PodItem {
	if x != nil {
		return x.List
	}
	return nil
}

// Pod Cpu 指标请求
type GetPodMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称
	PodName string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,optional"`
	// 时间戳
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,optional"`
}

func (x *GetPodMetricsRequest) Reset() {
	*x = GetPodMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPodMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodMetricsRequest) ProtoMessage() {}

func (x *GetPodMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetPodMetricsRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{17}
}

func (x *GetPodMetricsRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetPodMetricsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetPodMetricsRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *GetPodMetricsRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

// DataPoint
type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间戳
	X int64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,optional"`
	// 使用量
	Y int64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,optional"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{18}
}

func (x *DataPoint) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *DataPoint) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

// MetricPoint
type MetricPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 时间戳
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,optional"`
	// 值 [CPU: 毫核, Memory: bytes]
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,optional"`
}

func (x *MetricPoint) Reset() {
	*x = MetricPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricPoint) ProtoMessage() {}

func (x *MetricPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricPoint.ProtoReflect.Descriptor instead.
func (*MetricPoint) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{19}
}

func (x *MetricPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricPoint) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// SidecarMetric
type SidecarMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DataPoints is a list of X, Y int64 data points, sorted by X.
	DataPoints []*DataPoint `protobuf:"bytes,1,rep,name=dataPoints,proto3" json:"dataPoints,optional"`
	// MetricPoints is a list of value, timestamp metrics used for sparklines on a pod list page.
	MetricPoints []*MetricPoint `protobuf:"bytes,2,rep,name=metricPoints,proto3" json:"metricPoints,optional"`
	// MetricName is the name of metric stored in this struct.
	MetricName string `protobuf:"bytes,3,opt,name=metricName,proto3" json:"metricName,optional"`
	// Label stores information about identity of resources (UIDS) described by this metric.
	Uids []string `protobuf:"bytes,4,rep,name=uids,proto3" json:"uids,optional"`
}

func (x *SidecarMetric) Reset() {
	*x = SidecarMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SidecarMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidecarMetric) ProtoMessage() {}

func (x *SidecarMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidecarMetric.ProtoReflect.Descriptor instead.
func (*SidecarMetric) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{20}
}

func (x *SidecarMetric) GetDataPoints() []*DataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

func (x *SidecarMetric) GetMetricPoints() []*MetricPoint {
	if x != nil {
		return x.MetricPoints
	}
	return nil
}

func (x *SidecarMetric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *SidecarMetric) GetUids() []string {
	if x != nil {
		return x.Uids
	}
	return nil
}

// SidecarMetricResultList
type SidecarMetricResultList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*SidecarMetric `protobuf:"bytes,1,rep,name=items,proto3" json:"items,optional"`
}

func (x *SidecarMetricResultList) Reset() {
	*x = SidecarMetricResultList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SidecarMetricResultList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidecarMetricResultList) ProtoMessage() {}

func (x *SidecarMetricResultList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidecarMetricResultList.ProtoReflect.Descriptor instead.
func (*SidecarMetricResultList) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{21}
}

func (x *SidecarMetricResultList) GetItems() []*SidecarMetric {
	if x != nil {
		return x.Items
	}
	return nil
}

// PodContainer 指标请求
type GetPodContainerMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称
	PodName string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,optional"`
	// 容器名称
	ContainerName string `protobuf:"bytes,4,opt,name=container_name,json=containerName,proto3" json:"container_name,optional"`
}

func (x *GetPodContainerMetricsRequest) Reset() {
	*x = GetPodContainerMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPodContainerMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodContainerMetricsRequest) ProtoMessage() {}

func (x *GetPodContainerMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodContainerMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetPodContainerMetricsRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{22}
}

func (x *GetPodContainerMetricsRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetPodContainerMetricsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetPodContainerMetricsRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *GetPodContainerMetricsRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

// PodContainer 指标响应
type GetPodContainerMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指标
	Metrics *v1beta1.PodMetrics `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,optional"`
}

func (x *GetPodContainerMetricsResponse) Reset() {
	*x = GetPodContainerMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPodContainerMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodContainerMetricsResponse) ProtoMessage() {}

func (x *GetPodContainerMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodContainerMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetPodContainerMetricsResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{23}
}

func (x *GetPodContainerMetricsResponse) GetMetrics() *v1beta1.PodMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Pod删除请求
type DeletePodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称
	PodName string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,optional"`
}

func (x *DeletePodRequest) Reset() {
	*x = DeletePodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePodRequest) ProtoMessage() {}

func (x *DeletePodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePodRequest.ProtoReflect.Descriptor instead.
func (*DeletePodRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{24}
}

func (x *DeletePodRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeletePodRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeletePodRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

// Pod删除响应
type DeletePodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 删除结果
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,optional"`
}

func (x *DeletePodResponse) Reset() {
	*x = DeletePodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePodResponse) ProtoMessage() {}

func (x *DeletePodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePodResponse.ProtoReflect.Descriptor instead.
func (*DeletePodResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{25}
}

func (x *DeletePodResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Pod日志下载请求
type DownloadPodLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称
	PodName string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,optional"`
	// 容器名称
	ContainerName string `protobuf:"bytes,4,opt,name=container_name,json=containerName,proto3" json:"container_name,optional"`
	// 开始时间 [秒级时间戳]
	StartTime int64 `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,optional"`
}

func (x *DownloadPodLogsRequest) Reset() {
	*x = DownloadPodLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadPodLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPodLogsRequest) ProtoMessage() {}

func (x *DownloadPodLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPodLogsRequest.ProtoReflect.Descriptor instead.
func (*DownloadPodLogsRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{26}
}

func (x *DownloadPodLogsRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DownloadPodLogsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DownloadPodLogsRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *DownloadPodLogsRequest) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DownloadPodLogsRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// Pod日志下载响应
type DownloadPodLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 日志内容[B64编码]
	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,optional"`
}

func (x *DownloadPodLogsResponse) Reset() {
	*x = DownloadPodLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadPodLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadPodLogsResponse) ProtoMessage() {}

func (x *DownloadPodLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadPodLogsResponse.ProtoReflect.Descriptor instead.
func (*DownloadPodLogsResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{27}
}

func (x *DownloadPodLogsResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type PodHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of deployment condition.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	// Status of the condition, one of True, False, Unknown.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,optional"`
	// The last time this condition was updated.
	// 豪秒级时间戳
	LastProbeTime *uint64 `protobuf:"varint,6,opt,name=lastProbeTime,proto3,oneof" json:"lastProbeTime,optional"`
	// Last time the condition transitioned from one status to another.
	// 豪秒级时间戳
	LastTransitionTime uint64 `protobuf:"varint,7,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,optional"`
	// The reason for the condition's last transition.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,optional"`
	// A human readable message indicating details about the transition.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,optional"`
}

func (x *PodHealth) Reset() {
	*x = PodHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodHealth) ProtoMessage() {}

func (x *PodHealth) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodHealth.ProtoReflect.Descriptor instead.
func (*PodHealth) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{28}
}

func (x *PodHealth) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PodHealth) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PodHealth) GetLastProbeTime() uint64 {
	if x != nil && x.LastProbeTime != nil {
		return *x.LastProbeTime
	}
	return 0
}

func (x *PodHealth) GetLastTransitionTime() uint64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *PodHealth) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PodHealth) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Pod列表项
type NamespacePodItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pod名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 镜像
	Containers []*v1.Container `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,optional"`
	// 状态
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,optional"`
	// 重启次数
	RestartCount uint32 `protobuf:"varint,5,opt,name=restart_count,json=restartCount,proto3" json:"restart_count,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,optional"`
	// 工作负载
	Workload string `protobuf:"bytes,7,opt,name=workload,proto3" json:"workload,optional"`
	// ready数量
	ReadyCount uint32 `protobuf:"varint,8,opt,name=ready_count,json=readyCount,proto3" json:"ready_count,optional"`
	// node节点IP
	NodeIp string `protobuf:"bytes,9,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,optional"`
	// 实例IP
	PodIp string `protobuf:"bytes,10,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,optional"`
	// 标签
	Labels map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// yaml
	Yaml string `protobuf:"bytes,12,opt,name=yaml,proto3" json:"yaml,optional"`
	// pod容器数量
	ContainerCount uint32 `protobuf:"varint,13,opt,name=container_count,json=containerCount,proto3" json:"container_count,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,14,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
	// 状态原因
	Reason string `protobuf:"bytes,15,opt,name=reason,proto3" json:"reason,optional"`
	// 注解
	Annotations map[string]string `protobuf:"bytes,16,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 选择器
	Selector *v11.LabelSelector `protobuf:"bytes,17,opt,name=selector,proto3" json:"selector,optional"`
	// 健康检查
	Conditions []*PodHealth `protobuf:"bytes,18,rep,name=conditions,proto3" json:"conditions,optional"`
}

func (x *NamespacePodItem) Reset() {
	*x = NamespacePodItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespacePodItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespacePodItem) ProtoMessage() {}

func (x *NamespacePodItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespacePodItem.ProtoReflect.Descriptor instead.
func (*NamespacePodItem) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{29}
}

func (x *NamespacePodItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespacePodItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NamespacePodItem) GetContainers() []*v1.Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *NamespacePodItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NamespacePodItem) GetRestartCount() uint32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *NamespacePodItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *NamespacePodItem) GetWorkload() string {
	if x != nil {
		return x.Workload
	}
	return ""
}

func (x *NamespacePodItem) GetReadyCount() uint32 {
	if x != nil {
		return x.ReadyCount
	}
	return 0
}

func (x *NamespacePodItem) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *NamespacePodItem) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

func (x *NamespacePodItem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NamespacePodItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *NamespacePodItem) GetContainerCount() uint32 {
	if x != nil {
		return x.ContainerCount
	}
	return 0
}

func (x *NamespacePodItem) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

func (x *NamespacePodItem) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *NamespacePodItem) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *NamespacePodItem) GetSelector() *v11.LabelSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *NamespacePodItem) GetConditions() []*PodHealth {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// Pod列表请求
type ListPodByNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,6,opt,name=list_all,json=listAll,proto3" json:"list_all,optional"`
}

func (x *ListPodByNamespaceRequest) Reset() {
	*x = ListPodByNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPodByNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPodByNamespaceRequest) ProtoMessage() {}

func (x *ListPodByNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPodByNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListPodByNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{30}
}

func (x *ListPodByNamespaceRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListPodByNamespaceRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListPodByNamespaceRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListPodByNamespaceRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPodByNamespaceRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPodByNamespaceRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

// Pod列表响应
type ListPodByNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 列表
	List []*NamespacePodItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListPodByNamespaceResponse) Reset() {
	*x = ListPodByNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPodByNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPodByNamespaceResponse) ProtoMessage() {}

func (x *ListPodByNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPodByNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListPodByNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{31}
}

func (x *ListPodByNamespaceResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPodByNamespaceResponse) GetList() []*NamespacePodItem {
	if x != nil {
		return x.List
	}
	return nil
}

// Pod详情请求
type GetNamespacePodDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,optional"`
}

func (x *GetNamespacePodDetailRequest) Reset() {
	*x = GetNamespacePodDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespacePodDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespacePodDetailRequest) ProtoMessage() {}

func (x *GetNamespacePodDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespacePodDetailRequest.ProtoReflect.Descriptor instead.
func (*GetNamespacePodDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{32}
}

func (x *GetNamespacePodDetailRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetNamespacePodDetailRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetNamespacePodDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Pod详情响应
type GetNamespacePodDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 详情
	Detail *NamespacePodItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *GetNamespacePodDetailResponse) Reset() {
	*x = GetNamespacePodDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNamespacePodDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNamespacePodDetailResponse) ProtoMessage() {}

func (x *GetNamespacePodDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNamespacePodDetailResponse.ProtoReflect.Descriptor instead.
func (*GetNamespacePodDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{33}
}

func (x *GetNamespacePodDetailResponse) GetDetail() *NamespacePodItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 通过yaml创建或者更新pod请求
type CreateOrUpdatePodByYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// yaml
	Yaml string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *CreateOrUpdatePodByYamlRequest) Reset() {
	*x = CreateOrUpdatePodByYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdatePodByYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdatePodByYamlRequest) ProtoMessage() {}

func (x *CreateOrUpdatePodByYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdatePodByYamlRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdatePodByYamlRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{34}
}

func (x *CreateOrUpdatePodByYamlRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateOrUpdatePodByYamlRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

// 通过yaml创建或者更新pod响应
type CreateOrUpdatePodByYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 结果
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,optional"`
}

func (x *CreateOrUpdatePodByYamlResponse) Reset() {
	*x = CreateOrUpdatePodByYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdatePodByYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdatePodByYamlResponse) ProtoMessage() {}

func (x *CreateOrUpdatePodByYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdatePodByYamlResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdatePodByYamlResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{35}
}

func (x *CreateOrUpdatePodByYamlResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 批量删除pod请求
type BatchDeletePodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称列表
	PodNames []string `protobuf:"bytes,3,rep,name=pod_names,json=podNames,proto3" json:"pod_names,optional"`
}

func (x *BatchDeletePodsRequest) Reset() {
	*x = BatchDeletePodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeletePodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeletePodsRequest) ProtoMessage() {}

func (x *BatchDeletePodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeletePodsRequest.ProtoReflect.Descriptor instead.
func (*BatchDeletePodsRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{36}
}

func (x *BatchDeletePodsRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *BatchDeletePodsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *BatchDeletePodsRequest) GetPodNames() []string {
	if x != nil {
		return x.PodNames
	}
	return nil
}

// 批量删除pod响应
type BatchDeletePodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchDeletePodsResponse) Reset() {
	*x = BatchDeletePodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeletePodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeletePodsResponse) ProtoMessage() {}

func (x *BatchDeletePodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeletePodsResponse.ProtoReflect.Descriptor instead.
func (*BatchDeletePodsResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{37}
}

// pod驱逐请求
type EvictPodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称
	PodName string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,optional"`
	// 节点名称
	NodeName string `protobuf:"bytes,4,opt,name=node_name,json=nodeName,proto3" json:"node_name,optional"`
	// 强制驱逐
	Force bool `protobuf:"varint,5,opt,name=force,proto3" json:"force,optional"`
	// gracePeriodSeconds
	GracePeriodSeconds uint32 `protobuf:"varint,6,opt,name=grace_period_seconds,json=gracePeriodSeconds,proto3" json:"grace_period_seconds,optional"`
}

func (x *EvictPodRequest) Reset() {
	*x = EvictPodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictPodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictPodRequest) ProtoMessage() {}

func (x *EvictPodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictPodRequest.ProtoReflect.Descriptor instead.
func (*EvictPodRequest) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{38}
}

func (x *EvictPodRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EvictPodRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EvictPodRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *EvictPodRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *EvictPodRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *EvictPodRequest) GetGracePeriodSeconds() uint32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

// pod驱逐响应
type EvictPodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 结果
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,optional"`
}

func (x *EvictPodResponse) Reset() {
	*x = EvictPodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_pod_v1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictPodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictPodResponse) ProtoMessage() {}

func (x *EvictPodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_pod_v1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictPodResponse.ProtoReflect.Descriptor instead.
func (*EvictPodResponse) Descriptor() ([]byte, []int) {
	return file_pb_pod_v1_proto_rawDescGZIP(), []int{39}
}

func (x *EvictPodResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_pb_pod_v1_proto protoreflect.FileDescriptor

var file_pb_pod_v1_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x62, 0x2f, 0x70, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x70, 0x6f, 0x64, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x68,
	0x74, 0x74, 0x70, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6b, 0x38, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6b, 0x38, 0x73, 0x2f, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x6b, 0x38, 0x73, 0x2f, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x85, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x22, 0x88, 0x05, 0x0a, 0x10, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x19, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x17, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x17,
	0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x15, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x4a, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa6, 0x03, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfc,
	0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x62, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x53, 0x65, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x10, 0x05, 0x12, 0x07,
	0x0a, 0x03, 0x48, 0x70, 0x61, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x69, 0x64, 0x65, 0x43,
	0x61, 0x72, 0x53, 0x65, 0x74, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x10, 0x08,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x09, 0x22, 0x62, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xee, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x50, 0x6f, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x70, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x50, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x70,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x69, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x0c, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x92, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x6f, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a,
	0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x22, 0xb9, 0x05, 0x0a,
	0x12, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x76, 0x56, 0x61, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x3c,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0d,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x2e, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x28,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x22, 0x76, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x70, 0x75, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x22, 0x49, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x50, 0x6f,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x27, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x79, 0x22, 0x41, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x69, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x17, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x6f, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x92, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70,
	0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x2d, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x64, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xd6, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9e, 0x07, 0x0a, 0x10, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12,
	0x1a, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70, 0x12, 0x3e, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x6f,
	0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x79,
	0x61, 0x6d, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x73,
	0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6f, 0x64, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x6f, 0x64, 0x2e, 0x50, 0x6f, 0x64, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x22, 0x5d, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x6f, 0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x68, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x40, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x64, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x9b, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x19, 0x0a,
	0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x35, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x45, 0x76, 0x69, 0x63, 0x74,
	0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0x9c, 0x0f, 0x0a, 0x03, 0x50,
	0x6f, 0x64, 0x12, 0x53, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x12, 0x13, 0x2e,
	0x70, 0x6f, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6f, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x2e,
	0x70, 0x6f, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x6f, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x70,
	0x6f, 0x64, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x64, 0x2f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0xc1, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x64, 0x12, 0x15, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x84, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x5d, 0x0a, 0x03, 0x70,
	0x6f, 0x64, 0x12, 0x06, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0b, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x1a, 0x03, 0x70, 0x6f, 0x64, 0x1a, 0x10, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xdf, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x6f, 0x64,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa,
	0x03, 0x64, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x0c, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x03,
	0x70, 0x6f, 0x64, 0x1a, 0x11, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x09, 0x70, 0x6f, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22,
	0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64, 0x2f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x64, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x19, 0x2e,
	0x70, 0x6f, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x24, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x12, 0x77, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0xc2, 0xdb,
	0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x22, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x7c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x6f, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x6f, 0x64, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x64, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x6f, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x6f, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8e, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x63, 0x0a,
	0x03, 0x70, 0x6f, 0x64, 0x12, 0x0c, 0xe4, 0xb8, 0x8b, 0xe8, 0xbd, 0xbd, 0xe6, 0x97, 0xa5, 0xe5,
	0xbf, 0x97, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x1a, 0x0b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x03, 0x70, 0x6f, 0x64,
	0x1a, 0x10, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x6f, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0xf3, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x12,
	0x23, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x64, 0x42, 0x79, 0x59, 0x61,
	0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0xc2, 0xdb, 0xaa,
	0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x5b, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x10, 0x59, 0x61,
	0x6d, 0x6c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x1a, 0x17,
	0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x1a, 0x00, 0x1a, 0x0c, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x08, 0x45, 0x76,
	0x69, 0x63, 0x74, 0x50, 0x6f, 0x64, 0x12, 0x14, 0x2e, 0x70, 0x6f, 0x64, 0x2e, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x6f, 0x64, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x5d,
	0x0a, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x06, 0xe9, 0xa9, 0xb1, 0xe9, 0x80, 0x90, 0x1a, 0x17, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0b,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x03, 0x70, 0x6f, 0x64, 0x1a, 0x10, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x64, 0x2f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x64,
	0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_pod_v1_proto_rawDescOnce sync.Once
	file_pb_pod_v1_proto_rawDescData = file_pb_pod_v1_proto_rawDesc
)

func file_pb_pod_v1_proto_rawDescGZIP() []byte {
	file_pb_pod_v1_proto_rawDescOnce.Do(func() {
		file_pb_pod_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_pod_v1_proto_rawDescData)
	})
	return file_pb_pod_v1_proto_rawDescData
}

var file_pb_pod_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_pod_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_pb_pod_v1_proto_goTypes = []interface{}{
	(ListControllerPodRequest_ControllerType)(0), // 0: pod.ListControllerPodRequest.ControllerType
	(*ListPodRequest)(nil),                       // 1: pod.ListPodRequest
	(*PodResourceUsage)(nil),                     // 2: pod.PodResourceUsage
	(*PodItem)(nil),                              // 3: pod.PodItem
	(*ListControllerPodRequest)(nil),             // 4: pod.ListControllerPodRequest
	(*ListControllerPodResponse)(nil),            // 5: pod.ListControllerPodResponse
	(*ControllerPodItem)(nil),                    // 6: pod.ControllerPodItem
	(*PodCondition)(nil),                         // 7: pod.PodCondition
	(*ContainerVolumeMount)(nil),                 // 8: pod.ContainerVolumeMount
	(*ResourceRequirements)(nil),                 // 9: pod.ResourceRequirements
	(*ContainerState)(nil),                       // 10: pod.ContainerState
	(*ContainerStateRunning)(nil),                // 11: pod.ContainerStateRunning
	(*ContainerStateTerminated)(nil),             // 12: pod.ContainerStateTerminated
	(*ContainerStateWaiting)(nil),                // 13: pod.ContainerStateWaiting
	(*ContainerStatus)(nil),                      // 14: pod.ContainerStatus
	(*PodContainerDetail)(nil),                   // 15: pod.PodContainerDetail
	(*ContainerUsage)(nil),                       // 16: pod.ContainerUsage
	(*ListPodResponse)(nil),                      // 17: pod.ListPodResponse
	(*GetPodMetricsRequest)(nil),                 // 18: pod.GetPodMetricsRequest
	(*DataPoint)(nil),                            // 19: pod.DataPoint
	(*MetricPoint)(nil),                          // 20: pod.MetricPoint
	(*SidecarMetric)(nil),                        // 21: pod.SidecarMetric
	(*SidecarMetricResultList)(nil),              // 22: pod.SidecarMetricResultList
	(*GetPodContainerMetricsRequest)(nil),        // 23: pod.GetPodContainerMetricsRequest
	(*GetPodContainerMetricsResponse)(nil),       // 24: pod.GetPodContainerMetricsResponse
	(*DeletePodRequest)(nil),                     // 25: pod.DeletePodRequest
	(*DeletePodResponse)(nil),                    // 26: pod.DeletePodResponse
	(*DownloadPodLogsRequest)(nil),               // 27: pod.DownloadPodLogsRequest
	(*DownloadPodLogsResponse)(nil),              // 28: pod.DownloadPodLogsResponse
	(*PodHealth)(nil),                            // 29: pod.PodHealth
	(*NamespacePodItem)(nil),                     // 30: pod.NamespacePodItem
	(*ListPodByNamespaceRequest)(nil),            // 31: pod.ListPodByNamespaceRequest
	(*ListPodByNamespaceResponse)(nil),           // 32: pod.ListPodByNamespaceResponse
	(*GetNamespacePodDetailRequest)(nil),         // 33: pod.GetNamespacePodDetailRequest
	(*GetNamespacePodDetailResponse)(nil),        // 34: pod.GetNamespacePodDetailResponse
	(*CreateOrUpdatePodByYamlRequest)(nil),       // 35: pod.CreateOrUpdatePodByYamlRequest
	(*CreateOrUpdatePodByYamlResponse)(nil),      // 36: pod.CreateOrUpdatePodByYamlResponse
	(*BatchDeletePodsRequest)(nil),               // 37: pod.BatchDeletePodsRequest
	(*BatchDeletePodsResponse)(nil),              // 38: pod.BatchDeletePodsResponse
	(*EvictPodRequest)(nil),                      // 39: pod.EvictPodRequest
	(*EvictPodResponse)(nil),                     // 40: pod.EvictPodResponse
	nil,                                          // 41: pod.ResourceRequirements.LimitsEntry
	nil,                                          // 42: pod.ResourceRequirements.RequestsEntry
	nil,                                          // 43: pod.NamespacePodItem.LabelsEntry
	nil,                                          // 44: pod.NamespacePodItem.AnnotationsEntry
	(*v1.Container)(nil),                         // 45: k8s.io.api.core.v1.Container
	(*v1.EnvVar)(nil),                            // 46: k8s.io.api.core.v1.EnvVar
	(*v1.ContainerPort)(nil),                     // 47: k8s.io.api.core.v1.ContainerPort
	(*v1beta1.PodMetrics)(nil),                   // 48: k8s.io.metrics.pkg.apis.metrics.v1beta1.PodMetrics
	(*v11.LabelSelector)(nil),                    // 49: k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
}
var file_pb_pod_v1_proto_depIdxs = []int32{
	45, // 0: pod.PodItem.containers:type_name -> k8s.io.api.core.v1.Container
	2,  // 1: pod.PodItem.resource_usage:type_name -> pod.PodResourceUsage
	0,  // 2: pod.ListControllerPodRequest.controller_type:type_name -> pod.ListControllerPodRequest.ControllerType
	6,  // 3: pod.ListControllerPodResponse.list:type_name -> pod.ControllerPodItem
	7,  // 4: pod.ControllerPodItem.pod_conditions:type_name -> pod.PodCondition
	15, // 5: pod.ControllerPodItem.containers:type_name -> pod.PodContainerDetail
	41, // 6: pod.ResourceRequirements.limits:type_name -> pod.ResourceRequirements.LimitsEntry
	42, // 7: pod.ResourceRequirements.requests:type_name -> pod.ResourceRequirements.RequestsEntry
	13, // 8: pod.ContainerState.waiting:type_name -> pod.ContainerStateWaiting
	11, // 9: pod.ContainerState.running:type_name -> pod.ContainerStateRunning
	12, // 10: pod.ContainerState.terminated:type_name -> pod.ContainerStateTerminated
	10, // 11: pod.ContainerStatus.state:type_name -> pod.ContainerState
	10, // 12: pod.ContainerStatus.lastState:type_name -> pod.ContainerState
	9,  // 13: pod.ContainerStatus.resources:type_name -> pod.ResourceRequirements
	9,  // 14: pod.PodContainerDetail.resources:type_name -> pod.ResourceRequirements
	46, // 15: pod.PodContainerDetail.env:type_name -> k8s.io.api.core.v1.EnvVar
	47, // 16: pod.PodContainerDetail.ports:type_name -> k8s.io.api.core.v1.ContainerPort
	8,  // 17: pod.PodContainerDetail.volume_mounts:type_name -> pod.ContainerVolumeMount
	16, // 18: pod.PodContainerDetail.usage:type_name -> pod.ContainerUsage
	14, // 19: pod.PodContainerDetail.status:type_name -> pod.ContainerStatus
	3,  // 20: pod.ListPodResponse.list:type_name -> pod.PodItem
	19, // 21: pod.SidecarMetric.dataPoints:type_name -> pod.DataPoint
	20, // 22: pod.SidecarMetric.metricPoints:type_name -> pod.MetricPoint
	21, // 23: pod.SidecarMetricResultList.items:type_name -> pod.SidecarMetric
	48, // 24: pod.GetPodContainerMetricsResponse.metrics:type_name -> k8s.io.metrics.pkg.apis.metrics.v1beta1.PodMetrics
	45, // 25: pod.NamespacePodItem.containers:type_name -> k8s.io.api.core.v1.Container
	43, // 26: pod.NamespacePodItem.labels:type_name -> pod.NamespacePodItem.LabelsEntry
	44, // 27: pod.NamespacePodItem.annotations:type_name -> pod.NamespacePodItem.AnnotationsEntry
	49, // 28: pod.NamespacePodItem.selector:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	29, // 29: pod.NamespacePodItem.conditions:type_name -> pod.PodHealth
	30, // 30: pod.ListPodByNamespaceResponse.list:type_name -> pod.NamespacePodItem
	30, // 31: pod.GetNamespacePodDetailResponse.detail:type_name -> pod.NamespacePodItem
	1,  // 32: pod.Pod.ListPod:input_type -> pod.ListPodRequest
	31, // 33: pod.Pod.ListPodByNamespace:input_type -> pod.ListPodByNamespaceRequest
	33, // 34: pod.Pod.GetNamespacePodDetail:input_type -> pod.GetNamespacePodDetailRequest
	25, // 35: pod.Pod.DeletePod:input_type -> pod.DeletePodRequest
	37, // 36: pod.Pod.BatchDeletePod:input_type -> pod.BatchDeletePodsRequest
	18, // 37: pod.Pod.GetPodCpuMetrics:input_type -> pod.GetPodMetricsRequest
	18, // 38: pod.Pod.GetPodMemoryMetrics:input_type -> pod.GetPodMetricsRequest
	23, // 39: pod.Pod.GetPodContainerMetrics:input_type -> pod.GetPodContainerMetricsRequest
	4,  // 40: pod.Pod.ListControllerPod:input_type -> pod.ListControllerPodRequest
	27, // 41: pod.Pod.DownloadPodLogs:input_type -> pod.DownloadPodLogsRequest
	35, // 42: pod.Pod.CreateOrUpdatePodByYaml:input_type -> pod.CreateOrUpdatePodByYamlRequest
	39, // 43: pod.Pod.EvictPod:input_type -> pod.EvictPodRequest
	17, // 44: pod.Pod.ListPod:output_type -> pod.ListPodResponse
	32, // 45: pod.Pod.ListPodByNamespace:output_type -> pod.ListPodByNamespaceResponse
	34, // 46: pod.Pod.GetNamespacePodDetail:output_type -> pod.GetNamespacePodDetailResponse
	26, // 47: pod.Pod.DeletePod:output_type -> pod.DeletePodResponse
	38, // 48: pod.Pod.BatchDeletePod:output_type -> pod.BatchDeletePodsResponse
	22, // 49: pod.Pod.GetPodCpuMetrics:output_type -> pod.SidecarMetricResultList
	22, // 50: pod.Pod.GetPodMemoryMetrics:output_type -> pod.SidecarMetricResultList
	24, // 51: pod.Pod.GetPodContainerMetrics:output_type -> pod.GetPodContainerMetricsResponse
	5,  // 52: pod.Pod.ListControllerPod:output_type -> pod.ListControllerPodResponse
	28, // 53: pod.Pod.DownloadPodLogs:output_type -> pod.DownloadPodLogsResponse
	36, // 54: pod.Pod.CreateOrUpdatePodByYaml:output_type -> pod.CreateOrUpdatePodByYamlResponse
	40, // 55: pod.Pod.EvictPod:output_type -> pod.EvictPodResponse
	44, // [44:56] is the sub-list for method output_type
	32, // [32:44] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_pb_pod_v1_proto_init() }
func file_pb_pod_v1_proto_init() {
	if File_pb_pod_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_pod_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListControllerPodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListControllerPodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerPodItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerVolumeMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStateRunning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStateTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStateWaiting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodContainerDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPodMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SidecarMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SidecarMetricResultList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPodContainerMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPodContainerMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadPodLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadPodLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespacePodItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPodByNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPodByNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespacePodDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNamespacePodDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdatePodByYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdatePodByYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeletePodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDeletePodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictPodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_pod_v1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictPodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_pod_v1_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_pb_pod_v1_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_pb_pod_v1_proto_msgTypes[28].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_pod_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_pod_v1_proto_goTypes,
		DependencyIndexes: file_pb_pod_v1_proto_depIdxs,
		EnumInfos:         file_pb_pod_v1_proto_enumTypes,
		MessageInfos:      file_pb_pod_v1_proto_msgTypes,
	}.Build()
	File_pb_pod_v1_proto = out.File
	file_pb_pod_v1_proto_rawDesc = nil
	file_pb_pod_v1_proto_goTypes = nil
	file_pb_pod_v1_proto_depIdxs = nil
}
