// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/ezrollout.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EzRollout_ListEzRollout_FullMethodName                 = "/ezrollout.v1.EzRollout/ListEzRollout"
	EzRollout_CreateEzRollout_FullMethodName               = "/ezrollout.v1.EzRollout/CreateEzRollout"
	EzRollout_UpdateEzRollout_FullMethodName               = "/ezrollout.v1.EzRollout/UpdateEzRollout"
	EzRollout_DeleteEzRollout_FullMethodName               = "/ezrollout.v1.EzRollout/DeleteEzRollout"
	EzRollout_CreateOrUpdateEzRolloutByYaml_FullMethodName = "/ezrollout.v1.EzRollout/CreateOrUpdateEzRolloutByYaml"
	EzRollout_GetEzRolloutDetail_FullMethodName            = "/ezrollout.v1.EzRollout/GetEzRolloutDetail"
)

// EzRolloutClient is the client API for EzRollout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EzRolloutClient interface {
	// 查看-云原生管理-版本伸缩-列表
	ListEzRollout(ctx context.Context, in *ListEzRolloutRequest, opts ...grpc.CallOption) (*ListEzRolloutResponse, error)
	// 查看-云原生管理-版本伸缩-创建
	CreateEzRollout(ctx context.Context, in *CreateEzRolloutRequest, opts ...grpc.CallOption) (*CreateEzRolloutResponse, error)
	// 管理-云原生管理-版本伸缩-编辑
	UpdateEzRollout(ctx context.Context, in *UpdateEzRolloutRequest, opts ...grpc.CallOption) (*UpdateEzRolloutResponse, error)
	// 管理-云原生管理-版本伸缩-删除
	DeleteEzRollout(ctx context.Context, in *DeleteEzRolloutRequest, opts ...grpc.CallOption) (*DeleteEzRolloutResponse, error)
	// 管理-云原生管理-版本伸缩-yaml创建/更新
	CreateOrUpdateEzRolloutByYaml(ctx context.Context, in *CreateOrUpdateEzRolloutByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateEzRolloutByYamlResponse, error)
	// 查看-云原生管理-版本伸缩-详情
	GetEzRolloutDetail(ctx context.Context, in *EzRolloutDetailRequest, opts ...grpc.CallOption) (*EzRolloutDetailResponse, error)
}

type ezRolloutClient struct {
	cc grpc.ClientConnInterface
}

func NewEzRolloutClient(cc grpc.ClientConnInterface) EzRolloutClient {
	return &ezRolloutClient{cc}
}

func (c *ezRolloutClient) ListEzRollout(ctx context.Context, in *ListEzRolloutRequest, opts ...grpc.CallOption) (*ListEzRolloutResponse, error) {
	out := new(ListEzRolloutResponse)
	err := c.cc.Invoke(ctx, EzRollout_ListEzRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezRolloutClient) CreateEzRollout(ctx context.Context, in *CreateEzRolloutRequest, opts ...grpc.CallOption) (*CreateEzRolloutResponse, error) {
	out := new(CreateEzRolloutResponse)
	err := c.cc.Invoke(ctx, EzRollout_CreateEzRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezRolloutClient) UpdateEzRollout(ctx context.Context, in *UpdateEzRolloutRequest, opts ...grpc.CallOption) (*UpdateEzRolloutResponse, error) {
	out := new(UpdateEzRolloutResponse)
	err := c.cc.Invoke(ctx, EzRollout_UpdateEzRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezRolloutClient) DeleteEzRollout(ctx context.Context, in *DeleteEzRolloutRequest, opts ...grpc.CallOption) (*DeleteEzRolloutResponse, error) {
	out := new(DeleteEzRolloutResponse)
	err := c.cc.Invoke(ctx, EzRollout_DeleteEzRollout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezRolloutClient) CreateOrUpdateEzRolloutByYaml(ctx context.Context, in *CreateOrUpdateEzRolloutByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateEzRolloutByYamlResponse, error) {
	out := new(CreateOrUpdateEzRolloutByYamlResponse)
	err := c.cc.Invoke(ctx, EzRollout_CreateOrUpdateEzRolloutByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ezRolloutClient) GetEzRolloutDetail(ctx context.Context, in *EzRolloutDetailRequest, opts ...grpc.CallOption) (*EzRolloutDetailResponse, error) {
	out := new(EzRolloutDetailResponse)
	err := c.cc.Invoke(ctx, EzRollout_GetEzRolloutDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EzRolloutServer is the server API for EzRollout service.
// All implementations must embed UnimplementedEzRolloutServer
// for forward compatibility
type EzRolloutServer interface {
	// 查看-云原生管理-版本伸缩-列表
	ListEzRollout(context.Context, *ListEzRolloutRequest) (*ListEzRolloutResponse, error)
	// 查看-云原生管理-版本伸缩-创建
	CreateEzRollout(context.Context, *CreateEzRolloutRequest) (*CreateEzRolloutResponse, error)
	// 管理-云原生管理-版本伸缩-编辑
	UpdateEzRollout(context.Context, *UpdateEzRolloutRequest) (*UpdateEzRolloutResponse, error)
	// 管理-云原生管理-版本伸缩-删除
	DeleteEzRollout(context.Context, *DeleteEzRolloutRequest) (*DeleteEzRolloutResponse, error)
	// 管理-云原生管理-版本伸缩-yaml创建/更新
	CreateOrUpdateEzRolloutByYaml(context.Context, *CreateOrUpdateEzRolloutByYamlRequest) (*CreateOrUpdateEzRolloutByYamlResponse, error)
	// 查看-云原生管理-版本伸缩-详情
	GetEzRolloutDetail(context.Context, *EzRolloutDetailRequest) (*EzRolloutDetailResponse, error)
	mustEmbedUnimplementedEzRolloutServer()
}

// UnimplementedEzRolloutServer must be embedded to have forward compatible implementations.
type UnimplementedEzRolloutServer struct {
}

func (UnimplementedEzRolloutServer) ListEzRollout(context.Context, *ListEzRolloutRequest) (*ListEzRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEzRollout not implemented")
}
func (UnimplementedEzRolloutServer) CreateEzRollout(context.Context, *CreateEzRolloutRequest) (*CreateEzRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEzRollout not implemented")
}
func (UnimplementedEzRolloutServer) UpdateEzRollout(context.Context, *UpdateEzRolloutRequest) (*UpdateEzRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEzRollout not implemented")
}
func (UnimplementedEzRolloutServer) DeleteEzRollout(context.Context, *DeleteEzRolloutRequest) (*DeleteEzRolloutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEzRollout not implemented")
}
func (UnimplementedEzRolloutServer) CreateOrUpdateEzRolloutByYaml(context.Context, *CreateOrUpdateEzRolloutByYamlRequest) (*CreateOrUpdateEzRolloutByYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateEzRolloutByYaml not implemented")
}
func (UnimplementedEzRolloutServer) GetEzRolloutDetail(context.Context, *EzRolloutDetailRequest) (*EzRolloutDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEzRolloutDetail not implemented")
}
func (UnimplementedEzRolloutServer) mustEmbedUnimplementedEzRolloutServer() {}

// UnsafeEzRolloutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EzRolloutServer will
// result in compilation errors.
type UnsafeEzRolloutServer interface {
	mustEmbedUnimplementedEzRolloutServer()
}

func RegisterEzRolloutServer(s grpc.ServiceRegistrar, srv EzRolloutServer) {
	s.RegisterService(&EzRollout_ServiceDesc, srv)
}

func _EzRollout_ListEzRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEzRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzRolloutServer).ListEzRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EzRollout_ListEzRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzRolloutServer).ListEzRollout(ctx, req.(*ListEzRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzRollout_CreateEzRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEzRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzRolloutServer).CreateEzRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EzRollout_CreateEzRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzRolloutServer).CreateEzRollout(ctx, req.(*CreateEzRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzRollout_UpdateEzRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEzRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzRolloutServer).UpdateEzRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EzRollout_UpdateEzRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzRolloutServer).UpdateEzRollout(ctx, req.(*UpdateEzRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzRollout_DeleteEzRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEzRolloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzRolloutServer).DeleteEzRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EzRollout_DeleteEzRollout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzRolloutServer).DeleteEzRollout(ctx, req.(*DeleteEzRolloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzRollout_CreateOrUpdateEzRolloutByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateEzRolloutByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzRolloutServer).CreateOrUpdateEzRolloutByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EzRollout_CreateOrUpdateEzRolloutByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzRolloutServer).CreateOrUpdateEzRolloutByYaml(ctx, req.(*CreateOrUpdateEzRolloutByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EzRollout_GetEzRolloutDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EzRolloutDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EzRolloutServer).GetEzRolloutDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EzRollout_GetEzRolloutDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EzRolloutServer).GetEzRolloutDetail(ctx, req.(*EzRolloutDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EzRollout_ServiceDesc is the grpc.ServiceDesc for EzRollout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EzRollout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ezrollout.v1.EzRollout",
	HandlerType: (*EzRolloutServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEzRollout",
			Handler:    _EzRollout_ListEzRollout_Handler,
		},
		{
			MethodName: "CreateEzRollout",
			Handler:    _EzRollout_CreateEzRollout_Handler,
		},
		{
			MethodName: "UpdateEzRollout",
			Handler:    _EzRollout_UpdateEzRollout_Handler,
		},
		{
			MethodName: "DeleteEzRollout",
			Handler:    _EzRollout_DeleteEzRollout_Handler,
		},
		{
			MethodName: "CreateOrUpdateEzRolloutByYaml",
			Handler:    _EzRollout_CreateOrUpdateEzRolloutByYaml_Handler,
		},
		{
			MethodName: "GetEzRolloutDetail",
			Handler:    _EzRollout_GetEzRolloutDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/ezrollout.v1.proto",
}
