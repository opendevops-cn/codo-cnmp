// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/daemonset.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DaemonSet_ListDaemonSet_FullMethodName                   = "/daemonset.DaemonSet/ListDaemonSet"
	DaemonSet_CreateOrUpdateDaemonSetByYaml_FullMethodName   = "/daemonset.DaemonSet/CreateOrUpdateDaemonSetByYaml"
	DaemonSet_DeleteDaemonSet_FullMethodName                 = "/daemonset.DaemonSet/DeleteDaemonSet"
	DaemonSet_RestartDaemonSet_FullMethodName                = "/daemonset.DaemonSet/RestartDaemonSet"
	DaemonSet_GetDaemonSetDetail_FullMethodName              = "/daemonset.DaemonSet/GetDaemonSetDetail"
	DaemonSet_GetDaemonSetRevisions_FullMethodName           = "/daemonset.DaemonSet/GetDaemonSetRevisions"
	DaemonSet_RollbackDaemonSet_FullMethodName               = "/daemonset.DaemonSet/RollbackDaemonSet"
	DaemonSet_UpdateStatefulSetUpdateStrategy_FullMethodName = "/daemonset.DaemonSet/UpdateStatefulSetUpdateStrategy"
)

// DaemonSetClient is the client API for DaemonSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonSetClient interface {
	// 查看-云原生管理-DaemonSet-列表
	ListDaemonSet(ctx context.Context, in *ListDaemonSetRequest, opts ...grpc.CallOption) (*ListDaemonSetResponse, error)
	// 管理-云原生管理-DaemonSet-Yaml创建更新
	CreateOrUpdateDaemonSetByYaml(ctx context.Context, in *CreateOrUpdateDaemonSetByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateDaemonSetByYamlResponse, error)
	// 管理-云原生管理-DaemonSet-删除
	DeleteDaemonSet(ctx context.Context, in *DeleteDaemonSetRequest, opts ...grpc.CallOption) (*DeleteDaemonSetResponse, error)
	// 管理-云原生管理-DaemonSet-重启
	RestartDaemonSet(ctx context.Context, in *RestartDaemonSetRequest, opts ...grpc.CallOption) (*RestartDaemonSetResponse, error)
	// 查看-云原生管理-DaemonSet-详情
	GetDaemonSetDetail(ctx context.Context, in *GetDaemonSetDetailRequest, opts ...grpc.CallOption) (*GetDaemonSetDetailResponse, error)
	// 查看-云原生管理-DaemonSet-历史版本
	GetDaemonSetRevisions(ctx context.Context, in *GetDaemonSetHistoryRequest, opts ...grpc.CallOption) (*GetDaemonSetHistoryResponse, error)
	// 管理-云原生管理-DaemonSet-回滚
	RollbackDaemonSet(ctx context.Context, in *RollbackDaemonSetRequest, opts ...grpc.CallOption) (*RollbackDaemonSetResponse, error)
	// 管理-云原生管理-DaemonSet-更新策略
	UpdateStatefulSetUpdateStrategy(ctx context.Context, in *UpdateDaemonSetUpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateDaemonSetUpdateStrategyResponse, error)
}

type daemonSetClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonSetClient(cc grpc.ClientConnInterface) DaemonSetClient {
	return &daemonSetClient{cc}
}

func (c *daemonSetClient) ListDaemonSet(ctx context.Context, in *ListDaemonSetRequest, opts ...grpc.CallOption) (*ListDaemonSetResponse, error) {
	out := new(ListDaemonSetResponse)
	err := c.cc.Invoke(ctx, DaemonSet_ListDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) CreateOrUpdateDaemonSetByYaml(ctx context.Context, in *CreateOrUpdateDaemonSetByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateDaemonSetByYamlResponse, error) {
	out := new(CreateOrUpdateDaemonSetByYamlResponse)
	err := c.cc.Invoke(ctx, DaemonSet_CreateOrUpdateDaemonSetByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) DeleteDaemonSet(ctx context.Context, in *DeleteDaemonSetRequest, opts ...grpc.CallOption) (*DeleteDaemonSetResponse, error) {
	out := new(DeleteDaemonSetResponse)
	err := c.cc.Invoke(ctx, DaemonSet_DeleteDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) RestartDaemonSet(ctx context.Context, in *RestartDaemonSetRequest, opts ...grpc.CallOption) (*RestartDaemonSetResponse, error) {
	out := new(RestartDaemonSetResponse)
	err := c.cc.Invoke(ctx, DaemonSet_RestartDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) GetDaemonSetDetail(ctx context.Context, in *GetDaemonSetDetailRequest, opts ...grpc.CallOption) (*GetDaemonSetDetailResponse, error) {
	out := new(GetDaemonSetDetailResponse)
	err := c.cc.Invoke(ctx, DaemonSet_GetDaemonSetDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) GetDaemonSetRevisions(ctx context.Context, in *GetDaemonSetHistoryRequest, opts ...grpc.CallOption) (*GetDaemonSetHistoryResponse, error) {
	out := new(GetDaemonSetHistoryResponse)
	err := c.cc.Invoke(ctx, DaemonSet_GetDaemonSetRevisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) RollbackDaemonSet(ctx context.Context, in *RollbackDaemonSetRequest, opts ...grpc.CallOption) (*RollbackDaemonSetResponse, error) {
	out := new(RollbackDaemonSetResponse)
	err := c.cc.Invoke(ctx, DaemonSet_RollbackDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonSetClient) UpdateStatefulSetUpdateStrategy(ctx context.Context, in *UpdateDaemonSetUpdateStrategyRequest, opts ...grpc.CallOption) (*UpdateDaemonSetUpdateStrategyResponse, error) {
	out := new(UpdateDaemonSetUpdateStrategyResponse)
	err := c.cc.Invoke(ctx, DaemonSet_UpdateStatefulSetUpdateStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonSetServer is the server API for DaemonSet service.
// All implementations must embed UnimplementedDaemonSetServer
// for forward compatibility
type DaemonSetServer interface {
	// 查看-云原生管理-DaemonSet-列表
	ListDaemonSet(context.Context, *ListDaemonSetRequest) (*ListDaemonSetResponse, error)
	// 管理-云原生管理-DaemonSet-Yaml创建更新
	CreateOrUpdateDaemonSetByYaml(context.Context, *CreateOrUpdateDaemonSetByYamlRequest) (*CreateOrUpdateDaemonSetByYamlResponse, error)
	// 管理-云原生管理-DaemonSet-删除
	DeleteDaemonSet(context.Context, *DeleteDaemonSetRequest) (*DeleteDaemonSetResponse, error)
	// 管理-云原生管理-DaemonSet-重启
	RestartDaemonSet(context.Context, *RestartDaemonSetRequest) (*RestartDaemonSetResponse, error)
	// 查看-云原生管理-DaemonSet-详情
	GetDaemonSetDetail(context.Context, *GetDaemonSetDetailRequest) (*GetDaemonSetDetailResponse, error)
	// 查看-云原生管理-DaemonSet-历史版本
	GetDaemonSetRevisions(context.Context, *GetDaemonSetHistoryRequest) (*GetDaemonSetHistoryResponse, error)
	// 管理-云原生管理-DaemonSet-回滚
	RollbackDaemonSet(context.Context, *RollbackDaemonSetRequest) (*RollbackDaemonSetResponse, error)
	// 管理-云原生管理-DaemonSet-更新策略
	UpdateStatefulSetUpdateStrategy(context.Context, *UpdateDaemonSetUpdateStrategyRequest) (*UpdateDaemonSetUpdateStrategyResponse, error)
	mustEmbedUnimplementedDaemonSetServer()
}

// UnimplementedDaemonSetServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonSetServer struct {
}

func (UnimplementedDaemonSetServer) ListDaemonSet(context.Context, *ListDaemonSetRequest) (*ListDaemonSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDaemonSet not implemented")
}
func (UnimplementedDaemonSetServer) CreateOrUpdateDaemonSetByYaml(context.Context, *CreateOrUpdateDaemonSetByYamlRequest) (*CreateOrUpdateDaemonSetByYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateDaemonSetByYaml not implemented")
}
func (UnimplementedDaemonSetServer) DeleteDaemonSet(context.Context, *DeleteDaemonSetRequest) (*DeleteDaemonSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDaemonSet not implemented")
}
func (UnimplementedDaemonSetServer) RestartDaemonSet(context.Context, *RestartDaemonSetRequest) (*RestartDaemonSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartDaemonSet not implemented")
}
func (UnimplementedDaemonSetServer) GetDaemonSetDetail(context.Context, *GetDaemonSetDetailRequest) (*GetDaemonSetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDaemonSetDetail not implemented")
}
func (UnimplementedDaemonSetServer) GetDaemonSetRevisions(context.Context, *GetDaemonSetHistoryRequest) (*GetDaemonSetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDaemonSetRevisions not implemented")
}
func (UnimplementedDaemonSetServer) RollbackDaemonSet(context.Context, *RollbackDaemonSetRequest) (*RollbackDaemonSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackDaemonSet not implemented")
}
func (UnimplementedDaemonSetServer) UpdateStatefulSetUpdateStrategy(context.Context, *UpdateDaemonSetUpdateStrategyRequest) (*UpdateDaemonSetUpdateStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatefulSetUpdateStrategy not implemented")
}
func (UnimplementedDaemonSetServer) mustEmbedUnimplementedDaemonSetServer() {}

// UnsafeDaemonSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonSetServer will
// result in compilation errors.
type UnsafeDaemonSetServer interface {
	mustEmbedUnimplementedDaemonSetServer()
}

func RegisterDaemonSetServer(s grpc.ServiceRegistrar, srv DaemonSetServer) {
	s.RegisterService(&DaemonSet_ServiceDesc, srv)
}

func _DaemonSet_ListDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).ListDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonSet_ListDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).ListDaemonSet(ctx, req.(*ListDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_CreateOrUpdateDaemonSetByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateDaemonSetByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).CreateOrUpdateDaemonSetByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonSet_CreateOrUpdateDaemonSetByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).CreateOrUpdateDaemonSetByYaml(ctx, req.(*CreateOrUpdateDaemonSetByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_DeleteDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).DeleteDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonSet_DeleteDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).DeleteDaemonSet(ctx, req.(*DeleteDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_RestartDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).RestartDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonSet_RestartDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).RestartDaemonSet(ctx, req.(*RestartDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_GetDaemonSetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDaemonSetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).GetDaemonSetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonSet_GetDaemonSetDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).GetDaemonSetDetail(ctx, req.(*GetDaemonSetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_GetDaemonSetRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDaemonSetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).GetDaemonSetRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonSet_GetDaemonSetRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).GetDaemonSetRevisions(ctx, req.(*GetDaemonSetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_RollbackDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).RollbackDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonSet_RollbackDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).RollbackDaemonSet(ctx, req.(*RollbackDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonSet_UpdateStatefulSetUpdateStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDaemonSetUpdateStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonSetServer).UpdateStatefulSetUpdateStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonSet_UpdateStatefulSetUpdateStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonSetServer).UpdateStatefulSetUpdateStrategy(ctx, req.(*UpdateDaemonSetUpdateStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DaemonSet_ServiceDesc is the grpc.ServiceDesc for DaemonSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DaemonSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemonset.DaemonSet",
	HandlerType: (*DaemonSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDaemonSet",
			Handler:    _DaemonSet_ListDaemonSet_Handler,
		},
		{
			MethodName: "CreateOrUpdateDaemonSetByYaml",
			Handler:    _DaemonSet_CreateOrUpdateDaemonSetByYaml_Handler,
		},
		{
			MethodName: "DeleteDaemonSet",
			Handler:    _DaemonSet_DeleteDaemonSet_Handler,
		},
		{
			MethodName: "RestartDaemonSet",
			Handler:    _DaemonSet_RestartDaemonSet_Handler,
		},
		{
			MethodName: "GetDaemonSetDetail",
			Handler:    _DaemonSet_GetDaemonSetDetail_Handler,
		},
		{
			MethodName: "GetDaemonSetRevisions",
			Handler:    _DaemonSet_GetDaemonSetRevisions_Handler,
		},
		{
			MethodName: "RollbackDaemonSet",
			Handler:    _DaemonSet_RollbackDaemonSet_Handler,
		},
		{
			MethodName: "UpdateStatefulSetUpdateStrategy",
			Handler:    _DaemonSet_UpdateStatefulSetUpdateStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/daemonset.v1.proto",
}
