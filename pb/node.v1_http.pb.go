// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/node.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationNodeListNode = "/node.Node/ListNode"
const OperationNodeGetNodeDetail = "/node.Node/GetNodeDetail"
const OperationNodeUpdateNode = "/node.Node/UpdateNode"
const OperationNodeCreateOrUpdateNodeByYaml = "/node.Node/CreateOrUpdateNodeByYaml"
const OperationNodeCheckEviction = "/node.Node/CheckEviction"
const OperationNodeHandleNode = "/node.Node/HandleNode"

type NodeHTTPServer interface {
	// ListNode查看-云原生管理-节点-列表
	ListNode(context.Context, *ListNodeRequest) (*ListNodeResponse, error)
	// GetNodeDetail查看-云原生管理-节点-详情
	GetNodeDetail(context.Context, *GetNodeDetailRequest) (*GetNodeDetailResponse, error)
	// UpdateNode管理-云原生管理-节点-编辑
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	// CreateOrUpdateNodeByYaml管理-云原生管理-节点-Yaml创建更新
	CreateOrUpdateNodeByYaml(context.Context, *CreateOrUpdateNodeByYamlRequest) (*CreateOrUpdateNodeByYamlResponse, error)
	// CheckEviction管理-云原生管理-节点-Pod驱逐检查
	CheckEviction(context.Context, *CheckEvictionRequest) (*CheckEvictionResponse, error)
	// HandleNode管理-云原生管理-节点-操作
	HandleNode(context.Context, *HandleNodeRequest) (*HandleNodeResponse, error)
}

func NewNodeHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationNodeListNode).Build(),
		selector.Server().Path(OperationNodeGetNodeDetail).Build(),
		selector.Server().Path(OperationNodeUpdateNode).Build(),
		selector.Server().Path(OperationNodeCreateOrUpdateNodeByYaml).Build(),
		selector.Server().Path(OperationNodeCheckEviction).Build(),
		selector.Server().Path(OperationNodeHandleNode).Build(),
	).Path(
		OperationNodeListNode,
		OperationNodeGetNodeDetail,
		OperationNodeUpdateNode,
		OperationNodeCreateOrUpdateNodeByYaml,
		OperationNodeCheckEviction,
		OperationNodeHandleNode,
	).Build()
}

func RegisterNodeHTTPServer(s *http.Server, srv NodeHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/node/list", _Node_ListNode0_HTTP_Handler(srv))
	r.GET("/api/v1/node/detail", _Node_GetNodeDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/node/update", _Node_UpdateNode0_HTTP_Handler(srv))
	r.POST("/api/v1/node/create_or_update", _Node_CreateOrUpdateNodeByYaml0_HTTP_Handler(srv))
	r.GET("/api/v1/node/eviction/check", _Node_CheckEviction0_HTTP_Handler(srv))
	r.POST("/api/v1/node/handle", _Node_HandleNode0_HTTP_Handler(srv))
}

func GenerateNodeHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 6)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/node/list",
		Comment: "查看-云原生管理-节点-列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/node/detail",
		Comment: "查看-云原生管理-节点-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/node/update",
		Comment: "管理-云原生管理-节点-编辑",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/node/create_or_update",
		Comment: "管理-云原生管理-节点-Yaml创建更新",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/node/eviction/check",
		Comment: "管理-云原生管理-节点-Pod驱逐检查",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/node/handle",
		Comment: "管理-云原生管理-节点-操作",
	})
	return routes
}

func _Node_ListNode0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListNodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeListNode)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListNode(ctx, req.(*ListNodeRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNodeResponse)
		return ctx.Result(200, reply)
	}
}

func _Node_GetNodeDetail0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetNodeDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeGetNodeDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNodeDetail(ctx, req.(*GetNodeDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNodeDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Node_UpdateNode0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateNodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeUpdateNode)
		auditRule := audit.NewAudit(
			"节点管理",
			"编辑节点",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "node",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNode(ctx, req.(*UpdateNodeRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateNodeResponse)
		return ctx.Result(200, reply)
	}
}

func _Node_CreateOrUpdateNodeByYaml0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateNodeByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeCreateOrUpdateNodeByYaml)
		auditRule := audit.NewAudit(
			"节点管理",
			"编辑YAML",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "node",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateNodeByYaml(ctx, req.(*CreateOrUpdateNodeByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateNodeByYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _Node_CheckEviction0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CheckEvictionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeCheckEviction)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckEviction(ctx, req.(*CheckEvictionRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckEvictionResponse)
		return ctx.Result(200, reply)
	}
}

func _Node_HandleNode0_HTTP_Handler(srv NodeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in HandleNodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNodeHandleNode)
		auditRule := audit.NewAudit(
			"节点管理",
			"驱逐/封锁/解封",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "node",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleNode(ctx, req.(*HandleNodeRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandleNodeResponse)
		return ctx.Result(200, reply)
	}
}

type NodeHTTPClient interface {
	ListNode(ctx context.Context, req *ListNodeRequest, opts ...http.CallOption) (rsp *ListNodeResponse, err error)
	GetNodeDetail(ctx context.Context, req *GetNodeDetailRequest, opts ...http.CallOption) (rsp *GetNodeDetailResponse, err error)
	UpdateNode(ctx context.Context, req *UpdateNodeRequest, opts ...http.CallOption) (rsp *UpdateNodeResponse, err error)
	CreateOrUpdateNodeByYaml(ctx context.Context, req *CreateOrUpdateNodeByYamlRequest, opts ...http.CallOption) (rsp *CreateOrUpdateNodeByYamlResponse, err error)
	CheckEviction(ctx context.Context, req *CheckEvictionRequest, opts ...http.CallOption) (rsp *CheckEvictionResponse, err error)
	HandleNode(ctx context.Context, req *HandleNodeRequest, opts ...http.CallOption) (rsp *HandleNodeResponse, err error)
}

type NodeHTTPClientImpl struct {
	cc *http.Client
}

func NewNodeHTTPClient(client *http.Client) NodeHTTPClient {
	return &NodeHTTPClientImpl{client}
}

func (c *NodeHTTPClientImpl) ListNode(ctx context.Context, in *ListNodeRequest, opts ...http.CallOption) (*ListNodeResponse, error) {
	var out ListNodeResponse
	pattern := "/api/v1/node/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNodeListNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NodeHTTPClientImpl) GetNodeDetail(ctx context.Context, in *GetNodeDetailRequest, opts ...http.CallOption) (*GetNodeDetailResponse, error) {
	var out GetNodeDetailResponse
	pattern := "/api/v1/node/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNodeGetNodeDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NodeHTTPClientImpl) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...http.CallOption) (*UpdateNodeResponse, error) {
	var out UpdateNodeResponse
	pattern := "/api/v1/node/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNodeUpdateNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NodeHTTPClientImpl) CreateOrUpdateNodeByYaml(ctx context.Context, in *CreateOrUpdateNodeByYamlRequest, opts ...http.CallOption) (*CreateOrUpdateNodeByYamlResponse, error) {
	var out CreateOrUpdateNodeByYamlResponse
	pattern := "/api/v1/node/create_or_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNodeCreateOrUpdateNodeByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NodeHTTPClientImpl) CheckEviction(ctx context.Context, in *CheckEvictionRequest, opts ...http.CallOption) (*CheckEvictionResponse, error) {
	var out CheckEvictionResponse
	pattern := "/api/v1/node/eviction/check"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNodeCheckEviction))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NodeHTTPClientImpl) HandleNode(ctx context.Context, in *HandleNodeRequest, opts ...http.CallOption) (*HandleNodeResponse, error) {
	var out HandleNodeResponse
	pattern := "/api/v1/node/handle"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNodeHandleNode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
