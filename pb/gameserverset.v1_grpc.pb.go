// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/gameserverset.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameServerSet_ListGameServerSet_FullMethodName                   = "/gameserverset.GameServerSet/ListGameServerSet"
	GameServerSet_CreateOrUpdateGameServerSetByYaml_FullMethodName   = "/gameserverset.GameServerSet/CreateOrUpdateGameServerSetByYaml"
	GameServerSet_DeleteGameServerSet_FullMethodName                 = "/gameserverset.GameServerSet/DeleteGameServerSet"
	GameServerSet_RestartGameServerSet_FullMethodName                = "/gameserverset.GameServerSet/RestartGameServerSet"
	GameServerSet_ScaleGameServerSet_FullMethodName                  = "/gameserverset.GameServerSet/ScaleGameServerSet"
	GameServerSet_GetGameServerSetDetail_FullMethodName              = "/gameserverset.GameServerSet/GetGameServerSetDetail"
	GameServerSet_RollbackGameServerSet_FullMethodName               = "/gameserverset.GameServerSet/RollbackGameServerSet"
	GameServerSet_DeleteGameServerSetPods_FullMethodName             = "/gameserverset.GameServerSet/DeleteGameServerSetPods"
	GameServerSet_UpdateScaleStrategy_FullMethodName                 = "/gameserverset.GameServerSet/UpdateScaleStrategy"
	GameServerSet_UpdateUpgradeStrategy_FullMethodName               = "/gameserverset.GameServerSet/UpdateUpgradeStrategy"
	GameServerSet_ListGameServerSetControllerRevision_FullMethodName = "/gameserverset.GameServerSet/ListGameServerSetControllerRevision"
)

// GameServerSetClient is the client API for GameServerSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerSetClient interface {
	// 查看-云原生管理-GameServerSet-列表
	ListGameServerSet(ctx context.Context, in *ListGameServerSetRequest, opts ...grpc.CallOption) (*ListGameServerSetResponse, error)
	// 管理-云原生管理-GameServerSet-Yaml创建更新
	CreateOrUpdateGameServerSetByYaml(ctx context.Context, in *CreateOrUpdateGameServerSetByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateGameServerSetByYamlResponse, error)
	// 管理-云原生管理-GameServerSet-删除
	DeleteGameServerSet(ctx context.Context, in *DeleteGameServerSetRequest, opts ...grpc.CallOption) (*DeleteGameServerSetResponse, error)
	// 管理-云原生管理-GameServerSet-重启
	RestartGameServerSet(ctx context.Context, in *RestartGameServerSetRequest, opts ...grpc.CallOption) (*RestartGameServerSetResponse, error)
	// 管理-云原生管理-GameServerSet-伸缩
	ScaleGameServerSet(ctx context.Context, in *ScaleGameServerSetRequest, opts ...grpc.CallOption) (*ScaleGameServerSetResponse, error)
	// 查看-云原生管理-GameServerSet-详情
	GetGameServerSetDetail(ctx context.Context, in *GameServerSetDetailRequest, opts ...grpc.CallOption) (*GameServerSetDetailResponse, error)
	// 管理-云原生管理-GameServerSet-回滚
	RollbackGameServerSet(ctx context.Context, in *RollbackGameServerSetRequest, opts ...grpc.CallOption) (*RollbackGameServerSetResponse, error)
	// 管理-云原生管理-GameServerSet-删除Pod
	DeleteGameServerSetPods(ctx context.Context, in *DeleteGameServerSetPodRequest, opts ...grpc.CallOption) (*DeleteGameServerSetPodResponse, error)
	// 管理-云原生管理-GameServerSet-扩容策略
	UpdateScaleStrategy(ctx context.Context, in *UpdateGameServerSetScaleStrategyRequest, opts ...grpc.CallOption) (*UpdateGameServerSetScaleStrategyResponse, error)
	// 管理-云原生管理-GameServerSet-升级策略
	UpdateUpgradeStrategy(ctx context.Context, in *UpdateGameServerSetUpgradeStrategyRequest, opts ...grpc.CallOption) (*UpdateGameServerSetUpgradeStrategyResponse, error)
	// 查看-云原生管理-GameServerSet-历史版本
	ListGameServerSetControllerRevision(ctx context.Context, in *ListGameServerSetReversionRequest, opts ...grpc.CallOption) (*ListGameServerSetReversionResponse, error)
}

type gameServerSetClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerSetClient(cc grpc.ClientConnInterface) GameServerSetClient {
	return &gameServerSetClient{cc}
}

func (c *gameServerSetClient) ListGameServerSet(ctx context.Context, in *ListGameServerSetRequest, opts ...grpc.CallOption) (*ListGameServerSetResponse, error) {
	out := new(ListGameServerSetResponse)
	err := c.cc.Invoke(ctx, GameServerSet_ListGameServerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) CreateOrUpdateGameServerSetByYaml(ctx context.Context, in *CreateOrUpdateGameServerSetByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateGameServerSetByYamlResponse, error) {
	out := new(CreateOrUpdateGameServerSetByYamlResponse)
	err := c.cc.Invoke(ctx, GameServerSet_CreateOrUpdateGameServerSetByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) DeleteGameServerSet(ctx context.Context, in *DeleteGameServerSetRequest, opts ...grpc.CallOption) (*DeleteGameServerSetResponse, error) {
	out := new(DeleteGameServerSetResponse)
	err := c.cc.Invoke(ctx, GameServerSet_DeleteGameServerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) RestartGameServerSet(ctx context.Context, in *RestartGameServerSetRequest, opts ...grpc.CallOption) (*RestartGameServerSetResponse, error) {
	out := new(RestartGameServerSetResponse)
	err := c.cc.Invoke(ctx, GameServerSet_RestartGameServerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) ScaleGameServerSet(ctx context.Context, in *ScaleGameServerSetRequest, opts ...grpc.CallOption) (*ScaleGameServerSetResponse, error) {
	out := new(ScaleGameServerSetResponse)
	err := c.cc.Invoke(ctx, GameServerSet_ScaleGameServerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) GetGameServerSetDetail(ctx context.Context, in *GameServerSetDetailRequest, opts ...grpc.CallOption) (*GameServerSetDetailResponse, error) {
	out := new(GameServerSetDetailResponse)
	err := c.cc.Invoke(ctx, GameServerSet_GetGameServerSetDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) RollbackGameServerSet(ctx context.Context, in *RollbackGameServerSetRequest, opts ...grpc.CallOption) (*RollbackGameServerSetResponse, error) {
	out := new(RollbackGameServerSetResponse)
	err := c.cc.Invoke(ctx, GameServerSet_RollbackGameServerSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) DeleteGameServerSetPods(ctx context.Context, in *DeleteGameServerSetPodRequest, opts ...grpc.CallOption) (*DeleteGameServerSetPodResponse, error) {
	out := new(DeleteGameServerSetPodResponse)
	err := c.cc.Invoke(ctx, GameServerSet_DeleteGameServerSetPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) UpdateScaleStrategy(ctx context.Context, in *UpdateGameServerSetScaleStrategyRequest, opts ...grpc.CallOption) (*UpdateGameServerSetScaleStrategyResponse, error) {
	out := new(UpdateGameServerSetScaleStrategyResponse)
	err := c.cc.Invoke(ctx, GameServerSet_UpdateScaleStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) UpdateUpgradeStrategy(ctx context.Context, in *UpdateGameServerSetUpgradeStrategyRequest, opts ...grpc.CallOption) (*UpdateGameServerSetUpgradeStrategyResponse, error) {
	out := new(UpdateGameServerSetUpgradeStrategyResponse)
	err := c.cc.Invoke(ctx, GameServerSet_UpdateUpgradeStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerSetClient) ListGameServerSetControllerRevision(ctx context.Context, in *ListGameServerSetReversionRequest, opts ...grpc.CallOption) (*ListGameServerSetReversionResponse, error) {
	out := new(ListGameServerSetReversionResponse)
	err := c.cc.Invoke(ctx, GameServerSet_ListGameServerSetControllerRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerSetServer is the server API for GameServerSet service.
// All implementations must embed UnimplementedGameServerSetServer
// for forward compatibility
type GameServerSetServer interface {
	// 查看-云原生管理-GameServerSet-列表
	ListGameServerSet(context.Context, *ListGameServerSetRequest) (*ListGameServerSetResponse, error)
	// 管理-云原生管理-GameServerSet-Yaml创建更新
	CreateOrUpdateGameServerSetByYaml(context.Context, *CreateOrUpdateGameServerSetByYamlRequest) (*CreateOrUpdateGameServerSetByYamlResponse, error)
	// 管理-云原生管理-GameServerSet-删除
	DeleteGameServerSet(context.Context, *DeleteGameServerSetRequest) (*DeleteGameServerSetResponse, error)
	// 管理-云原生管理-GameServerSet-重启
	RestartGameServerSet(context.Context, *RestartGameServerSetRequest) (*RestartGameServerSetResponse, error)
	// 管理-云原生管理-GameServerSet-伸缩
	ScaleGameServerSet(context.Context, *ScaleGameServerSetRequest) (*ScaleGameServerSetResponse, error)
	// 查看-云原生管理-GameServerSet-详情
	GetGameServerSetDetail(context.Context, *GameServerSetDetailRequest) (*GameServerSetDetailResponse, error)
	// 管理-云原生管理-GameServerSet-回滚
	RollbackGameServerSet(context.Context, *RollbackGameServerSetRequest) (*RollbackGameServerSetResponse, error)
	// 管理-云原生管理-GameServerSet-删除Pod
	DeleteGameServerSetPods(context.Context, *DeleteGameServerSetPodRequest) (*DeleteGameServerSetPodResponse, error)
	// 管理-云原生管理-GameServerSet-扩容策略
	UpdateScaleStrategy(context.Context, *UpdateGameServerSetScaleStrategyRequest) (*UpdateGameServerSetScaleStrategyResponse, error)
	// 管理-云原生管理-GameServerSet-升级策略
	UpdateUpgradeStrategy(context.Context, *UpdateGameServerSetUpgradeStrategyRequest) (*UpdateGameServerSetUpgradeStrategyResponse, error)
	// 查看-云原生管理-GameServerSet-历史版本
	ListGameServerSetControllerRevision(context.Context, *ListGameServerSetReversionRequest) (*ListGameServerSetReversionResponse, error)
	mustEmbedUnimplementedGameServerSetServer()
}

// UnimplementedGameServerSetServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerSetServer struct {
}

func (UnimplementedGameServerSetServer) ListGameServerSet(context.Context, *ListGameServerSetRequest) (*ListGameServerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameServerSet not implemented")
}
func (UnimplementedGameServerSetServer) CreateOrUpdateGameServerSetByYaml(context.Context, *CreateOrUpdateGameServerSetByYamlRequest) (*CreateOrUpdateGameServerSetByYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateGameServerSetByYaml not implemented")
}
func (UnimplementedGameServerSetServer) DeleteGameServerSet(context.Context, *DeleteGameServerSetRequest) (*DeleteGameServerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameServerSet not implemented")
}
func (UnimplementedGameServerSetServer) RestartGameServerSet(context.Context, *RestartGameServerSetRequest) (*RestartGameServerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartGameServerSet not implemented")
}
func (UnimplementedGameServerSetServer) ScaleGameServerSet(context.Context, *ScaleGameServerSetRequest) (*ScaleGameServerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleGameServerSet not implemented")
}
func (UnimplementedGameServerSetServer) GetGameServerSetDetail(context.Context, *GameServerSetDetailRequest) (*GameServerSetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameServerSetDetail not implemented")
}
func (UnimplementedGameServerSetServer) RollbackGameServerSet(context.Context, *RollbackGameServerSetRequest) (*RollbackGameServerSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackGameServerSet not implemented")
}
func (UnimplementedGameServerSetServer) DeleteGameServerSetPods(context.Context, *DeleteGameServerSetPodRequest) (*DeleteGameServerSetPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameServerSetPods not implemented")
}
func (UnimplementedGameServerSetServer) UpdateScaleStrategy(context.Context, *UpdateGameServerSetScaleStrategyRequest) (*UpdateGameServerSetScaleStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScaleStrategy not implemented")
}
func (UnimplementedGameServerSetServer) UpdateUpgradeStrategy(context.Context, *UpdateGameServerSetUpgradeStrategyRequest) (*UpdateGameServerSetUpgradeStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUpgradeStrategy not implemented")
}
func (UnimplementedGameServerSetServer) ListGameServerSetControllerRevision(context.Context, *ListGameServerSetReversionRequest) (*ListGameServerSetReversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameServerSetControllerRevision not implemented")
}
func (UnimplementedGameServerSetServer) mustEmbedUnimplementedGameServerSetServer() {}

// UnsafeGameServerSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerSetServer will
// result in compilation errors.
type UnsafeGameServerSetServer interface {
	mustEmbedUnimplementedGameServerSetServer()
}

func RegisterGameServerSetServer(s grpc.ServiceRegistrar, srv GameServerSetServer) {
	s.RegisterService(&GameServerSet_ServiceDesc, srv)
}

func _GameServerSet_ListGameServerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameServerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).ListGameServerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_ListGameServerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).ListGameServerSet(ctx, req.(*ListGameServerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_CreateOrUpdateGameServerSetByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateGameServerSetByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).CreateOrUpdateGameServerSetByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_CreateOrUpdateGameServerSetByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).CreateOrUpdateGameServerSetByYaml(ctx, req.(*CreateOrUpdateGameServerSetByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_DeleteGameServerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameServerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).DeleteGameServerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_DeleteGameServerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).DeleteGameServerSet(ctx, req.(*DeleteGameServerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_RestartGameServerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartGameServerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).RestartGameServerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_RestartGameServerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).RestartGameServerSet(ctx, req.(*RestartGameServerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_ScaleGameServerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleGameServerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).ScaleGameServerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_ScaleGameServerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).ScaleGameServerSet(ctx, req.(*ScaleGameServerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_GetGameServerSetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameServerSetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).GetGameServerSetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_GetGameServerSetDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).GetGameServerSetDetail(ctx, req.(*GameServerSetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_RollbackGameServerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackGameServerSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).RollbackGameServerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_RollbackGameServerSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).RollbackGameServerSet(ctx, req.(*RollbackGameServerSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_DeleteGameServerSetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGameServerSetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).DeleteGameServerSetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_DeleteGameServerSetPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).DeleteGameServerSetPods(ctx, req.(*DeleteGameServerSetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_UpdateScaleStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameServerSetScaleStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).UpdateScaleStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_UpdateScaleStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).UpdateScaleStrategy(ctx, req.(*UpdateGameServerSetScaleStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_UpdateUpgradeStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameServerSetUpgradeStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).UpdateUpgradeStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_UpdateUpgradeStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).UpdateUpgradeStrategy(ctx, req.(*UpdateGameServerSetUpgradeStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerSet_ListGameServerSetControllerRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameServerSetReversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerSetServer).ListGameServerSetControllerRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerSet_ListGameServerSetControllerRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerSetServer).ListGameServerSetControllerRevision(ctx, req.(*ListGameServerSetReversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerSet_ServiceDesc is the grpc.ServiceDesc for GameServerSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameserverset.GameServerSet",
	HandlerType: (*GameServerSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGameServerSet",
			Handler:    _GameServerSet_ListGameServerSet_Handler,
		},
		{
			MethodName: "CreateOrUpdateGameServerSetByYaml",
			Handler:    _GameServerSet_CreateOrUpdateGameServerSetByYaml_Handler,
		},
		{
			MethodName: "DeleteGameServerSet",
			Handler:    _GameServerSet_DeleteGameServerSet_Handler,
		},
		{
			MethodName: "RestartGameServerSet",
			Handler:    _GameServerSet_RestartGameServerSet_Handler,
		},
		{
			MethodName: "ScaleGameServerSet",
			Handler:    _GameServerSet_ScaleGameServerSet_Handler,
		},
		{
			MethodName: "GetGameServerSetDetail",
			Handler:    _GameServerSet_GetGameServerSetDetail_Handler,
		},
		{
			MethodName: "RollbackGameServerSet",
			Handler:    _GameServerSet_RollbackGameServerSet_Handler,
		},
		{
			MethodName: "DeleteGameServerSetPods",
			Handler:    _GameServerSet_DeleteGameServerSetPods_Handler,
		},
		{
			MethodName: "UpdateScaleStrategy",
			Handler:    _GameServerSet_UpdateScaleStrategy_Handler,
		},
		{
			MethodName: "UpdateUpgradeStrategy",
			Handler:    _GameServerSet_UpdateUpgradeStrategy_Handler,
		},
		{
			MethodName: "ListGameServerSetControllerRevision",
			Handler:    _GameServerSet_ListGameServerSetControllerRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/gameserverset.v1.proto",
}
