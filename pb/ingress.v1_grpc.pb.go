// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/ingress.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ingress_ListIngress_FullMethodName      = "/ingress.v1.Ingress/ListIngress"
	Ingress_ListIngressHost_FullMethodName  = "/ingress.v1.Ingress/ListIngressHost"
	Ingress_CreateIngress_FullMethodName    = "/ingress.v1.Ingress/CreateIngress"
	Ingress_UpdateIngress_FullMethodName    = "/ingress.v1.Ingress/UpdateIngress"
	Ingress_DeleteIngress_FullMethodName    = "/ingress.v1.Ingress/DeleteIngress"
	Ingress_GetIngressDetail_FullMethodName = "/ingress.v1.Ingress/GetIngressDetail"
)

// IngressClient is the client API for Ingress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngressClient interface {
	// 查看-云原生管理-Ingress-列表
	ListIngress(ctx context.Context, in *ListIngressRequest, opts ...grpc.CallOption) (*ListIngressResponse, error)
	// 查看-云原生管理-Ingress域名-列表
	ListIngressHost(ctx context.Context, in *ListHostRequest, opts ...grpc.CallOption) (*ListHostResponse, error)
	// 管理-云原生管理-Ingress-创建
	CreateIngress(ctx context.Context, in *CreateIngressRequest, opts ...grpc.CallOption) (*CreateIngressResponse, error)
	// 管理-云原生管理-Ingress-编辑
	UpdateIngress(ctx context.Context, in *CreateIngressRequest, opts ...grpc.CallOption) (*CreateIngressResponse, error)
	// 管理-云原生管理-Ingress-删除
	DeleteIngress(ctx context.Context, in *DeleteIngressRequest, opts ...grpc.CallOption) (*DeleteIngressResponse, error)
	// 查看-云原生管理-Ingress-详情
	GetIngressDetail(ctx context.Context, in *IngressDetailRequest, opts ...grpc.CallOption) (*IngressDetailResponse, error)
}

type ingressClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressClient(cc grpc.ClientConnInterface) IngressClient {
	return &ingressClient{cc}
}

func (c *ingressClient) ListIngress(ctx context.Context, in *ListIngressRequest, opts ...grpc.CallOption) (*ListIngressResponse, error) {
	out := new(ListIngressResponse)
	err := c.cc.Invoke(ctx, Ingress_ListIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressClient) ListIngressHost(ctx context.Context, in *ListHostRequest, opts ...grpc.CallOption) (*ListHostResponse, error) {
	out := new(ListHostResponse)
	err := c.cc.Invoke(ctx, Ingress_ListIngressHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressClient) CreateIngress(ctx context.Context, in *CreateIngressRequest, opts ...grpc.CallOption) (*CreateIngressResponse, error) {
	out := new(CreateIngressResponse)
	err := c.cc.Invoke(ctx, Ingress_CreateIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressClient) UpdateIngress(ctx context.Context, in *CreateIngressRequest, opts ...grpc.CallOption) (*CreateIngressResponse, error) {
	out := new(CreateIngressResponse)
	err := c.cc.Invoke(ctx, Ingress_UpdateIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressClient) DeleteIngress(ctx context.Context, in *DeleteIngressRequest, opts ...grpc.CallOption) (*DeleteIngressResponse, error) {
	out := new(DeleteIngressResponse)
	err := c.cc.Invoke(ctx, Ingress_DeleteIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressClient) GetIngressDetail(ctx context.Context, in *IngressDetailRequest, opts ...grpc.CallOption) (*IngressDetailResponse, error) {
	out := new(IngressDetailResponse)
	err := c.cc.Invoke(ctx, Ingress_GetIngressDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngressServer is the server API for Ingress service.
// All implementations must embed UnimplementedIngressServer
// for forward compatibility
type IngressServer interface {
	// 查看-云原生管理-Ingress-列表
	ListIngress(context.Context, *ListIngressRequest) (*ListIngressResponse, error)
	// 查看-云原生管理-Ingress域名-列表
	ListIngressHost(context.Context, *ListHostRequest) (*ListHostResponse, error)
	// 管理-云原生管理-Ingress-创建
	CreateIngress(context.Context, *CreateIngressRequest) (*CreateIngressResponse, error)
	// 管理-云原生管理-Ingress-编辑
	UpdateIngress(context.Context, *CreateIngressRequest) (*CreateIngressResponse, error)
	// 管理-云原生管理-Ingress-删除
	DeleteIngress(context.Context, *DeleteIngressRequest) (*DeleteIngressResponse, error)
	// 查看-云原生管理-Ingress-详情
	GetIngressDetail(context.Context, *IngressDetailRequest) (*IngressDetailResponse, error)
	mustEmbedUnimplementedIngressServer()
}

// UnimplementedIngressServer must be embedded to have forward compatible implementations.
type UnimplementedIngressServer struct {
}

func (UnimplementedIngressServer) ListIngress(context.Context, *ListIngressRequest) (*ListIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIngress not implemented")
}
func (UnimplementedIngressServer) ListIngressHost(context.Context, *ListHostRequest) (*ListHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIngressHost not implemented")
}
func (UnimplementedIngressServer) CreateIngress(context.Context, *CreateIngressRequest) (*CreateIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngress not implemented")
}
func (UnimplementedIngressServer) UpdateIngress(context.Context, *CreateIngressRequest) (*CreateIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngress not implemented")
}
func (UnimplementedIngressServer) DeleteIngress(context.Context, *DeleteIngressRequest) (*DeleteIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngress not implemented")
}
func (UnimplementedIngressServer) GetIngressDetail(context.Context, *IngressDetailRequest) (*IngressDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngressDetail not implemented")
}
func (UnimplementedIngressServer) mustEmbedUnimplementedIngressServer() {}

// UnsafeIngressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngressServer will
// result in compilation errors.
type UnsafeIngressServer interface {
	mustEmbedUnimplementedIngressServer()
}

func RegisterIngressServer(s grpc.ServiceRegistrar, srv IngressServer) {
	s.RegisterService(&Ingress_ServiceDesc, srv)
}

func _Ingress_ListIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServer).ListIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingress_ListIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServer).ListIngress(ctx, req.(*ListIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingress_ListIngressHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServer).ListIngressHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingress_ListIngressHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServer).ListIngressHost(ctx, req.(*ListHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingress_CreateIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServer).CreateIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingress_CreateIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServer).CreateIngress(ctx, req.(*CreateIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingress_UpdateIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServer).UpdateIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingress_UpdateIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServer).UpdateIngress(ctx, req.(*CreateIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingress_DeleteIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServer).DeleteIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingress_DeleteIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServer).DeleteIngress(ctx, req.(*DeleteIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ingress_GetIngressDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngressDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServer).GetIngressDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ingress_GetIngressDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServer).GetIngressDetail(ctx, req.(*IngressDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ingress_ServiceDesc is the grpc.ServiceDesc for Ingress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ingress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingress.v1.Ingress",
	HandlerType: (*IngressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIngress",
			Handler:    _Ingress_ListIngress_Handler,
		},
		{
			MethodName: "ListIngressHost",
			Handler:    _Ingress_ListIngressHost_Handler,
		},
		{
			MethodName: "CreateIngress",
			Handler:    _Ingress_CreateIngress_Handler,
		},
		{
			MethodName: "UpdateIngress",
			Handler:    _Ingress_UpdateIngress_Handler,
		},
		{
			MethodName: "DeleteIngress",
			Handler:    _Ingress_DeleteIngress_Handler,
		},
		{
			MethodName: "GetIngressDetail",
			Handler:    _Ingress_GetIngressDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/ingress.v1.proto",
}
