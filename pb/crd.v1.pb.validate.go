// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/crd.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListCRDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCRDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCRDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListCRDRequestMultiError,
// or nil if none found.
func (m *ListCRDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCRDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListCRDRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	// no validation rules for ApiGroup

	if len(errors) > 0 {
		return ListCRDRequestMultiError(errors)
	}

	return nil
}

// ListCRDRequestMultiError is an error wrapping multiple validation errors
// returned by ListCRDRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCRDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCRDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCRDRequestMultiError) AllErrors() []error { return m }

// ListCRDRequestValidationError is the validation error returned by
// ListCRDRequest.Validate if the designated constraints aren't met.
type ListCRDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCRDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCRDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCRDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCRDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCRDRequestValidationError) ErrorName() string { return "ListCRDRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListCRDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCRDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCRDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCRDRequestValidationError{}

// Validate checks the field values on CRDItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CRDItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CRDItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CRDItemMultiError, or nil if none found.
func (m *CRDItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CRDItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CRDItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiGroup()) < 1 {
		err := CRDItemValidationError{
			field:  "ApiGroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiVersion()) < 1 {
		err := CRDItemValidationError{
			field:  "ApiVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetScope()) < 1 {
		err := CRDItemValidationError{
			field:  "Scope",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for Yaml

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := CRDItemValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CRDItemMultiError(errors)
	}

	return nil
}

// CRDItemMultiError is an error wrapping multiple validation errors returned
// by CRDItem.ValidateAll() if the designated constraints aren't met.
type CRDItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CRDItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CRDItemMultiError) AllErrors() []error { return m }

// CRDItemValidationError is the validation error returned by CRDItem.Validate
// if the designated constraints aren't met.
type CRDItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CRDItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CRDItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CRDItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CRDItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CRDItemValidationError) ErrorName() string { return "CRDItemValidationError" }

// Error satisfies the builtin error interface
func (e CRDItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCRDItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CRDItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CRDItemValidationError{}

// Validate checks the field values on ListCRDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCRDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCRDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCRDResponseMultiError, or nil if none found.
func (m *ListCRDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCRDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCRDResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCRDResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCRDResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCRDResponseMultiError(errors)
	}

	return nil
}

// ListCRDResponseMultiError is an error wrapping multiple validation errors
// returned by ListCRDResponse.ValidateAll() if the designated constraints
// aren't met.
type ListCRDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCRDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCRDResponseMultiError) AllErrors() []error { return m }

// ListCRDResponseValidationError is the validation error returned by
// ListCRDResponse.Validate if the designated constraints aren't met.
type ListCRDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCRDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCRDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCRDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCRDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCRDResponseValidationError) ErrorName() string { return "ListCRDResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListCRDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCRDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCRDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCRDResponseValidationError{}

// Validate checks the field values on CRDInstanceItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CRDInstanceItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CRDInstanceItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CRDInstanceItemMultiError, or nil if none found.
func (m *CRDInstanceItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CRDInstanceItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for Yaml

	// no validation rules for CreateTime

	// no validation rules for ApiVersion

	if len(errors) > 0 {
		return CRDInstanceItemMultiError(errors)
	}

	return nil
}

// CRDInstanceItemMultiError is an error wrapping multiple validation errors
// returned by CRDInstanceItem.ValidateAll() if the designated constraints
// aren't met.
type CRDInstanceItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CRDInstanceItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CRDInstanceItemMultiError) AllErrors() []error { return m }

// CRDInstanceItemValidationError is the validation error returned by
// CRDInstanceItem.Validate if the designated constraints aren't met.
type CRDInstanceItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CRDInstanceItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CRDInstanceItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CRDInstanceItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CRDInstanceItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CRDInstanceItemValidationError) ErrorName() string { return "CRDInstanceItemValidationError" }

// Error satisfies the builtin error interface
func (e CRDInstanceItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCRDInstanceItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CRDInstanceItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CRDInstanceItemValidationError{}

// Validate checks the field values on ListCRDInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCRDInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCRDInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCRDInstanceRequestMultiError, or nil if none found.
func (m *ListCRDInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCRDInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListCRDInstanceRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ListCRDInstanceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	// no validation rules for Keyword

	if utf8.RuneCountInString(m.GetApiVersion()) < 1 {
		err := ListCRDInstanceRequestValidationError{
			field:  "ApiVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiGroup()) < 1 {
		err := ListCRDInstanceRequestValidationError{
			field:  "ApiGroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCRDInstanceRequestMultiError(errors)
	}

	return nil
}

// ListCRDInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by ListCRDInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCRDInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCRDInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCRDInstanceRequestMultiError) AllErrors() []error { return m }

// ListCRDInstanceRequestValidationError is the validation error returned by
// ListCRDInstanceRequest.Validate if the designated constraints aren't met.
type ListCRDInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCRDInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCRDInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCRDInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCRDInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCRDInstanceRequestValidationError) ErrorName() string {
	return "ListCRDInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCRDInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCRDInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCRDInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCRDInstanceRequestValidationError{}

// Validate checks the field values on ListCRDInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCRDInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCRDInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCRDInstanceResponseMultiError, or nil if none found.
func (m *ListCRDInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCRDInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCRDInstanceResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCRDInstanceResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCRDInstanceResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCRDInstanceResponseMultiError(errors)
	}

	return nil
}

// ListCRDInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by ListCRDInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCRDInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCRDInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCRDInstanceResponseMultiError) AllErrors() []error { return m }

// ListCRDInstanceResponseValidationError is the validation error returned by
// ListCRDInstanceResponse.Validate if the designated constraints aren't met.
type ListCRDInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCRDInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCRDInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCRDInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCRDInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCRDInstanceResponseValidationError) ErrorName() string {
	return "ListCRDInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCRDInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCRDInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCRDInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCRDInstanceResponseValidationError{}

// Validate checks the field values on DeleteCRDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCRDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCRDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCRDRequestMultiError, or nil if none found.
func (m *DeleteCRDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCRDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteCRDRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteCRDRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCRDRequestMultiError(errors)
	}

	return nil
}

// DeleteCRDRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteCRDRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteCRDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCRDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCRDRequestMultiError) AllErrors() []error { return m }

// DeleteCRDRequestValidationError is the validation error returned by
// DeleteCRDRequest.Validate if the designated constraints aren't met.
type DeleteCRDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCRDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCRDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCRDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCRDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCRDRequestValidationError) ErrorName() string { return "DeleteCRDRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteCRDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCRDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCRDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCRDRequestValidationError{}

// Validate checks the field values on DeleteCRDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCRDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCRDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCRDResponseMultiError, or nil if none found.
func (m *DeleteCRDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCRDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCRDResponseMultiError(errors)
	}

	return nil
}

// DeleteCRDResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteCRDResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteCRDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCRDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCRDResponseMultiError) AllErrors() []error { return m }

// DeleteCRDResponseValidationError is the validation error returned by
// DeleteCRDResponse.Validate if the designated constraints aren't met.
type DeleteCRDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCRDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCRDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCRDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCRDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCRDResponseValidationError) ErrorName() string {
	return "DeleteCRDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCRDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCRDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCRDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCRDResponseValidationError{}
