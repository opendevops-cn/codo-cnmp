// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/limitrange.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LimitRange列表请求
type ListLimitRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,7,opt,name=list_all,proto3" json:"list_all,optional"`
}

func (x *ListLimitRangeRequest) Reset() {
	*x = ListLimitRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLimitRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLimitRangeRequest) ProtoMessage() {}

func (x *ListLimitRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLimitRangeRequest.ProtoReflect.Descriptor instead.
func (*ListLimitRangeRequest) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListLimitRangeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListLimitRangeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListLimitRangeRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListLimitRangeRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListLimitRangeRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLimitRangeRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

// 容器资源限制
type ContainerLimitRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 默认CPU上限
	DefaultCpu string `protobuf:"bytes,1,opt,name=default_cpu,proto3" json:"default_cpu,optional"`
	// 默认内存上限
	DefaultMem string `protobuf:"bytes,2,opt,name=default_mem,proto3" json:"default_mem,optional"`
	// 默认CPU请求
	DefaultCpuRequest string `protobuf:"bytes,3,opt,name=default_cpu_request,proto3" json:"default_cpu_request,optional"`
	// 默认内存请求
	DefaultMemRequest string `protobuf:"bytes,4,opt,name=default_mem_request,proto3" json:"default_mem_request,optional"`
	// 最小CPU
	MinCpu string `protobuf:"bytes,5,opt,name=min_cpu,proto3" json:"min_cpu,optional"`
	// 最小内存
	MinMem string `protobuf:"bytes,6,opt,name=min_mem,proto3" json:"min_mem,optional"`
	// 最大CPU
	MaxCpu string `protobuf:"bytes,7,opt,name=max_cpu,proto3" json:"max_cpu,optional"`
	// 最小内存请求
	MaxMem string `protobuf:"bytes,8,opt,name=max_mem,proto3" json:"max_mem,optional"`
}

func (x *ContainerLimitRange) Reset() {
	*x = ContainerLimitRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerLimitRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerLimitRange) ProtoMessage() {}

func (x *ContainerLimitRange) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerLimitRange.ProtoReflect.Descriptor instead.
func (*ContainerLimitRange) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerLimitRange) GetDefaultCpu() string {
	if x != nil {
		return x.DefaultCpu
	}
	return ""
}

func (x *ContainerLimitRange) GetDefaultMem() string {
	if x != nil {
		return x.DefaultMem
	}
	return ""
}

func (x *ContainerLimitRange) GetDefaultCpuRequest() string {
	if x != nil {
		return x.DefaultCpuRequest
	}
	return ""
}

func (x *ContainerLimitRange) GetDefaultMemRequest() string {
	if x != nil {
		return x.DefaultMemRequest
	}
	return ""
}

func (x *ContainerLimitRange) GetMinCpu() string {
	if x != nil {
		return x.MinCpu
	}
	return ""
}

func (x *ContainerLimitRange) GetMinMem() string {
	if x != nil {
		return x.MinMem
	}
	return ""
}

func (x *ContainerLimitRange) GetMaxCpu() string {
	if x != nil {
		return x.MaxCpu
	}
	return ""
}

func (x *ContainerLimitRange) GetMaxMem() string {
	if x != nil {
		return x.MaxMem
	}
	return ""
}

// pod资源限制
type PodLimitRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCpu string `protobuf:"bytes,1,opt,name=max_cpu,proto3" json:"max_cpu,optional"`
	MaxMem string `protobuf:"bytes,2,opt,name=max_mem,proto3" json:"max_mem,optional"`
}

func (x *PodLimitRange) Reset() {
	*x = PodLimitRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodLimitRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodLimitRange) ProtoMessage() {}

func (x *PodLimitRange) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodLimitRange.ProtoReflect.Descriptor instead.
func (*PodLimitRange) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{2}
}

func (x *PodLimitRange) GetMaxCpu() string {
	if x != nil {
		return x.MaxCpu
	}
	return ""
}

func (x *PodLimitRange) GetMaxMem() string {
	if x != nil {
		return x.MaxMem
	}
	return ""
}

// 存储资源限制
type PersistentVolumeClaimLimitRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 最小存储请求
	MinResourceStorageRequest string `protobuf:"bytes,1,opt,name=min_resource_storage_request,json=min_resource_storage,proto3" json:"min_resource_storage_request,optional"`
	// 最大存储请求
	MaxResourceStorageRequest string `protobuf:"bytes,2,opt,name=max_resource_storage_request,json=max_resource_storage,proto3" json:"max_resource_storage_request,optional"`
}

func (x *PersistentVolumeClaimLimitRange) Reset() {
	*x = PersistentVolumeClaimLimitRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentVolumeClaimLimitRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentVolumeClaimLimitRange) ProtoMessage() {}

func (x *PersistentVolumeClaimLimitRange) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentVolumeClaimLimitRange.ProtoReflect.Descriptor instead.
func (*PersistentVolumeClaimLimitRange) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{3}
}

func (x *PersistentVolumeClaimLimitRange) GetMinResourceStorageRequest() string {
	if x != nil {
		return x.MinResourceStorageRequest
	}
	return ""
}

func (x *PersistentVolumeClaimLimitRange) GetMaxResourceStorageRequest() string {
	if x != nil {
		return x.MaxResourceStorageRequest
	}
	return ""
}

// CreateLimitRange请求
type CreateLimitRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 名称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,optional"`
	// 容器资源限制
	ContainerLimitRange *ContainerLimitRange `protobuf:"bytes,4,opt,name=container_limit_range,json=containerLimitRange,proto3" json:"container_limit_range,optional"`
	// pod资源限制
	PodLimitRange *PodLimitRange `protobuf:"bytes,5,opt,name=pod_limit_range,json=podLimitRange,proto3" json:"pod_limit_range,optional"`
	// 存储资源限制
	PersistentVolumeClaimLimitRange *PersistentVolumeClaimLimitRange `protobuf:"bytes,6,opt,name=persistent_volume_claim_limit_range,json=persistentVolumeClaimLimitRange,proto3" json:"persistent_volume_claim_limit_range,optional"`
}

func (x *CreateLimitRangeRequest) Reset() {
	*x = CreateLimitRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLimitRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLimitRangeRequest) ProtoMessage() {}

func (x *CreateLimitRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLimitRangeRequest.ProtoReflect.Descriptor instead.
func (*CreateLimitRangeRequest) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{4}
}

func (x *CreateLimitRangeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateLimitRangeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateLimitRangeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateLimitRangeRequest) GetContainerLimitRange() *ContainerLimitRange {
	if x != nil {
		return x.ContainerLimitRange
	}
	return nil
}

func (x *CreateLimitRangeRequest) GetPodLimitRange() *PodLimitRange {
	if x != nil {
		return x.PodLimitRange
	}
	return nil
}

func (x *CreateLimitRangeRequest) GetPersistentVolumeClaimLimitRange() *PersistentVolumeClaimLimitRange {
	if x != nil {
		return x.PersistentVolumeClaimLimitRange
	}
	return nil
}

// LimitRange Item
type LimitRangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 容器资源限制
	ContainerLimitRange *ContainerLimitRange `protobuf:"bytes,3,opt,name=container_limit_range,json=containerLimitRange,proto3" json:"container_limit_range,optional"`
	// pod资源限制
	PodLimitRange *PodLimitRange `protobuf:"bytes,4,opt,name=pod_limit_range,json=podLimitRange,proto3" json:"pod_limit_range,optional"`
	// 存储资源限制
	PersistentVolumeClaimLimitRange *PersistentVolumeClaimLimitRange `protobuf:"bytes,5,opt,name=persistent_volume_claim_limit_range,json=persistentVolumeClaimLimitRange,proto3" json:"persistent_volume_claim_limit_range,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,optional"`
	// yaml
	Yaml string `protobuf:"bytes,7,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *LimitRangeItem) Reset() {
	*x = LimitRangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitRangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRangeItem) ProtoMessage() {}

func (x *LimitRangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRangeItem.ProtoReflect.Descriptor instead.
func (*LimitRangeItem) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{5}
}

func (x *LimitRangeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LimitRangeItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *LimitRangeItem) GetContainerLimitRange() *ContainerLimitRange {
	if x != nil {
		return x.ContainerLimitRange
	}
	return nil
}

func (x *LimitRangeItem) GetPodLimitRange() *PodLimitRange {
	if x != nil {
		return x.PodLimitRange
	}
	return nil
}

func (x *LimitRangeItem) GetPersistentVolumeClaimLimitRange() *PersistentVolumeClaimLimitRange {
	if x != nil {
		return x.PersistentVolumeClaimLimitRange
	}
	return nil
}

func (x *LimitRangeItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *LimitRangeItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

// CreateLimitRange响应
type CreateLimitRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateLimitRangeResponse) Reset() {
	*x = CreateLimitRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLimitRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLimitRangeResponse) ProtoMessage() {}

func (x *CreateLimitRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLimitRangeResponse.ProtoReflect.Descriptor instead.
func (*CreateLimitRangeResponse) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{6}
}

// LimitRange列表响应
type ListLimitRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 列表
	List []*LimitRangeItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListLimitRangeResponse) Reset() {
	*x = ListLimitRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLimitRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLimitRangeResponse) ProtoMessage() {}

func (x *ListLimitRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLimitRangeResponse.ProtoReflect.Descriptor instead.
func (*ListLimitRangeResponse) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{7}
}

func (x *ListLimitRangeResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListLimitRangeResponse) GetList() []*LimitRangeItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 查看LimitRange详情请求
type LimitRangeDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *LimitRangeDetailRequest) Reset() {
	*x = LimitRangeDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitRangeDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRangeDetailRequest) ProtoMessage() {}

func (x *LimitRangeDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRangeDetailRequest.ProtoReflect.Descriptor instead.
func (*LimitRangeDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{8}
}

func (x *LimitRangeDetailRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *LimitRangeDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LimitRangeDetailRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 查看LimitRange详情响应
type LimitRangeDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础信息
	Detail *LimitRangeItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *LimitRangeDetailResponse) Reset() {
	*x = LimitRangeDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitRangeDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRangeDetailResponse) ProtoMessage() {}

func (x *LimitRangeDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRangeDetailResponse.ProtoReflect.Descriptor instead.
func (*LimitRangeDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{9}
}

func (x *LimitRangeDetailResponse) GetDetail() *LimitRangeItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 删除LimitRange请求
type DeleteLimitRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *DeleteLimitRangeRequest) Reset() {
	*x = DeleteLimitRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLimitRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLimitRangeRequest) ProtoMessage() {}

func (x *DeleteLimitRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLimitRangeRequest.ProtoReflect.Descriptor instead.
func (*DeleteLimitRangeRequest) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteLimitRangeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteLimitRangeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteLimitRangeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 删除LimitRange响应
type DeleteLimitRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLimitRangeResponse) Reset() {
	*x = DeleteLimitRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_limitrange_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLimitRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLimitRangeResponse) ProtoMessage() {}

func (x *DeleteLimitRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_limitrange_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLimitRangeResponse.ProtoReflect.Descriptor instead.
func (*DeleteLimitRangeResponse) Descriptor() ([]byte, []int) {
	return file_pb_limitrange_v1_proto_rawDescGZIP(), []int{11}
}

var File_pb_limitrange_v1_proto protoreflect.FileDescriptor

var file_pb_limitrange_v1_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b,
	0x68, 0x74, 0x74, 0x70, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0xa5, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x70, 0x75, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x6d, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x6d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x63,
	0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d,
	0x22, 0x43, 0x0a, 0x0d, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x1f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x1c, 0x6d, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x22, 0xae, 0x03, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x70, 0x6f, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x7c, 0x0a, 0x23, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x1f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0xb5, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x56, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x6f, 0x64, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d,
	0x70, 0x6f, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x7c, 0x0a,
	0x23, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1f, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x56,
	0x0a, 0x18, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb6, 0x0a, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xfb, 0x01, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x95, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x67, 0x0a,
	0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x06, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x1a, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x0a, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22,
	0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xfb, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x26, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x95, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x67, 0x0a, 0x0a, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x06, 0xe7, 0xbc, 0x96, 0xe8, 0xbe,
	0x91, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x1a, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x0a, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x96, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb,
	0xaa, 0x03, 0x70, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x0f, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x88, 0x96, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91,
	0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x1a, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xc2, 0xdb, 0xaa, 0x03,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0xfb, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0xca, 0xdb, 0xaa, 0x03, 0x67, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x06, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x1a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x0c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f, 0x70, 0x62,
	0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_limitrange_v1_proto_rawDescOnce sync.Once
	file_pb_limitrange_v1_proto_rawDescData = file_pb_limitrange_v1_proto_rawDesc
)

func file_pb_limitrange_v1_proto_rawDescGZIP() []byte {
	file_pb_limitrange_v1_proto_rawDescOnce.Do(func() {
		file_pb_limitrange_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_limitrange_v1_proto_rawDescData)
	})
	return file_pb_limitrange_v1_proto_rawDescData
}

var file_pb_limitrange_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pb_limitrange_v1_proto_goTypes = []interface{}{
	(*ListLimitRangeRequest)(nil),           // 0: limitrange.v1.ListLimitRangeRequest
	(*ContainerLimitRange)(nil),             // 1: limitrange.v1.ContainerLimitRange
	(*PodLimitRange)(nil),                   // 2: limitrange.v1.PodLimitRange
	(*PersistentVolumeClaimLimitRange)(nil), // 3: limitrange.v1.PersistentVolumeClaimLimitRange
	(*CreateLimitRangeRequest)(nil),         // 4: limitrange.v1.CreateLimitRangeRequest
	(*LimitRangeItem)(nil),                  // 5: limitrange.v1.LimitRangeItem
	(*CreateLimitRangeResponse)(nil),        // 6: limitrange.v1.CreateLimitRangeResponse
	(*ListLimitRangeResponse)(nil),          // 7: limitrange.v1.ListLimitRangeResponse
	(*LimitRangeDetailRequest)(nil),         // 8: limitrange.v1.LimitRangeDetailRequest
	(*LimitRangeDetailResponse)(nil),        // 9: limitrange.v1.LimitRangeDetailResponse
	(*DeleteLimitRangeRequest)(nil),         // 10: limitrange.v1.DeleteLimitRangeRequest
	(*DeleteLimitRangeResponse)(nil),        // 11: limitrange.v1.DeleteLimitRangeResponse
}
var file_pb_limitrange_v1_proto_depIdxs = []int32{
	1,  // 0: limitrange.v1.CreateLimitRangeRequest.container_limit_range:type_name -> limitrange.v1.ContainerLimitRange
	2,  // 1: limitrange.v1.CreateLimitRangeRequest.pod_limit_range:type_name -> limitrange.v1.PodLimitRange
	3,  // 2: limitrange.v1.CreateLimitRangeRequest.persistent_volume_claim_limit_range:type_name -> limitrange.v1.PersistentVolumeClaimLimitRange
	1,  // 3: limitrange.v1.LimitRangeItem.container_limit_range:type_name -> limitrange.v1.ContainerLimitRange
	2,  // 4: limitrange.v1.LimitRangeItem.pod_limit_range:type_name -> limitrange.v1.PodLimitRange
	3,  // 5: limitrange.v1.LimitRangeItem.persistent_volume_claim_limit_range:type_name -> limitrange.v1.PersistentVolumeClaimLimitRange
	5,  // 6: limitrange.v1.ListLimitRangeResponse.list:type_name -> limitrange.v1.LimitRangeItem
	5,  // 7: limitrange.v1.LimitRangeDetailResponse.detail:type_name -> limitrange.v1.LimitRangeItem
	0,  // 8: limitrange.v1.LimitRange.ListLimitRange:input_type -> limitrange.v1.ListLimitRangeRequest
	4,  // 9: limitrange.v1.LimitRange.CreateLimitRange:input_type -> limitrange.v1.CreateLimitRangeRequest
	4,  // 10: limitrange.v1.LimitRange.UpdateLimitRange:input_type -> limitrange.v1.CreateLimitRangeRequest
	4,  // 11: limitrange.v1.LimitRange.CreateOrUpdateLimitRange:input_type -> limitrange.v1.CreateLimitRangeRequest
	8,  // 12: limitrange.v1.LimitRange.GetLimitRangeDetail:input_type -> limitrange.v1.LimitRangeDetailRequest
	10, // 13: limitrange.v1.LimitRange.DeleteLimitRange:input_type -> limitrange.v1.DeleteLimitRangeRequest
	7,  // 14: limitrange.v1.LimitRange.ListLimitRange:output_type -> limitrange.v1.ListLimitRangeResponse
	6,  // 15: limitrange.v1.LimitRange.CreateLimitRange:output_type -> limitrange.v1.CreateLimitRangeResponse
	6,  // 16: limitrange.v1.LimitRange.UpdateLimitRange:output_type -> limitrange.v1.CreateLimitRangeResponse
	6,  // 17: limitrange.v1.LimitRange.CreateOrUpdateLimitRange:output_type -> limitrange.v1.CreateLimitRangeResponse
	9,  // 18: limitrange.v1.LimitRange.GetLimitRangeDetail:output_type -> limitrange.v1.LimitRangeDetailResponse
	11, // 19: limitrange.v1.LimitRange.DeleteLimitRange:output_type -> limitrange.v1.DeleteLimitRangeResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_pb_limitrange_v1_proto_init() }
func file_pb_limitrange_v1_proto_init() {
	if File_pb_limitrange_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_limitrange_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLimitRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerLimitRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodLimitRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentVolumeClaimLimitRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLimitRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitRangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLimitRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLimitRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitRangeDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitRangeDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLimitRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_limitrange_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLimitRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_limitrange_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_limitrange_v1_proto_goTypes,
		DependencyIndexes: file_pb_limitrange_v1_proto_depIdxs,
		MessageInfos:      file_pb_limitrange_v1_proto_msgTypes,
	}.Build()
	File_pb_limitrange_v1_proto = out.File
	file_pb_limitrange_v1_proto_rawDesc = nil
	file_pb_limitrange_v1_proto_goTypes = nil
	file_pb_limitrange_v1_proto_depIdxs = nil
}
