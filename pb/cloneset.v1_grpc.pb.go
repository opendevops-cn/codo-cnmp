// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/cloneset.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloneSet_ListCloneSet_FullMethodName                   = "/cloneset.CloneSet/ListCloneSet"
	CloneSet_CreateOrUpdateCloneSetByYaml_FullMethodName   = "/cloneset.CloneSet/CreateOrUpdateCloneSetByYaml"
	CloneSet_DeleteCloneSet_FullMethodName                 = "/cloneset.CloneSet/DeleteCloneSet"
	CloneSet_RestartCloneSet_FullMethodName                = "/cloneset.CloneSet/RestartCloneSet"
	CloneSet_ScaleCloneSet_FullMethodName                  = "/cloneset.CloneSet/ScaleCloneSet"
	CloneSet_GetCloneSetDetail_FullMethodName              = "/cloneset.CloneSet/GetCloneSetDetail"
	CloneSet_RollbackCloneSet_FullMethodName               = "/cloneset.CloneSet/RollbackCloneSet"
	CloneSet_DeleteCloneSetPods_FullMethodName             = "/cloneset.CloneSet/DeleteCloneSetPods"
	CloneSet_UpdateScaleStrategy_FullMethodName            = "/cloneset.CloneSet/UpdateScaleStrategy"
	CloneSet_UpdateUpgradeStrategy_FullMethodName          = "/cloneset.CloneSet/UpdateUpgradeStrategy"
	CloneSet_ListCloneSetControllerRevision_FullMethodName = "/cloneset.CloneSet/ListCloneSetControllerRevision"
)

// CloneSetClient is the client API for CloneSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloneSetClient interface {
	// 查看-云原生管理-CloneSet-列表
	ListCloneSet(ctx context.Context, in *ListCloneSetRequest, opts ...grpc.CallOption) (*ListCloneSetResponse, error)
	// 管理-云原生管理-CloneSet-yaml创建更新
	CreateOrUpdateCloneSetByYaml(ctx context.Context, in *CreateOrUpdateCloneSetByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateCloneSetByYamlResponse, error)
	// 管理-云原生管理-CloneSet-删除
	DeleteCloneSet(ctx context.Context, in *DeleteCloneSetRequest, opts ...grpc.CallOption) (*DeleteCloneSetResponse, error)
	// 管理-云原生管理-CloneSet-重启
	RestartCloneSet(ctx context.Context, in *RestartCloneSetRequest, opts ...grpc.CallOption) (*RestartCloneSetResponse, error)
	// 管理-云原生管理-CloneSet-伸缩
	ScaleCloneSet(ctx context.Context, in *ScaleCloneSetRequest, opts ...grpc.CallOption) (*ScaleCloneSetResponse, error)
	// 查看-云原生管理-CloneSet-详情
	GetCloneSetDetail(ctx context.Context, in *CloneSetDetailRequest, opts ...grpc.CallOption) (*CloneSetDetailResponse, error)
	// 管理-云原生管理-CloneSet-回滚
	RollbackCloneSet(ctx context.Context, in *RollbackCloneSetRequest, opts ...grpc.CallOption) (*RollbackCloneSetResponse, error)
	// 管理-云原生管理-CloneSet-删除pod
	DeleteCloneSetPods(ctx context.Context, in *DeleteCloneSetPodRequest, opts ...grpc.CallOption) (*DeleteCloneSetPodResponse, error)
	// 管理-云原生管理-CloneSet-流式扩容
	UpdateScaleStrategy(ctx context.Context, in *UpdateScaleStrategyRequest, opts ...grpc.CallOption) (*UpdateScaleStrategyResponse, error)
	// 管理-云原生管理-CloneSet-升级策略
	UpdateUpgradeStrategy(ctx context.Context, in *UpdateUpgradeStrategyRequest, opts ...grpc.CallOption) (*UpdateUpgradeStrategyResponse, error)
	// 查看-云原生管理-CloneSet-历史版本
	ListCloneSetControllerRevision(ctx context.Context, in *ListCloneSetReversionRequest, opts ...grpc.CallOption) (*ListCloneSetReversionResponse, error)
}

type cloneSetClient struct {
	cc grpc.ClientConnInterface
}

func NewCloneSetClient(cc grpc.ClientConnInterface) CloneSetClient {
	return &cloneSetClient{cc}
}

func (c *cloneSetClient) ListCloneSet(ctx context.Context, in *ListCloneSetRequest, opts ...grpc.CallOption) (*ListCloneSetResponse, error) {
	out := new(ListCloneSetResponse)
	err := c.cc.Invoke(ctx, CloneSet_ListCloneSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) CreateOrUpdateCloneSetByYaml(ctx context.Context, in *CreateOrUpdateCloneSetByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateCloneSetByYamlResponse, error) {
	out := new(CreateOrUpdateCloneSetByYamlResponse)
	err := c.cc.Invoke(ctx, CloneSet_CreateOrUpdateCloneSetByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) DeleteCloneSet(ctx context.Context, in *DeleteCloneSetRequest, opts ...grpc.CallOption) (*DeleteCloneSetResponse, error) {
	out := new(DeleteCloneSetResponse)
	err := c.cc.Invoke(ctx, CloneSet_DeleteCloneSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) RestartCloneSet(ctx context.Context, in *RestartCloneSetRequest, opts ...grpc.CallOption) (*RestartCloneSetResponse, error) {
	out := new(RestartCloneSetResponse)
	err := c.cc.Invoke(ctx, CloneSet_RestartCloneSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) ScaleCloneSet(ctx context.Context, in *ScaleCloneSetRequest, opts ...grpc.CallOption) (*ScaleCloneSetResponse, error) {
	out := new(ScaleCloneSetResponse)
	err := c.cc.Invoke(ctx, CloneSet_ScaleCloneSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) GetCloneSetDetail(ctx context.Context, in *CloneSetDetailRequest, opts ...grpc.CallOption) (*CloneSetDetailResponse, error) {
	out := new(CloneSetDetailResponse)
	err := c.cc.Invoke(ctx, CloneSet_GetCloneSetDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) RollbackCloneSet(ctx context.Context, in *RollbackCloneSetRequest, opts ...grpc.CallOption) (*RollbackCloneSetResponse, error) {
	out := new(RollbackCloneSetResponse)
	err := c.cc.Invoke(ctx, CloneSet_RollbackCloneSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) DeleteCloneSetPods(ctx context.Context, in *DeleteCloneSetPodRequest, opts ...grpc.CallOption) (*DeleteCloneSetPodResponse, error) {
	out := new(DeleteCloneSetPodResponse)
	err := c.cc.Invoke(ctx, CloneSet_DeleteCloneSetPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) UpdateScaleStrategy(ctx context.Context, in *UpdateScaleStrategyRequest, opts ...grpc.CallOption) (*UpdateScaleStrategyResponse, error) {
	out := new(UpdateScaleStrategyResponse)
	err := c.cc.Invoke(ctx, CloneSet_UpdateScaleStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) UpdateUpgradeStrategy(ctx context.Context, in *UpdateUpgradeStrategyRequest, opts ...grpc.CallOption) (*UpdateUpgradeStrategyResponse, error) {
	out := new(UpdateUpgradeStrategyResponse)
	err := c.cc.Invoke(ctx, CloneSet_UpdateUpgradeStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSetClient) ListCloneSetControllerRevision(ctx context.Context, in *ListCloneSetReversionRequest, opts ...grpc.CallOption) (*ListCloneSetReversionResponse, error) {
	out := new(ListCloneSetReversionResponse)
	err := c.cc.Invoke(ctx, CloneSet_ListCloneSetControllerRevision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloneSetServer is the server API for CloneSet service.
// All implementations must embed UnimplementedCloneSetServer
// for forward compatibility
type CloneSetServer interface {
	// 查看-云原生管理-CloneSet-列表
	ListCloneSet(context.Context, *ListCloneSetRequest) (*ListCloneSetResponse, error)
	// 管理-云原生管理-CloneSet-yaml创建更新
	CreateOrUpdateCloneSetByYaml(context.Context, *CreateOrUpdateCloneSetByYamlRequest) (*CreateOrUpdateCloneSetByYamlResponse, error)
	// 管理-云原生管理-CloneSet-删除
	DeleteCloneSet(context.Context, *DeleteCloneSetRequest) (*DeleteCloneSetResponse, error)
	// 管理-云原生管理-CloneSet-重启
	RestartCloneSet(context.Context, *RestartCloneSetRequest) (*RestartCloneSetResponse, error)
	// 管理-云原生管理-CloneSet-伸缩
	ScaleCloneSet(context.Context, *ScaleCloneSetRequest) (*ScaleCloneSetResponse, error)
	// 查看-云原生管理-CloneSet-详情
	GetCloneSetDetail(context.Context, *CloneSetDetailRequest) (*CloneSetDetailResponse, error)
	// 管理-云原生管理-CloneSet-回滚
	RollbackCloneSet(context.Context, *RollbackCloneSetRequest) (*RollbackCloneSetResponse, error)
	// 管理-云原生管理-CloneSet-删除pod
	DeleteCloneSetPods(context.Context, *DeleteCloneSetPodRequest) (*DeleteCloneSetPodResponse, error)
	// 管理-云原生管理-CloneSet-流式扩容
	UpdateScaleStrategy(context.Context, *UpdateScaleStrategyRequest) (*UpdateScaleStrategyResponse, error)
	// 管理-云原生管理-CloneSet-升级策略
	UpdateUpgradeStrategy(context.Context, *UpdateUpgradeStrategyRequest) (*UpdateUpgradeStrategyResponse, error)
	// 查看-云原生管理-CloneSet-历史版本
	ListCloneSetControllerRevision(context.Context, *ListCloneSetReversionRequest) (*ListCloneSetReversionResponse, error)
	mustEmbedUnimplementedCloneSetServer()
}

// UnimplementedCloneSetServer must be embedded to have forward compatible implementations.
type UnimplementedCloneSetServer struct {
}

func (UnimplementedCloneSetServer) ListCloneSet(context.Context, *ListCloneSetRequest) (*ListCloneSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloneSet not implemented")
}
func (UnimplementedCloneSetServer) CreateOrUpdateCloneSetByYaml(context.Context, *CreateOrUpdateCloneSetByYamlRequest) (*CreateOrUpdateCloneSetByYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateCloneSetByYaml not implemented")
}
func (UnimplementedCloneSetServer) DeleteCloneSet(context.Context, *DeleteCloneSetRequest) (*DeleteCloneSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloneSet not implemented")
}
func (UnimplementedCloneSetServer) RestartCloneSet(context.Context, *RestartCloneSetRequest) (*RestartCloneSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartCloneSet not implemented")
}
func (UnimplementedCloneSetServer) ScaleCloneSet(context.Context, *ScaleCloneSetRequest) (*ScaleCloneSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleCloneSet not implemented")
}
func (UnimplementedCloneSetServer) GetCloneSetDetail(context.Context, *CloneSetDetailRequest) (*CloneSetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloneSetDetail not implemented")
}
func (UnimplementedCloneSetServer) RollbackCloneSet(context.Context, *RollbackCloneSetRequest) (*RollbackCloneSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackCloneSet not implemented")
}
func (UnimplementedCloneSetServer) DeleteCloneSetPods(context.Context, *DeleteCloneSetPodRequest) (*DeleteCloneSetPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCloneSetPods not implemented")
}
func (UnimplementedCloneSetServer) UpdateScaleStrategy(context.Context, *UpdateScaleStrategyRequest) (*UpdateScaleStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScaleStrategy not implemented")
}
func (UnimplementedCloneSetServer) UpdateUpgradeStrategy(context.Context, *UpdateUpgradeStrategyRequest) (*UpdateUpgradeStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUpgradeStrategy not implemented")
}
func (UnimplementedCloneSetServer) ListCloneSetControllerRevision(context.Context, *ListCloneSetReversionRequest) (*ListCloneSetReversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloneSetControllerRevision not implemented")
}
func (UnimplementedCloneSetServer) mustEmbedUnimplementedCloneSetServer() {}

// UnsafeCloneSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloneSetServer will
// result in compilation errors.
type UnsafeCloneSetServer interface {
	mustEmbedUnimplementedCloneSetServer()
}

func RegisterCloneSetServer(s grpc.ServiceRegistrar, srv CloneSetServer) {
	s.RegisterService(&CloneSet_ServiceDesc, srv)
}

func _CloneSet_ListCloneSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloneSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).ListCloneSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_ListCloneSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).ListCloneSet(ctx, req.(*ListCloneSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_CreateOrUpdateCloneSetByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateCloneSetByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).CreateOrUpdateCloneSetByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_CreateOrUpdateCloneSetByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).CreateOrUpdateCloneSetByYaml(ctx, req.(*CreateOrUpdateCloneSetByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_DeleteCloneSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloneSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).DeleteCloneSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_DeleteCloneSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).DeleteCloneSet(ctx, req.(*DeleteCloneSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_RestartCloneSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartCloneSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).RestartCloneSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_RestartCloneSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).RestartCloneSet(ctx, req.(*RestartCloneSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_ScaleCloneSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleCloneSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).ScaleCloneSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_ScaleCloneSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).ScaleCloneSet(ctx, req.(*ScaleCloneSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_GetCloneSetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneSetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).GetCloneSetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_GetCloneSetDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).GetCloneSetDetail(ctx, req.(*CloneSetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_RollbackCloneSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackCloneSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).RollbackCloneSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_RollbackCloneSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).RollbackCloneSet(ctx, req.(*RollbackCloneSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_DeleteCloneSetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloneSetPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).DeleteCloneSetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_DeleteCloneSetPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).DeleteCloneSetPods(ctx, req.(*DeleteCloneSetPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_UpdateScaleStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScaleStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).UpdateScaleStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_UpdateScaleStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).UpdateScaleStrategy(ctx, req.(*UpdateScaleStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_UpdateUpgradeStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUpgradeStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).UpdateUpgradeStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_UpdateUpgradeStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).UpdateUpgradeStrategy(ctx, req.(*UpdateUpgradeStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSet_ListCloneSetControllerRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloneSetReversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSetServer).ListCloneSetControllerRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneSet_ListCloneSetControllerRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSetServer).ListCloneSetControllerRevision(ctx, req.(*ListCloneSetReversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloneSet_ServiceDesc is the grpc.ServiceDesc for CloneSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloneSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloneset.CloneSet",
	HandlerType: (*CloneSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCloneSet",
			Handler:    _CloneSet_ListCloneSet_Handler,
		},
		{
			MethodName: "CreateOrUpdateCloneSetByYaml",
			Handler:    _CloneSet_CreateOrUpdateCloneSetByYaml_Handler,
		},
		{
			MethodName: "DeleteCloneSet",
			Handler:    _CloneSet_DeleteCloneSet_Handler,
		},
		{
			MethodName: "RestartCloneSet",
			Handler:    _CloneSet_RestartCloneSet_Handler,
		},
		{
			MethodName: "ScaleCloneSet",
			Handler:    _CloneSet_ScaleCloneSet_Handler,
		},
		{
			MethodName: "GetCloneSetDetail",
			Handler:    _CloneSet_GetCloneSetDetail_Handler,
		},
		{
			MethodName: "RollbackCloneSet",
			Handler:    _CloneSet_RollbackCloneSet_Handler,
		},
		{
			MethodName: "DeleteCloneSetPods",
			Handler:    _CloneSet_DeleteCloneSetPods_Handler,
		},
		{
			MethodName: "UpdateScaleStrategy",
			Handler:    _CloneSet_UpdateScaleStrategy_Handler,
		},
		{
			MethodName: "UpdateUpgradeStrategy",
			Handler:    _CloneSet_UpdateUpgradeStrategy_Handler,
		},
		{
			MethodName: "ListCloneSetControllerRevision",
			Handler:    _CloneSet_ListCloneSetControllerRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/cloneset.v1.proto",
}
