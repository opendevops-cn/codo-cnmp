// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/websocket.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebSocket_TailPodLogs_FullMethodName    = "/websocket.WebSocket/TailPodLogs"
	WebSocket_ExecPodCommand_FullMethodName = "/websocket.WebSocket/ExecPodCommand"
)

// WebSocketClient is the client API for WebSocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSocketClient interface {
	// 查看-云原生管理-终端-Pod日志
	TailPodLogs(ctx context.Context, in *TailPodLogsRequest, opts ...grpc.CallOption) (*TailPodLogsResponse, error)
	// 执行-云原生管理-终端-Pod命令
	ExecPodCommand(ctx context.Context, in *ExecPodCommandRequest, opts ...grpc.CallOption) (*PodCommandResponse, error)
}

type webSocketClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSocketClient(cc grpc.ClientConnInterface) WebSocketClient {
	return &webSocketClient{cc}
}

func (c *webSocketClient) TailPodLogs(ctx context.Context, in *TailPodLogsRequest, opts ...grpc.CallOption) (*TailPodLogsResponse, error) {
	out := new(TailPodLogsResponse)
	err := c.cc.Invoke(ctx, WebSocket_TailPodLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketClient) ExecPodCommand(ctx context.Context, in *ExecPodCommandRequest, opts ...grpc.CallOption) (*PodCommandResponse, error) {
	out := new(PodCommandResponse)
	err := c.cc.Invoke(ctx, WebSocket_ExecPodCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebSocketServer is the server API for WebSocket service.
// All implementations must embed UnimplementedWebSocketServer
// for forward compatibility
type WebSocketServer interface {
	// 查看-云原生管理-终端-Pod日志
	TailPodLogs(context.Context, *TailPodLogsRequest) (*TailPodLogsResponse, error)
	// 执行-云原生管理-终端-Pod命令
	ExecPodCommand(context.Context, *ExecPodCommandRequest) (*PodCommandResponse, error)
	mustEmbedUnimplementedWebSocketServer()
}

// UnimplementedWebSocketServer must be embedded to have forward compatible implementations.
type UnimplementedWebSocketServer struct {
}

func (UnimplementedWebSocketServer) TailPodLogs(context.Context, *TailPodLogsRequest) (*TailPodLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TailPodLogs not implemented")
}
func (UnimplementedWebSocketServer) ExecPodCommand(context.Context, *ExecPodCommandRequest) (*PodCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecPodCommand not implemented")
}
func (UnimplementedWebSocketServer) mustEmbedUnimplementedWebSocketServer() {}

// UnsafeWebSocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSocketServer will
// result in compilation errors.
type UnsafeWebSocketServer interface {
	mustEmbedUnimplementedWebSocketServer()
}

func RegisterWebSocketServer(s grpc.ServiceRegistrar, srv WebSocketServer) {
	s.RegisterService(&WebSocket_ServiceDesc, srv)
}

func _WebSocket_TailPodLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TailPodLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).TailPodLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSocket_TailPodLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).TailPodLogs(ctx, req.(*TailPodLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocket_ExecPodCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecPodCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServer).ExecPodCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSocket_ExecPodCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServer).ExecPodCommand(ctx, req.(*ExecPodCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebSocket_ServiceDesc is the grpc.ServiceDesc for WebSocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websocket.WebSocket",
	HandlerType: (*WebSocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TailPodLogs",
			Handler:    _WebSocket_TailPodLogs_Handler,
		},
		{
			MethodName: "ExecPodCommand",
			Handler:    _WebSocket_ExecPodCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/websocket.v1.proto",
}
