// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/deployment.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Deployment_ListDeployment_FullMethodName                 = "/deployment.Deployment/ListDeployment"
	Deployment_CreateOrUpdateDeploymentByYaml_FullMethodName = "/deployment.Deployment/CreateOrUpdateDeploymentByYaml"
	Deployment_DeleteDeployment_FullMethodName               = "/deployment.Deployment/DeleteDeployment"
	Deployment_RestartDeployment_FullMethodName              = "/deployment.Deployment/RestartDeployment"
	Deployment_ScaleDeployment_FullMethodName                = "/deployment.Deployment/ScaleDeployment"
	Deployment_GetDeploymentDetail_FullMethodName            = "/deployment.Deployment/GetDeploymentDetail"
	Deployment_RollbackDeployment_FullMethodName             = "/deployment.Deployment/RollbackDeployment"
	Deployment_ListReplicaSet_FullMethodName                 = "/deployment.Deployment/ListReplicaSet"
	Deployment_UpdateDeploymentStrategy_FullMethodName       = "/deployment.Deployment/UpdateDeploymentStrategy"
)

// DeploymentClient is the client API for Deployment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentClient interface {
	// 查看-云原生管理-Deployment-列表
	ListDeployment(ctx context.Context, in *ListDeploymentRequest, opts ...grpc.CallOption) (*ListDeploymentResponse, error)
	// 管理-云原生管理-Deployment-Yaml创建更新
	CreateOrUpdateDeploymentByYaml(ctx context.Context, in *CreateOrUpdateDeploymentByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateDeploymentByYamlResponse, error)
	// 管理-云原生管理-Deployment-删除
	DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error)
	// 管理-云原生管理-Deployment-重启
	RestartDeployment(ctx context.Context, in *RestartDeploymentRequest, opts ...grpc.CallOption) (*RestartDeploymentResponse, error)
	// 管理-云原生管理-Deployment-扩缩容
	ScaleDeployment(ctx context.Context, in *ScaleDeploymentRequest, opts ...grpc.CallOption) (*ScaleDeploymentResponse, error)
	// 查看-云原生管理-Deployment-详情
	GetDeploymentDetail(ctx context.Context, in *DeploymentDetailRequest, opts ...grpc.CallOption) (*DeploymentDetailResponse, error)
	// 管理-云原生管理-Deployment-回滚
	RollbackDeployment(ctx context.Context, in *RollbackDeploymentRequest, opts ...grpc.CallOption) (*RollbackDeploymentResponse, error)
	// 查看-云原生管理-Deployment-历史版本
	ListReplicaSet(ctx context.Context, in *DeploymentDetailRequest, opts ...grpc.CallOption) (*ListReplicaSetResponse, error)
	// 管理-云原生管理-Deployment-更新策略
	UpdateDeploymentStrategy(ctx context.Context, in *UpdateDeploymentStrategyRequest, opts ...grpc.CallOption) (*UpdateDeploymentStrategyResponse, error)
}

type deploymentClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentClient(cc grpc.ClientConnInterface) DeploymentClient {
	return &deploymentClient{cc}
}

func (c *deploymentClient) ListDeployment(ctx context.Context, in *ListDeploymentRequest, opts ...grpc.CallOption) (*ListDeploymentResponse, error) {
	out := new(ListDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployment_ListDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) CreateOrUpdateDeploymentByYaml(ctx context.Context, in *CreateOrUpdateDeploymentByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateDeploymentByYamlResponse, error) {
	out := new(CreateOrUpdateDeploymentByYamlResponse)
	err := c.cc.Invoke(ctx, Deployment_CreateOrUpdateDeploymentByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error) {
	out := new(DeleteDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployment_DeleteDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) RestartDeployment(ctx context.Context, in *RestartDeploymentRequest, opts ...grpc.CallOption) (*RestartDeploymentResponse, error) {
	out := new(RestartDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployment_RestartDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ScaleDeployment(ctx context.Context, in *ScaleDeploymentRequest, opts ...grpc.CallOption) (*ScaleDeploymentResponse, error) {
	out := new(ScaleDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployment_ScaleDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) GetDeploymentDetail(ctx context.Context, in *DeploymentDetailRequest, opts ...grpc.CallOption) (*DeploymentDetailResponse, error) {
	out := new(DeploymentDetailResponse)
	err := c.cc.Invoke(ctx, Deployment_GetDeploymentDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) RollbackDeployment(ctx context.Context, in *RollbackDeploymentRequest, opts ...grpc.CallOption) (*RollbackDeploymentResponse, error) {
	out := new(RollbackDeploymentResponse)
	err := c.cc.Invoke(ctx, Deployment_RollbackDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ListReplicaSet(ctx context.Context, in *DeploymentDetailRequest, opts ...grpc.CallOption) (*ListReplicaSetResponse, error) {
	out := new(ListReplicaSetResponse)
	err := c.cc.Invoke(ctx, Deployment_ListReplicaSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) UpdateDeploymentStrategy(ctx context.Context, in *UpdateDeploymentStrategyRequest, opts ...grpc.CallOption) (*UpdateDeploymentStrategyResponse, error) {
	out := new(UpdateDeploymentStrategyResponse)
	err := c.cc.Invoke(ctx, Deployment_UpdateDeploymentStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentServer is the server API for Deployment service.
// All implementations must embed UnimplementedDeploymentServer
// for forward compatibility
type DeploymentServer interface {
	// 查看-云原生管理-Deployment-列表
	ListDeployment(context.Context, *ListDeploymentRequest) (*ListDeploymentResponse, error)
	// 管理-云原生管理-Deployment-Yaml创建更新
	CreateOrUpdateDeploymentByYaml(context.Context, *CreateOrUpdateDeploymentByYamlRequest) (*CreateOrUpdateDeploymentByYamlResponse, error)
	// 管理-云原生管理-Deployment-删除
	DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error)
	// 管理-云原生管理-Deployment-重启
	RestartDeployment(context.Context, *RestartDeploymentRequest) (*RestartDeploymentResponse, error)
	// 管理-云原生管理-Deployment-扩缩容
	ScaleDeployment(context.Context, *ScaleDeploymentRequest) (*ScaleDeploymentResponse, error)
	// 查看-云原生管理-Deployment-详情
	GetDeploymentDetail(context.Context, *DeploymentDetailRequest) (*DeploymentDetailResponse, error)
	// 管理-云原生管理-Deployment-回滚
	RollbackDeployment(context.Context, *RollbackDeploymentRequest) (*RollbackDeploymentResponse, error)
	// 查看-云原生管理-Deployment-历史版本
	ListReplicaSet(context.Context, *DeploymentDetailRequest) (*ListReplicaSetResponse, error)
	// 管理-云原生管理-Deployment-更新策略
	UpdateDeploymentStrategy(context.Context, *UpdateDeploymentStrategyRequest) (*UpdateDeploymentStrategyResponse, error)
	mustEmbedUnimplementedDeploymentServer()
}

// UnimplementedDeploymentServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentServer struct {
}

func (UnimplementedDeploymentServer) ListDeployment(context.Context, *ListDeploymentRequest) (*ListDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployment not implemented")
}
func (UnimplementedDeploymentServer) CreateOrUpdateDeploymentByYaml(context.Context, *CreateOrUpdateDeploymentByYamlRequest) (*CreateOrUpdateDeploymentByYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateDeploymentByYaml not implemented")
}
func (UnimplementedDeploymentServer) DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedDeploymentServer) RestartDeployment(context.Context, *RestartDeploymentRequest) (*RestartDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartDeployment not implemented")
}
func (UnimplementedDeploymentServer) ScaleDeployment(context.Context, *ScaleDeploymentRequest) (*ScaleDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleDeployment not implemented")
}
func (UnimplementedDeploymentServer) GetDeploymentDetail(context.Context, *DeploymentDetailRequest) (*DeploymentDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentDetail not implemented")
}
func (UnimplementedDeploymentServer) RollbackDeployment(context.Context, *RollbackDeploymentRequest) (*RollbackDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackDeployment not implemented")
}
func (UnimplementedDeploymentServer) ListReplicaSet(context.Context, *DeploymentDetailRequest) (*ListReplicaSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplicaSet not implemented")
}
func (UnimplementedDeploymentServer) UpdateDeploymentStrategy(context.Context, *UpdateDeploymentStrategyRequest) (*UpdateDeploymentStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentStrategy not implemented")
}
func (UnimplementedDeploymentServer) mustEmbedUnimplementedDeploymentServer() {}

// UnsafeDeploymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServer will
// result in compilation errors.
type UnsafeDeploymentServer interface {
	mustEmbedUnimplementedDeploymentServer()
}

func RegisterDeploymentServer(s grpc.ServiceRegistrar, srv DeploymentServer) {
	s.RegisterService(&Deployment_ServiceDesc, srv)
}

func _Deployment_ListDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ListDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_ListDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ListDeployment(ctx, req.(*ListDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_CreateOrUpdateDeploymentByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateDeploymentByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).CreateOrUpdateDeploymentByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_CreateOrUpdateDeploymentByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).CreateOrUpdateDeploymentByYaml(ctx, req.(*CreateOrUpdateDeploymentByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_DeleteDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).DeleteDeployment(ctx, req.(*DeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_RestartDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).RestartDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_RestartDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).RestartDeployment(ctx, req.(*RestartDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ScaleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ScaleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_ScaleDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ScaleDeployment(ctx, req.(*ScaleDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_GetDeploymentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).GetDeploymentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_GetDeploymentDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).GetDeploymentDetail(ctx, req.(*DeploymentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_RollbackDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).RollbackDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_RollbackDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).RollbackDeployment(ctx, req.(*RollbackDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ListReplicaSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ListReplicaSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_ListReplicaSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ListReplicaSet(ctx, req.(*DeploymentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_UpdateDeploymentStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).UpdateDeploymentStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deployment_UpdateDeploymentStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).UpdateDeploymentStrategy(ctx, req.(*UpdateDeploymentStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deployment_ServiceDesc is the grpc.ServiceDesc for Deployment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deployment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deployment.Deployment",
	HandlerType: (*DeploymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDeployment",
			Handler:    _Deployment_ListDeployment_Handler,
		},
		{
			MethodName: "CreateOrUpdateDeploymentByYaml",
			Handler:    _Deployment_CreateOrUpdateDeploymentByYaml_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _Deployment_DeleteDeployment_Handler,
		},
		{
			MethodName: "RestartDeployment",
			Handler:    _Deployment_RestartDeployment_Handler,
		},
		{
			MethodName: "ScaleDeployment",
			Handler:    _Deployment_ScaleDeployment_Handler,
		},
		{
			MethodName: "GetDeploymentDetail",
			Handler:    _Deployment_GetDeploymentDetail_Handler,
		},
		{
			MethodName: "RollbackDeployment",
			Handler:    _Deployment_RollbackDeployment_Handler,
		},
		{
			MethodName: "ListReplicaSet",
			Handler:    _Deployment_ListReplicaSet_Handler,
		},
		{
			MethodName: "UpdateDeploymentStrategy",
			Handler:    _Deployment_UpdateDeploymentStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/deployment.v1.proto",
}
