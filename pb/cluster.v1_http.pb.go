// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/cluster.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationClusterCreateCluster = "/cluster.Cluster/CreateCluster"
const OperationClusterListCluster = "/cluster.Cluster/ListCluster"
const OperationClusterGetClusterDetail = "/cluster.Cluster/GetClusterDetail"
const OperationClusterPingIdip = "/cluster.Cluster/PingIdip"
const OperationClusterDeleteCluster = "/cluster.Cluster/DeleteCluster"
const OperationClusterOverviewCluster = "/cluster.Cluster/OverviewCluster"
const OperationClusterUpdateCluster = "/cluster.Cluster/UpdateCluster"
const OperationClusterDownloadKubeConfig = "/cluster.Cluster/DownloadKubeConfig"

type ClusterHTTPServer interface {
	// CreateCluster管理-云原生管理-集群-导入
	CreateCluster(context.Context, *ImportClusterRequest) (*ImportClusterResponse, error)
	// ListCluster查看-云原生管理-集群-列表
	ListCluster(context.Context, *ListClusterRequest) (*ListClusterResponse, error)
	// GetClusterDetail查看-云原生管理-集群-详情
	GetClusterDetail(context.Context, *GetClusterDetailRequest) (*GetClusterDetailResponse, error)
	// PingIdip查看-云原生管理-集群-IdIP连通性
	PingIdip(context.Context, *PingIdipRequest) (*PingIdipResponse, error)
	// DeleteCluster管理-云原生管理-集群-删除
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	// OverviewCluster查看-云原生管理-集群-概览
	OverviewCluster(context.Context, *ClusterOverviewRequest) (*ClusterOverviewResponse, error)
	// UpdateCluster管理-云原生管理-集群-编辑
	UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error)
	// DownloadKubeConfig管理-云原生管理-集群-下载kubeConfig
	DownloadKubeConfig(context.Context, *DownloadKubeConfigRequest) (*DownloadKubeConfigResponse, error)
}

func NewClusterHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationClusterCreateCluster).Build(),
		selector.Server().Path(OperationClusterListCluster).Build(),
		selector.Server().Path(OperationClusterGetClusterDetail).Build(),
		selector.Server().Path(OperationClusterPingIdip).Build(),
		selector.Server().Path(OperationClusterDeleteCluster).Build(),
		selector.Server().Path(OperationClusterOverviewCluster).Build(),
		selector.Server().Path(OperationClusterUpdateCluster).Build(),
		selector.Server().Path(OperationClusterDownloadKubeConfig).Build(),
	).Path(
		OperationClusterCreateCluster,
		OperationClusterListCluster,
		OperationClusterGetClusterDetail,
		OperationClusterPingIdip,
		OperationClusterDeleteCluster,
		OperationClusterOverviewCluster,
		OperationClusterUpdateCluster,
		OperationClusterDownloadKubeConfig,
	).Build()
}

func RegisterClusterHTTPServer(s *http.Server, srv ClusterHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/cluster/create", _Cluster_CreateCluster0_HTTP_Handler(srv))
	r.GET("/api/v1/cluster/list", _Cluster_ListCluster0_HTTP_Handler(srv))
	r.GET("/api/v1/cluster/detail", _Cluster_GetClusterDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/cluster/idip/ping", _Cluster_PingIdip0_HTTP_Handler(srv))
	r.POST("/api/v1/cluster/delete", _Cluster_DeleteCluster0_HTTP_Handler(srv))
	r.GET("/api/v1/cluster/overview", _Cluster_OverviewCluster0_HTTP_Handler(srv))
	r.POST("/api/v1/cluster/update", _Cluster_UpdateCluster0_HTTP_Handler(srv))
	r.POST("/api/v1/cluster/kubeconfig/download", _Cluster_DownloadKubeConfig0_HTTP_Handler(srv))
}

func GenerateClusterHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 8)
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cluster/create",
		Comment: "管理-云原生管理-集群-导入",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/cluster/list",
		Comment: "查看-云原生管理-集群-列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/cluster/detail",
		Comment: "查看-云原生管理-集群-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cluster/idip/ping",
		Comment: "查看-云原生管理-集群-IdIP连通性",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cluster/delete",
		Comment: "管理-云原生管理-集群-删除",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/cluster/overview",
		Comment: "查看-云原生管理-集群-概览",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cluster/update",
		Comment: "管理-云原生管理-集群-编辑",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/cluster/kubeconfig/download",
		Comment: "管理-云原生管理-集群-下载kubeConfig",
	})
	return routes
}

func _Cluster_CreateCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ImportClusterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterCreateCluster)
		auditRule := audit.NewAudit(
			"集群列表",
			"导入集群",
			[]audit.Meta{
				{
					Key:   "cluster",
					Value: audit.MetaValue{},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cluster",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCluster(ctx, req.(*ImportClusterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImportClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _Cluster_ListCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListClusterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterListCluster)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCluster(ctx, req.(*ListClusterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _Cluster_GetClusterDetail0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetClusterDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterGetClusterDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClusterDetail(ctx, req.(*GetClusterDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClusterDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Cluster_PingIdip0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in PingIdipRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterPingIdip)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PingIdip(ctx, req.(*PingIdipRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingIdipResponse)
		return ctx.Result(200, reply)
	}
}

func _Cluster_DeleteCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteClusterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterDeleteCluster)
		auditRule := audit.NewAudit(
			"集群列表",
			"删除集群",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "id",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cluster",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCluster(ctx, req.(*DeleteClusterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _Cluster_OverviewCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ClusterOverviewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterOverviewCluster)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OverviewCluster(ctx, req.(*ClusterOverviewRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClusterOverviewResponse)
		return ctx.Result(200, reply)
	}
}

func _Cluster_UpdateCluster0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateClusterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterUpdateCluster)
		auditRule := audit.NewAudit(
			"集群列表",
			"编辑集群",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "id",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "cluster",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCluster(ctx, req.(*UpdateClusterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateClusterResponse)
		return ctx.Result(200, reply)
	}
}

func _Cluster_DownloadKubeConfig0_HTTP_Handler(srv ClusterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DownloadKubeConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterDownloadKubeConfig)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DownloadKubeConfig(ctx, req.(*DownloadKubeConfigRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DownloadKubeConfigResponse)
		return ctx.Result(200, reply)
	}
}

type ClusterHTTPClient interface {
	CreateCluster(ctx context.Context, req *ImportClusterRequest, opts ...http.CallOption) (rsp *ImportClusterResponse, err error)
	ListCluster(ctx context.Context, req *ListClusterRequest, opts ...http.CallOption) (rsp *ListClusterResponse, err error)
	GetClusterDetail(ctx context.Context, req *GetClusterDetailRequest, opts ...http.CallOption) (rsp *GetClusterDetailResponse, err error)
	PingIdip(ctx context.Context, req *PingIdipRequest, opts ...http.CallOption) (rsp *PingIdipResponse, err error)
	DeleteCluster(ctx context.Context, req *DeleteClusterRequest, opts ...http.CallOption) (rsp *DeleteClusterResponse, err error)
	OverviewCluster(ctx context.Context, req *ClusterOverviewRequest, opts ...http.CallOption) (rsp *ClusterOverviewResponse, err error)
	UpdateCluster(ctx context.Context, req *UpdateClusterRequest, opts ...http.CallOption) (rsp *UpdateClusterResponse, err error)
	DownloadKubeConfig(ctx context.Context, req *DownloadKubeConfigRequest, opts ...http.CallOption) (rsp *DownloadKubeConfigResponse, err error)
}

type ClusterHTTPClientImpl struct {
	cc *http.Client
}

func NewClusterHTTPClient(client *http.Client) ClusterHTTPClient {
	return &ClusterHTTPClientImpl{client}
}

func (c *ClusterHTTPClientImpl) CreateCluster(ctx context.Context, in *ImportClusterRequest, opts ...http.CallOption) (*ImportClusterResponse, error) {
	var out ImportClusterResponse
	pattern := "/api/v1/cluster/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterCreateCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterHTTPClientImpl) ListCluster(ctx context.Context, in *ListClusterRequest, opts ...http.CallOption) (*ListClusterResponse, error) {
	var out ListClusterResponse
	pattern := "/api/v1/cluster/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterListCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterHTTPClientImpl) GetClusterDetail(ctx context.Context, in *GetClusterDetailRequest, opts ...http.CallOption) (*GetClusterDetailResponse, error) {
	var out GetClusterDetailResponse
	pattern := "/api/v1/cluster/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterGetClusterDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterHTTPClientImpl) PingIdip(ctx context.Context, in *PingIdipRequest, opts ...http.CallOption) (*PingIdipResponse, error) {
	var out PingIdipResponse
	pattern := "/api/v1/cluster/idip/ping"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterPingIdip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterHTTPClientImpl) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...http.CallOption) (*DeleteClusterResponse, error) {
	var out DeleteClusterResponse
	pattern := "/api/v1/cluster/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterDeleteCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterHTTPClientImpl) OverviewCluster(ctx context.Context, in *ClusterOverviewRequest, opts ...http.CallOption) (*ClusterOverviewResponse, error) {
	var out ClusterOverviewResponse
	pattern := "/api/v1/cluster/overview"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterOverviewCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterHTTPClientImpl) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...http.CallOption) (*UpdateClusterResponse, error) {
	var out UpdateClusterResponse
	pattern := "/api/v1/cluster/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterUpdateCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterHTTPClientImpl) DownloadKubeConfig(ctx context.Context, in *DownloadKubeConfigRequest, opts ...http.CallOption) (*DownloadKubeConfigResponse, error) {
	var out DownloadKubeConfigResponse
	pattern := "/api/v1/cluster/kubeconfig/download"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterDownloadKubeConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
