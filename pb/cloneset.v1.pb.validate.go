// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/cloneset.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloneSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloneSetRequestMultiError, or nil if none found.
func (m *ListCloneSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloneSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListCloneSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListCloneSetRequestMultiError(errors)
	}

	return nil
}

// ListCloneSetRequestMultiError is an error wrapping multiple validation
// errors returned by ListCloneSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCloneSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloneSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloneSetRequestMultiError) AllErrors() []error { return m }

// ListCloneSetRequestValidationError is the validation error returned by
// ListCloneSetRequest.Validate if the designated constraints aren't met.
type ListCloneSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloneSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloneSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloneSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloneSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloneSetRequestValidationError) ErrorName() string {
	return "ListCloneSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloneSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloneSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloneSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloneSetRequestValidationError{}

// Validate checks the field values on CloneSetCondition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloneSetCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneSetCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloneSetConditionMultiError, or nil if none found.
func (m *CloneSetCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneSetCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastUpdateTime

	// no validation rules for LastTransitionTime

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return CloneSetConditionMultiError(errors)
	}

	return nil
}

// CloneSetConditionMultiError is an error wrapping multiple validation errors
// returned by CloneSetCondition.ValidateAll() if the designated constraints
// aren't met.
type CloneSetConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneSetConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneSetConditionMultiError) AllErrors() []error { return m }

// CloneSetConditionValidationError is the validation error returned by
// CloneSetCondition.Validate if the designated constraints aren't met.
type CloneSetConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneSetConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneSetConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneSetConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneSetConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneSetConditionValidationError) ErrorName() string {
	return "CloneSetConditionValidationError"
}

// Error satisfies the builtin error interface
func (e CloneSetConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneSetCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneSetConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneSetConditionValidationError{}

// Validate checks the field values on CloneSetStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloneSetStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneSetStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloneSetStatusMultiError,
// or nil if none found.
func (m *CloneSetStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneSetStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObservedGeneration

	// no validation rules for Replicas

	// no validation rules for UpdatedReplicas

	// no validation rules for ReadyReplicas

	// no validation rules for AvailableReplicas

	// no validation rules for UnavailableReplicas

	// no validation rules for CollisionCount

	if len(errors) > 0 {
		return CloneSetStatusMultiError(errors)
	}

	return nil
}

// CloneSetStatusMultiError is an error wrapping multiple validation errors
// returned by CloneSetStatus.ValidateAll() if the designated constraints
// aren't met.
type CloneSetStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneSetStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneSetStatusMultiError) AllErrors() []error { return m }

// CloneSetStatusValidationError is the validation error returned by
// CloneSetStatus.Validate if the designated constraints aren't met.
type CloneSetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneSetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneSetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneSetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneSetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneSetStatusValidationError) ErrorName() string { return "CloneSetStatusValidationError" }

// Error satisfies the builtin error interface
func (e CloneSetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneSetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneSetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneSetStatusValidationError{}

// Validate checks the field values on CloneSetUpdateStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneSetUpdateStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneSetUpdateStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloneSetUpdateStrategyMultiError, or nil if none found.
func (m *CloneSetUpdateStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneSetUpdateStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := CloneSetUpdateStrategy_UpdateStrategy_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := CloneSetUpdateStrategyValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GracePeriodSeconds

	// no validation rules for MaxSurge

	// no validation rules for MaxUnavailable

	if len(errors) > 0 {
		return CloneSetUpdateStrategyMultiError(errors)
	}

	return nil
}

// CloneSetUpdateStrategyMultiError is an error wrapping multiple validation
// errors returned by CloneSetUpdateStrategy.ValidateAll() if the designated
// constraints aren't met.
type CloneSetUpdateStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneSetUpdateStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneSetUpdateStrategyMultiError) AllErrors() []error { return m }

// CloneSetUpdateStrategyValidationError is the validation error returned by
// CloneSetUpdateStrategy.Validate if the designated constraints aren't met.
type CloneSetUpdateStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneSetUpdateStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneSetUpdateStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneSetUpdateStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneSetUpdateStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneSetUpdateStrategyValidationError) ErrorName() string {
	return "CloneSetUpdateStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e CloneSetUpdateStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneSetUpdateStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneSetUpdateStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneSetUpdateStrategyValidationError{}

// Validate checks the field values on CloneSetItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloneSetItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneSetItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloneSetItemMultiError, or
// nil if none found.
func (m *CloneSetItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneSetItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloneSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloneSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloneSetItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneSetItemValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for Labels

	// no validation rules for Yaml

	// no validation rules for Annotations

	// no validation rules for Replicas

	if all {
		switch v := interface{}(m.GetUpdateStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneSetItemValidationError{
				field:  "UpdateStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneSetItemValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloneSetItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloneSetItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloneSetItemValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SpecReplicas

	// no validation rules for IsFollowed

	if all {
		switch v := interface{}(m.GetScaleStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneSetItemValidationError{
					field:  "ScaleStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneSetItemValidationError{
					field:  "ScaleStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneSetItemValidationError{
				field:  "ScaleStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloneSetItemMultiError(errors)
	}

	return nil
}

// CloneSetItemMultiError is an error wrapping multiple validation errors
// returned by CloneSetItem.ValidateAll() if the designated constraints aren't met.
type CloneSetItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneSetItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneSetItemMultiError) AllErrors() []error { return m }

// CloneSetItemValidationError is the validation error returned by
// CloneSetItem.Validate if the designated constraints aren't met.
type CloneSetItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneSetItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneSetItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneSetItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneSetItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneSetItemValidationError) ErrorName() string { return "CloneSetItemValidationError" }

// Error satisfies the builtin error interface
func (e CloneSetItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneSetItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneSetItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneSetItemValidationError{}

// Validate checks the field values on ListCloneSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloneSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloneSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloneSetResponseMultiError, or nil if none found.
func (m *ListCloneSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloneSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloneSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloneSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloneSetResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCloneSetResponseMultiError(errors)
	}

	return nil
}

// ListCloneSetResponseMultiError is an error wrapping multiple validation
// errors returned by ListCloneSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCloneSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloneSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloneSetResponseMultiError) AllErrors() []error { return m }

// ListCloneSetResponseValidationError is the validation error returned by
// ListCloneSetResponse.Validate if the designated constraints aren't met.
type ListCloneSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloneSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloneSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloneSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloneSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloneSetResponseValidationError) ErrorName() string {
	return "ListCloneSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloneSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloneSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloneSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloneSetResponseValidationError{}

// Validate checks the field values on CreateOrUpdateCloneSetByYamlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrUpdateCloneSetByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCloneSetByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCloneSetByYamlRequestMultiError, or nil if none found.
func (m *CreateOrUpdateCloneSetByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCloneSetByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateOrUpdateCloneSetByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := CreateOrUpdateCloneSetByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrUpdateCloneSetByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCloneSetByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateCloneSetByYamlRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateCloneSetByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCloneSetByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCloneSetByYamlRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateCloneSetByYamlRequestValidationError is the validation error
// returned by CreateOrUpdateCloneSetByYamlRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCloneSetByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCloneSetByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCloneSetByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCloneSetByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCloneSetByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCloneSetByYamlRequestValidationError) ErrorName() string {
	return "CreateOrUpdateCloneSetByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCloneSetByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCloneSetByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCloneSetByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCloneSetByYamlRequestValidationError{}

// Validate checks the field values on CreateOrUpdateCloneSetByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateCloneSetByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCloneSetByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCloneSetByYamlResponseMultiError, or nil if none found.
func (m *CreateOrUpdateCloneSetByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCloneSetByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrUpdateCloneSetByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCloneSetByYamlResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateCloneSetByYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateCloneSetByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCloneSetByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCloneSetByYamlResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateCloneSetByYamlResponseValidationError is the validation error
// returned by CreateOrUpdateCloneSetByYamlResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCloneSetByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCloneSetByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCloneSetByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCloneSetByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCloneSetByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCloneSetByYamlResponseValidationError) ErrorName() string {
	return "CreateOrUpdateCloneSetByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCloneSetByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCloneSetByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCloneSetByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCloneSetByYamlResponseValidationError{}

// Validate checks the field values on UpdateCloneSetByYamlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCloneSetByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCloneSetByYamlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCloneSetByYamlRequestMultiError, or nil if none found.
func (m *UpdateCloneSetByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCloneSetByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateCloneSetByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := UpdateCloneSetByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCloneSetByYamlRequestMultiError(errors)
	}

	return nil
}

// UpdateCloneSetByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCloneSetByYamlRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCloneSetByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCloneSetByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCloneSetByYamlRequestMultiError) AllErrors() []error { return m }

// UpdateCloneSetByYamlRequestValidationError is the validation error returned
// by UpdateCloneSetByYamlRequest.Validate if the designated constraints
// aren't met.
type UpdateCloneSetByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloneSetByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloneSetByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloneSetByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloneSetByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloneSetByYamlRequestValidationError) ErrorName() string {
	return "UpdateCloneSetByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloneSetByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloneSetByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloneSetByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloneSetByYamlRequestValidationError{}

// Validate checks the field values on UpdateCloneSetByYamlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCloneSetByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCloneSetByYamlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCloneSetByYamlResponseMultiError, or nil if none found.
func (m *UpdateCloneSetByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCloneSetByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCloneSetByYamlResponseMultiError(errors)
	}

	return nil
}

// UpdateCloneSetByYamlResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCloneSetByYamlResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCloneSetByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCloneSetByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCloneSetByYamlResponseMultiError) AllErrors() []error { return m }

// UpdateCloneSetByYamlResponseValidationError is the validation error returned
// by UpdateCloneSetByYamlResponse.Validate if the designated constraints
// aren't met.
type UpdateCloneSetByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloneSetByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloneSetByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloneSetByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloneSetByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloneSetByYamlResponseValidationError) ErrorName() string {
	return "UpdateCloneSetByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloneSetByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloneSetByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloneSetByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloneSetByYamlResponseValidationError{}

// Validate checks the field values on DeleteCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloneSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCloneSetRequestMultiError, or nil if none found.
func (m *DeleteCloneSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloneSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteCloneSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteCloneSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteCloneSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCloneSetRequestMultiError(errors)
	}

	return nil
}

// DeleteCloneSetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCloneSetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCloneSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloneSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloneSetRequestMultiError) AllErrors() []error { return m }

// DeleteCloneSetRequestValidationError is the validation error returned by
// DeleteCloneSetRequest.Validate if the designated constraints aren't met.
type DeleteCloneSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloneSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloneSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloneSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloneSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloneSetRequestValidationError) ErrorName() string {
	return "DeleteCloneSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloneSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloneSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloneSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloneSetRequestValidationError{}

// Validate checks the field values on DeleteCloneSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloneSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloneSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCloneSetResponseMultiError, or nil if none found.
func (m *DeleteCloneSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloneSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCloneSetResponseMultiError(errors)
	}

	return nil
}

// DeleteCloneSetResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCloneSetResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCloneSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloneSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloneSetResponseMultiError) AllErrors() []error { return m }

// DeleteCloneSetResponseValidationError is the validation error returned by
// DeleteCloneSetResponse.Validate if the designated constraints aren't met.
type DeleteCloneSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloneSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloneSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloneSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloneSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloneSetResponseValidationError) ErrorName() string {
	return "DeleteCloneSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloneSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloneSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloneSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloneSetResponseValidationError{}

// Validate checks the field values on RestartCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartCloneSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartCloneSetRequestMultiError, or nil if none found.
func (m *RestartCloneSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartCloneSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RestartCloneSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RestartCloneSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RestartCloneSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestartCloneSetRequestMultiError(errors)
	}

	return nil
}

// RestartCloneSetRequestMultiError is an error wrapping multiple validation
// errors returned by RestartCloneSetRequest.ValidateAll() if the designated
// constraints aren't met.
type RestartCloneSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartCloneSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartCloneSetRequestMultiError) AllErrors() []error { return m }

// RestartCloneSetRequestValidationError is the validation error returned by
// RestartCloneSetRequest.Validate if the designated constraints aren't met.
type RestartCloneSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartCloneSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartCloneSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartCloneSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartCloneSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartCloneSetRequestValidationError) ErrorName() string {
	return "RestartCloneSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartCloneSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartCloneSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartCloneSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartCloneSetRequestValidationError{}

// Validate checks the field values on RestartCloneSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartCloneSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartCloneSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartCloneSetResponseMultiError, or nil if none found.
func (m *RestartCloneSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartCloneSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartCloneSetResponseMultiError(errors)
	}

	return nil
}

// RestartCloneSetResponseMultiError is an error wrapping multiple validation
// errors returned by RestartCloneSetResponse.ValidateAll() if the designated
// constraints aren't met.
type RestartCloneSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartCloneSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartCloneSetResponseMultiError) AllErrors() []error { return m }

// RestartCloneSetResponseValidationError is the validation error returned by
// RestartCloneSetResponse.Validate if the designated constraints aren't met.
type RestartCloneSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartCloneSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartCloneSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartCloneSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartCloneSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartCloneSetResponseValidationError) ErrorName() string {
	return "RestartCloneSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartCloneSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartCloneSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartCloneSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartCloneSetResponseValidationError{}

// Validate checks the field values on ScaleCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleCloneSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleCloneSetRequestMultiError, or nil if none found.
func (m *ScaleCloneSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleCloneSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ScaleCloneSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ScaleCloneSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ScaleCloneSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReplicas() < 0 {
		err := ScaleCloneSetRequestValidationError{
			field:  "Replicas",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScaleCloneSetRequestMultiError(errors)
	}

	return nil
}

// ScaleCloneSetRequestMultiError is an error wrapping multiple validation
// errors returned by ScaleCloneSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ScaleCloneSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleCloneSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleCloneSetRequestMultiError) AllErrors() []error { return m }

// ScaleCloneSetRequestValidationError is the validation error returned by
// ScaleCloneSetRequest.Validate if the designated constraints aren't met.
type ScaleCloneSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleCloneSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleCloneSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleCloneSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleCloneSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleCloneSetRequestValidationError) ErrorName() string {
	return "ScaleCloneSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleCloneSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleCloneSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleCloneSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleCloneSetRequestValidationError{}

// Validate checks the field values on ScaleCloneSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleCloneSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleCloneSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleCloneSetResponseMultiError, or nil if none found.
func (m *ScaleCloneSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleCloneSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScaleCloneSetResponseMultiError(errors)
	}

	return nil
}

// ScaleCloneSetResponseMultiError is an error wrapping multiple validation
// errors returned by ScaleCloneSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ScaleCloneSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleCloneSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleCloneSetResponseMultiError) AllErrors() []error { return m }

// ScaleCloneSetResponseValidationError is the validation error returned by
// ScaleCloneSetResponse.Validate if the designated constraints aren't met.
type ScaleCloneSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleCloneSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleCloneSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleCloneSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleCloneSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleCloneSetResponseValidationError) ErrorName() string {
	return "ScaleCloneSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleCloneSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleCloneSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleCloneSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleCloneSetResponseValidationError{}

// Validate checks the field values on CloneSetDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneSetDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneSetDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloneSetDetailRequestMultiError, or nil if none found.
func (m *CloneSetDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneSetDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CloneSetDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CloneSetDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CloneSetDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloneSetDetailRequestMultiError(errors)
	}

	return nil
}

// CloneSetDetailRequestMultiError is an error wrapping multiple validation
// errors returned by CloneSetDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type CloneSetDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneSetDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneSetDetailRequestMultiError) AllErrors() []error { return m }

// CloneSetDetailRequestValidationError is the validation error returned by
// CloneSetDetailRequest.Validate if the designated constraints aren't met.
type CloneSetDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneSetDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneSetDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneSetDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneSetDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneSetDetailRequestValidationError) ErrorName() string {
	return "CloneSetDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneSetDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneSetDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneSetDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneSetDetailRequestValidationError{}

// Validate checks the field values on CloneSetDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneSetDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneSetDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloneSetDetailResponseMultiError, or nil if none found.
func (m *CloneSetDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneSetDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneSetDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneSetDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneSetDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloneSetDetailResponseMultiError(errors)
	}

	return nil
}

// CloneSetDetailResponseMultiError is an error wrapping multiple validation
// errors returned by CloneSetDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CloneSetDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneSetDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneSetDetailResponseMultiError) AllErrors() []error { return m }

// CloneSetDetailResponseValidationError is the validation error returned by
// CloneSetDetailResponse.Validate if the designated constraints aren't met.
type CloneSetDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneSetDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneSetDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneSetDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneSetDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneSetDetailResponseValidationError) ErrorName() string {
	return "CloneSetDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneSetDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneSetDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneSetDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneSetDetailResponseValidationError{}

// Validate checks the field values on RollbackCloneSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackCloneSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackCloneSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackCloneSetRequestMultiError, or nil if none found.
func (m *RollbackCloneSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackCloneSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RollbackCloneSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RollbackCloneSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RollbackCloneSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := RollbackCloneSetRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RollbackCloneSetRequestMultiError(errors)
	}

	return nil
}

// RollbackCloneSetRequestMultiError is an error wrapping multiple validation
// errors returned by RollbackCloneSetRequest.ValidateAll() if the designated
// constraints aren't met.
type RollbackCloneSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackCloneSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackCloneSetRequestMultiError) AllErrors() []error { return m }

// RollbackCloneSetRequestValidationError is the validation error returned by
// RollbackCloneSetRequest.Validate if the designated constraints aren't met.
type RollbackCloneSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackCloneSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackCloneSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackCloneSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackCloneSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackCloneSetRequestValidationError) ErrorName() string {
	return "RollbackCloneSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackCloneSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackCloneSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackCloneSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackCloneSetRequestValidationError{}

// Validate checks the field values on RollbackCloneSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackCloneSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackCloneSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackCloneSetResponseMultiError, or nil if none found.
func (m *RollbackCloneSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackCloneSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RollbackCloneSetResponseMultiError(errors)
	}

	return nil
}

// RollbackCloneSetResponseMultiError is an error wrapping multiple validation
// errors returned by RollbackCloneSetResponse.ValidateAll() if the designated
// constraints aren't met.
type RollbackCloneSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackCloneSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackCloneSetResponseMultiError) AllErrors() []error { return m }

// RollbackCloneSetResponseValidationError is the validation error returned by
// RollbackCloneSetResponse.Validate if the designated constraints aren't met.
type RollbackCloneSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackCloneSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackCloneSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackCloneSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackCloneSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackCloneSetResponseValidationError) ErrorName() string {
	return "RollbackCloneSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackCloneSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackCloneSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackCloneSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackCloneSetResponseValidationError{}

// Validate checks the field values on DeleteCloneSetPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloneSetPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloneSetPodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCloneSetPodRequestMultiError, or nil if none found.
func (m *DeleteCloneSetPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloneSetPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteCloneSetPodRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteCloneSetPodRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteCloneSetPodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DeleteCloneSetPodRequest_DeletePolicy_name[int32(m.GetDeletePolicy())]; !ok {
		err := DeleteCloneSetPodRequestValidationError{
			field:  "DeletePolicy",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCloneSetPodRequestMultiError(errors)
	}

	return nil
}

// DeleteCloneSetPodRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCloneSetPodRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCloneSetPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloneSetPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloneSetPodRequestMultiError) AllErrors() []error { return m }

// DeleteCloneSetPodRequestValidationError is the validation error returned by
// DeleteCloneSetPodRequest.Validate if the designated constraints aren't met.
type DeleteCloneSetPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloneSetPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloneSetPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloneSetPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloneSetPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloneSetPodRequestValidationError) ErrorName() string {
	return "DeleteCloneSetPodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloneSetPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloneSetPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloneSetPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloneSetPodRequestValidationError{}

// Validate checks the field values on DeleteCloneSetPodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCloneSetPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCloneSetPodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCloneSetPodResponseMultiError, or nil if none found.
func (m *DeleteCloneSetPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCloneSetPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCloneSetPodResponseMultiError(errors)
	}

	return nil
}

// DeleteCloneSetPodResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCloneSetPodResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteCloneSetPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCloneSetPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCloneSetPodResponseMultiError) AllErrors() []error { return m }

// DeleteCloneSetPodResponseValidationError is the validation error returned by
// DeleteCloneSetPodResponse.Validate if the designated constraints aren't met.
type DeleteCloneSetPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloneSetPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloneSetPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloneSetPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloneSetPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloneSetPodResponseValidationError) ErrorName() string {
	return "DeleteCloneSetPodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloneSetPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloneSetPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloneSetPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloneSetPodResponseValidationError{}

// Validate checks the field values on UpdateScaleStrategyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScaleStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScaleStrategyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScaleStrategyRequestMultiError, or nil if none found.
func (m *UpdateScaleStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScaleStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateScaleStrategyRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateScaleStrategyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateScaleStrategyRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinReadySeconds() < 1 {
		err := UpdateScaleStrategyRequestValidationError{
			field:  "MinReadySeconds",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMaxUnavailable()) < 1 {
		err := UpdateScaleStrategyRequestValidationError{
			field:  "MaxUnavailable",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateScaleStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateScaleStrategyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateScaleStrategyRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateScaleStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScaleStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScaleStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateScaleStrategyRequestValidationError is the validation error returned
// by UpdateScaleStrategyRequest.Validate if the designated constraints aren't met.
type UpdateScaleStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScaleStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScaleStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScaleStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScaleStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScaleStrategyRequestValidationError) ErrorName() string {
	return "UpdateScaleStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScaleStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScaleStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScaleStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScaleStrategyRequestValidationError{}

// Validate checks the field values on UpdateScaleStrategyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScaleStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScaleStrategyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScaleStrategyResponseMultiError, or nil if none found.
func (m *UpdateScaleStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScaleStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateScaleStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateScaleStrategyResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateScaleStrategyResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateScaleStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScaleStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScaleStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateScaleStrategyResponseValidationError is the validation error returned
// by UpdateScaleStrategyResponse.Validate if the designated constraints
// aren't met.
type UpdateScaleStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScaleStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScaleStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScaleStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScaleStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScaleStrategyResponseValidationError) ErrorName() string {
	return "UpdateScaleStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScaleStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScaleStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScaleStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScaleStrategyResponseValidationError{}

// Validate checks the field values on ScaleStrategyItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScaleStrategyItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleStrategyItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleStrategyItemMultiError, or nil if none found.
func (m *ScaleStrategyItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleStrategyItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MinReadySeconds

	// no validation rules for MaxUnavailable

	if len(errors) > 0 {
		return ScaleStrategyItemMultiError(errors)
	}

	return nil
}

// ScaleStrategyItemMultiError is an error wrapping multiple validation errors
// returned by ScaleStrategyItem.ValidateAll() if the designated constraints
// aren't met.
type ScaleStrategyItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleStrategyItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleStrategyItemMultiError) AllErrors() []error { return m }

// ScaleStrategyItemValidationError is the validation error returned by
// ScaleStrategyItem.Validate if the designated constraints aren't met.
type ScaleStrategyItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleStrategyItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleStrategyItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleStrategyItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleStrategyItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleStrategyItemValidationError) ErrorName() string {
	return "ScaleStrategyItemValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleStrategyItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleStrategyItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleStrategyItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleStrategyItemValidationError{}

// Validate checks the field values on UpdateUpgradeStrategyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUpgradeStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUpgradeStrategyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUpgradeStrategyRequestMultiError, or nil if none found.
func (m *UpdateUpgradeStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUpgradeStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateUpgradeStrategyRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateUpgradeStrategyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateUpgradeStrategyRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateUpgradeStrategyRequest_UpgradeStrategy_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := UpdateUpgradeStrategyRequestValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GracePeriodSeconds

	// no validation rules for MaxSurge

	// no validation rules for MaxUnavailable

	if len(errors) > 0 {
		return UpdateUpgradeStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateUpgradeStrategyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUpgradeStrategyRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUpgradeStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUpgradeStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUpgradeStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateUpgradeStrategyRequestValidationError is the validation error returned
// by UpdateUpgradeStrategyRequest.Validate if the designated constraints
// aren't met.
type UpdateUpgradeStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUpgradeStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUpgradeStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUpgradeStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUpgradeStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUpgradeStrategyRequestValidationError) ErrorName() string {
	return "UpdateUpgradeStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUpgradeStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUpgradeStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUpgradeStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUpgradeStrategyRequestValidationError{}

// Validate checks the field values on UpdateUpgradeStrategyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUpgradeStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUpgradeStrategyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUpgradeStrategyResponseMultiError, or nil if none found.
func (m *UpdateUpgradeStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUpgradeStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUpgradeStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateUpgradeStrategyResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUpgradeStrategyResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateUpgradeStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUpgradeStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUpgradeStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateUpgradeStrategyResponseValidationError is the validation error
// returned by UpdateUpgradeStrategyResponse.Validate if the designated
// constraints aren't met.
type UpdateUpgradeStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUpgradeStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUpgradeStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUpgradeStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUpgradeStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUpgradeStrategyResponseValidationError) ErrorName() string {
	return "UpdateUpgradeStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUpgradeStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUpgradeStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUpgradeStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUpgradeStrategyResponseValidationError{}

// Validate checks the field values on ListCloneSetReversionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloneSetReversionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloneSetReversionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloneSetReversionRequestMultiError, or nil if none found.
func (m *ListCloneSetReversionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloneSetReversionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListCloneSetReversionRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ListCloneSetReversionRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListCloneSetReversionRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCloneSetReversionRequestMultiError(errors)
	}

	return nil
}

// ListCloneSetReversionRequestMultiError is an error wrapping multiple
// validation errors returned by ListCloneSetReversionRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCloneSetReversionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloneSetReversionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloneSetReversionRequestMultiError) AllErrors() []error { return m }

// ListCloneSetReversionRequestValidationError is the validation error returned
// by ListCloneSetReversionRequest.Validate if the designated constraints
// aren't met.
type ListCloneSetReversionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloneSetReversionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloneSetReversionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloneSetReversionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloneSetReversionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloneSetReversionRequestValidationError) ErrorName() string {
	return "ListCloneSetReversionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloneSetReversionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloneSetReversionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloneSetReversionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloneSetReversionRequestValidationError{}

// Validate checks the field values on CloneSetControllerReversionItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneSetControllerReversionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneSetControllerReversionItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloneSetControllerReversionItemMultiError, or nil if none found.
func (m *CloneSetControllerReversionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneSetControllerReversionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Yaml

	// no validation rules for CreateTime

	// no validation rules for IsCurrent

	if len(errors) > 0 {
		return CloneSetControllerReversionItemMultiError(errors)
	}

	return nil
}

// CloneSetControllerReversionItemMultiError is an error wrapping multiple
// validation errors returned by CloneSetControllerReversionItem.ValidateAll()
// if the designated constraints aren't met.
type CloneSetControllerReversionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneSetControllerReversionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneSetControllerReversionItemMultiError) AllErrors() []error { return m }

// CloneSetControllerReversionItemValidationError is the validation error
// returned by CloneSetControllerReversionItem.Validate if the designated
// constraints aren't met.
type CloneSetControllerReversionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneSetControllerReversionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneSetControllerReversionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneSetControllerReversionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneSetControllerReversionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneSetControllerReversionItemValidationError) ErrorName() string {
	return "CloneSetControllerReversionItemValidationError"
}

// Error satisfies the builtin error interface
func (e CloneSetControllerReversionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneSetControllerReversionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneSetControllerReversionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneSetControllerReversionItemValidationError{}

// Validate checks the field values on ListCloneSetReversionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloneSetReversionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloneSetReversionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCloneSetReversionResponseMultiError, or nil if none found.
func (m *ListCloneSetReversionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloneSetReversionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloneSetReversionResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloneSetReversionResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloneSetReversionResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListCloneSetReversionResponseMultiError(errors)
	}

	return nil
}

// ListCloneSetReversionResponseMultiError is an error wrapping multiple
// validation errors returned by ListCloneSetReversionResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCloneSetReversionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloneSetReversionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloneSetReversionResponseMultiError) AllErrors() []error { return m }

// ListCloneSetReversionResponseValidationError is the validation error
// returned by ListCloneSetReversionResponse.Validate if the designated
// constraints aren't met.
type ListCloneSetReversionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloneSetReversionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloneSetReversionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloneSetReversionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloneSetReversionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloneSetReversionResponseValidationError) ErrorName() string {
	return "ListCloneSetReversionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloneSetReversionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloneSetReversionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloneSetReversionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloneSetReversionResponseValidationError{}
