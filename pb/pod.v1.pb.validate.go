// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/pod.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListPodRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPodRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPodRequestMultiError,
// or nil if none found.
func (m *ListPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListPodRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeName()) < 1 {
		err := ListPodRequestValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListPodRequestMultiError(errors)
	}

	return nil
}

// ListPodRequestMultiError is an error wrapping multiple validation errors
// returned by ListPodRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPodRequestMultiError) AllErrors() []error { return m }

// ListPodRequestValidationError is the validation error returned by
// ListPodRequest.Validate if the designated constraints aren't met.
type ListPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPodRequestValidationError) ErrorName() string { return "ListPodRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPodRequestValidationError{}

// Validate checks the field values on PodResourceUsage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PodResourceUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodResourceUsage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodResourceUsageMultiError, or nil if none found.
func (m *PodResourceUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *PodResourceUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuRequest

	// no validation rules for CpuLimit

	// no validation rules for MemoryRequest

	// no validation rules for MemoryLimit

	// no validation rules for EphemeralStorageRequest

	// no validation rules for EphemeralStorageLimit

	// no validation rules for TotalCpuRequest

	// no validation rules for TotalCpuLimit

	// no validation rules for TotalMemoryRequest

	// no validation rules for TotalMemoryLimit

	// no validation rules for TotalEphemeralStorageRequest

	// no validation rules for TotalEphemeralStorageLimit

	if len(errors) > 0 {
		return PodResourceUsageMultiError(errors)
	}

	return nil
}

// PodResourceUsageMultiError is an error wrapping multiple validation errors
// returned by PodResourceUsage.ValidateAll() if the designated constraints
// aren't met.
type PodResourceUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodResourceUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodResourceUsageMultiError) AllErrors() []error { return m }

// PodResourceUsageValidationError is the validation error returned by
// PodResourceUsage.Validate if the designated constraints aren't met.
type PodResourceUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodResourceUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodResourceUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodResourceUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodResourceUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodResourceUsageValidationError) ErrorName() string { return "PodResourceUsageValidationError" }

// Error satisfies the builtin error interface
func (e PodResourceUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodResourceUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodResourceUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodResourceUsageValidationError{}

// Validate checks the field values on PodItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodItemMultiError, or nil if none found.
func (m *PodItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PodItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	// no validation rules for RestartCount

	// no validation rules for CreateTime

	// no validation rules for Workload

	// no validation rules for ReadyCount

	// no validation rules for IsFollowed

	if all {
		switch v := interface{}(m.GetResourceUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodItemValidationError{
					field:  "ResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodItemValidationError{
					field:  "ResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodItemValidationError{
				field:  "ResourceUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PodItemMultiError(errors)
	}

	return nil
}

// PodItemMultiError is an error wrapping multiple validation errors returned
// by PodItem.ValidateAll() if the designated constraints aren't met.
type PodItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodItemMultiError) AllErrors() []error { return m }

// PodItemValidationError is the validation error returned by PodItem.Validate
// if the designated constraints aren't met.
type PodItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodItemValidationError) ErrorName() string { return "PodItemValidationError" }

// Error satisfies the builtin error interface
func (e PodItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodItemValidationError{}

// Validate checks the field values on ListControllerPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListControllerPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListControllerPodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListControllerPodRequestMultiError, or nil if none found.
func (m *ListControllerPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListControllerPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListControllerPodRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetControllerName()) < 1 {
		err := ListControllerPodRequestValidationError{
			field:  "ControllerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if _, ok := ListControllerPodRequest_ControllerType_name[int32(m.GetControllerType())]; !ok {
		err := ListControllerPodRequestValidationError{
			field:  "ControllerType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListControllerPodRequestMultiError(errors)
	}

	return nil
}

// ListControllerPodRequestMultiError is an error wrapping multiple validation
// errors returned by ListControllerPodRequest.ValidateAll() if the designated
// constraints aren't met.
type ListControllerPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListControllerPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListControllerPodRequestMultiError) AllErrors() []error { return m }

// ListControllerPodRequestValidationError is the validation error returned by
// ListControllerPodRequest.Validate if the designated constraints aren't met.
type ListControllerPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListControllerPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListControllerPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListControllerPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListControllerPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListControllerPodRequestValidationError) ErrorName() string {
	return "ListControllerPodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListControllerPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListControllerPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListControllerPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListControllerPodRequestValidationError{}

// Validate checks the field values on ListControllerPodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListControllerPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListControllerPodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListControllerPodResponseMultiError, or nil if none found.
func (m *ListControllerPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListControllerPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListControllerPodResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListControllerPodResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListControllerPodResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListControllerPodResponseMultiError(errors)
	}

	return nil
}

// ListControllerPodResponseMultiError is an error wrapping multiple validation
// errors returned by ListControllerPodResponse.ValidateAll() if the
// designated constraints aren't met.
type ListControllerPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListControllerPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListControllerPodResponseMultiError) AllErrors() []error { return m }

// ListControllerPodResponseValidationError is the validation error returned by
// ListControllerPodResponse.Validate if the designated constraints aren't met.
type ListControllerPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListControllerPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListControllerPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListControllerPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListControllerPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListControllerPodResponseValidationError) ErrorName() string {
	return "ListControllerPodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListControllerPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListControllerPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListControllerPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListControllerPodResponseValidationError{}

// Validate checks the field values on ControllerPodItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ControllerPodItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControllerPodItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ControllerPodItemMultiError, or nil if none found.
func (m *ControllerPodItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ControllerPodItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for PodIp

	// no validation rules for NodeIp

	// no validation rules for CreateTime

	for idx, item := range m.GetPodConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControllerPodItemValidationError{
						field:  fmt.Sprintf("PodConditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControllerPodItemValidationError{
						field:  fmt.Sprintf("PodConditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControllerPodItemValidationError{
					field:  fmt.Sprintf("PodConditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControllerPodItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControllerPodItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControllerPodItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NodeName

	// no validation rules for Yaml

	// no validation rules for IsReady

	// no validation rules for Workload

	// no validation rules for WorkloadType

	// no validation rules for Namespace

	if len(errors) > 0 {
		return ControllerPodItemMultiError(errors)
	}

	return nil
}

// ControllerPodItemMultiError is an error wrapping multiple validation errors
// returned by ControllerPodItem.ValidateAll() if the designated constraints
// aren't met.
type ControllerPodItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControllerPodItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControllerPodItemMultiError) AllErrors() []error { return m }

// ControllerPodItemValidationError is the validation error returned by
// ControllerPodItem.Validate if the designated constraints aren't met.
type ControllerPodItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControllerPodItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControllerPodItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControllerPodItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControllerPodItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControllerPodItemValidationError) ErrorName() string {
	return "ControllerPodItemValidationError"
}

// Error satisfies the builtin error interface
func (e ControllerPodItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControllerPodItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControllerPodItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControllerPodItemValidationError{}

// Validate checks the field values on PodCondition with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodCondition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodConditionMultiError, or
// nil if none found.
func (m *PodCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *PodCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastProbeTime

	// no validation rules for LastTransitionTime

	if m.Reason != nil {
		// no validation rules for Reason
	}

	if m.Message != nil {
		// no validation rules for Message
	}

	if len(errors) > 0 {
		return PodConditionMultiError(errors)
	}

	return nil
}

// PodConditionMultiError is an error wrapping multiple validation errors
// returned by PodCondition.ValidateAll() if the designated constraints aren't met.
type PodConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodConditionMultiError) AllErrors() []error { return m }

// PodConditionValidationError is the validation error returned by
// PodCondition.Validate if the designated constraints aren't met.
type PodConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodConditionValidationError) ErrorName() string { return "PodConditionValidationError" }

// Error satisfies the builtin error interface
func (e PodConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodConditionValidationError{}

// Validate checks the field values on ContainerVolumeMount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerVolumeMount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerVolumeMount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerVolumeMountMultiError, or nil if none found.
func (m *ContainerVolumeMount) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerVolumeMount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for ReadOnly

	if len(errors) > 0 {
		return ContainerVolumeMountMultiError(errors)
	}

	return nil
}

// ContainerVolumeMountMultiError is an error wrapping multiple validation
// errors returned by ContainerVolumeMount.ValidateAll() if the designated
// constraints aren't met.
type ContainerVolumeMountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerVolumeMountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerVolumeMountMultiError) AllErrors() []error { return m }

// ContainerVolumeMountValidationError is the validation error returned by
// ContainerVolumeMount.Validate if the designated constraints aren't met.
type ContainerVolumeMountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerVolumeMountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerVolumeMountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerVolumeMountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerVolumeMountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerVolumeMountValidationError) ErrorName() string {
	return "ContainerVolumeMountValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerVolumeMountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerVolumeMount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerVolumeMountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerVolumeMountValidationError{}

// Validate checks the field values on ResourceRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceRequirements) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceRequirements with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceRequirementsMultiError, or nil if none found.
func (m *ResourceRequirements) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceRequirements) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limits

	// no validation rules for Requests

	if len(errors) > 0 {
		return ResourceRequirementsMultiError(errors)
	}

	return nil
}

// ResourceRequirementsMultiError is an error wrapping multiple validation
// errors returned by ResourceRequirements.ValidateAll() if the designated
// constraints aren't met.
type ResourceRequirementsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceRequirementsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceRequirementsMultiError) AllErrors() []error { return m }

// ResourceRequirementsValidationError is the validation error returned by
// ResourceRequirements.Validate if the designated constraints aren't met.
type ResourceRequirementsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceRequirementsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceRequirementsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceRequirementsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceRequirementsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceRequirementsValidationError) ErrorName() string {
	return "ResourceRequirementsValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceRequirementsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceRequirements.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceRequirementsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceRequirementsValidationError{}

// Validate checks the field values on ContainerState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerStateMultiError,
// or nil if none found.
func (m *ContainerState) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWaiting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerStateValidationError{
					field:  "Waiting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerStateValidationError{
					field:  "Waiting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaiting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerStateValidationError{
				field:  "Waiting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRunning()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerStateValidationError{
					field:  "Running",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerStateValidationError{
					field:  "Running",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRunning()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerStateValidationError{
				field:  "Running",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTerminated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerStateValidationError{
					field:  "Terminated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerStateValidationError{
					field:  "Terminated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTerminated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerStateValidationError{
				field:  "Terminated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContainerStateMultiError(errors)
	}

	return nil
}

// ContainerStateMultiError is an error wrapping multiple validation errors
// returned by ContainerState.ValidateAll() if the designated constraints
// aren't met.
type ContainerStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStateMultiError) AllErrors() []error { return m }

// ContainerStateValidationError is the validation error returned by
// ContainerState.Validate if the designated constraints aren't met.
type ContainerStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStateValidationError) ErrorName() string { return "ContainerStateValidationError" }

// Error satisfies the builtin error interface
func (e ContainerStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStateValidationError{}

// Validate checks the field values on ContainerStateRunning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerStateRunning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStateRunning with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerStateRunningMultiError, or nil if none found.
func (m *ContainerStateRunning) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStateRunning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartedAt

	if len(errors) > 0 {
		return ContainerStateRunningMultiError(errors)
	}

	return nil
}

// ContainerStateRunningMultiError is an error wrapping multiple validation
// errors returned by ContainerStateRunning.ValidateAll() if the designated
// constraints aren't met.
type ContainerStateRunningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStateRunningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStateRunningMultiError) AllErrors() []error { return m }

// ContainerStateRunningValidationError is the validation error returned by
// ContainerStateRunning.Validate if the designated constraints aren't met.
type ContainerStateRunningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStateRunningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStateRunningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStateRunningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStateRunningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStateRunningValidationError) ErrorName() string {
	return "ContainerStateRunningValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerStateRunningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStateRunning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStateRunningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStateRunningValidationError{}

// Validate checks the field values on ContainerStateTerminated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerStateTerminated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStateTerminated with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerStateTerminatedMultiError, or nil if none found.
func (m *ContainerStateTerminated) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStateTerminated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExitCode

	// no validation rules for Signal

	// no validation rules for Reason

	// no validation rules for Message

	// no validation rules for StartedAt

	// no validation rules for FinishedAt

	// no validation rules for ContainerID

	if len(errors) > 0 {
		return ContainerStateTerminatedMultiError(errors)
	}

	return nil
}

// ContainerStateTerminatedMultiError is an error wrapping multiple validation
// errors returned by ContainerStateTerminated.ValidateAll() if the designated
// constraints aren't met.
type ContainerStateTerminatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStateTerminatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStateTerminatedMultiError) AllErrors() []error { return m }

// ContainerStateTerminatedValidationError is the validation error returned by
// ContainerStateTerminated.Validate if the designated constraints aren't met.
type ContainerStateTerminatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStateTerminatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStateTerminatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStateTerminatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStateTerminatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStateTerminatedValidationError) ErrorName() string {
	return "ContainerStateTerminatedValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerStateTerminatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStateTerminated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStateTerminatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStateTerminatedValidationError{}

// Validate checks the field values on ContainerStateWaiting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContainerStateWaiting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStateWaiting with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerStateWaitingMultiError, or nil if none found.
func (m *ContainerStateWaiting) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStateWaiting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return ContainerStateWaitingMultiError(errors)
	}

	return nil
}

// ContainerStateWaitingMultiError is an error wrapping multiple validation
// errors returned by ContainerStateWaiting.ValidateAll() if the designated
// constraints aren't met.
type ContainerStateWaitingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStateWaitingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStateWaitingMultiError) AllErrors() []error { return m }

// ContainerStateWaitingValidationError is the validation error returned by
// ContainerStateWaiting.Validate if the designated constraints aren't met.
type ContainerStateWaitingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStateWaitingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStateWaitingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStateWaitingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStateWaitingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStateWaitingValidationError) ErrorName() string {
	return "ContainerStateWaitingValidationError"
}

// Error satisfies the builtin error interface
func (e ContainerStateWaitingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStateWaiting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStateWaitingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStateWaitingValidationError{}

// Validate checks the field values on ContainerStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContainerStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContainerStatusMultiError, or nil if none found.
func (m *ContainerStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerStatusValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerStatusValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerStatusValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerStatusValidationError{
					field:  "LastState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerStatusValidationError{
					field:  "LastState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerStatusValidationError{
				field:  "LastState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Ready

	// no validation rules for RestartCount

	// no validation rules for Image

	// no validation rules for ImageID

	// no validation rules for ContainerID

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerStatusValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerStatusValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerStatusValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Started != nil {
		// no validation rules for Started
	}

	if len(errors) > 0 {
		return ContainerStatusMultiError(errors)
	}

	return nil
}

// ContainerStatusMultiError is an error wrapping multiple validation errors
// returned by ContainerStatus.ValidateAll() if the designated constraints
// aren't met.
type ContainerStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerStatusMultiError) AllErrors() []error { return m }

// ContainerStatusValidationError is the validation error returned by
// ContainerStatus.Validate if the designated constraints aren't met.
type ContainerStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerStatusValidationError) ErrorName() string { return "ContainerStatusValidationError" }

// Error satisfies the builtin error interface
func (e ContainerStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerStatusValidationError{}

// Validate checks the field values on PodContainerDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PodContainerDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodContainerDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodContainerDetailMultiError, or nil if none found.
func (m *PodContainerDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *PodContainerDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContainerName

	// no validation rules for ContainerId

	// no validation rules for Image

	// no validation rules for ImagePullPolicy

	// no validation rules for RestartCount

	if all {
		switch v := interface{}(m.GetResources()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodContainerDetailValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodContainerDetailValidationError{
					field:  "Resources",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResources()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodContainerDetailValidationError{
				field:  "Resources",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEnv() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodContainerDetailValidationError{
						field:  fmt.Sprintf("Env[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodContainerDetailValidationError{
						field:  fmt.Sprintf("Env[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodContainerDetailValidationError{
					field:  fmt.Sprintf("Env[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodContainerDetailValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodContainerDetailValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodContainerDetailValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVolumeMounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodContainerDetailValidationError{
						field:  fmt.Sprintf("VolumeMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodContainerDetailValidationError{
						field:  fmt.Sprintf("VolumeMounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodContainerDetailValidationError{
					field:  fmt.Sprintf("VolumeMounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodContainerDetailValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodContainerDetailValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodContainerDetailValidationError{
				field:  "Usage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodContainerDetailValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodContainerDetailValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodContainerDetailValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LivenessProbe

	// no validation rules for ReadinessProbe

	// no validation rules for StartupProbe

	if len(errors) > 0 {
		return PodContainerDetailMultiError(errors)
	}

	return nil
}

// PodContainerDetailMultiError is an error wrapping multiple validation errors
// returned by PodContainerDetail.ValidateAll() if the designated constraints
// aren't met.
type PodContainerDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodContainerDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodContainerDetailMultiError) AllErrors() []error { return m }

// PodContainerDetailValidationError is the validation error returned by
// PodContainerDetail.Validate if the designated constraints aren't met.
type PodContainerDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodContainerDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodContainerDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodContainerDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodContainerDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodContainerDetailValidationError) ErrorName() string {
	return "PodContainerDetailValidationError"
}

// Error satisfies the builtin error interface
func (e PodContainerDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodContainerDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodContainerDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodContainerDetailValidationError{}

// Validate checks the field values on ContainerUsage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerUsage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerUsageMultiError,
// or nil if none found.
func (m *ContainerUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for CpuUnit

	// no validation rules for Memory

	// no validation rules for MemoryUnit

	if len(errors) > 0 {
		return ContainerUsageMultiError(errors)
	}

	return nil
}

// ContainerUsageMultiError is an error wrapping multiple validation errors
// returned by ContainerUsage.ValidateAll() if the designated constraints
// aren't met.
type ContainerUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerUsageMultiError) AllErrors() []error { return m }

// ContainerUsageValidationError is the validation error returned by
// ContainerUsage.Validate if the designated constraints aren't met.
type ContainerUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerUsageValidationError) ErrorName() string { return "ContainerUsageValidationError" }

// Error satisfies the builtin error interface
func (e ContainerUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerUsageValidationError{}

// Validate checks the field values on ListPodResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPodResponseMultiError, or nil if none found.
func (m *ListPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPodResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPodResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPodResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPodResponseMultiError(errors)
	}

	return nil
}

// ListPodResponseMultiError is an error wrapping multiple validation errors
// returned by ListPodResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPodResponseMultiError) AllErrors() []error { return m }

// ListPodResponseValidationError is the validation error returned by
// ListPodResponse.Validate if the designated constraints aren't met.
type ListPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPodResponseValidationError) ErrorName() string { return "ListPodResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPodResponseValidationError{}

// Validate checks the field values on GetPodMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPodMetricsRequestMultiError, or nil if none found.
func (m *GetPodMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetPodMetricsRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetPodMetricsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PodName

	if m.GetTime() <= 0 {
		err := GetPodMetricsRequestValidationError{
			field:  "Time",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPodMetricsRequestMultiError(errors)
	}

	return nil
}

// GetPodMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPodMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPodMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodMetricsRequestMultiError) AllErrors() []error { return m }

// GetPodMetricsRequestValidationError is the validation error returned by
// GetPodMetricsRequest.Validate if the designated constraints aren't met.
type GetPodMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodMetricsRequestValidationError) ErrorName() string {
	return "GetPodMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodMetricsRequestValidationError{}

// Validate checks the field values on DataPoint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataPoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataPointMultiError, or nil
// if none found.
func (m *DataPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *DataPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	if len(errors) > 0 {
		return DataPointMultiError(errors)
	}

	return nil
}

// DataPointMultiError is an error wrapping multiple validation errors returned
// by DataPoint.ValidateAll() if the designated constraints aren't met.
type DataPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataPointMultiError) AllErrors() []error { return m }

// DataPointValidationError is the validation error returned by
// DataPoint.Validate if the designated constraints aren't met.
type DataPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataPointValidationError) ErrorName() string { return "DataPointValidationError" }

// Error satisfies the builtin error interface
func (e DataPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataPointValidationError{}

// Validate checks the field values on MetricPoint with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricPoint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricPointMultiError, or
// nil if none found.
func (m *MetricPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Value

	if len(errors) > 0 {
		return MetricPointMultiError(errors)
	}

	return nil
}

// MetricPointMultiError is an error wrapping multiple validation errors
// returned by MetricPoint.ValidateAll() if the designated constraints aren't met.
type MetricPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricPointMultiError) AllErrors() []error { return m }

// MetricPointValidationError is the validation error returned by
// MetricPoint.Validate if the designated constraints aren't met.
type MetricPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricPointValidationError) ErrorName() string { return "MetricPointValidationError" }

// Error satisfies the builtin error interface
func (e MetricPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricPointValidationError{}

// Validate checks the field values on SidecarMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SidecarMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SidecarMetric with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SidecarMetricMultiError, or
// nil if none found.
func (m *SidecarMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *SidecarMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SidecarMetricValidationError{
						field:  fmt.Sprintf("DataPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SidecarMetricValidationError{
						field:  fmt.Sprintf("DataPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SidecarMetricValidationError{
					field:  fmt.Sprintf("DataPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMetricPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SidecarMetricValidationError{
						field:  fmt.Sprintf("MetricPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SidecarMetricValidationError{
						field:  fmt.Sprintf("MetricPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SidecarMetricValidationError{
					field:  fmt.Sprintf("MetricPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MetricName

	if len(errors) > 0 {
		return SidecarMetricMultiError(errors)
	}

	return nil
}

// SidecarMetricMultiError is an error wrapping multiple validation errors
// returned by SidecarMetric.ValidateAll() if the designated constraints
// aren't met.
type SidecarMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SidecarMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SidecarMetricMultiError) AllErrors() []error { return m }

// SidecarMetricValidationError is the validation error returned by
// SidecarMetric.Validate if the designated constraints aren't met.
type SidecarMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SidecarMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SidecarMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SidecarMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SidecarMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SidecarMetricValidationError) ErrorName() string { return "SidecarMetricValidationError" }

// Error satisfies the builtin error interface
func (e SidecarMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSidecarMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SidecarMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SidecarMetricValidationError{}

// Validate checks the field values on SidecarMetricResultList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SidecarMetricResultList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SidecarMetricResultList with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SidecarMetricResultListMultiError, or nil if none found.
func (m *SidecarMetricResultList) ValidateAll() error {
	return m.validate(true)
}

func (m *SidecarMetricResultList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SidecarMetricResultListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SidecarMetricResultListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SidecarMetricResultListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SidecarMetricResultListMultiError(errors)
	}

	return nil
}

// SidecarMetricResultListMultiError is an error wrapping multiple validation
// errors returned by SidecarMetricResultList.ValidateAll() if the designated
// constraints aren't met.
type SidecarMetricResultListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SidecarMetricResultListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SidecarMetricResultListMultiError) AllErrors() []error { return m }

// SidecarMetricResultListValidationError is the validation error returned by
// SidecarMetricResultList.Validate if the designated constraints aren't met.
type SidecarMetricResultListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SidecarMetricResultListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SidecarMetricResultListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SidecarMetricResultListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SidecarMetricResultListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SidecarMetricResultListValidationError) ErrorName() string {
	return "SidecarMetricResultListValidationError"
}

// Error satisfies the builtin error interface
func (e SidecarMetricResultListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSidecarMetricResultList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SidecarMetricResultListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SidecarMetricResultListValidationError{}

// Validate checks the field values on GetPodContainerMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodContainerMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodContainerMetricsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPodContainerMetricsRequestMultiError, or nil if none found.
func (m *GetPodContainerMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodContainerMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetPodContainerMetricsRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetPodContainerMetricsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := GetPodContainerMetricsRequestValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContainerName()) < 1 {
		err := GetPodContainerMetricsRequestValidationError{
			field:  "ContainerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPodContainerMetricsRequestMultiError(errors)
	}

	return nil
}

// GetPodContainerMetricsRequestMultiError is an error wrapping multiple
// validation errors returned by GetPodContainerMetricsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPodContainerMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodContainerMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodContainerMetricsRequestMultiError) AllErrors() []error { return m }

// GetPodContainerMetricsRequestValidationError is the validation error
// returned by GetPodContainerMetricsRequest.Validate if the designated
// constraints aren't met.
type GetPodContainerMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodContainerMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodContainerMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodContainerMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodContainerMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodContainerMetricsRequestValidationError) ErrorName() string {
	return "GetPodContainerMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodContainerMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodContainerMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodContainerMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodContainerMetricsRequestValidationError{}

// Validate checks the field values on GetPodContainerMetricsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPodContainerMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPodContainerMetricsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPodContainerMetricsResponseMultiError, or nil if none found.
func (m *GetPodContainerMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPodContainerMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetrics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPodContainerMetricsResponseValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPodContainerMetricsResponseValidationError{
					field:  "Metrics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetrics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPodContainerMetricsResponseValidationError{
				field:  "Metrics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPodContainerMetricsResponseMultiError(errors)
	}

	return nil
}

// GetPodContainerMetricsResponseMultiError is an error wrapping multiple
// validation errors returned by GetPodContainerMetricsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPodContainerMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPodContainerMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPodContainerMetricsResponseMultiError) AllErrors() []error { return m }

// GetPodContainerMetricsResponseValidationError is the validation error
// returned by GetPodContainerMetricsResponse.Validate if the designated
// constraints aren't met.
type GetPodContainerMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPodContainerMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPodContainerMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPodContainerMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPodContainerMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPodContainerMetricsResponseValidationError) ErrorName() string {
	return "GetPodContainerMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPodContainerMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPodContainerMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPodContainerMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPodContainerMetricsResponseValidationError{}

// Validate checks the field values on DeletePodRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePodRequestMultiError, or nil if none found.
func (m *DeletePodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeletePodRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeletePodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := DeletePodRequestValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePodRequestMultiError(errors)
	}

	return nil
}

// DeletePodRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePodRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePodRequestMultiError) AllErrors() []error { return m }

// DeletePodRequestValidationError is the validation error returned by
// DeletePodRequest.Validate if the designated constraints aren't met.
type DeletePodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePodRequestValidationError) ErrorName() string { return "DeletePodRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeletePodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePodRequestValidationError{}

// Validate checks the field values on DeletePodResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePodResponseMultiError, or nil if none found.
func (m *DeletePodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DeletePodResponseMultiError(errors)
	}

	return nil
}

// DeletePodResponseMultiError is an error wrapping multiple validation errors
// returned by DeletePodResponse.ValidateAll() if the designated constraints
// aren't met.
type DeletePodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePodResponseMultiError) AllErrors() []error { return m }

// DeletePodResponseValidationError is the validation error returned by
// DeletePodResponse.Validate if the designated constraints aren't met.
type DeletePodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePodResponseValidationError) ErrorName() string {
	return "DeletePodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePodResponseValidationError{}

// Validate checks the field values on DownloadPodLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadPodLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadPodLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadPodLogsRequestMultiError, or nil if none found.
func (m *DownloadPodLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadPodLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DownloadPodLogsRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DownloadPodLogsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := DownloadPodLogsRequestValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContainerName()) < 1 {
		err := DownloadPodLogsRequestValidationError{
			field:  "ContainerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartTime() <= 0 {
		err := DownloadPodLogsRequestValidationError{
			field:  "StartTime",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DownloadPodLogsRequestMultiError(errors)
	}

	return nil
}

// DownloadPodLogsRequestMultiError is an error wrapping multiple validation
// errors returned by DownloadPodLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type DownloadPodLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadPodLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadPodLogsRequestMultiError) AllErrors() []error { return m }

// DownloadPodLogsRequestValidationError is the validation error returned by
// DownloadPodLogsRequest.Validate if the designated constraints aren't met.
type DownloadPodLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadPodLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadPodLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadPodLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadPodLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadPodLogsRequestValidationError) ErrorName() string {
	return "DownloadPodLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadPodLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadPodLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadPodLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadPodLogsRequestValidationError{}

// Validate checks the field values on DownloadPodLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadPodLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadPodLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadPodLogsResponseMultiError, or nil if none found.
func (m *DownloadPodLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadPodLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return DownloadPodLogsResponseMultiError(errors)
	}

	return nil
}

// DownloadPodLogsResponseMultiError is an error wrapping multiple validation
// errors returned by DownloadPodLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type DownloadPodLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadPodLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadPodLogsResponseMultiError) AllErrors() []error { return m }

// DownloadPodLogsResponseValidationError is the validation error returned by
// DownloadPodLogsResponse.Validate if the designated constraints aren't met.
type DownloadPodLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadPodLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadPodLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadPodLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadPodLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadPodLogsResponseValidationError) ErrorName() string {
	return "DownloadPodLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadPodLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadPodLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadPodLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadPodLogsResponseValidationError{}

// Validate checks the field values on PodHealth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodHealth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodHealth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodHealthMultiError, or nil
// if none found.
func (m *PodHealth) ValidateAll() error {
	return m.validate(true)
}

func (m *PodHealth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastTransitionTime

	// no validation rules for Reason

	// no validation rules for Message

	if m.LastProbeTime != nil {
		// no validation rules for LastProbeTime
	}

	if len(errors) > 0 {
		return PodHealthMultiError(errors)
	}

	return nil
}

// PodHealthMultiError is an error wrapping multiple validation errors returned
// by PodHealth.ValidateAll() if the designated constraints aren't met.
type PodHealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodHealthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodHealthMultiError) AllErrors() []error { return m }

// PodHealthValidationError is the validation error returned by
// PodHealth.Validate if the designated constraints aren't met.
type PodHealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodHealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodHealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodHealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodHealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodHealthValidationError) ErrorName() string { return "PodHealthValidationError" }

// Error satisfies the builtin error interface
func (e PodHealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodHealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodHealthValidationError{}

// Validate checks the field values on NamespacePodItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NamespacePodItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NamespacePodItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NamespacePodItemMultiError, or nil if none found.
func (m *NamespacePodItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NamespacePodItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NamespacePodItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NamespacePodItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespacePodItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	// no validation rules for RestartCount

	// no validation rules for CreateTime

	// no validation rules for Workload

	// no validation rules for ReadyCount

	// no validation rules for NodeIp

	// no validation rules for PodIp

	// no validation rules for Labels

	// no validation rules for Yaml

	// no validation rules for ContainerCount

	// no validation rules for IsFollowed

	// no validation rules for Reason

	// no validation rules for Annotations

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NamespacePodItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NamespacePodItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NamespacePodItemValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NamespacePodItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NamespacePodItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NamespacePodItemValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NamespacePodItemMultiError(errors)
	}

	return nil
}

// NamespacePodItemMultiError is an error wrapping multiple validation errors
// returned by NamespacePodItem.ValidateAll() if the designated constraints
// aren't met.
type NamespacePodItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NamespacePodItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NamespacePodItemMultiError) AllErrors() []error { return m }

// NamespacePodItemValidationError is the validation error returned by
// NamespacePodItem.Validate if the designated constraints aren't met.
type NamespacePodItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespacePodItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespacePodItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespacePodItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespacePodItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespacePodItemValidationError) ErrorName() string { return "NamespacePodItemValidationError" }

// Error satisfies the builtin error interface
func (e NamespacePodItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespacePodItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespacePodItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespacePodItemValidationError{}

// Validate checks the field values on ListPodByNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPodByNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPodByNamespaceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPodByNamespaceRequestMultiError, or nil if none found.
func (m *ListPodByNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPodByNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListPodByNamespaceRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListPodByNamespaceRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListPodByNamespaceRequestMultiError(errors)
	}

	return nil
}

// ListPodByNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by ListPodByNamespaceRequest.ValidateAll() if the
// designated constraints aren't met.
type ListPodByNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPodByNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPodByNamespaceRequestMultiError) AllErrors() []error { return m }

// ListPodByNamespaceRequestValidationError is the validation error returned by
// ListPodByNamespaceRequest.Validate if the designated constraints aren't met.
type ListPodByNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPodByNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPodByNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPodByNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPodByNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPodByNamespaceRequestValidationError) ErrorName() string {
	return "ListPodByNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPodByNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPodByNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPodByNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPodByNamespaceRequestValidationError{}

// Validate checks the field values on ListPodByNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPodByNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPodByNamespaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPodByNamespaceResponseMultiError, or nil if none found.
func (m *ListPodByNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPodByNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPodByNamespaceResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPodByNamespaceResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPodByNamespaceResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPodByNamespaceResponseMultiError(errors)
	}

	return nil
}

// ListPodByNamespaceResponseMultiError is an error wrapping multiple
// validation errors returned by ListPodByNamespaceResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPodByNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPodByNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPodByNamespaceResponseMultiError) AllErrors() []error { return m }

// ListPodByNamespaceResponseValidationError is the validation error returned
// by ListPodByNamespaceResponse.Validate if the designated constraints aren't met.
type ListPodByNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPodByNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPodByNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPodByNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPodByNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPodByNamespaceResponseValidationError) ErrorName() string {
	return "ListPodByNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPodByNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPodByNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPodByNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPodByNamespaceResponseValidationError{}

// Validate checks the field values on GetNamespacePodDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespacePodDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespacePodDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespacePodDetailRequestMultiError, or nil if none found.
func (m *GetNamespacePodDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespacePodDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetNamespacePodDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetNamespacePodDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetNamespacePodDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNamespacePodDetailRequestMultiError(errors)
	}

	return nil
}

// GetNamespacePodDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetNamespacePodDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNamespacePodDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespacePodDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespacePodDetailRequestMultiError) AllErrors() []error { return m }

// GetNamespacePodDetailRequestValidationError is the validation error returned
// by GetNamespacePodDetailRequest.Validate if the designated constraints
// aren't met.
type GetNamespacePodDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespacePodDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespacePodDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespacePodDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespacePodDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespacePodDetailRequestValidationError) ErrorName() string {
	return "GetNamespacePodDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespacePodDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespacePodDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespacePodDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespacePodDetailRequestValidationError{}

// Validate checks the field values on GetNamespacePodDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespacePodDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespacePodDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetNamespacePodDetailResponseMultiError, or nil if none found.
func (m *GetNamespacePodDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespacePodDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespacePodDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespacePodDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespacePodDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespacePodDetailResponseMultiError(errors)
	}

	return nil
}

// GetNamespacePodDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetNamespacePodDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type GetNamespacePodDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespacePodDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespacePodDetailResponseMultiError) AllErrors() []error { return m }

// GetNamespacePodDetailResponseValidationError is the validation error
// returned by GetNamespacePodDetailResponse.Validate if the designated
// constraints aren't met.
type GetNamespacePodDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespacePodDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespacePodDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespacePodDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespacePodDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespacePodDetailResponseValidationError) ErrorName() string {
	return "GetNamespacePodDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespacePodDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespacePodDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespacePodDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespacePodDetailResponseValidationError{}

// Validate checks the field values on CreateOrUpdatePodByYamlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdatePodByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdatePodByYamlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdatePodByYamlRequestMultiError, or nil if none found.
func (m *CreateOrUpdatePodByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdatePodByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateOrUpdatePodByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Yaml

	if len(errors) > 0 {
		return CreateOrUpdatePodByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdatePodByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdatePodByYamlRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdatePodByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdatePodByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdatePodByYamlRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdatePodByYamlRequestValidationError is the validation error
// returned by CreateOrUpdatePodByYamlRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdatePodByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdatePodByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdatePodByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdatePodByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdatePodByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdatePodByYamlRequestValidationError) ErrorName() string {
	return "CreateOrUpdatePodByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdatePodByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdatePodByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdatePodByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdatePodByYamlRequestValidationError{}

// Validate checks the field values on CreateOrUpdatePodByYamlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdatePodByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdatePodByYamlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdatePodByYamlResponseMultiError, or nil if none found.
func (m *CreateOrUpdatePodByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdatePodByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CreateOrUpdatePodByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdatePodByYamlResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdatePodByYamlResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdatePodByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdatePodByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdatePodByYamlResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdatePodByYamlResponseValidationError is the validation error
// returned by CreateOrUpdatePodByYamlResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdatePodByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdatePodByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdatePodByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdatePodByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdatePodByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdatePodByYamlResponseValidationError) ErrorName() string {
	return "CreateOrUpdatePodByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdatePodByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdatePodByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdatePodByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdatePodByYamlResponseValidationError{}

// Validate checks the field values on BatchDeletePodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeletePodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeletePodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeletePodsRequestMultiError, or nil if none found.
func (m *BatchDeletePodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeletePodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := BatchDeletePodsRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := BatchDeletePodsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPodNames()) < 1 {
		err := BatchDeletePodsRequestValidationError{
			field:  "PodNames",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatchDeletePodsRequestMultiError(errors)
	}

	return nil
}

// BatchDeletePodsRequestMultiError is an error wrapping multiple validation
// errors returned by BatchDeletePodsRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchDeletePodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeletePodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeletePodsRequestMultiError) AllErrors() []error { return m }

// BatchDeletePodsRequestValidationError is the validation error returned by
// BatchDeletePodsRequest.Validate if the designated constraints aren't met.
type BatchDeletePodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeletePodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeletePodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeletePodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeletePodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeletePodsRequestValidationError) ErrorName() string {
	return "BatchDeletePodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeletePodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeletePodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeletePodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeletePodsRequestValidationError{}

// Validate checks the field values on BatchDeletePodsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchDeletePodsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchDeletePodsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchDeletePodsResponseMultiError, or nil if none found.
func (m *BatchDeletePodsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchDeletePodsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchDeletePodsResponseMultiError(errors)
	}

	return nil
}

// BatchDeletePodsResponseMultiError is an error wrapping multiple validation
// errors returned by BatchDeletePodsResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchDeletePodsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchDeletePodsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchDeletePodsResponseMultiError) AllErrors() []error { return m }

// BatchDeletePodsResponseValidationError is the validation error returned by
// BatchDeletePodsResponse.Validate if the designated constraints aren't met.
type BatchDeletePodsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchDeletePodsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchDeletePodsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchDeletePodsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchDeletePodsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchDeletePodsResponseValidationError) ErrorName() string {
	return "BatchDeletePodsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchDeletePodsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchDeletePodsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchDeletePodsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchDeletePodsResponseValidationError{}

// Validate checks the field values on EvictPodRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EvictPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvictPodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvictPodRequestMultiError, or nil if none found.
func (m *EvictPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EvictPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := EvictPodRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := EvictPodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := EvictPodRequestValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeName()) < 1 {
		err := EvictPodRequestValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	// no validation rules for GracePeriodSeconds

	if len(errors) > 0 {
		return EvictPodRequestMultiError(errors)
	}

	return nil
}

// EvictPodRequestMultiError is an error wrapping multiple validation errors
// returned by EvictPodRequest.ValidateAll() if the designated constraints
// aren't met.
type EvictPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvictPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvictPodRequestMultiError) AllErrors() []error { return m }

// EvictPodRequestValidationError is the validation error returned by
// EvictPodRequest.Validate if the designated constraints aren't met.
type EvictPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvictPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvictPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvictPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvictPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvictPodRequestValidationError) ErrorName() string { return "EvictPodRequestValidationError" }

// Error satisfies the builtin error interface
func (e EvictPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvictPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvictPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvictPodRequestValidationError{}

// Validate checks the field values on EvictPodResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EvictPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvictPodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvictPodResponseMultiError, or nil if none found.
func (m *EvictPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EvictPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return EvictPodResponseMultiError(errors)
	}

	return nil
}

// EvictPodResponseMultiError is an error wrapping multiple validation errors
// returned by EvictPodResponse.ValidateAll() if the designated constraints
// aren't met.
type EvictPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvictPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvictPodResponseMultiError) AllErrors() []error { return m }

// EvictPodResponseValidationError is the validation error returned by
// EvictPodResponse.Validate if the designated constraints aren't met.
type EvictPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvictPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvictPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvictPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvictPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvictPodResponseValidationError) ErrorName() string { return "EvictPodResponseValidationError" }

// Error satisfies the builtin error interface
func (e EvictPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvictPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvictPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvictPodResponseValidationError{}
