// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/gameserver.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListGameServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGameServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGameServerRequestMultiError, or nil if none found.
func (m *ListGameServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListGameServerRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListGameServerRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	// no validation rules for ServerType

	// no validation rules for EntityLockStatus

	// no validation rules for LbLockStatus

	if len(errors) > 0 {
		return ListGameServerRequestMultiError(errors)
	}

	return nil
}

// ListGameServerRequestMultiError is an error wrapping multiple validation
// errors returned by ListGameServerRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGameServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameServerRequestMultiError) AllErrors() []error { return m }

// ListGameServerRequestValidationError is the validation error returned by
// ListGameServerRequest.Validate if the designated constraints aren't met.
type ListGameServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameServerRequestValidationError) ErrorName() string {
	return "ListGameServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameServerRequestValidationError{}

// Validate checks the field values on GameServerItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameServerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameServerItemMultiError,
// or nil if none found.
func (m *GameServerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServerName()) < 1 {
		err := GameServerItemValidationError{
			field:  "ServerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := GameServerItemValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WorkloadType

	// no validation rules for Workload

	// no validation rules for ServerVersion

	// no validation rules for EntityNum

	// no validation rules for OnlineNum

	// no validation rules for EntityLockStatus

	// no validation rules for LbLockStatus

	// no validation rules for CodeVersionGame

	// no validation rules for CodeVersionConfig

	// no validation rules for CodeVersionScript

	// no validation rules for Id

	if len(errors) > 0 {
		return GameServerItemMultiError(errors)
	}

	return nil
}

// GameServerItemMultiError is an error wrapping multiple validation errors
// returned by GameServerItem.ValidateAll() if the designated constraints
// aren't met.
type GameServerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerItemMultiError) AllErrors() []error { return m }

// GameServerItemValidationError is the validation error returned by
// GameServerItem.Validate if the designated constraints aren't met.
type GameServerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerItemValidationError) ErrorName() string { return "GameServerItemValidationError" }

// Error satisfies the builtin error interface
func (e GameServerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerItemValidationError{}

// Validate checks the field values on ListGameServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGameServerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGameServerResponseMultiError, or nil if none found.
func (m *ListGameServerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameServerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGameServerResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGameServerResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGameServerResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGameServerResponseMultiError(errors)
	}

	return nil
}

// ListGameServerResponseMultiError is an error wrapping multiple validation
// errors returned by ListGameServerResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGameServerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameServerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameServerResponseMultiError) AllErrors() []error { return m }

// ListGameServerResponseValidationError is the validation error returned by
// ListGameServerResponse.Validate if the designated constraints aren't met.
type ListGameServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameServerResponseValidationError) ErrorName() string {
	return "ListGameServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameServerResponseValidationError{}

// Validate checks the field values on ListGameServerTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGameServerTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameServerTypeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGameServerTypeRequestMultiError, or nil if none found.
func (m *ListGameServerTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameServerTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListGameServerTypeRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListGameServerTypeRequestMultiError(errors)
	}

	return nil
}

// ListGameServerTypeRequestMultiError is an error wrapping multiple validation
// errors returned by ListGameServerTypeRequest.ValidateAll() if the
// designated constraints aren't met.
type ListGameServerTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameServerTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameServerTypeRequestMultiError) AllErrors() []error { return m }

// ListGameServerTypeRequestValidationError is the validation error returned by
// ListGameServerTypeRequest.Validate if the designated constraints aren't met.
type ListGameServerTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameServerTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameServerTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameServerTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameServerTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameServerTypeRequestValidationError) ErrorName() string {
	return "ListGameServerTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameServerTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameServerTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameServerTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameServerTypeRequestValidationError{}

// Validate checks the field values on GameServerType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameServerType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameServerTypeMultiError,
// or nil if none found.
func (m *GameServerType) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GameServerTypeMultiError(errors)
	}

	return nil
}

// GameServerTypeMultiError is an error wrapping multiple validation errors
// returned by GameServerType.ValidateAll() if the designated constraints
// aren't met.
type GameServerTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerTypeMultiError) AllErrors() []error { return m }

// GameServerTypeValidationError is the validation error returned by
// GameServerType.Validate if the designated constraints aren't met.
type GameServerTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerTypeValidationError) ErrorName() string { return "GameServerTypeValidationError" }

// Error satisfies the builtin error interface
func (e GameServerTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerTypeValidationError{}

// Validate checks the field values on ListGameServerTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGameServerTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameServerTypeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGameServerTypeResponseMultiError, or nil if none found.
func (m *ListGameServerTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameServerTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGameServerTypeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGameServerTypeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGameServerTypeResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGameServerTypeResponseMultiError(errors)
	}

	return nil
}

// ListGameServerTypeResponseMultiError is an error wrapping multiple
// validation errors returned by ListGameServerTypeResponse.ValidateAll() if
// the designated constraints aren't met.
type ListGameServerTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameServerTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameServerTypeResponseMultiError) AllErrors() []error { return m }

// ListGameServerTypeResponseValidationError is the validation error returned
// by ListGameServerTypeResponse.Validate if the designated constraints aren't met.
type ListGameServerTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameServerTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameServerTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameServerTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameServerTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameServerTypeResponseValidationError) ErrorName() string {
	return "ListGameServerTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameServerTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameServerTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameServerTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameServerTypeResponseValidationError{}

// Validate checks the field values on ManageGameServerEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManageGameServerEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageGameServerEntityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ManageGameServerEntityRequestMultiError, or nil if none found.
func (m *ManageGameServerEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageGameServerEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServerName()) < 1 {
		err := ManageGameServerEntityRequestValidationError{
			field:  "ServerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Lock

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ManageGameServerEntityRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ManageGameServerEntityRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ManageGameServerEntityRequestMultiError(errors)
	}

	return nil
}

// ManageGameServerEntityRequestMultiError is an error wrapping multiple
// validation errors returned by ManageGameServerEntityRequest.ValidateAll()
// if the designated constraints aren't met.
type ManageGameServerEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageGameServerEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageGameServerEntityRequestMultiError) AllErrors() []error { return m }

// ManageGameServerEntityRequestValidationError is the validation error
// returned by ManageGameServerEntityRequest.Validate if the designated
// constraints aren't met.
type ManageGameServerEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageGameServerEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageGameServerEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageGameServerEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageGameServerEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageGameServerEntityRequestValidationError) ErrorName() string {
	return "ManageGameServerEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ManageGameServerEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageGameServerEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageGameServerEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageGameServerEntityRequestValidationError{}

// Validate checks the field values on ManageEntityHead with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ManageEntityHead) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageEntityHead with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManageEntityHeadMultiError, or nil if none found.
func (m *ManageEntityHead) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageEntityHead) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Errno

	// no validation rules for Errmsg

	if len(errors) > 0 {
		return ManageEntityHeadMultiError(errors)
	}

	return nil
}

// ManageEntityHeadMultiError is an error wrapping multiple validation errors
// returned by ManageEntityHead.ValidateAll() if the designated constraints
// aren't met.
type ManageEntityHeadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageEntityHeadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageEntityHeadMultiError) AllErrors() []error { return m }

// ManageEntityHeadValidationError is the validation error returned by
// ManageEntityHead.Validate if the designated constraints aren't met.
type ManageEntityHeadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageEntityHeadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageEntityHeadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageEntityHeadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageEntityHeadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageEntityHeadValidationError) ErrorName() string { return "ManageEntityHeadValidationError" }

// Error satisfies the builtin error interface
func (e ManageEntityHeadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageEntityHead.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageEntityHeadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageEntityHeadValidationError{}

// Validate checks the field values on ManageEntityBody with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ManageEntityBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageEntityBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManageEntityBodyMultiError, or nil if none found.
func (m *ManageEntityBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageEntityBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ManageEntityBodyMultiError(errors)
	}

	return nil
}

// ManageEntityBodyMultiError is an error wrapping multiple validation errors
// returned by ManageEntityBody.ValidateAll() if the designated constraints
// aren't met.
type ManageEntityBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageEntityBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageEntityBodyMultiError) AllErrors() []error { return m }

// ManageEntityBodyValidationError is the validation error returned by
// ManageEntityBody.Validate if the designated constraints aren't met.
type ManageEntityBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageEntityBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageEntityBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageEntityBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageEntityBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageEntityBodyValidationError) ErrorName() string { return "ManageEntityBodyValidationError" }

// Error satisfies the builtin error interface
func (e ManageEntityBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageEntityBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageEntityBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageEntityBodyValidationError{}

// Validate checks the field values on ManageGameServerEntityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManageGameServerEntityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageGameServerEntityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ManageGameServerEntityResponseMultiError, or nil if none found.
func (m *ManageGameServerEntityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageGameServerEntityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHead()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManageGameServerEntityResponseValidationError{
					field:  "Head",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManageGameServerEntityResponseValidationError{
					field:  "Head",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHead()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManageGameServerEntityResponseValidationError{
				field:  "Head",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManageGameServerEntityResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManageGameServerEntityResponseValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManageGameServerEntityResponseValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ManageGameServerEntityResponseMultiError(errors)
	}

	return nil
}

// ManageGameServerEntityResponseMultiError is an error wrapping multiple
// validation errors returned by ManageGameServerEntityResponse.ValidateAll()
// if the designated constraints aren't met.
type ManageGameServerEntityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageGameServerEntityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageGameServerEntityResponseMultiError) AllErrors() []error { return m }

// ManageGameServerEntityResponseValidationError is the validation error
// returned by ManageGameServerEntityResponse.Validate if the designated
// constraints aren't met.
type ManageGameServerEntityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageGameServerEntityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageGameServerEntityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageGameServerEntityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageGameServerEntityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageGameServerEntityResponseValidationError) ErrorName() string {
	return "ManageGameServerEntityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ManageGameServerEntityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageGameServerEntityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageGameServerEntityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageGameServerEntityResponseValidationError{}

// Validate checks the field values on BatchManageGameServerEntityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchManageGameServerEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchManageGameServerEntityRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchManageGameServerEntityRequestMultiError, or nil if none found.
func (m *BatchManageGameServerEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchManageGameServerEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetServerNames()) < 1 {
		err := BatchManageGameServerEntityRequestValidationError{
			field:  "ServerNames",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Lock

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := BatchManageGameServerEntityRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := BatchManageGameServerEntityRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatchManageGameServerEntityRequestMultiError(errors)
	}

	return nil
}

// BatchManageGameServerEntityRequestMultiError is an error wrapping multiple
// validation errors returned by
// BatchManageGameServerEntityRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchManageGameServerEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchManageGameServerEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchManageGameServerEntityRequestMultiError) AllErrors() []error { return m }

// BatchManageGameServerEntityRequestValidationError is the validation error
// returned by BatchManageGameServerEntityRequest.Validate if the designated
// constraints aren't met.
type BatchManageGameServerEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchManageGameServerEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchManageGameServerEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchManageGameServerEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchManageGameServerEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchManageGameServerEntityRequestValidationError) ErrorName() string {
	return "BatchManageGameServerEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchManageGameServerEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchManageGameServerEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchManageGameServerEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchManageGameServerEntityRequestValidationError{}

// Validate checks the field values on BatchManageGameServerEntityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchManageGameServerEntityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchManageGameServerEntityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchManageGameServerEntityResponseMultiError, or nil if none found.
func (m *BatchManageGameServerEntityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchManageGameServerEntityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BatchManageGameServerEntityResponseMultiError(errors)
	}

	return nil
}

// BatchManageGameServerEntityResponseMultiError is an error wrapping multiple
// validation errors returned by
// BatchManageGameServerEntityResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchManageGameServerEntityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchManageGameServerEntityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchManageGameServerEntityResponseMultiError) AllErrors() []error { return m }

// BatchManageGameServerEntityResponseValidationError is the validation error
// returned by BatchManageGameServerEntityResponse.Validate if the designated
// constraints aren't met.
type BatchManageGameServerEntityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchManageGameServerEntityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchManageGameServerEntityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchManageGameServerEntityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchManageGameServerEntityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchManageGameServerEntityResponseValidationError) ErrorName() string {
	return "BatchManageGameServerEntityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchManageGameServerEntityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchManageGameServerEntityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchManageGameServerEntityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchManageGameServerEntityResponseValidationError{}
