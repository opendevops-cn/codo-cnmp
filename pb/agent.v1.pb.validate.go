// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/agent.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListAgentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentRequestMultiError, or nil if none found.
func (m *ListAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Keyword

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListAgentRequestMultiError(errors)
	}

	return nil
}

// ListAgentRequestMultiError is an error wrapping multiple validation errors
// returned by ListAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentRequestMultiError) AllErrors() []error { return m }

// ListAgentRequestValidationError is the validation error returned by
// ListAgentRequest.Validate if the designated constraints aren't met.
type ListAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentRequestValidationError) ErrorName() string { return "ListAgentRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentRequestValidationError{}

// Validate checks the field values on CreateAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAgentRequestMultiError, or nil if none found.
func (m *CreateAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for AgentId

	if len(errors) > 0 {
		return CreateAgentRequestMultiError(errors)
	}

	return nil
}

// CreateAgentRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentRequestMultiError) AllErrors() []error { return m }

// CreateAgentRequestValidationError is the validation error returned by
// CreateAgentRequest.Validate if the designated constraints aren't met.
type CreateAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentRequestValidationError) ErrorName() string {
	return "CreateAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentRequestValidationError{}

// Validate checks the field values on CreateAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAgentResponseMultiError, or nil if none found.
func (m *CreateAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAgentResponseMultiError(errors)
	}

	return nil
}

// CreateAgentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAgentResponseMultiError) AllErrors() []error { return m }

// CreateAgentResponseValidationError is the validation error returned by
// CreateAgentResponse.Validate if the designated constraints aren't met.
type CreateAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAgentResponseValidationError) ErrorName() string {
	return "CreateAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAgentResponseValidationError{}

// Validate checks the field values on DeleteAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAgentRequestMultiError, or nil if none found.
func (m *DeleteAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAgentRequestMultiError(errors)
	}

	return nil
}

// DeleteAgentRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAgentRequestMultiError) AllErrors() []error { return m }

// DeleteAgentRequestValidationError is the validation error returned by
// DeleteAgentRequest.Validate if the designated constraints aren't met.
type DeleteAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAgentRequestValidationError) ErrorName() string {
	return "DeleteAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAgentRequestValidationError{}

// Validate checks the field values on DeleteAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAgentResponseMultiError, or nil if none found.
func (m *DeleteAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAgentResponseMultiError(errors)
	}

	return nil
}

// DeleteAgentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAgentResponseMultiError) AllErrors() []error { return m }

// DeleteAgentResponseValidationError is the validation error returned by
// DeleteAgentResponse.Validate if the designated constraints aren't met.
type DeleteAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAgentResponseValidationError) ErrorName() string {
	return "DeleteAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAgentResponseValidationError{}

// Validate checks the field values on UpdateAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentRequestMultiError, or nil if none found.
func (m *UpdateAgentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AgentId

	if len(errors) > 0 {
		return UpdateAgentRequestMultiError(errors)
	}

	return nil
}

// UpdateAgentRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAgentRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAgentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentRequestMultiError) AllErrors() []error { return m }

// UpdateAgentRequestValidationError is the validation error returned by
// UpdateAgentRequest.Validate if the designated constraints aren't met.
type UpdateAgentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentRequestValidationError) ErrorName() string {
	return "UpdateAgentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentRequestValidationError{}

// Validate checks the field values on UpdateAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAgentResponseMultiError, or nil if none found.
func (m *UpdateAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAgentResponseMultiError(errors)
	}

	return nil
}

// UpdateAgentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAgentResponseMultiError) AllErrors() []error { return m }

// UpdateAgentResponseValidationError is the validation error returned by
// UpdateAgentResponse.Validate if the designated constraints aren't met.
type UpdateAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAgentResponseValidationError) ErrorName() string {
	return "UpdateAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAgentResponseValidationError{}

// Validate checks the field values on AgentItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AgentItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AgentItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AgentItemMultiError, or nil
// if none found.
func (m *AgentItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AgentItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for AgentId

	if len(errors) > 0 {
		return AgentItemMultiError(errors)
	}

	return nil
}

// AgentItemMultiError is an error wrapping multiple validation errors returned
// by AgentItem.ValidateAll() if the designated constraints aren't met.
type AgentItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AgentItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AgentItemMultiError) AllErrors() []error { return m }

// AgentItemValidationError is the validation error returned by
// AgentItem.Validate if the designated constraints aren't met.
type AgentItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentItemValidationError) ErrorName() string { return "AgentItemValidationError" }

// Error satisfies the builtin error interface
func (e AgentItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentItemValidationError{}

// Validate checks the field values on ListAgentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentResponseMultiError, or nil if none found.
func (m *ListAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAgentResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAgentResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAgentResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListAgentResponseMultiError(errors)
	}

	return nil
}

// ListAgentResponseMultiError is an error wrapping multiple validation errors
// returned by ListAgentResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentResponseMultiError) AllErrors() []error { return m }

// ListAgentResponseValidationError is the validation error returned by
// ListAgentResponse.Validate if the designated constraints aren't met.
type ListAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentResponseValidationError) ErrorName() string {
	return "ListAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentResponseValidationError{}
