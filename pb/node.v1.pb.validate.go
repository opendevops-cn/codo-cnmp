// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/node.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodeRequestMultiError, or nil if none found.
func (m *ListNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := ListNodeRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListNodeRequestMultiError(errors)
	}

	return nil
}

// ListNodeRequestMultiError is an error wrapping multiple validation errors
// returned by ListNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type ListNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodeRequestMultiError) AllErrors() []error { return m }

// ListNodeRequestValidationError is the validation error returned by
// ListNodeRequest.Validate if the designated constraints aren't met.
type ListNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeRequestValidationError) ErrorName() string { return "ListNodeRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeRequestValidationError{}

// Validate checks the field values on ResourceUsage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceUsage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceUsage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceUsageMultiError, or
// nil if none found.
func (m *ResourceUsage) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceUsage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeMemoryTotal

	// no validation rules for NodeMemoryUsage

	// no validation rules for NodeCpuTotal

	// no validation rules for NodeCpuUsage

	// no validation rules for PodTotal

	// no validation rules for PodUsage

	// no validation rules for RequestsCpuTotal

	// no validation rules for RequestsCpuUsage

	// no validation rules for RequestsMemoryTotal

	// no validation rules for RequestsMemoryUsage

	// no validation rules for LimitsCpuTotal

	// no validation rules for LimitsCpuUsage

	// no validation rules for LimitsMemoryTotal

	// no validation rules for LimitsMemoryUsage

	// no validation rules for NodeAllocatableMemory

	// no validation rules for NodeAllocatableCpu

	if len(errors) > 0 {
		return ResourceUsageMultiError(errors)
	}

	return nil
}

// ResourceUsageMultiError is an error wrapping multiple validation errors
// returned by ResourceUsage.ValidateAll() if the designated constraints
// aren't met.
type ResourceUsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceUsageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceUsageMultiError) AllErrors() []error { return m }

// ResourceUsageValidationError is the validation error returned by
// ResourceUsage.Validate if the designated constraints aren't met.
type ResourceUsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceUsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceUsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceUsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceUsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceUsageValidationError) ErrorName() string { return "ResourceUsageValidationError" }

// Error satisfies the builtin error interface
func (e ResourceUsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceUsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceUsageValidationError{}

// Validate checks the field values on NodeItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeItemMultiError, or nil
// if none found.
func (m *NodeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if _, ok := NodeStatus_name[int32(m.GetState())]; !ok {
		err := NodeItemValidationError{
			field:  "State",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InternalIp

	// no validation rules for KubeletVersion

	// no validation rules for OsImage

	// no validation rules for ContainerRuntimeVersion

	// no validation rules for CreateTime

	// no validation rules for Uid

	// no validation rules for Unschedulable

	// no validation rules for PodTotal

	// no validation rules for PodUsage

	// no validation rules for IsFollowed

	// no validation rules for OperatingSystem

	if all {
		switch v := interface{}(m.GetResourceUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodeItemValidationError{
					field:  "ResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodeItemValidationError{
					field:  "ResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeItemValidationError{
				field:  "ResourceUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NodeItemMultiError(errors)
	}

	return nil
}

// NodeItemMultiError is an error wrapping multiple validation errors returned
// by NodeItem.ValidateAll() if the designated constraints aren't met.
type NodeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeItemMultiError) AllErrors() []error { return m }

// NodeItemValidationError is the validation error returned by
// NodeItem.Validate if the designated constraints aren't met.
type NodeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeItemValidationError) ErrorName() string { return "NodeItemValidationError" }

// Error satisfies the builtin error interface
func (e NodeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeItemValidationError{}

// Validate checks the field values on ListNodeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNodeResponseMultiError, or nil if none found.
func (m *ListNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNodeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNodeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNodeResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListNodeResponseMultiError(errors)
	}

	return nil
}

// ListNodeResponseMultiError is an error wrapping multiple validation errors
// returned by ListNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type ListNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNodeResponseMultiError) AllErrors() []error { return m }

// ListNodeResponseValidationError is the validation error returned by
// ListNodeResponse.Validate if the designated constraints aren't met.
type ListNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNodeResponseValidationError) ErrorName() string { return "ListNodeResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNodeResponseValidationError{}

// Validate checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Labels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Labels with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LabelsMultiError, or nil if none found.
func (m *Labels) ValidateAll() error {
	return m.validate(true)
}

func (m *Labels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Labels

	if len(errors) > 0 {
		return LabelsMultiError(errors)
	}

	return nil
}

// LabelsMultiError is an error wrapping multiple validation errors returned by
// Labels.ValidateAll() if the designated constraints aren't met.
type LabelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelsMultiError) AllErrors() []error { return m }

// LabelsValidationError is the validation error returned by Labels.Validate if
// the designated constraints aren't met.
type LabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsValidationError) ErrorName() string { return "LabelsValidationError" }

// Error satisfies the builtin error interface
func (e LabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsValidationError{}

// Validate checks the field values on Annotations with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Annotations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Annotations with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnnotationsMultiError, or
// nil if none found.
func (m *Annotations) ValidateAll() error {
	return m.validate(true)
}

func (m *Annotations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Annotations

	if len(errors) > 0 {
		return AnnotationsMultiError(errors)
	}

	return nil
}

// AnnotationsMultiError is an error wrapping multiple validation errors
// returned by Annotations.ValidateAll() if the designated constraints aren't met.
type AnnotationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnotationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnotationsMultiError) AllErrors() []error { return m }

// AnnotationsValidationError is the validation error returned by
// Annotations.Validate if the designated constraints aren't met.
type AnnotationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnotationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnotationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnotationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnotationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnotationsValidationError) ErrorName() string { return "AnnotationsValidationError" }

// Error satisfies the builtin error interface
func (e AnnotationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnotations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnotationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnotationsValidationError{}

// Validate checks the field values on GetNodeDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeDetailRequestMultiError, or nil if none found.
func (m *GetNodeDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := GetNodeDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := GetNodeDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNodeDetailRequestMultiError(errors)
	}

	return nil
}

// GetNodeDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetNodeDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNodeDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeDetailRequestMultiError) AllErrors() []error { return m }

// GetNodeDetailRequestValidationError is the validation error returned by
// GetNodeDetailRequest.Validate if the designated constraints aren't met.
type GetNodeDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeDetailRequestValidationError) ErrorName() string {
	return "GetNodeDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeDetailRequestValidationError{}

// Validate checks the field values on NodeCondition with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeCondition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeConditionMultiError, or
// nil if none found.
func (m *NodeCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastTransitionTime

	// no validation rules for LastHeartbeatTime

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return NodeConditionMultiError(errors)
	}

	return nil
}

// NodeConditionMultiError is an error wrapping multiple validation errors
// returned by NodeCondition.ValidateAll() if the designated constraints
// aren't met.
type NodeConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeConditionMultiError) AllErrors() []error { return m }

// NodeConditionValidationError is the validation error returned by
// NodeCondition.Validate if the designated constraints aren't met.
type NodeConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeConditionValidationError) ErrorName() string { return "NodeConditionValidationError" }

// Error satisfies the builtin error interface
func (e NodeConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeConditionValidationError{}

// Validate checks the field values on GetNodeDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNodeDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNodeDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNodeDetailResponseMultiError, or nil if none found.
func (m *GetNodeDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNodeDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTaints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeDetailResponseValidationError{
						field:  fmt.Sprintf("Taints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeDetailResponseValidationError{
						field:  fmt.Sprintf("Taints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeDetailResponseValidationError{
					field:  fmt.Sprintf("Taints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetPods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeDetailResponseValidationError{
						field:  fmt.Sprintf("Pods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeDetailResponseValidationError{
						field:  fmt.Sprintf("Pods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeDetailResponseValidationError{
					field:  fmt.Sprintf("Pods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Yaml

	if all {
		switch v := interface{}(m.GetNodeItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNodeDetailResponseValidationError{
					field:  "NodeItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNodeDetailResponseValidationError{
					field:  "NodeItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeDetailResponseValidationError{
				field:  "NodeItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSystemInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNodeDetailResponseValidationError{
					field:  "SystemInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNodeDetailResponseValidationError{
					field:  "SystemInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystemInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeDetailResponseValidationError{
				field:  "SystemInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResourceUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNodeDetailResponseValidationError{
					field:  "ResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNodeDetailResponseValidationError{
					field:  "ResourceUsage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResourceUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNodeDetailResponseValidationError{
				field:  "ResourceUsage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNodeCondition() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetNodeDetailResponseValidationError{
						field:  fmt.Sprintf("NodeCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetNodeDetailResponseValidationError{
						field:  fmt.Sprintf("NodeCondition[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNodeDetailResponseValidationError{
					field:  fmt.Sprintf("NodeCondition[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Unschedulable

	if len(errors) > 0 {
		return GetNodeDetailResponseMultiError(errors)
	}

	return nil
}

// GetNodeDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetNodeDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNodeDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNodeDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNodeDetailResponseMultiError) AllErrors() []error { return m }

// GetNodeDetailResponseValidationError is the validation error returned by
// GetNodeDetailResponse.Validate if the designated constraints aren't met.
type GetNodeDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNodeDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNodeDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNodeDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNodeDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNodeDetailResponseValidationError) ErrorName() string {
	return "GetNodeDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNodeDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNodeDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNodeDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNodeDetailResponseValidationError{}

// Validate checks the field values on UpdateNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNodeRequestMultiError, or nil if none found.
func (m *UpdateNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := UpdateNodeRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := UpdateNodeRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetTaints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateNodeRequestValidationError{
						field:  fmt.Sprintf("Taints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateNodeRequestValidationError{
						field:  fmt.Sprintf("Taints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateNodeRequestValidationError{
					field:  fmt.Sprintf("Taints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateNodeRequestMultiError(errors)
	}

	return nil
}

// UpdateNodeRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNodeRequestMultiError) AllErrors() []error { return m }

// UpdateNodeRequestValidationError is the validation error returned by
// UpdateNodeRequest.Validate if the designated constraints aren't met.
type UpdateNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeRequestValidationError) ErrorName() string {
	return "UpdateNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeRequestValidationError{}

// Validate checks the field values on UpdateNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNodeResponseMultiError, or nil if none found.
func (m *UpdateNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNodeResponseMultiError(errors)
	}

	return nil
}

// UpdateNodeResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNodeResponseMultiError) AllErrors() []error { return m }

// UpdateNodeResponseValidationError is the validation error returned by
// UpdateNodeResponse.Validate if the designated constraints aren't met.
type UpdateNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNodeResponseValidationError) ErrorName() string {
	return "UpdateNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNodeResponseValidationError{}

// Validate checks the field values on CreateOrUpdateNodeByYamlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateNodeByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateNodeByYamlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateNodeByYamlRequestMultiError, or nil if none found.
func (m *CreateOrUpdateNodeByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateNodeByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := CreateOrUpdateNodeByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetYaml()); l < 1 || l > 100000 {
		err := CreateOrUpdateNodeByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be between 1 and 100000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrUpdateNodeByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateNodeByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateNodeByYamlRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdateNodeByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateNodeByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateNodeByYamlRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateNodeByYamlRequestValidationError is the validation error
// returned by CreateOrUpdateNodeByYamlRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateNodeByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateNodeByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateNodeByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateNodeByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateNodeByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateNodeByYamlRequestValidationError) ErrorName() string {
	return "CreateOrUpdateNodeByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateNodeByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateNodeByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateNodeByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateNodeByYamlRequestValidationError{}

// Validate checks the field values on CreateOrUpdateNodeByYamlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrUpdateNodeByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateNodeByYamlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateNodeByYamlResponseMultiError, or nil if none found.
func (m *CreateOrUpdateNodeByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateNodeByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrUpdateNodeByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateNodeByYamlResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateNodeByYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateNodeByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateNodeByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateNodeByYamlResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateNodeByYamlResponseValidationError is the validation error
// returned by CreateOrUpdateNodeByYamlResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdateNodeByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateNodeByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateNodeByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateNodeByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateNodeByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateNodeByYamlResponseValidationError) ErrorName() string {
	return "CreateOrUpdateNodeByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateNodeByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateNodeByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateNodeByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateNodeByYamlResponseValidationError{}

// Validate checks the field values on HandleNodeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HandleNodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleNodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleNodeRequestMultiError, or nil if none found.
func (m *HandleNodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleNodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := HandleNodeRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := HandleNodeRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := NodeOperation_name[int32(m.GetOperation())]; !ok {
		err := HandleNodeRequestValidationError{
			field:  "Operation",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HandleNodeRequestMultiError(errors)
	}

	return nil
}

// HandleNodeRequestMultiError is an error wrapping multiple validation errors
// returned by HandleNodeRequest.ValidateAll() if the designated constraints
// aren't met.
type HandleNodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleNodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleNodeRequestMultiError) AllErrors() []error { return m }

// HandleNodeRequestValidationError is the validation error returned by
// HandleNodeRequest.Validate if the designated constraints aren't met.
type HandleNodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleNodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleNodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleNodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleNodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleNodeRequestValidationError) ErrorName() string {
	return "HandleNodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HandleNodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleNodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleNodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleNodeRequestValidationError{}

// Validate checks the field values on HandleNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HandleNodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HandleNodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HandleNodeResponseMultiError, or nil if none found.
func (m *HandleNodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HandleNodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return HandleNodeResponseMultiError(errors)
	}

	return nil
}

// HandleNodeResponseMultiError is an error wrapping multiple validation errors
// returned by HandleNodeResponse.ValidateAll() if the designated constraints
// aren't met.
type HandleNodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HandleNodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HandleNodeResponseMultiError) AllErrors() []error { return m }

// HandleNodeResponseValidationError is the validation error returned by
// HandleNodeResponse.Validate if the designated constraints aren't met.
type HandleNodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleNodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleNodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleNodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleNodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleNodeResponseValidationError) ErrorName() string {
	return "HandleNodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HandleNodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleNodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleNodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleNodeResponseValidationError{}

// Validate checks the field values on CheckEvictionItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckEvictionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEvictionItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEvictionItemMultiError, or nil if none found.
func (m *CheckEvictionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEvictionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReadyToEvictPodsCount

	// no validation rules for IgnoreEvictPodsCount

	if len(errors) > 0 {
		return CheckEvictionItemMultiError(errors)
	}

	return nil
}

// CheckEvictionItemMultiError is an error wrapping multiple validation errors
// returned by CheckEvictionItem.ValidateAll() if the designated constraints
// aren't met.
type CheckEvictionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEvictionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEvictionItemMultiError) AllErrors() []error { return m }

// CheckEvictionItemValidationError is the validation error returned by
// CheckEvictionItem.Validate if the designated constraints aren't met.
type CheckEvictionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEvictionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEvictionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEvictionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEvictionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEvictionItemValidationError) ErrorName() string {
	return "CheckEvictionItemValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEvictionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEvictionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEvictionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEvictionItemValidationError{}

// Validate checks the field values on CheckEvictionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEvictionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEvictionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEvictionRequestMultiError, or nil if none found.
func (m *CheckEvictionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEvictionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := CheckEvictionRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := CheckEvictionRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckEvictionRequestMultiError(errors)
	}

	return nil
}

// CheckEvictionRequestMultiError is an error wrapping multiple validation
// errors returned by CheckEvictionRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckEvictionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEvictionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEvictionRequestMultiError) AllErrors() []error { return m }

// CheckEvictionRequestValidationError is the validation error returned by
// CheckEvictionRequest.Validate if the designated constraints aren't met.
type CheckEvictionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEvictionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEvictionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEvictionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEvictionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEvictionRequestValidationError) ErrorName() string {
	return "CheckEvictionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEvictionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEvictionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEvictionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEvictionRequestValidationError{}

// Validate checks the field values on CheckEvictionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckEvictionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckEvictionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckEvictionResponseMultiError, or nil if none found.
func (m *CheckEvictionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckEvictionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckEvictionResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckEvictionResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckEvictionResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckEvictionResponseMultiError(errors)
	}

	return nil
}

// CheckEvictionResponseMultiError is an error wrapping multiple validation
// errors returned by CheckEvictionResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckEvictionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckEvictionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckEvictionResponseMultiError) AllErrors() []error { return m }

// CheckEvictionResponseValidationError is the validation error returned by
// CheckEvictionResponse.Validate if the designated constraints aren't met.
type CheckEvictionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckEvictionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckEvictionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckEvictionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckEvictionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckEvictionResponseValidationError) ErrorName() string {
	return "CheckEvictionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckEvictionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckEvictionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckEvictionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckEvictionResponseValidationError{}
