// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/namespace.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateNameSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNameSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNameSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNameSpaceRequestMultiError, or nil if none found.
func (m *CreateNameSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNameSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := CreateNameSpaceRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateNameSpaceRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateNameSpaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 1000 {
		err := CreateNameSpaceRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := CreateNameSpaceRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	if len(errors) > 0 {
		return CreateNameSpaceRequestMultiError(errors)
	}

	return nil
}

// CreateNameSpaceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNameSpaceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNameSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNameSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNameSpaceRequestMultiError) AllErrors() []error { return m }

// CreateNameSpaceRequestValidationError is the validation error returned by
// CreateNameSpaceRequest.Validate if the designated constraints aren't met.
type CreateNameSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNameSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNameSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNameSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNameSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNameSpaceRequestValidationError) ErrorName() string {
	return "CreateNameSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNameSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNameSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNameSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNameSpaceRequestValidationError{}

var _CreateNameSpaceRequest_Name_Pattern = regexp.MustCompile("^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$")

// Validate checks the field values on CreateNameSpaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNameSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNameSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNameSpaceResponseMultiError, or nil if none found.
func (m *CreateNameSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNameSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateNameSpaceResponseMultiError(errors)
	}

	return nil
}

// CreateNameSpaceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateNameSpaceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNameSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNameSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNameSpaceResponseMultiError) AllErrors() []error { return m }

// CreateNameSpaceResponseValidationError is the validation error returned by
// CreateNameSpaceResponse.Validate if the designated constraints aren't met.
type CreateNameSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNameSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNameSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNameSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNameSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNameSpaceResponseValidationError) ErrorName() string {
	return "CreateNameSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNameSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNameSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNameSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNameSpaceResponseValidationError{}

// Validate checks the field values on ListNameSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNameSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNameSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNameSpaceRequestMultiError, or nil if none found.
func (m *ListNameSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNameSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := ListNameSpaceRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if m.AuthFilter != nil {
		// no validation rules for AuthFilter
	}

	if len(errors) > 0 {
		return ListNameSpaceRequestMultiError(errors)
	}

	return nil
}

// ListNameSpaceRequestMultiError is an error wrapping multiple validation
// errors returned by ListNameSpaceRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNameSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNameSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNameSpaceRequestMultiError) AllErrors() []error { return m }

// ListNameSpaceRequestValidationError is the validation error returned by
// ListNameSpaceRequest.Validate if the designated constraints aren't met.
type ListNameSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNameSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNameSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNameSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNameSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNameSpaceRequestValidationError) ErrorName() string {
	return "ListNameSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNameSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNameSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNameSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNameSpaceRequestValidationError{}

// Validate checks the field values on NameSpaceItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NameSpaceItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NameSpaceItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NameSpaceItemMultiError, or
// nil if none found.
func (m *NameSpaceItem) ValidateAll() error {
	return m.validate(true)
}

func (m *NameSpaceItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetDescription()) > 1000 {
		err := NameSpaceItemValidationError{
			field:  "Description",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for State

	// no validation rules for Uid

	// no validation rules for IsDefault

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for IsFollowed

	// no validation rules for Yaml

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NameSpaceItemValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NameSpaceItemValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NameSpaceItemValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NameSpaceItemMultiError(errors)
	}

	return nil
}

// NameSpaceItemMultiError is an error wrapping multiple validation errors
// returned by NameSpaceItem.ValidateAll() if the designated constraints
// aren't met.
type NameSpaceItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NameSpaceItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NameSpaceItemMultiError) AllErrors() []error { return m }

// NameSpaceItemValidationError is the validation error returned by
// NameSpaceItem.Validate if the designated constraints aren't met.
type NameSpaceItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NameSpaceItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NameSpaceItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NameSpaceItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NameSpaceItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NameSpaceItemValidationError) ErrorName() string { return "NameSpaceItemValidationError" }

// Error satisfies the builtin error interface
func (e NameSpaceItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNameSpaceItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NameSpaceItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NameSpaceItemValidationError{}

// Validate checks the field values on ListNameSpaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNameSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNameSpaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNameSpaceResponseMultiError, or nil if none found.
func (m *ListNameSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNameSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNameSpaceResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNameSpaceResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNameSpaceResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListNameSpaceResponseMultiError(errors)
	}

	return nil
}

// ListNameSpaceResponseMultiError is an error wrapping multiple validation
// errors returned by ListNameSpaceResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNameSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNameSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNameSpaceResponseMultiError) AllErrors() []error { return m }

// ListNameSpaceResponseValidationError is the validation error returned by
// ListNameSpaceResponse.Validate if the designated constraints aren't met.
type ListNameSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNameSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNameSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNameSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNameSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNameSpaceResponseValidationError) ErrorName() string {
	return "ListNameSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNameSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNameSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNameSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNameSpaceResponseValidationError{}

// Validate checks the field values on DeleteNameSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNameSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNameSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNameSpaceRequestMultiError, or nil if none found.
func (m *DeleteNameSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNameSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := DeleteNameSpaceRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := DeleteNameSpaceRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_DeleteNameSpaceRequest_Name_Pattern.MatchString(m.GetName()) {
		err := DeleteNameSpaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNameSpaceRequestMultiError(errors)
	}

	return nil
}

// DeleteNameSpaceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteNameSpaceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNameSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNameSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNameSpaceRequestMultiError) AllErrors() []error { return m }

// DeleteNameSpaceRequestValidationError is the validation error returned by
// DeleteNameSpaceRequest.Validate if the designated constraints aren't met.
type DeleteNameSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNameSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNameSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNameSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNameSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNameSpaceRequestValidationError) ErrorName() string {
	return "DeleteNameSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNameSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNameSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNameSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNameSpaceRequestValidationError{}

var _DeleteNameSpaceRequest_Name_Pattern = regexp.MustCompile("^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$")

// Validate checks the field values on UpdateNameSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNameSpaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNameSpaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNameSpaceRequestMultiError, or nil if none found.
func (m *UpdateNameSpaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNameSpaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := UpdateNameSpaceRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateNameSpaceRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UpdateNameSpaceRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 1000 {
		err := UpdateNameSpaceRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := UpdateNameSpaceRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	if len(errors) > 0 {
		return UpdateNameSpaceRequestMultiError(errors)
	}

	return nil
}

// UpdateNameSpaceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateNameSpaceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNameSpaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNameSpaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNameSpaceRequestMultiError) AllErrors() []error { return m }

// UpdateNameSpaceRequestValidationError is the validation error returned by
// UpdateNameSpaceRequest.Validate if the designated constraints aren't met.
type UpdateNameSpaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNameSpaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNameSpaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNameSpaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNameSpaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNameSpaceRequestValidationError) ErrorName() string {
	return "UpdateNameSpaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNameSpaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNameSpaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNameSpaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNameSpaceRequestValidationError{}

var _UpdateNameSpaceRequest_Name_Pattern = regexp.MustCompile("^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$")

// Validate checks the field values on DeleteNameSpaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNameSpaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNameSpaceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNameSpaceResponseMultiError, or nil if none found.
func (m *DeleteNameSpaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNameSpaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNameSpaceResponseMultiError(errors)
	}

	return nil
}

// DeleteNameSpaceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteNameSpaceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNameSpaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNameSpaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNameSpaceResponseMultiError) AllErrors() []error { return m }

// DeleteNameSpaceResponseValidationError is the validation error returned by
// DeleteNameSpaceResponse.Validate if the designated constraints aren't met.
type DeleteNameSpaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNameSpaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNameSpaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNameSpaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNameSpaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNameSpaceResponseValidationError) ErrorName() string {
	return "DeleteNameSpaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNameSpaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNameSpaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNameSpaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNameSpaceResponseValidationError{}

// Validate checks the field values on CreateNameSpaceByYamlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNameSpaceByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNameSpaceByYamlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNameSpaceByYamlRequestMultiError, or nil if none found.
func (m *CreateNameSpaceByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNameSpaceByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := CreateNameSpaceByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetYaml()); l < 1 || l > 100000 {
		err := CreateNameSpaceByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be between 1 and 100000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateNameSpaceByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateNameSpaceByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNameSpaceByYamlRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateNameSpaceByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNameSpaceByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNameSpaceByYamlRequestMultiError) AllErrors() []error { return m }

// CreateNameSpaceByYamlRequestValidationError is the validation error returned
// by CreateNameSpaceByYamlRequest.Validate if the designated constraints
// aren't met.
type CreateNameSpaceByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNameSpaceByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNameSpaceByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNameSpaceByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNameSpaceByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNameSpaceByYamlRequestValidationError) ErrorName() string {
	return "CreateNameSpaceByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNameSpaceByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNameSpaceByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNameSpaceByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNameSpaceByYamlRequestValidationError{}

// Validate checks the field values on CreateNameSpaceByYamlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNameSpaceByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNameSpaceByYamlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNameSpaceByYamlResponseMultiError, or nil if none found.
func (m *CreateNameSpaceByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNameSpaceByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateNameSpaceByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateNameSpaceByYamlResponseMultiError is an error wrapping multiple
// validation errors returned by CreateNameSpaceByYamlResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateNameSpaceByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNameSpaceByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNameSpaceByYamlResponseMultiError) AllErrors() []error { return m }

// CreateNameSpaceByYamlResponseValidationError is the validation error
// returned by CreateNameSpaceByYamlResponse.Validate if the designated
// constraints aren't met.
type CreateNameSpaceByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNameSpaceByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNameSpaceByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNameSpaceByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNameSpaceByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNameSpaceByYamlResponseValidationError) ErrorName() string {
	return "CreateNameSpaceByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNameSpaceByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNameSpaceByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNameSpaceByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNameSpaceByYamlResponseValidationError{}

// Validate checks the field values on GetNameSpaceYamlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNameSpaceYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNameSpaceYamlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNameSpaceYamlRequestMultiError, or nil if none found.
func (m *GetNameSpaceYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNameSpaceYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := GetNameSpaceYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := GetNameSpaceYamlRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetNameSpaceYamlRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetNameSpaceYamlRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNameSpaceYamlRequestMultiError(errors)
	}

	return nil
}

// GetNameSpaceYamlRequestMultiError is an error wrapping multiple validation
// errors returned by GetNameSpaceYamlRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNameSpaceYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNameSpaceYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNameSpaceYamlRequestMultiError) AllErrors() []error { return m }

// GetNameSpaceYamlRequestValidationError is the validation error returned by
// GetNameSpaceYamlRequest.Validate if the designated constraints aren't met.
type GetNameSpaceYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNameSpaceYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNameSpaceYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNameSpaceYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNameSpaceYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNameSpaceYamlRequestValidationError) ErrorName() string {
	return "GetNameSpaceYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNameSpaceYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNameSpaceYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNameSpaceYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNameSpaceYamlRequestValidationError{}

var _GetNameSpaceYamlRequest_Name_Pattern = regexp.MustCompile("^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$")

// Validate checks the field values on GetNameSpaceYamlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNameSpaceYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNameSpaceYamlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNameSpaceYamlResponseMultiError, or nil if none found.
func (m *GetNameSpaceYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNameSpaceYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Yaml

	if len(errors) > 0 {
		return GetNameSpaceYamlResponseMultiError(errors)
	}

	return nil
}

// GetNameSpaceYamlResponseMultiError is an error wrapping multiple validation
// errors returned by GetNameSpaceYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNameSpaceYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNameSpaceYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNameSpaceYamlResponseMultiError) AllErrors() []error { return m }

// GetNameSpaceYamlResponseValidationError is the validation error returned by
// GetNameSpaceYamlResponse.Validate if the designated constraints aren't met.
type GetNameSpaceYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNameSpaceYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNameSpaceYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNameSpaceYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNameSpaceYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNameSpaceYamlResponseValidationError) ErrorName() string {
	return "GetNameSpaceYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNameSpaceYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNameSpaceYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNameSpaceYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNameSpaceYamlResponseValidationError{}

// Validate checks the field values on GetNameSpaceDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNameSpaceDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNameSpaceDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNameSpaceDetailRequestMultiError, or nil if none found.
func (m *GetNameSpaceDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNameSpaceDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetClusterName()); l < 1 || l > 100 {
		err := GetNameSpaceDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := GetNameSpaceDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetNameSpaceDetailRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetNameSpaceDetailRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNameSpaceDetailRequestMultiError(errors)
	}

	return nil
}

// GetNameSpaceDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetNameSpaceDetailRequest.ValidateAll() if the
// designated constraints aren't met.
type GetNameSpaceDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNameSpaceDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNameSpaceDetailRequestMultiError) AllErrors() []error { return m }

// GetNameSpaceDetailRequestValidationError is the validation error returned by
// GetNameSpaceDetailRequest.Validate if the designated constraints aren't met.
type GetNameSpaceDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNameSpaceDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNameSpaceDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNameSpaceDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNameSpaceDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNameSpaceDetailRequestValidationError) ErrorName() string {
	return "GetNameSpaceDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNameSpaceDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNameSpaceDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNameSpaceDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNameSpaceDetailRequestValidationError{}

var _GetNameSpaceDetailRequest_Name_Pattern = regexp.MustCompile("^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$")

// Validate checks the field values on GetNameSpaceDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNameSpaceDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNameSpaceDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNameSpaceDetailResponseMultiError, or nil if none found.
func (m *GetNameSpaceDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNameSpaceDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetDescription()) > 1000 {
		err := GetNameSpaceDetailResponseValidationError{
			field:  "Description",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for State

	// no validation rules for Uid

	// no validation rules for IsDefault

	// no validation rules for Yaml

	// no validation rules for Labels

	// no validation rules for Annotations

	if len(errors) > 0 {
		return GetNameSpaceDetailResponseMultiError(errors)
	}

	return nil
}

// GetNameSpaceDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetNameSpaceDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNameSpaceDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNameSpaceDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNameSpaceDetailResponseMultiError) AllErrors() []error { return m }

// GetNameSpaceDetailResponseValidationError is the validation error returned
// by GetNameSpaceDetailResponse.Validate if the designated constraints aren't met.
type GetNameSpaceDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNameSpaceDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNameSpaceDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNameSpaceDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNameSpaceDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNameSpaceDetailResponseValidationError) ErrorName() string {
	return "GetNameSpaceDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNameSpaceDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNameSpaceDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNameSpaceDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNameSpaceDetailResponseValidationError{}
