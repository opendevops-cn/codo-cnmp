// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/namespace.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NameSpace_CreateNameSpace_FullMethodName       = "/namespace.NameSpace/CreateNameSpace"
	NameSpace_ListNameSpace_FullMethodName         = "/namespace.NameSpace/ListNameSpace"
	NameSpace_DeleteNameSpace_FullMethodName       = "/namespace.NameSpace/DeleteNameSpace"
	NameSpace_UpdateNameSpace_FullMethodName       = "/namespace.NameSpace/UpdateNameSpace"
	NameSpace_CreateNameSpaceByYaml_FullMethodName = "/namespace.NameSpace/CreateNameSpaceByYaml"
	NameSpace_UpdateNameSpaceByYaml_FullMethodName = "/namespace.NameSpace/UpdateNameSpaceByYaml"
	NameSpace_RefreshNameSpaceYaml_FullMethodName  = "/namespace.NameSpace/RefreshNameSpaceYaml"
	NameSpace_GetNameSpaceDetail_FullMethodName    = "/namespace.NameSpace/GetNameSpaceDetail"
)

// NameSpaceClient is the client API for NameSpace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameSpaceClient interface {
	// 管理-云原生管理-命名空间-创建
	CreateNameSpace(ctx context.Context, in *CreateNameSpaceRequest, opts ...grpc.CallOption) (*CreateNameSpaceResponse, error)
	// 查看-云原生管理-命名空间-列表
	ListNameSpace(ctx context.Context, in *ListNameSpaceRequest, opts ...grpc.CallOption) (*ListNameSpaceResponse, error)
	// 管理-云原生管理-命名空间-删除
	DeleteNameSpace(ctx context.Context, in *DeleteNameSpaceRequest, opts ...grpc.CallOption) (*DeleteNameSpaceResponse, error)
	// 管理-云原生管理-命名空间-编辑
	UpdateNameSpace(ctx context.Context, in *UpdateNameSpaceRequest, opts ...grpc.CallOption) (*DeleteNameSpaceResponse, error)
	// 管理-云原生管理-命名空间-YAML创建
	CreateNameSpaceByYaml(ctx context.Context, in *CreateNameSpaceByYamlRequest, opts ...grpc.CallOption) (*CreateNameSpaceResponse, error)
	// 管理-云原生管理-命名空间-YAML更新
	UpdateNameSpaceByYaml(ctx context.Context, in *CreateNameSpaceByYamlRequest, opts ...grpc.CallOption) (*CreateNameSpaceResponse, error)
	// 查看-云原生管理-命名空间-YAML
	RefreshNameSpaceYaml(ctx context.Context, in *GetNameSpaceYamlRequest, opts ...grpc.CallOption) (*GetNameSpaceYamlResponse, error)
	// 查看-云原生管理-命名空间-详情
	GetNameSpaceDetail(ctx context.Context, in *GetNameSpaceDetailRequest, opts ...grpc.CallOption) (*GetNameSpaceDetailResponse, error)
}

type nameSpaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameSpaceClient(cc grpc.ClientConnInterface) NameSpaceClient {
	return &nameSpaceClient{cc}
}

func (c *nameSpaceClient) CreateNameSpace(ctx context.Context, in *CreateNameSpaceRequest, opts ...grpc.CallOption) (*CreateNameSpaceResponse, error) {
	out := new(CreateNameSpaceResponse)
	err := c.cc.Invoke(ctx, NameSpace_CreateNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceClient) ListNameSpace(ctx context.Context, in *ListNameSpaceRequest, opts ...grpc.CallOption) (*ListNameSpaceResponse, error) {
	out := new(ListNameSpaceResponse)
	err := c.cc.Invoke(ctx, NameSpace_ListNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceClient) DeleteNameSpace(ctx context.Context, in *DeleteNameSpaceRequest, opts ...grpc.CallOption) (*DeleteNameSpaceResponse, error) {
	out := new(DeleteNameSpaceResponse)
	err := c.cc.Invoke(ctx, NameSpace_DeleteNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceClient) UpdateNameSpace(ctx context.Context, in *UpdateNameSpaceRequest, opts ...grpc.CallOption) (*DeleteNameSpaceResponse, error) {
	out := new(DeleteNameSpaceResponse)
	err := c.cc.Invoke(ctx, NameSpace_UpdateNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceClient) CreateNameSpaceByYaml(ctx context.Context, in *CreateNameSpaceByYamlRequest, opts ...grpc.CallOption) (*CreateNameSpaceResponse, error) {
	out := new(CreateNameSpaceResponse)
	err := c.cc.Invoke(ctx, NameSpace_CreateNameSpaceByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceClient) UpdateNameSpaceByYaml(ctx context.Context, in *CreateNameSpaceByYamlRequest, opts ...grpc.CallOption) (*CreateNameSpaceResponse, error) {
	out := new(CreateNameSpaceResponse)
	err := c.cc.Invoke(ctx, NameSpace_UpdateNameSpaceByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceClient) RefreshNameSpaceYaml(ctx context.Context, in *GetNameSpaceYamlRequest, opts ...grpc.CallOption) (*GetNameSpaceYamlResponse, error) {
	out := new(GetNameSpaceYamlResponse)
	err := c.cc.Invoke(ctx, NameSpace_RefreshNameSpaceYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameSpaceClient) GetNameSpaceDetail(ctx context.Context, in *GetNameSpaceDetailRequest, opts ...grpc.CallOption) (*GetNameSpaceDetailResponse, error) {
	out := new(GetNameSpaceDetailResponse)
	err := c.cc.Invoke(ctx, NameSpace_GetNameSpaceDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameSpaceServer is the server API for NameSpace service.
// All implementations must embed UnimplementedNameSpaceServer
// for forward compatibility
type NameSpaceServer interface {
	// 管理-云原生管理-命名空间-创建
	CreateNameSpace(context.Context, *CreateNameSpaceRequest) (*CreateNameSpaceResponse, error)
	// 查看-云原生管理-命名空间-列表
	ListNameSpace(context.Context, *ListNameSpaceRequest) (*ListNameSpaceResponse, error)
	// 管理-云原生管理-命名空间-删除
	DeleteNameSpace(context.Context, *DeleteNameSpaceRequest) (*DeleteNameSpaceResponse, error)
	// 管理-云原生管理-命名空间-编辑
	UpdateNameSpace(context.Context, *UpdateNameSpaceRequest) (*DeleteNameSpaceResponse, error)
	// 管理-云原生管理-命名空间-YAML创建
	CreateNameSpaceByYaml(context.Context, *CreateNameSpaceByYamlRequest) (*CreateNameSpaceResponse, error)
	// 管理-云原生管理-命名空间-YAML更新
	UpdateNameSpaceByYaml(context.Context, *CreateNameSpaceByYamlRequest) (*CreateNameSpaceResponse, error)
	// 查看-云原生管理-命名空间-YAML
	RefreshNameSpaceYaml(context.Context, *GetNameSpaceYamlRequest) (*GetNameSpaceYamlResponse, error)
	// 查看-云原生管理-命名空间-详情
	GetNameSpaceDetail(context.Context, *GetNameSpaceDetailRequest) (*GetNameSpaceDetailResponse, error)
	mustEmbedUnimplementedNameSpaceServer()
}

// UnimplementedNameSpaceServer must be embedded to have forward compatible implementations.
type UnimplementedNameSpaceServer struct {
}

func (UnimplementedNameSpaceServer) CreateNameSpace(context.Context, *CreateNameSpaceRequest) (*CreateNameSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNameSpace not implemented")
}
func (UnimplementedNameSpaceServer) ListNameSpace(context.Context, *ListNameSpaceRequest) (*ListNameSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNameSpace not implemented")
}
func (UnimplementedNameSpaceServer) DeleteNameSpace(context.Context, *DeleteNameSpaceRequest) (*DeleteNameSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNameSpace not implemented")
}
func (UnimplementedNameSpaceServer) UpdateNameSpace(context.Context, *UpdateNameSpaceRequest) (*DeleteNameSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNameSpace not implemented")
}
func (UnimplementedNameSpaceServer) CreateNameSpaceByYaml(context.Context, *CreateNameSpaceByYamlRequest) (*CreateNameSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNameSpaceByYaml not implemented")
}
func (UnimplementedNameSpaceServer) UpdateNameSpaceByYaml(context.Context, *CreateNameSpaceByYamlRequest) (*CreateNameSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNameSpaceByYaml not implemented")
}
func (UnimplementedNameSpaceServer) RefreshNameSpaceYaml(context.Context, *GetNameSpaceYamlRequest) (*GetNameSpaceYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshNameSpaceYaml not implemented")
}
func (UnimplementedNameSpaceServer) GetNameSpaceDetail(context.Context, *GetNameSpaceDetailRequest) (*GetNameSpaceDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameSpaceDetail not implemented")
}
func (UnimplementedNameSpaceServer) mustEmbedUnimplementedNameSpaceServer() {}

// UnsafeNameSpaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameSpaceServer will
// result in compilation errors.
type UnsafeNameSpaceServer interface {
	mustEmbedUnimplementedNameSpaceServer()
}

func RegisterNameSpaceServer(s grpc.ServiceRegistrar, srv NameSpaceServer) {
	s.RegisterService(&NameSpace_ServiceDesc, srv)
}

func _NameSpace_CreateNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServer).CreateNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpace_CreateNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServer).CreateNameSpace(ctx, req.(*CreateNameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpace_ListNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServer).ListNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpace_ListNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServer).ListNameSpace(ctx, req.(*ListNameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpace_DeleteNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServer).DeleteNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpace_DeleteNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServer).DeleteNameSpace(ctx, req.(*DeleteNameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpace_UpdateNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNameSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServer).UpdateNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpace_UpdateNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServer).UpdateNameSpace(ctx, req.(*UpdateNameSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpace_CreateNameSpaceByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameSpaceByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServer).CreateNameSpaceByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpace_CreateNameSpaceByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServer).CreateNameSpaceByYaml(ctx, req.(*CreateNameSpaceByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpace_UpdateNameSpaceByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameSpaceByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServer).UpdateNameSpaceByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpace_UpdateNameSpaceByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServer).UpdateNameSpaceByYaml(ctx, req.(*CreateNameSpaceByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpace_RefreshNameSpaceYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameSpaceYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServer).RefreshNameSpaceYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpace_RefreshNameSpaceYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServer).RefreshNameSpaceYaml(ctx, req.(*GetNameSpaceYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameSpace_GetNameSpaceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameSpaceDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameSpaceServer).GetNameSpaceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameSpace_GetNameSpaceDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameSpaceServer).GetNameSpaceDetail(ctx, req.(*GetNameSpaceDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameSpace_ServiceDesc is the grpc.ServiceDesc for NameSpace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameSpace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "namespace.NameSpace",
	HandlerType: (*NameSpaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNameSpace",
			Handler:    _NameSpace_CreateNameSpace_Handler,
		},
		{
			MethodName: "ListNameSpace",
			Handler:    _NameSpace_ListNameSpace_Handler,
		},
		{
			MethodName: "DeleteNameSpace",
			Handler:    _NameSpace_DeleteNameSpace_Handler,
		},
		{
			MethodName: "UpdateNameSpace",
			Handler:    _NameSpace_UpdateNameSpace_Handler,
		},
		{
			MethodName: "CreateNameSpaceByYaml",
			Handler:    _NameSpace_CreateNameSpaceByYaml_Handler,
		},
		{
			MethodName: "UpdateNameSpaceByYaml",
			Handler:    _NameSpace_UpdateNameSpaceByYaml_Handler,
		},
		{
			MethodName: "RefreshNameSpaceYaml",
			Handler:    _NameSpace_RefreshNameSpaceYaml_Handler,
		},
		{
			MethodName: "GetNameSpaceDetail",
			Handler:    _NameSpace_GetNameSpaceDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/namespace.v1.proto",
}
