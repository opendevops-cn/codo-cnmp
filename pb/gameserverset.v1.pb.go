// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/gameserverset.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 更新方式类型
type GameServerSetStrategy_UpdateStrategyType int32

const (
	// 滚动更新
	GameServerSetStrategy_RollingUpdate GameServerSetStrategy_UpdateStrategyType = 0
	// 删除后更新
	GameServerSetStrategy_OnDelete GameServerSetStrategy_UpdateStrategyType = 1
)

// Enum value maps for GameServerSetStrategy_UpdateStrategyType.
var (
	GameServerSetStrategy_UpdateStrategyType_name = map[int32]string{
		0: "RollingUpdate",
		1: "OnDelete",
	}
	GameServerSetStrategy_UpdateStrategyType_value = map[string]int32{
		"RollingUpdate": 0,
		"OnDelete":      1,
	}
)

func (x GameServerSetStrategy_UpdateStrategyType) Enum() *GameServerSetStrategy_UpdateStrategyType {
	p := new(GameServerSetStrategy_UpdateStrategyType)
	*p = x
	return p
}

func (x GameServerSetStrategy_UpdateStrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameServerSetStrategy_UpdateStrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_gameserverset_v1_proto_enumTypes[0].Descriptor()
}

func (GameServerSetStrategy_UpdateStrategyType) Type() protoreflect.EnumType {
	return &file_pb_gameserverset_v1_proto_enumTypes[0]
}

func (x GameServerSetStrategy_UpdateStrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameServerSetStrategy_UpdateStrategyType.Descriptor instead.
func (GameServerSetStrategy_UpdateStrategyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{3, 0}
}

// pod更新策略
type GameServerSetStrategy_PodUpdateStrategy int32

const (
	// 优先原地升级
	GameServerSetStrategy_InPlaceIfPossible GameServerSetStrategy_PodUpdateStrategy = 0
	// 仅原地升级
	GameServerSetStrategy_InPlaceOnly GameServerSetStrategy_PodUpdateStrategy = 1
	// 重建升级
	GameServerSetStrategy_Recreate GameServerSetStrategy_PodUpdateStrategy = 2
)

// Enum value maps for GameServerSetStrategy_PodUpdateStrategy.
var (
	GameServerSetStrategy_PodUpdateStrategy_name = map[int32]string{
		0: "InPlaceIfPossible",
		1: "InPlaceOnly",
		2: "Recreate",
	}
	GameServerSetStrategy_PodUpdateStrategy_value = map[string]int32{
		"InPlaceIfPossible": 0,
		"InPlaceOnly":       1,
		"Recreate":          2,
	}
)

func (x GameServerSetStrategy_PodUpdateStrategy) Enum() *GameServerSetStrategy_PodUpdateStrategy {
	p := new(GameServerSetStrategy_PodUpdateStrategy)
	*p = x
	return p
}

func (x GameServerSetStrategy_PodUpdateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameServerSetStrategy_PodUpdateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_gameserverset_v1_proto_enumTypes[1].Descriptor()
}

func (GameServerSetStrategy_PodUpdateStrategy) Type() protoreflect.EnumType {
	return &file_pb_gameserverset_v1_proto_enumTypes[1]
}

func (x GameServerSetStrategy_PodUpdateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameServerSetStrategy_PodUpdateStrategy.Descriptor instead.
func (GameServerSetStrategy_PodUpdateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{3, 1}
}

// 更新方式类型
type UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType int32

const (
	// 滚动更新
	UpdateGameServerSetUpgradeStrategyRequest_RollingUpdate UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType = 0
	// 删除后更新
	UpdateGameServerSetUpgradeStrategyRequest_OnDelete UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType = 1
)

// Enum value maps for UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType.
var (
	UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType_name = map[int32]string{
		0: "RollingUpdate",
		1: "OnDelete",
	}
	UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType_value = map[string]int32{
		"RollingUpdate": 0,
		"OnDelete":      1,
	}
)

func (x UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType) Enum() *UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType {
	p := new(UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType)
	*p = x
	return p
}

func (x UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_gameserverset_v1_proto_enumTypes[2].Descriptor()
}

func (UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType) Type() protoreflect.EnumType {
	return &file_pb_gameserverset_v1_proto_enumTypes[2]
}

func (x UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType.Descriptor instead.
func (UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{24, 0}
}

// pod更新策略
type UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy int32

const (
	// 优先原地升级
	UpdateGameServerSetUpgradeStrategyRequest_InPlaceIfPossible UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy = 0
	// 仅原地升级
	UpdateGameServerSetUpgradeStrategyRequest_InPlaceOnly UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy = 1
	// 重建升级
	UpdateGameServerSetUpgradeStrategyRequest_Recreate UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy = 2
)

// Enum value maps for UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy.
var (
	UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy_name = map[int32]string{
		0: "InPlaceIfPossible",
		1: "InPlaceOnly",
		2: "Recreate",
	}
	UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy_value = map[string]int32{
		"InPlaceIfPossible": 0,
		"InPlaceOnly":       1,
		"Recreate":          2,
	}
)

func (x UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy) Enum() *UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy {
	p := new(UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy)
	*p = x
	return p
}

func (x UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_gameserverset_v1_proto_enumTypes[3].Descriptor()
}

func (UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy) Type() protoreflect.EnumType {
	return &file_pb_gameserverset_v1_proto_enumTypes[3]
}

func (x UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy.Descriptor instead.
func (UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{24, 1}
}

// GameServerSet列表请求
type ListGameServerSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,7,opt,name=list_all,proto3" json:"list_all,optional"`
}

func (x *ListGameServerSetRequest) Reset() {
	*x = ListGameServerSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGameServerSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGameServerSetRequest) ProtoMessage() {}

func (x *ListGameServerSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGameServerSetRequest.ProtoReflect.Descriptor instead.
func (*ListGameServerSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListGameServerSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListGameServerSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListGameServerSetRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListGameServerSetRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListGameServerSetRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGameServerSetRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

type GameServerSetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of GameServerSet condition.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	// Status of the condition, one of True, False, Unknown.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,optional"`
	// The last time this condition was updated.
	// 秒级时间戳
	LastUpdateTime uint32 `protobuf:"varint,6,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,optional"`
	// Last time the condition transitioned from one status to another.
	// 秒级时间戳
	LastTransitionTime uint32 `protobuf:"varint,7,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,optional"`
	// The reason for the condition's last transition.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,optional"`
	// A human readable message indicating details about the transition.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,optional"`
}

func (x *GameServerSetCondition) Reset() {
	*x = GameServerSetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerSetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerSetCondition) ProtoMessage() {}

func (x *GameServerSetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerSetCondition.ProtoReflect.Descriptor instead.
func (*GameServerSetCondition) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{1}
}

func (x *GameServerSetCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GameServerSetCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GameServerSetCondition) GetLastUpdateTime() uint32 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *GameServerSetCondition) GetLastTransitionTime() uint32 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *GameServerSetCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GameServerSetCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GameServerSetStatus is the most recently observed status of the GameServerSet.
type GameServerSetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedGeneration uint32 `protobuf:"varint,1,opt,name=observedGeneration,proto3" json:"observedGeneration,optional"`
	// 副本数量
	Replicas uint32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,optional"`
	// 已更新副本数量
	UpdatedReplicas uint32 `protobuf:"varint,3,opt,name=updatedReplicas,proto3" json:"updatedReplicas,optional"`
	// 已就绪副本数量
	ReadyReplicas uint32 `protobuf:"varint,7,opt,name=readyReplicas,proto3" json:"readyReplicas,optional"`
	// 可用副本数量
	AvailableReplicas uint32 `protobuf:"varint,4,opt,name=availableReplicas,proto3" json:"availableReplicas,optional"`
	// 不可用副本数量
	UnavailableReplicas uint32 `protobuf:"varint,5,opt,name=unavailableReplicas,proto3" json:"unavailableReplicas,optional"`
	CollisionCount      uint32 `protobuf:"varint,8,opt,name=collisionCount,proto3" json:"collisionCount,optional"`
}

func (x *GameServerSetStatus) Reset() {
	*x = GameServerSetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerSetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerSetStatus) ProtoMessage() {}

func (x *GameServerSetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerSetStatus.ProtoReflect.Descriptor instead.
func (*GameServerSetStatus) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{2}
}

func (x *GameServerSetStatus) GetObservedGeneration() uint32 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *GameServerSetStatus) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *GameServerSetStatus) GetUpdatedReplicas() uint32 {
	if x != nil {
		return x.UpdatedReplicas
	}
	return 0
}

func (x *GameServerSetStatus) GetReadyReplicas() uint32 {
	if x != nil {
		return x.ReadyReplicas
	}
	return 0
}

func (x *GameServerSetStatus) GetAvailableReplicas() uint32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *GameServerSetStatus) GetUnavailableReplicas() uint32 {
	if x != nil {
		return x.UnavailableReplicas
	}
	return 0
}

func (x *GameServerSetStatus) GetCollisionCount() uint32 {
	if x != nil {
		return x.CollisionCount
	}
	return 0
}

// GameServerSet策略
type GameServerSetStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 更新方式
	UpdateStrategyType GameServerSetStrategy_UpdateStrategyType `protobuf:"varint,1,opt,name=update_strategy_type,json=updateStrategyType,proto3,enum=gameserverset.GameServerSetStrategy_UpdateStrategyType" json:"update_strategy_type,optional"`
	// pod更新策略
	PodUpdateStrategyType GameServerSetStrategy_PodUpdateStrategy `protobuf:"varint,2,opt,name=pod_update_strategy_type,json=podUpdateStrategyType,proto3,enum=gameserverset.GameServerSetStrategy_PodUpdateStrategy" json:"pod_update_strategy_type,optional"`
	// 优雅升级等待时间
	GracePeriodSeconds uint32 `protobuf:"varint,3,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,optional"`
	// 最大超出副本数
	MaxSurge string `protobuf:"bytes,4,opt,name=max_surge,json=maxSurge,proto3" json:"max_surge,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,5,opt,name=max_unavailable,json=maxUnavailable,proto3" json:"max_unavailable,optional"`
	// 分片数
	Partition uint32 `protobuf:"varint,6,opt,name=partition,proto3" json:"partition,optional"`
}

func (x *GameServerSetStrategy) Reset() {
	*x = GameServerSetStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerSetStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerSetStrategy) ProtoMessage() {}

func (x *GameServerSetStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerSetStrategy.ProtoReflect.Descriptor instead.
func (*GameServerSetStrategy) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{3}
}

func (x *GameServerSetStrategy) GetUpdateStrategyType() GameServerSetStrategy_UpdateStrategyType {
	if x != nil {
		return x.UpdateStrategyType
	}
	return GameServerSetStrategy_RollingUpdate
}

func (x *GameServerSetStrategy) GetPodUpdateStrategyType() GameServerSetStrategy_PodUpdateStrategy {
	if x != nil {
		return x.PodUpdateStrategyType
	}
	return GameServerSetStrategy_InPlaceIfPossible
}

func (x *GameServerSetStrategy) GetGracePeriodSeconds() uint32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

func (x *GameServerSetStrategy) GetMaxSurge() string {
	if x != nil {
		return x.MaxSurge
	}
	return ""
}

func (x *GameServerSetStrategy) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

func (x *GameServerSetStrategy) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

// GameServerSet列表项
type GameServerSetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 容器
	Containers []*v1.Container `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,optional"`
	// 状态
	Status *GameServerSetStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,5,opt,name=create_time,proto3" json:"create_time,optional"`
	// 标签
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// YAML
	Yaml string `protobuf:"bytes,7,opt,name=yaml,proto3" json:"yaml,optional"`
	// 注解
	Annotations map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 副本数量
	Replicas uint32 `protobuf:"varint,9,opt,name=replicas,proto3" json:"replicas,optional"`
	// 更新策略
	UpdateStrategy *GameServerSetStrategy `protobuf:"bytes,10,opt,name=update_strategy,json=updateStrategy,proto3" json:"update_strategy,optional"`
	// 选择器
	Selector *v11.LabelSelector `protobuf:"bytes,11,opt,name=selector,proto3" json:"selector,optional"`
	// 健康检查
	Conditions []*GameServerSetCondition `protobuf:"bytes,12,rep,name=conditions,proto3" json:"conditions,optional"`
	// 期望副本数量
	SpecReplicas uint32 `protobuf:"varint,13,opt,name=spec_replicas,json=specReplicas,proto3" json:"spec_replicas,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,14,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
}

func (x *GameServerSetItem) Reset() {
	*x = GameServerSetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerSetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerSetItem) ProtoMessage() {}

func (x *GameServerSetItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerSetItem.ProtoReflect.Descriptor instead.
func (*GameServerSetItem) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{4}
}

func (x *GameServerSetItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameServerSetItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GameServerSetItem) GetContainers() []*v1.Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *GameServerSetItem) GetStatus() *GameServerSetStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GameServerSetItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GameServerSetItem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GameServerSetItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *GameServerSetItem) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *GameServerSetItem) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *GameServerSetItem) GetUpdateStrategy() *GameServerSetStrategy {
	if x != nil {
		return x.UpdateStrategy
	}
	return nil
}

func (x *GameServerSetItem) GetSelector() *v11.LabelSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *GameServerSetItem) GetConditions() []*GameServerSetCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *GameServerSetItem) GetSpecReplicas() uint32 {
	if x != nil {
		return x.SpecReplicas
	}
	return 0
}

func (x *GameServerSetItem) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

// GameServerSet列表响应
type ListGameServerSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 列表
	List []*GameServerSetItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListGameServerSetResponse) Reset() {
	*x = ListGameServerSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGameServerSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGameServerSetResponse) ProtoMessage() {}

func (x *ListGameServerSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGameServerSetResponse.ProtoReflect.Descriptor instead.
func (*ListGameServerSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ListGameServerSetResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListGameServerSetResponse) GetList() []*GameServerSetItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 创建GameServerSet请求
type CreateOrUpdateGameServerSetByYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// YAML
	Yaml string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *CreateOrUpdateGameServerSetByYamlRequest) Reset() {
	*x = CreateOrUpdateGameServerSetByYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateGameServerSetByYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateGameServerSetByYamlRequest) ProtoMessage() {}

func (x *CreateOrUpdateGameServerSetByYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateGameServerSetByYamlRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateGameServerSetByYamlRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrUpdateGameServerSetByYamlRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateOrUpdateGameServerSetByYamlRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

// 创建GameServerSet响应
type CreateOrUpdateGameServerSetByYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrUpdateGameServerSetByYamlResponse) Reset() {
	*x = CreateOrUpdateGameServerSetByYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateGameServerSetByYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateGameServerSetByYamlResponse) ProtoMessage() {}

func (x *CreateOrUpdateGameServerSetByYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateGameServerSetByYamlResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateGameServerSetByYamlResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{7}
}

// 更新GameServerSet请求
type UpdateGameServerSetByYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// YAML
	Yaml string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *UpdateGameServerSetByYamlRequest) Reset() {
	*x = UpdateGameServerSetByYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameServerSetByYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameServerSetByYamlRequest) ProtoMessage() {}

func (x *UpdateGameServerSetByYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameServerSetByYamlRequest.ProtoReflect.Descriptor instead.
func (*UpdateGameServerSetByYamlRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateGameServerSetByYamlRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateGameServerSetByYamlRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

// 更新GameServerSet响应
type UpdateGameServerSetByYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGameServerSetByYamlResponse) Reset() {
	*x = UpdateGameServerSetByYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameServerSetByYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameServerSetByYamlResponse) ProtoMessage() {}

func (x *UpdateGameServerSetByYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameServerSetByYamlResponse.ProtoReflect.Descriptor instead.
func (*UpdateGameServerSetByYamlResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{9}
}

// 删除GameServerSet请求
type DeleteGameServerSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *DeleteGameServerSetRequest) Reset() {
	*x = DeleteGameServerSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGameServerSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGameServerSetRequest) ProtoMessage() {}

func (x *DeleteGameServerSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGameServerSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteGameServerSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteGameServerSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteGameServerSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteGameServerSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 删除GameServerSet响应
type DeleteGameServerSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGameServerSetResponse) Reset() {
	*x = DeleteGameServerSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGameServerSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGameServerSetResponse) ProtoMessage() {}

func (x *DeleteGameServerSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGameServerSetResponse.ProtoReflect.Descriptor instead.
func (*DeleteGameServerSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{11}
}

// 重启GameServerSet请求
type RestartGameServerSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *RestartGameServerSetRequest) Reset() {
	*x = RestartGameServerSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartGameServerSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartGameServerSetRequest) ProtoMessage() {}

func (x *RestartGameServerSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartGameServerSetRequest.ProtoReflect.Descriptor instead.
func (*RestartGameServerSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{12}
}

func (x *RestartGameServerSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RestartGameServerSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestartGameServerSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 重启GameServerSet响应
type RestartGameServerSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartGameServerSetResponse) Reset() {
	*x = RestartGameServerSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartGameServerSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartGameServerSetResponse) ProtoMessage() {}

func (x *RestartGameServerSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartGameServerSetResponse.ProtoReflect.Descriptor instead.
func (*RestartGameServerSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{13}
}

// 伸缩GameServerSet请求
type ScaleGameServerSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 副本数量
	Replicas uint32 `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,optional"`
}

func (x *ScaleGameServerSetRequest) Reset() {
	*x = ScaleGameServerSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleGameServerSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleGameServerSetRequest) ProtoMessage() {}

func (x *ScaleGameServerSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleGameServerSetRequest.ProtoReflect.Descriptor instead.
func (*ScaleGameServerSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{14}
}

func (x *ScaleGameServerSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ScaleGameServerSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScaleGameServerSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScaleGameServerSetRequest) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

// 伸缩GameServerSet响应
type ScaleGameServerSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScaleGameServerSetResponse) Reset() {
	*x = ScaleGameServerSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleGameServerSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleGameServerSetResponse) ProtoMessage() {}

func (x *ScaleGameServerSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleGameServerSetResponse.ProtoReflect.Descriptor instead.
func (*ScaleGameServerSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{15}
}

// 查看GameServerSet详情请求
type GameServerSetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *GameServerSetDetailRequest) Reset() {
	*x = GameServerSetDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerSetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerSetDetailRequest) ProtoMessage() {}

func (x *GameServerSetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerSetDetailRequest.ProtoReflect.Descriptor instead.
func (*GameServerSetDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{16}
}

func (x *GameServerSetDetailRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GameServerSetDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameServerSetDetailRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 查看GameServerSet详情响应
type GameServerSetDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础信息
	Detail *GameServerSetItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *GameServerSetDetailResponse) Reset() {
	*x = GameServerSetDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerSetDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerSetDetailResponse) ProtoMessage() {}

func (x *GameServerSetDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerSetDetailResponse.ProtoReflect.Descriptor instead.
func (*GameServerSetDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{17}
}

func (x *GameServerSetDetailResponse) GetDetail() *GameServerSetItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 回滚GameServerSet请求
type RollbackGameServerSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 版本号
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,optional"`
}

func (x *RollbackGameServerSetRequest) Reset() {
	*x = RollbackGameServerSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackGameServerSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackGameServerSetRequest) ProtoMessage() {}

func (x *RollbackGameServerSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackGameServerSetRequest.ProtoReflect.Descriptor instead.
func (*RollbackGameServerSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{18}
}

func (x *RollbackGameServerSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RollbackGameServerSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RollbackGameServerSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RollbackGameServerSetRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// 回滚GameServerSet响应
type RollbackGameServerSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RollbackGameServerSetResponse) Reset() {
	*x = RollbackGameServerSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackGameServerSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackGameServerSetResponse) ProtoMessage() {}

func (x *RollbackGameServerSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackGameServerSetResponse.ProtoReflect.Descriptor instead.
func (*RollbackGameServerSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{19}
}

// 删除GameServerSet指定的pod请求
type DeleteGameServerSetPodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称
	PodNames []string `protobuf:"bytes,4,rep,name=pod_names,json=podNames,proto3" json:"pod_names,optional"`
}

func (x *DeleteGameServerSetPodRequest) Reset() {
	*x = DeleteGameServerSetPodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGameServerSetPodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGameServerSetPodRequest) ProtoMessage() {}

func (x *DeleteGameServerSetPodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGameServerSetPodRequest.ProtoReflect.Descriptor instead.
func (*DeleteGameServerSetPodRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteGameServerSetPodRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteGameServerSetPodRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteGameServerSetPodRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteGameServerSetPodRequest) GetPodNames() []string {
	if x != nil {
		return x.PodNames
	}
	return nil
}

// 删除GameServerSet指定的pod响应
type DeleteGameServerSetPodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGameServerSetPodResponse) Reset() {
	*x = DeleteGameServerSetPodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGameServerSetPodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGameServerSetPodResponse) ProtoMessage() {}

func (x *DeleteGameServerSetPodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGameServerSetPodResponse.ProtoReflect.Descriptor instead.
func (*DeleteGameServerSetPodResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{21}
}

// 流式扩容GameServerSet请求
type UpdateGameServerSetScaleStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 最小ready时间
	MinReadySeconds uint32 `protobuf:"varint,4,opt,name=minReadySeconds,proto3" json:"minReadySeconds,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,5,opt,name=MaxUnavailable,proto3" json:"MaxUnavailable,optional"`
}

func (x *UpdateGameServerSetScaleStrategyRequest) Reset() {
	*x = UpdateGameServerSetScaleStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameServerSetScaleStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameServerSetScaleStrategyRequest) ProtoMessage() {}

func (x *UpdateGameServerSetScaleStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameServerSetScaleStrategyRequest.ProtoReflect.Descriptor instead.
func (*UpdateGameServerSetScaleStrategyRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateGameServerSetScaleStrategyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateGameServerSetScaleStrategyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGameServerSetScaleStrategyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateGameServerSetScaleStrategyRequest) GetMinReadySeconds() uint32 {
	if x != nil {
		return x.MinReadySeconds
	}
	return 0
}

func (x *UpdateGameServerSetScaleStrategyRequest) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

// 流式扩容GameServerSet响应
type UpdateGameServerSetScaleStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGameServerSetScaleStrategyResponse) Reset() {
	*x = UpdateGameServerSetScaleStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameServerSetScaleStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameServerSetScaleStrategyResponse) ProtoMessage() {}

func (x *UpdateGameServerSetScaleStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameServerSetScaleStrategyResponse.ProtoReflect.Descriptor instead.
func (*UpdateGameServerSetScaleStrategyResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{23}
}

// 修改升级策略请求
type UpdateGameServerSetUpgradeStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 更新方式
	UpdateStrategyType UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType `protobuf:"varint,4,opt,name=update_strategy_type,json=updateStrategyType,proto3,enum=gameserverset.UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType" json:"update_strategy_type,optional"`
	// pod更新策略
	PodUpdateStrategyType UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy `protobuf:"varint,5,opt,name=pod_update_strategy_type,json=podUpdateStrategyType,proto3,enum=gameserverset.UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy" json:"pod_update_strategy_type,optional"`
	// 优雅升级等待时间
	GracePeriodSeconds uint32 `protobuf:"varint,6,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,optional"`
	// 最大超出副本数
	MaxSurge string `protobuf:"bytes,7,opt,name=max_surge,json=maxSurge,proto3" json:"max_surge,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,8,opt,name=max_unavailable,json=maxUnavailable,proto3" json:"max_unavailable,optional"`
	// 分片数
	Partition uint32 `protobuf:"varint,9,opt,name=partition,proto3" json:"partition,optional"`
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) Reset() {
	*x = UpdateGameServerSetUpgradeStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameServerSetUpgradeStrategyRequest) ProtoMessage() {}

func (x *UpdateGameServerSetUpgradeStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameServerSetUpgradeStrategyRequest.ProtoReflect.Descriptor instead.
func (*UpdateGameServerSetUpgradeStrategyRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetUpdateStrategyType() UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType {
	if x != nil {
		return x.UpdateStrategyType
	}
	return UpdateGameServerSetUpgradeStrategyRequest_RollingUpdate
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetPodUpdateStrategyType() UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy {
	if x != nil {
		return x.PodUpdateStrategyType
	}
	return UpdateGameServerSetUpgradeStrategyRequest_InPlaceIfPossible
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetGracePeriodSeconds() uint32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetMaxSurge() string {
	if x != nil {
		return x.MaxSurge
	}
	return ""
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

func (x *UpdateGameServerSetUpgradeStrategyRequest) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

// 修改升级策略响应
type UpdateGameServerSetUpgradeStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGameServerSetUpgradeStrategyResponse) Reset() {
	*x = UpdateGameServerSetUpgradeStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameServerSetUpgradeStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameServerSetUpgradeStrategyResponse) ProtoMessage() {}

func (x *UpdateGameServerSetUpgradeStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameServerSetUpgradeStrategyResponse.ProtoReflect.Descriptor instead.
func (*UpdateGameServerSetUpgradeStrategyResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{25}
}

// 查看GameServerSet历史版本请求
type ListGameServerSetReversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *ListGameServerSetReversionRequest) Reset() {
	*x = ListGameServerSetReversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGameServerSetReversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGameServerSetReversionRequest) ProtoMessage() {}

func (x *ListGameServerSetReversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGameServerSetReversionRequest.ProtoReflect.Descriptor instead.
func (*ListGameServerSetReversionRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{26}
}

func (x *ListGameServerSetReversionRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListGameServerSetReversionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListGameServerSetReversionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type GameServerSetControllerReversionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 镜像
	Images []string `protobuf:"bytes,2,rep,name=images,proto3" json:"images,optional"`
	// 版本
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,optional"`
	// 版本详情
	Yaml string `protobuf:"bytes,4,opt,name=yaml,proto3" json:"yaml,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,5,opt,name=create_time,proto3" json:"create_time,optional"`
	// 是否当前版本
	IsCurrent bool `protobuf:"varint,6,opt,name=is_current,json=isCurrent,proto3" json:"is_current,optional"`
}

func (x *GameServerSetControllerReversionItem) Reset() {
	*x = GameServerSetControllerReversionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerSetControllerReversionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerSetControllerReversionItem) ProtoMessage() {}

func (x *GameServerSetControllerReversionItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerSetControllerReversionItem.ProtoReflect.Descriptor instead.
func (*GameServerSetControllerReversionItem) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{27}
}

func (x *GameServerSetControllerReversionItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameServerSetControllerReversionItem) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *GameServerSetControllerReversionItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GameServerSetControllerReversionItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *GameServerSetControllerReversionItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GameServerSetControllerReversionItem) GetIsCurrent() bool {
	if x != nil {
		return x.IsCurrent
	}
	return false
}

// 查看GameServerSet历史版本响应
type ListGameServerSetReversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列表
	List []*GameServerSetControllerReversionItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,optional"`
	// 总数
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,optional"`
}

func (x *ListGameServerSetReversionResponse) Reset() {
	*x = ListGameServerSetReversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserverset_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGameServerSetReversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGameServerSetReversionResponse) ProtoMessage() {}

func (x *ListGameServerSetReversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserverset_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGameServerSetReversionResponse.ProtoReflect.Descriptor instead.
func (*ListGameServerSetReversionResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserverset_v1_proto_rawDescGZIP(), []int{28}
}

func (x *ListGameServerSetReversionResponse) GetList() []*GameServerSetControllerReversionItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListGameServerSetReversionResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_pb_gameserverset_v1_proto protoreflect.FileDescriptor

var file_pb_gameserverset_v1_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x62, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6b,
	0x38, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6b, 0x38, 0x73, 0x2f,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x13, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x31, 0x0a,
	0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaf, 0x04, 0x0a, 0x15, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x76, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7c, 0x0a, 0x18,
	0x70, 0x6f, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x2e, 0x50, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x15, 0x70, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x12, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x28, 0x00, 0x52, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75,
	0x72, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x75,
	0x72, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x01, 0x22, 0x49, 0x0a, 0x11, 0x50, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x66, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x02, 0x22, 0x9a, 0x07, 0x0a,
	0x11, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x58,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x54, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x28, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x19, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x79, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x2b, 0x0a,
	0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61,
	0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x20, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x23, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x1a, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5c, 0x0a, 0x1b, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x1c, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x24, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52,
	0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x32, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe6, 0x05, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x18, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x15, 0x70, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52,
	0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x72, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x72, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x55, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x22, 0x49,
	0x0a, 0x11, 0x50, 0x6f, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x66,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x02, 0x22, 0x2c, 0x0a, 0x2a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x24, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x25, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xdc,
	0x15, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x8f, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0xd3, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x37, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59,
	0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xba, 0x01, 0xc2, 0xdb,
	0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x77, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x10, 0x59, 0x61, 0x6d, 0x6c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x15, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x1a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x97, 0x02, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x29, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca,
	0xdb, 0xaa, 0x03, 0x77, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x12, 0x10, 0x59, 0x61, 0x6d, 0x6c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x15, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x0d,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x91, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03,
	0x6d, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x12, 0x06, 0xe9, 0x87, 0x8d, 0xe5, 0x90, 0xaf, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x15, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x1a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x89, 0x02, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x28, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x9d, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x6d, 0x0a,
	0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x06,
	0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x15, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a,
	0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x1a, 0x0c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x29, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x95, 0x02, 0x0a, 0x15, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03,
	0x6d, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x12, 0x06, 0xe5, 0x9b, 0x9e, 0xe6, 0xbb, 0x9a, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x15, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x1a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x9e, 0x02, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xa5, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x70, 0x0a, 0x0d, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x12, 0x09, 0xe5, 0x88,
	0xa0, 0xe9, 0x99, 0xa4, 0x70, 0x6f, 0x64, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x15, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x1a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x1a,
	0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x70, 0x6f,
	0x64, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x36, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x32, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01,
	0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0xca, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x38, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03,
	0x79, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x12, 0x12, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe7, 0xad,
	0x96, 0xe7, 0x95, 0xa5, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x15, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x0d, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0xc8, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3c, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x11, 0x5a,
	0x0f, 0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_gameserverset_v1_proto_rawDescOnce sync.Once
	file_pb_gameserverset_v1_proto_rawDescData = file_pb_gameserverset_v1_proto_rawDesc
)

func file_pb_gameserverset_v1_proto_rawDescGZIP() []byte {
	file_pb_gameserverset_v1_proto_rawDescOnce.Do(func() {
		file_pb_gameserverset_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_gameserverset_v1_proto_rawDescData)
	})
	return file_pb_gameserverset_v1_proto_rawDescData
}

var file_pb_gameserverset_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pb_gameserverset_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pb_gameserverset_v1_proto_goTypes = []interface{}{
	(GameServerSetStrategy_UpdateStrategyType)(0),                     // 0: gameserverset.GameServerSetStrategy.UpdateStrategyType
	(GameServerSetStrategy_PodUpdateStrategy)(0),                      // 1: gameserverset.GameServerSetStrategy.PodUpdateStrategy
	(UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType)(0), // 2: gameserverset.UpdateGameServerSetUpgradeStrategyRequest.UpdateStrategyType
	(UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy)(0),  // 3: gameserverset.UpdateGameServerSetUpgradeStrategyRequest.PodUpdateStrategy
	(*ListGameServerSetRequest)(nil),                                  // 4: gameserverset.ListGameServerSetRequest
	(*GameServerSetCondition)(nil),                                    // 5: gameserverset.GameServerSetCondition
	(*GameServerSetStatus)(nil),                                       // 6: gameserverset.GameServerSetStatus
	(*GameServerSetStrategy)(nil),                                     // 7: gameserverset.GameServerSetStrategy
	(*GameServerSetItem)(nil),                                         // 8: gameserverset.GameServerSetItem
	(*ListGameServerSetResponse)(nil),                                 // 9: gameserverset.ListGameServerSetResponse
	(*CreateOrUpdateGameServerSetByYamlRequest)(nil),                  // 10: gameserverset.CreateOrUpdateGameServerSetByYamlRequest
	(*CreateOrUpdateGameServerSetByYamlResponse)(nil),                 // 11: gameserverset.CreateOrUpdateGameServerSetByYamlResponse
	(*UpdateGameServerSetByYamlRequest)(nil),                          // 12: gameserverset.UpdateGameServerSetByYamlRequest
	(*UpdateGameServerSetByYamlResponse)(nil),                         // 13: gameserverset.UpdateGameServerSetByYamlResponse
	(*DeleteGameServerSetRequest)(nil),                                // 14: gameserverset.DeleteGameServerSetRequest
	(*DeleteGameServerSetResponse)(nil),                               // 15: gameserverset.DeleteGameServerSetResponse
	(*RestartGameServerSetRequest)(nil),                               // 16: gameserverset.RestartGameServerSetRequest
	(*RestartGameServerSetResponse)(nil),                              // 17: gameserverset.RestartGameServerSetResponse
	(*ScaleGameServerSetRequest)(nil),                                 // 18: gameserverset.ScaleGameServerSetRequest
	(*ScaleGameServerSetResponse)(nil),                                // 19: gameserverset.ScaleGameServerSetResponse
	(*GameServerSetDetailRequest)(nil),                                // 20: gameserverset.GameServerSetDetailRequest
	(*GameServerSetDetailResponse)(nil),                               // 21: gameserverset.GameServerSetDetailResponse
	(*RollbackGameServerSetRequest)(nil),                              // 22: gameserverset.RollbackGameServerSetRequest
	(*RollbackGameServerSetResponse)(nil),                             // 23: gameserverset.RollbackGameServerSetResponse
	(*DeleteGameServerSetPodRequest)(nil),                             // 24: gameserverset.DeleteGameServerSetPodRequest
	(*DeleteGameServerSetPodResponse)(nil),                            // 25: gameserverset.DeleteGameServerSetPodResponse
	(*UpdateGameServerSetScaleStrategyRequest)(nil),                   // 26: gameserverset.UpdateGameServerSetScaleStrategyRequest
	(*UpdateGameServerSetScaleStrategyResponse)(nil),                  // 27: gameserverset.UpdateGameServerSetScaleStrategyResponse
	(*UpdateGameServerSetUpgradeStrategyRequest)(nil),                 // 28: gameserverset.UpdateGameServerSetUpgradeStrategyRequest
	(*UpdateGameServerSetUpgradeStrategyResponse)(nil),                // 29: gameserverset.UpdateGameServerSetUpgradeStrategyResponse
	(*ListGameServerSetReversionRequest)(nil),                         // 30: gameserverset.ListGameServerSetReversionRequest
	(*GameServerSetControllerReversionItem)(nil),                      // 31: gameserverset.GameServerSetControllerReversionItem
	(*ListGameServerSetReversionResponse)(nil),                        // 32: gameserverset.ListGameServerSetReversionResponse
	nil,                       // 33: gameserverset.GameServerSetItem.LabelsEntry
	nil,                       // 34: gameserverset.GameServerSetItem.AnnotationsEntry
	(*v1.Container)(nil),      // 35: k8s.io.api.core.v1.Container
	(*v11.LabelSelector)(nil), // 36: k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
}
var file_pb_gameserverset_v1_proto_depIdxs = []int32{
	0,  // 0: gameserverset.GameServerSetStrategy.update_strategy_type:type_name -> gameserverset.GameServerSetStrategy.UpdateStrategyType
	1,  // 1: gameserverset.GameServerSetStrategy.pod_update_strategy_type:type_name -> gameserverset.GameServerSetStrategy.PodUpdateStrategy
	35, // 2: gameserverset.GameServerSetItem.containers:type_name -> k8s.io.api.core.v1.Container
	6,  // 3: gameserverset.GameServerSetItem.status:type_name -> gameserverset.GameServerSetStatus
	33, // 4: gameserverset.GameServerSetItem.labels:type_name -> gameserverset.GameServerSetItem.LabelsEntry
	34, // 5: gameserverset.GameServerSetItem.annotations:type_name -> gameserverset.GameServerSetItem.AnnotationsEntry
	7,  // 6: gameserverset.GameServerSetItem.update_strategy:type_name -> gameserverset.GameServerSetStrategy
	36, // 7: gameserverset.GameServerSetItem.selector:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	5,  // 8: gameserverset.GameServerSetItem.conditions:type_name -> gameserverset.GameServerSetCondition
	8,  // 9: gameserverset.ListGameServerSetResponse.list:type_name -> gameserverset.GameServerSetItem
	8,  // 10: gameserverset.GameServerSetDetailResponse.detail:type_name -> gameserverset.GameServerSetItem
	2,  // 11: gameserverset.UpdateGameServerSetUpgradeStrategyRequest.update_strategy_type:type_name -> gameserverset.UpdateGameServerSetUpgradeStrategyRequest.UpdateStrategyType
	3,  // 12: gameserverset.UpdateGameServerSetUpgradeStrategyRequest.pod_update_strategy_type:type_name -> gameserverset.UpdateGameServerSetUpgradeStrategyRequest.PodUpdateStrategy
	31, // 13: gameserverset.ListGameServerSetReversionResponse.list:type_name -> gameserverset.GameServerSetControllerReversionItem
	4,  // 14: gameserverset.GameServerSet.ListGameServerSet:input_type -> gameserverset.ListGameServerSetRequest
	10, // 15: gameserverset.GameServerSet.CreateOrUpdateGameServerSetByYaml:input_type -> gameserverset.CreateOrUpdateGameServerSetByYamlRequest
	14, // 16: gameserverset.GameServerSet.DeleteGameServerSet:input_type -> gameserverset.DeleteGameServerSetRequest
	16, // 17: gameserverset.GameServerSet.RestartGameServerSet:input_type -> gameserverset.RestartGameServerSetRequest
	18, // 18: gameserverset.GameServerSet.ScaleGameServerSet:input_type -> gameserverset.ScaleGameServerSetRequest
	20, // 19: gameserverset.GameServerSet.GetGameServerSetDetail:input_type -> gameserverset.GameServerSetDetailRequest
	22, // 20: gameserverset.GameServerSet.RollbackGameServerSet:input_type -> gameserverset.RollbackGameServerSetRequest
	24, // 21: gameserverset.GameServerSet.DeleteGameServerSetPods:input_type -> gameserverset.DeleteGameServerSetPodRequest
	26, // 22: gameserverset.GameServerSet.UpdateScaleStrategy:input_type -> gameserverset.UpdateGameServerSetScaleStrategyRequest
	28, // 23: gameserverset.GameServerSet.UpdateUpgradeStrategy:input_type -> gameserverset.UpdateGameServerSetUpgradeStrategyRequest
	30, // 24: gameserverset.GameServerSet.ListGameServerSetControllerRevision:input_type -> gameserverset.ListGameServerSetReversionRequest
	9,  // 25: gameserverset.GameServerSet.ListGameServerSet:output_type -> gameserverset.ListGameServerSetResponse
	11, // 26: gameserverset.GameServerSet.CreateOrUpdateGameServerSetByYaml:output_type -> gameserverset.CreateOrUpdateGameServerSetByYamlResponse
	15, // 27: gameserverset.GameServerSet.DeleteGameServerSet:output_type -> gameserverset.DeleteGameServerSetResponse
	17, // 28: gameserverset.GameServerSet.RestartGameServerSet:output_type -> gameserverset.RestartGameServerSetResponse
	19, // 29: gameserverset.GameServerSet.ScaleGameServerSet:output_type -> gameserverset.ScaleGameServerSetResponse
	21, // 30: gameserverset.GameServerSet.GetGameServerSetDetail:output_type -> gameserverset.GameServerSetDetailResponse
	23, // 31: gameserverset.GameServerSet.RollbackGameServerSet:output_type -> gameserverset.RollbackGameServerSetResponse
	25, // 32: gameserverset.GameServerSet.DeleteGameServerSetPods:output_type -> gameserverset.DeleteGameServerSetPodResponse
	27, // 33: gameserverset.GameServerSet.UpdateScaleStrategy:output_type -> gameserverset.UpdateGameServerSetScaleStrategyResponse
	29, // 34: gameserverset.GameServerSet.UpdateUpgradeStrategy:output_type -> gameserverset.UpdateGameServerSetUpgradeStrategyResponse
	32, // 35: gameserverset.GameServerSet.ListGameServerSetControllerRevision:output_type -> gameserverset.ListGameServerSetReversionResponse
	25, // [25:36] is the sub-list for method output_type
	14, // [14:25] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pb_gameserverset_v1_proto_init() }
func file_pb_gameserverset_v1_proto_init() {
	if File_pb_gameserverset_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_gameserverset_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGameServerSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerSetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerSetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerSetStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerSetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGameServerSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateGameServerSetByYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateGameServerSetByYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameServerSetByYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameServerSetByYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGameServerSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGameServerSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartGameServerSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartGameServerSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleGameServerSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleGameServerSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerSetDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerSetDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackGameServerSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackGameServerSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGameServerSetPodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGameServerSetPodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameServerSetScaleStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameServerSetScaleStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameServerSetUpgradeStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameServerSetUpgradeStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGameServerSetReversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerSetControllerReversionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserverset_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGameServerSetReversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_gameserverset_v1_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_gameserverset_v1_proto_goTypes,
		DependencyIndexes: file_pb_gameserverset_v1_proto_depIdxs,
		EnumInfos:         file_pb_gameserverset_v1_proto_enumTypes,
		MessageInfos:      file_pb_gameserverset_v1_proto_msgTypes,
	}.Build()
	File_pb_gameserverset_v1_proto = out.File
	file_pb_gameserverset_v1_proto_rawDesc = nil
	file_pb_gameserverset_v1_proto_goTypes = nil
	file_pb_gameserverset_v1_proto_depIdxs = nil
}
