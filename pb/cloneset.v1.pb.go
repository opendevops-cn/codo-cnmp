// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/cloneset.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 升级策略
type CloneSetUpdateStrategy_UpdateStrategy int32

const (
	// 优先原地升级
	CloneSetUpdateStrategy_InPlaceIfPossible CloneSetUpdateStrategy_UpdateStrategy = 0
	// 仅原地升级
	CloneSetUpdateStrategy_InPlaceOnly CloneSetUpdateStrategy_UpdateStrategy = 1
	// 重建升级
	CloneSetUpdateStrategy_Recreate CloneSetUpdateStrategy_UpdateStrategy = 2
)

// Enum value maps for CloneSetUpdateStrategy_UpdateStrategy.
var (
	CloneSetUpdateStrategy_UpdateStrategy_name = map[int32]string{
		0: "InPlaceIfPossible",
		1: "InPlaceOnly",
		2: "Recreate",
	}
	CloneSetUpdateStrategy_UpdateStrategy_value = map[string]int32{
		"InPlaceIfPossible": 0,
		"InPlaceOnly":       1,
		"Recreate":          2,
	}
)

func (x CloneSetUpdateStrategy_UpdateStrategy) Enum() *CloneSetUpdateStrategy_UpdateStrategy {
	p := new(CloneSetUpdateStrategy_UpdateStrategy)
	*p = x
	return p
}

func (x CloneSetUpdateStrategy_UpdateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloneSetUpdateStrategy_UpdateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_cloneset_v1_proto_enumTypes[0].Descriptor()
}

func (CloneSetUpdateStrategy_UpdateStrategy) Type() protoreflect.EnumType {
	return &file_pb_cloneset_v1_proto_enumTypes[0]
}

func (x CloneSetUpdateStrategy_UpdateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloneSetUpdateStrategy_UpdateStrategy.Descriptor instead.
func (CloneSetUpdateStrategy_UpdateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{3, 0}
}

// 删除策略
type DeleteCloneSetPodRequest_DeletePolicy int32

const (
	// 删除pod不重建
	DeleteCloneSetPodRequest_DELETE_ONLY DeleteCloneSetPodRequest_DeletePolicy = 0
	// 删除pod重建
	DeleteCloneSetPodRequest_DELETE_AND_RECREATE DeleteCloneSetPodRequest_DeletePolicy = 1
)

// Enum value maps for DeleteCloneSetPodRequest_DeletePolicy.
var (
	DeleteCloneSetPodRequest_DeletePolicy_name = map[int32]string{
		0: "DELETE_ONLY",
		1: "DELETE_AND_RECREATE",
	}
	DeleteCloneSetPodRequest_DeletePolicy_value = map[string]int32{
		"DELETE_ONLY":         0,
		"DELETE_AND_RECREATE": 1,
	}
)

func (x DeleteCloneSetPodRequest_DeletePolicy) Enum() *DeleteCloneSetPodRequest_DeletePolicy {
	p := new(DeleteCloneSetPodRequest_DeletePolicy)
	*p = x
	return p
}

func (x DeleteCloneSetPodRequest_DeletePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteCloneSetPodRequest_DeletePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_cloneset_v1_proto_enumTypes[1].Descriptor()
}

func (DeleteCloneSetPodRequest_DeletePolicy) Type() protoreflect.EnumType {
	return &file_pb_cloneset_v1_proto_enumTypes[1]
}

func (x DeleteCloneSetPodRequest_DeletePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteCloneSetPodRequest_DeletePolicy.Descriptor instead.
func (DeleteCloneSetPodRequest_DeletePolicy) EnumDescriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{20, 0}
}

// 升级策略
type UpdateUpgradeStrategyRequest_UpgradeStrategy int32

const (
	// 优先原地升级
	UpdateUpgradeStrategyRequest_InPlaceIfPossible UpdateUpgradeStrategyRequest_UpgradeStrategy = 0
	// 仅原地升级
	UpdateUpgradeStrategyRequest_InPlaceOnly UpdateUpgradeStrategyRequest_UpgradeStrategy = 1
	// 重建升级
	UpdateUpgradeStrategyRequest_Recreate UpdateUpgradeStrategyRequest_UpgradeStrategy = 2
)

// Enum value maps for UpdateUpgradeStrategyRequest_UpgradeStrategy.
var (
	UpdateUpgradeStrategyRequest_UpgradeStrategy_name = map[int32]string{
		0: "InPlaceIfPossible",
		1: "InPlaceOnly",
		2: "Recreate",
	}
	UpdateUpgradeStrategyRequest_UpgradeStrategy_value = map[string]int32{
		"InPlaceIfPossible": 0,
		"InPlaceOnly":       1,
		"Recreate":          2,
	}
)

func (x UpdateUpgradeStrategyRequest_UpgradeStrategy) Enum() *UpdateUpgradeStrategyRequest_UpgradeStrategy {
	p := new(UpdateUpgradeStrategyRequest_UpgradeStrategy)
	*p = x
	return p
}

func (x UpdateUpgradeStrategyRequest_UpgradeStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateUpgradeStrategyRequest_UpgradeStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_cloneset_v1_proto_enumTypes[2].Descriptor()
}

func (UpdateUpgradeStrategyRequest_UpgradeStrategy) Type() protoreflect.EnumType {
	return &file_pb_cloneset_v1_proto_enumTypes[2]
}

func (x UpdateUpgradeStrategyRequest_UpgradeStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateUpgradeStrategyRequest_UpgradeStrategy.Descriptor instead.
func (UpdateUpgradeStrategyRequest_UpgradeStrategy) EnumDescriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{25, 0}
}

// CloneSet列表请求
type ListCloneSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,7,opt,name=list_all,proto3" json:"list_all,optional"`
}

func (x *ListCloneSetRequest) Reset() {
	*x = ListCloneSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloneSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloneSetRequest) ProtoMessage() {}

func (x *ListCloneSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloneSetRequest.ProtoReflect.Descriptor instead.
func (*ListCloneSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListCloneSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListCloneSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListCloneSetRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListCloneSetRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCloneSetRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCloneSetRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

type CloneSetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of CloneSet condition.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	// Status of the condition, one of True, False, Unknown.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,optional"`
	// The last time this condition was updated.
	// 豪秒级时间戳
	LastUpdateTime uint64 `protobuf:"varint,6,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,optional"`
	// Last time the condition transitioned from one status to another.
	// 豪秒级时间戳
	LastTransitionTime uint64 `protobuf:"varint,7,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,optional"`
	// The reason for the condition's last transition.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,optional"`
	// A human readable message indicating details about the transition.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,optional"`
}

func (x *CloneSetCondition) Reset() {
	*x = CloneSetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSetCondition) ProtoMessage() {}

func (x *CloneSetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSetCondition.ProtoReflect.Descriptor instead.
func (*CloneSetCondition) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{1}
}

func (x *CloneSetCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CloneSetCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CloneSetCondition) GetLastUpdateTime() uint64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *CloneSetCondition) GetLastTransitionTime() uint64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *CloneSetCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CloneSetCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// CloneSetStatus is the most recently observed status of the CloneSet.
type CloneSetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedGeneration uint32 `protobuf:"varint,1,opt,name=observedGeneration,proto3" json:"observedGeneration,optional"`
	// 副本数量
	Replicas uint32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,optional"`
	// 已更新副本数量
	UpdatedReplicas uint32 `protobuf:"varint,3,opt,name=updatedReplicas,proto3" json:"updatedReplicas,optional"`
	// 已就绪副本数量
	ReadyReplicas uint32 `protobuf:"varint,7,opt,name=readyReplicas,proto3" json:"readyReplicas,optional"`
	// 可用副本数量
	AvailableReplicas uint32 `protobuf:"varint,4,opt,name=availableReplicas,proto3" json:"availableReplicas,optional"`
	// 不可用副本数量
	UnavailableReplicas uint32 `protobuf:"varint,5,opt,name=unavailableReplicas,proto3" json:"unavailableReplicas,optional"`
	CollisionCount      uint32 `protobuf:"varint,8,opt,name=collisionCount,proto3" json:"collisionCount,optional"`
}

func (x *CloneSetStatus) Reset() {
	*x = CloneSetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSetStatus) ProtoMessage() {}

func (x *CloneSetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSetStatus.ProtoReflect.Descriptor instead.
func (*CloneSetStatus) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{2}
}

func (x *CloneSetStatus) GetObservedGeneration() uint32 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *CloneSetStatus) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *CloneSetStatus) GetUpdatedReplicas() uint32 {
	if x != nil {
		return x.UpdatedReplicas
	}
	return 0
}

func (x *CloneSetStatus) GetReadyReplicas() uint32 {
	if x != nil {
		return x.ReadyReplicas
	}
	return 0
}

func (x *CloneSetStatus) GetAvailableReplicas() uint32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *CloneSetStatus) GetUnavailableReplicas() uint32 {
	if x != nil {
		return x.UnavailableReplicas
	}
	return 0
}

func (x *CloneSetStatus) GetCollisionCount() uint32 {
	if x != nil {
		return x.CollisionCount
	}
	return 0
}

type CloneSetUpdateStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateStrategyType CloneSetUpdateStrategy_UpdateStrategy `protobuf:"varint,4,opt,name=update_strategy_type,json=updateStrategyType,proto3,enum=cloneset.CloneSetUpdateStrategy_UpdateStrategy" json:"update_strategy_type,optional"`
	// 优雅升级等待秒数
	GracePeriodSeconds uint32 `protobuf:"varint,5,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,optional"`
	// 最大超出副本数
	MaxSurge string `protobuf:"bytes,6,opt,name=max_surge,json=maxSurge,proto3" json:"max_surge,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,7,opt,name=max_unavailable,json=maxUnavailable,proto3" json:"max_unavailable,optional"`
}

func (x *CloneSetUpdateStrategy) Reset() {
	*x = CloneSetUpdateStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSetUpdateStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSetUpdateStrategy) ProtoMessage() {}

func (x *CloneSetUpdateStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSetUpdateStrategy.ProtoReflect.Descriptor instead.
func (*CloneSetUpdateStrategy) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{3}
}

func (x *CloneSetUpdateStrategy) GetUpdateStrategyType() CloneSetUpdateStrategy_UpdateStrategy {
	if x != nil {
		return x.UpdateStrategyType
	}
	return CloneSetUpdateStrategy_InPlaceIfPossible
}

func (x *CloneSetUpdateStrategy) GetGracePeriodSeconds() uint32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

func (x *CloneSetUpdateStrategy) GetMaxSurge() string {
	if x != nil {
		return x.MaxSurge
	}
	return ""
}

func (x *CloneSetUpdateStrategy) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

// CloneSet列表项
type CloneSetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 容器
	Containers []*v1.Container `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,optional"`
	// 状态
	Status *CloneSetStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,5,opt,name=create_time,proto3" json:"create_time,optional"`
	// 标签
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// YAML
	Yaml string `protobuf:"bytes,7,opt,name=yaml,proto3" json:"yaml,optional"`
	// 注解
	Annotations map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 副本数量
	Replicas uint32 `protobuf:"varint,9,opt,name=replicas,proto3" json:"replicas,optional"`
	// 更新策略
	UpdateStrategy *CloneSetUpdateStrategy `protobuf:"bytes,10,opt,name=update_strategy,json=updateStrategy,proto3" json:"update_strategy,optional"`
	// 选择器
	Selector *v11.LabelSelector `protobuf:"bytes,11,opt,name=selector,proto3" json:"selector,optional"`
	// 健康检查
	Conditions []*CloneSetCondition `protobuf:"bytes,12,rep,name=conditions,proto3" json:"conditions,optional"`
	// 期望副本数量
	SpecReplicas uint32 `protobuf:"varint,13,opt,name=spec_replicas,json=specReplicas,proto3" json:"spec_replicas,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,14,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
	// 流式扩容
	ScaleStrategy *ScaleStrategyItem `protobuf:"bytes,15,opt,name=scale_strategy,proto3" json:"scale_strategy,optional"`
}

func (x *CloneSetItem) Reset() {
	*x = CloneSetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSetItem) ProtoMessage() {}

func (x *CloneSetItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSetItem.ProtoReflect.Descriptor instead.
func (*CloneSetItem) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{4}
}

func (x *CloneSetItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloneSetItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CloneSetItem) GetContainers() []*v1.Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *CloneSetItem) GetStatus() *CloneSetStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CloneSetItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CloneSetItem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CloneSetItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *CloneSetItem) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CloneSetItem) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *CloneSetItem) GetUpdateStrategy() *CloneSetUpdateStrategy {
	if x != nil {
		return x.UpdateStrategy
	}
	return nil
}

func (x *CloneSetItem) GetSelector() *v11.LabelSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *CloneSetItem) GetConditions() []*CloneSetCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CloneSetItem) GetSpecReplicas() uint32 {
	if x != nil {
		return x.SpecReplicas
	}
	return 0
}

func (x *CloneSetItem) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

func (x *CloneSetItem) GetScaleStrategy() *ScaleStrategyItem {
	if x != nil {
		return x.ScaleStrategy
	}
	return nil
}

// CloneSet列表响应
type ListCloneSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 列表
	List []*CloneSetItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListCloneSetResponse) Reset() {
	*x = ListCloneSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloneSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloneSetResponse) ProtoMessage() {}

func (x *ListCloneSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloneSetResponse.ProtoReflect.Descriptor instead.
func (*ListCloneSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ListCloneSetResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCloneSetResponse) GetList() []*CloneSetItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 创建CloneSet请求
type CreateOrUpdateCloneSetByYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// YAML
	Yaml string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *CreateOrUpdateCloneSetByYamlRequest) Reset() {
	*x = CreateOrUpdateCloneSetByYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateCloneSetByYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateCloneSetByYamlRequest) ProtoMessage() {}

func (x *CreateOrUpdateCloneSetByYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateCloneSetByYamlRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateCloneSetByYamlRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrUpdateCloneSetByYamlRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateOrUpdateCloneSetByYamlRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

// 创建CloneSet响应
type CreateOrUpdateCloneSetByYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrUpdateCloneSetByYamlResponse) Reset() {
	*x = CreateOrUpdateCloneSetByYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateCloneSetByYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateCloneSetByYamlResponse) ProtoMessage() {}

func (x *CreateOrUpdateCloneSetByYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateCloneSetByYamlResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateCloneSetByYamlResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{7}
}

// 更新CloneSet请求
type UpdateCloneSetByYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// YAML
	Yaml string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *UpdateCloneSetByYamlRequest) Reset() {
	*x = UpdateCloneSetByYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloneSetByYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloneSetByYamlRequest) ProtoMessage() {}

func (x *UpdateCloneSetByYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloneSetByYamlRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloneSetByYamlRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCloneSetByYamlRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateCloneSetByYamlRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

// 更新CloneSet响应
type UpdateCloneSetByYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCloneSetByYamlResponse) Reset() {
	*x = UpdateCloneSetByYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloneSetByYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloneSetByYamlResponse) ProtoMessage() {}

func (x *UpdateCloneSetByYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloneSetByYamlResponse.ProtoReflect.Descriptor instead.
func (*UpdateCloneSetByYamlResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{9}
}

// 删除CloneSet请求
type DeleteCloneSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *DeleteCloneSetRequest) Reset() {
	*x = DeleteCloneSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloneSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloneSetRequest) ProtoMessage() {}

func (x *DeleteCloneSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloneSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloneSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCloneSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteCloneSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteCloneSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 删除CloneSet响应
type DeleteCloneSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCloneSetResponse) Reset() {
	*x = DeleteCloneSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloneSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloneSetResponse) ProtoMessage() {}

func (x *DeleteCloneSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloneSetResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloneSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{11}
}

// 重启CloneSet请求
type RestartCloneSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *RestartCloneSetRequest) Reset() {
	*x = RestartCloneSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartCloneSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartCloneSetRequest) ProtoMessage() {}

func (x *RestartCloneSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartCloneSetRequest.ProtoReflect.Descriptor instead.
func (*RestartCloneSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{12}
}

func (x *RestartCloneSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RestartCloneSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestartCloneSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 重启CloneSet响应
type RestartCloneSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartCloneSetResponse) Reset() {
	*x = RestartCloneSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartCloneSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartCloneSetResponse) ProtoMessage() {}

func (x *RestartCloneSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartCloneSetResponse.ProtoReflect.Descriptor instead.
func (*RestartCloneSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{13}
}

// 伸缩CloneSet请求
type ScaleCloneSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 副本数量
	Replicas uint32 `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,optional"`
}

func (x *ScaleCloneSetRequest) Reset() {
	*x = ScaleCloneSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleCloneSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleCloneSetRequest) ProtoMessage() {}

func (x *ScaleCloneSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleCloneSetRequest.ProtoReflect.Descriptor instead.
func (*ScaleCloneSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{14}
}

func (x *ScaleCloneSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ScaleCloneSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScaleCloneSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScaleCloneSetRequest) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

// 伸缩CloneSet响应
type ScaleCloneSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScaleCloneSetResponse) Reset() {
	*x = ScaleCloneSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleCloneSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleCloneSetResponse) ProtoMessage() {}

func (x *ScaleCloneSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleCloneSetResponse.ProtoReflect.Descriptor instead.
func (*ScaleCloneSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{15}
}

// 查看CloneSet详情请求
type CloneSetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *CloneSetDetailRequest) Reset() {
	*x = CloneSetDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSetDetailRequest) ProtoMessage() {}

func (x *CloneSetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSetDetailRequest.ProtoReflect.Descriptor instead.
func (*CloneSetDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{16}
}

func (x *CloneSetDetailRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CloneSetDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloneSetDetailRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 查看CloneSet详情响应
type CloneSetDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础信息
	Detail *CloneSetItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *CloneSetDetailResponse) Reset() {
	*x = CloneSetDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSetDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSetDetailResponse) ProtoMessage() {}

func (x *CloneSetDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSetDetailResponse.ProtoReflect.Descriptor instead.
func (*CloneSetDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{17}
}

func (x *CloneSetDetailResponse) GetDetail() *CloneSetItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 回滚CloneSet请求
type RollbackCloneSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 版本号
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,optional"`
}

func (x *RollbackCloneSetRequest) Reset() {
	*x = RollbackCloneSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackCloneSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackCloneSetRequest) ProtoMessage() {}

func (x *RollbackCloneSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackCloneSetRequest.ProtoReflect.Descriptor instead.
func (*RollbackCloneSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{18}
}

func (x *RollbackCloneSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RollbackCloneSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RollbackCloneSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RollbackCloneSetRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// 回滚CloneSet响应
type RollbackCloneSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RollbackCloneSetResponse) Reset() {
	*x = RollbackCloneSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackCloneSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackCloneSetResponse) ProtoMessage() {}

func (x *RollbackCloneSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackCloneSetResponse.ProtoReflect.Descriptor instead.
func (*RollbackCloneSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{19}
}

// 删除CloneSet指定的pod请求
type DeleteCloneSetPodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// pod名称
	PodNames     []string                              `protobuf:"bytes,4,rep,name=pod_names,json=podNames,proto3" json:"pod_names,optional"`
	DeletePolicy DeleteCloneSetPodRequest_DeletePolicy `protobuf:"varint,5,opt,name=delete_policy,json=deletePolicy,proto3,enum=cloneset.DeleteCloneSetPodRequest_DeletePolicy" json:"delete_policy,optional"`
}

func (x *DeleteCloneSetPodRequest) Reset() {
	*x = DeleteCloneSetPodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloneSetPodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloneSetPodRequest) ProtoMessage() {}

func (x *DeleteCloneSetPodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloneSetPodRequest.ProtoReflect.Descriptor instead.
func (*DeleteCloneSetPodRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteCloneSetPodRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteCloneSetPodRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteCloneSetPodRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteCloneSetPodRequest) GetPodNames() []string {
	if x != nil {
		return x.PodNames
	}
	return nil
}

func (x *DeleteCloneSetPodRequest) GetDeletePolicy() DeleteCloneSetPodRequest_DeletePolicy {
	if x != nil {
		return x.DeletePolicy
	}
	return DeleteCloneSetPodRequest_DELETE_ONLY
}

// 删除CloneSet指定的pod响应
type DeleteCloneSetPodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCloneSetPodResponse) Reset() {
	*x = DeleteCloneSetPodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCloneSetPodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCloneSetPodResponse) ProtoMessage() {}

func (x *DeleteCloneSetPodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCloneSetPodResponse.ProtoReflect.Descriptor instead.
func (*DeleteCloneSetPodResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{21}
}

// 流式扩容CloneSet请求
type UpdateScaleStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 最小ready时间
	MinReadySeconds uint32 `protobuf:"varint,4,opt,name=minReadySeconds,proto3" json:"minReadySeconds,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,5,opt,name=MaxUnavailable,proto3" json:"MaxUnavailable,optional"`
}

func (x *UpdateScaleStrategyRequest) Reset() {
	*x = UpdateScaleStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScaleStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScaleStrategyRequest) ProtoMessage() {}

func (x *UpdateScaleStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScaleStrategyRequest.ProtoReflect.Descriptor instead.
func (*UpdateScaleStrategyRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateScaleStrategyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateScaleStrategyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateScaleStrategyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateScaleStrategyRequest) GetMinReadySeconds() uint32 {
	if x != nil {
		return x.MinReadySeconds
	}
	return 0
}

func (x *UpdateScaleStrategyRequest) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

// 流式扩容CloneSet响应
type UpdateScaleStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateScaleStrategyResponse) Reset() {
	*x = UpdateScaleStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateScaleStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScaleStrategyResponse) ProtoMessage() {}

func (x *UpdateScaleStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScaleStrategyResponse.ProtoReflect.Descriptor instead.
func (*UpdateScaleStrategyResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{23}
}

// 流式扩容
type ScaleStrategyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinReadySeconds string `protobuf:"bytes,1,opt,name=minReadySeconds,proto3" json:"minReadySeconds,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,2,opt,name=MaxUnavailable,proto3" json:"MaxUnavailable,optional"`
}

func (x *ScaleStrategyItem) Reset() {
	*x = ScaleStrategyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleStrategyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleStrategyItem) ProtoMessage() {}

func (x *ScaleStrategyItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleStrategyItem.ProtoReflect.Descriptor instead.
func (*ScaleStrategyItem) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{24}
}

func (x *ScaleStrategyItem) GetMinReadySeconds() string {
	if x != nil {
		return x.MinReadySeconds
	}
	return ""
}

func (x *ScaleStrategyItem) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

// 修改升级策略请求
type UpdateUpgradeStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace          string                                       `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	UpdateStrategyType UpdateUpgradeStrategyRequest_UpgradeStrategy `protobuf:"varint,4,opt,name=update_strategy_type,json=updateStrategyType,proto3,enum=cloneset.UpdateUpgradeStrategyRequest_UpgradeStrategy" json:"update_strategy_type,optional"`
	// 优雅升级等待秒数
	GracePeriodSeconds uint32 `protobuf:"varint,5,opt,name=gracePeriodSeconds,proto3" json:"gracePeriodSeconds,optional"`
	// 最大超出副本数
	MaxSurge string `protobuf:"bytes,6,opt,name=max_surge,json=maxSurge,proto3" json:"max_surge,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,7,opt,name=max_unavailable,json=maxUnavailable,proto3" json:"max_unavailable,optional"`
}

func (x *UpdateUpgradeStrategyRequest) Reset() {
	*x = UpdateUpgradeStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUpgradeStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUpgradeStrategyRequest) ProtoMessage() {}

func (x *UpdateUpgradeStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUpgradeStrategyRequest.ProtoReflect.Descriptor instead.
func (*UpdateUpgradeStrategyRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateUpgradeStrategyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateUpgradeStrategyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUpgradeStrategyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateUpgradeStrategyRequest) GetUpdateStrategyType() UpdateUpgradeStrategyRequest_UpgradeStrategy {
	if x != nil {
		return x.UpdateStrategyType
	}
	return UpdateUpgradeStrategyRequest_InPlaceIfPossible
}

func (x *UpdateUpgradeStrategyRequest) GetGracePeriodSeconds() uint32 {
	if x != nil {
		return x.GracePeriodSeconds
	}
	return 0
}

func (x *UpdateUpgradeStrategyRequest) GetMaxSurge() string {
	if x != nil {
		return x.MaxSurge
	}
	return ""
}

func (x *UpdateUpgradeStrategyRequest) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

// 修改升级策略响应
type UpdateUpgradeStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUpgradeStrategyResponse) Reset() {
	*x = UpdateUpgradeStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUpgradeStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUpgradeStrategyResponse) ProtoMessage() {}

func (x *UpdateUpgradeStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUpgradeStrategyResponse.ProtoReflect.Descriptor instead.
func (*UpdateUpgradeStrategyResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{26}
}

// 查看CloneSet历史版本请求
type ListCloneSetReversionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *ListCloneSetReversionRequest) Reset() {
	*x = ListCloneSetReversionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloneSetReversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloneSetReversionRequest) ProtoMessage() {}

func (x *ListCloneSetReversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloneSetReversionRequest.ProtoReflect.Descriptor instead.
func (*ListCloneSetReversionRequest) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{27}
}

func (x *ListCloneSetReversionRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListCloneSetReversionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCloneSetReversionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type CloneSetControllerReversionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 镜像
	Images []string `protobuf:"bytes,2,rep,name=images,proto3" json:"images,optional"`
	// 版本
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,optional"`
	// 版本详情
	Yaml string `protobuf:"bytes,4,opt,name=yaml,proto3" json:"yaml,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,5,opt,name=create_time,proto3" json:"create_time,optional"`
	// 是否当前版本
	IsCurrent bool `protobuf:"varint,6,opt,name=is_current,json=isCurrent,proto3" json:"is_current,optional"`
}

func (x *CloneSetControllerReversionItem) Reset() {
	*x = CloneSetControllerReversionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneSetControllerReversionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneSetControllerReversionItem) ProtoMessage() {}

func (x *CloneSetControllerReversionItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneSetControllerReversionItem.ProtoReflect.Descriptor instead.
func (*CloneSetControllerReversionItem) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{28}
}

func (x *CloneSetControllerReversionItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloneSetControllerReversionItem) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CloneSetControllerReversionItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CloneSetControllerReversionItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *CloneSetControllerReversionItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CloneSetControllerReversionItem) GetIsCurrent() bool {
	if x != nil {
		return x.IsCurrent
	}
	return false
}

// 查看CloneSet历史版本响应
type ListCloneSetReversionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列表
	List []*CloneSetControllerReversionItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,optional"`
	// 总数
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,optional"`
}

func (x *ListCloneSetReversionResponse) Reset() {
	*x = ListCloneSetReversionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_cloneset_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloneSetReversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloneSetReversionResponse) ProtoMessage() {}

func (x *ListCloneSetReversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_cloneset_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloneSetReversionResponse.ProtoReflect.Descriptor instead.
func (*ListCloneSetReversionResponse) Descriptor() ([]byte, []int) {
	return file_pb_cloneset_v1_proto_rawDescGZIP(), []int{29}
}

func (x *ListCloneSetReversionResponse) GetList() []*CloneSetControllerReversionItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListCloneSetReversionResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_pb_cloneset_v1_proto protoreflect.FileDescriptor

var file_pb_cloneset_v1_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x6b, 0x38, 0x73, 0x2f, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0xc9, 0x01, 0x0a, 0x11, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc6, 0x02, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x6e, 0x0a, 0x14,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0b, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x72, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x46, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49,
	0x66, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x02, 0x22, 0xb3, 0x07, 0x0a, 0x0c, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61,
	0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x79,
	0x61, 0x6d, 0x6c, 0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x48, 0x0a, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x58, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x23, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c,
	0x22, 0x26, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x28, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x17, 0x0a, 0x15,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2,
	0x02, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x38, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xff, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x01, 0x52, 0x0f, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x65, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xcd, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x75, 0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x53, 0x75, 0x72, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x47, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x66, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x02, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x1f, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0x74, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x94, 0x13, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x71, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65,
	0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xab, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73,
	0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb,
	0xaa, 0x03, 0x6d, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12, 0x10, 0x79,
	0x61, 0x6d, 0x6c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x1a,
	0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x1a, 0x10, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73,
	0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f,
	0x79, 0x61, 0x6d, 0x6c, 0x12, 0xe5, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73,
	0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0xc2, 0xdb, 0xaa,
	0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x63, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x06, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x10, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x1a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xe9, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa,
	0x03, 0x63, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12, 0x06, 0xe9, 0x87,
	0x8d, 0xe5, 0x90, 0xaf, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x10, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x08, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xe1, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0xc2, 0xdb,
	0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x63, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x06, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x10, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x1a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x7c, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0xed, 0x01, 0x0a, 0x10, 0x52,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb,
	0xaa, 0x03, 0x63, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12, 0x06, 0xe5,
	0x9b, 0x9e, 0xe6, 0xbb, 0x9a, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x10, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x08,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22,
	0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65,
	0x74, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xf6, 0x01, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x64,
	0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0xc2, 0xdb, 0xaa,
	0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x66, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x09, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x70, 0x6f, 0x64, 0x1a, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x10, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x1a,
	0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x64, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x80, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x24, 0x2e, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0xca, 0xdb, 0xaa, 0x03, 0x69, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x0c, 0xe6, 0xb5, 0x81, 0xe5, 0xbc, 0x8f, 0xe6, 0x89, 0xa9, 0xe5, 0xae, 0xb9, 0x1a, 0x17, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x10,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74,
	0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x97, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xac, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x6f, 0x0a, 0x08,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x12, 0x12, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91,
	0xe5, 0x8d, 0x87, 0xe7, 0xba, 0xa7, 0xe7, 0xad, 0x96, 0xe7, 0x95, 0xa5, 0x1a, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x10, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x1a,
	0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0xaa, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x11, 0x5a,
	0x0f, 0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_cloneset_v1_proto_rawDescOnce sync.Once
	file_pb_cloneset_v1_proto_rawDescData = file_pb_cloneset_v1_proto_rawDesc
)

func file_pb_cloneset_v1_proto_rawDescGZIP() []byte {
	file_pb_cloneset_v1_proto_rawDescOnce.Do(func() {
		file_pb_cloneset_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_cloneset_v1_proto_rawDescData)
	})
	return file_pb_cloneset_v1_proto_rawDescData
}

var file_pb_cloneset_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pb_cloneset_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_pb_cloneset_v1_proto_goTypes = []interface{}{
	(CloneSetUpdateStrategy_UpdateStrategy)(0),        // 0: cloneset.CloneSetUpdateStrategy.UpdateStrategy
	(DeleteCloneSetPodRequest_DeletePolicy)(0),        // 1: cloneset.DeleteCloneSetPodRequest.DeletePolicy
	(UpdateUpgradeStrategyRequest_UpgradeStrategy)(0), // 2: cloneset.UpdateUpgradeStrategyRequest.UpgradeStrategy
	(*ListCloneSetRequest)(nil),                       // 3: cloneset.ListCloneSetRequest
	(*CloneSetCondition)(nil),                         // 4: cloneset.CloneSetCondition
	(*CloneSetStatus)(nil),                            // 5: cloneset.CloneSetStatus
	(*CloneSetUpdateStrategy)(nil),                    // 6: cloneset.CloneSetUpdateStrategy
	(*CloneSetItem)(nil),                              // 7: cloneset.CloneSetItem
	(*ListCloneSetResponse)(nil),                      // 8: cloneset.ListCloneSetResponse
	(*CreateOrUpdateCloneSetByYamlRequest)(nil),       // 9: cloneset.CreateOrUpdateCloneSetByYamlRequest
	(*CreateOrUpdateCloneSetByYamlResponse)(nil),      // 10: cloneset.CreateOrUpdateCloneSetByYamlResponse
	(*UpdateCloneSetByYamlRequest)(nil),               // 11: cloneset.UpdateCloneSetByYamlRequest
	(*UpdateCloneSetByYamlResponse)(nil),              // 12: cloneset.UpdateCloneSetByYamlResponse
	(*DeleteCloneSetRequest)(nil),                     // 13: cloneset.DeleteCloneSetRequest
	(*DeleteCloneSetResponse)(nil),                    // 14: cloneset.DeleteCloneSetResponse
	(*RestartCloneSetRequest)(nil),                    // 15: cloneset.RestartCloneSetRequest
	(*RestartCloneSetResponse)(nil),                   // 16: cloneset.RestartCloneSetResponse
	(*ScaleCloneSetRequest)(nil),                      // 17: cloneset.ScaleCloneSetRequest
	(*ScaleCloneSetResponse)(nil),                     // 18: cloneset.ScaleCloneSetResponse
	(*CloneSetDetailRequest)(nil),                     // 19: cloneset.CloneSetDetailRequest
	(*CloneSetDetailResponse)(nil),                    // 20: cloneset.CloneSetDetailResponse
	(*RollbackCloneSetRequest)(nil),                   // 21: cloneset.RollbackCloneSetRequest
	(*RollbackCloneSetResponse)(nil),                  // 22: cloneset.RollbackCloneSetResponse
	(*DeleteCloneSetPodRequest)(nil),                  // 23: cloneset.DeleteCloneSetPodRequest
	(*DeleteCloneSetPodResponse)(nil),                 // 24: cloneset.DeleteCloneSetPodResponse
	(*UpdateScaleStrategyRequest)(nil),                // 25: cloneset.UpdateScaleStrategyRequest
	(*UpdateScaleStrategyResponse)(nil),               // 26: cloneset.UpdateScaleStrategyResponse
	(*ScaleStrategyItem)(nil),                         // 27: cloneset.ScaleStrategyItem
	(*UpdateUpgradeStrategyRequest)(nil),              // 28: cloneset.UpdateUpgradeStrategyRequest
	(*UpdateUpgradeStrategyResponse)(nil),             // 29: cloneset.UpdateUpgradeStrategyResponse
	(*ListCloneSetReversionRequest)(nil),              // 30: cloneset.ListCloneSetReversionRequest
	(*CloneSetControllerReversionItem)(nil),           // 31: cloneset.CloneSetControllerReversionItem
	(*ListCloneSetReversionResponse)(nil),             // 32: cloneset.ListCloneSetReversionResponse
	nil,                                               // 33: cloneset.CloneSetItem.LabelsEntry
	nil,                                               // 34: cloneset.CloneSetItem.AnnotationsEntry
	(*v1.Container)(nil),                              // 35: k8s.io.api.core.v1.Container
	(*v11.LabelSelector)(nil),                         // 36: k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
}
var file_pb_cloneset_v1_proto_depIdxs = []int32{
	0,  // 0: cloneset.CloneSetUpdateStrategy.update_strategy_type:type_name -> cloneset.CloneSetUpdateStrategy.UpdateStrategy
	35, // 1: cloneset.CloneSetItem.containers:type_name -> k8s.io.api.core.v1.Container
	5,  // 2: cloneset.CloneSetItem.status:type_name -> cloneset.CloneSetStatus
	33, // 3: cloneset.CloneSetItem.labels:type_name -> cloneset.CloneSetItem.LabelsEntry
	34, // 4: cloneset.CloneSetItem.annotations:type_name -> cloneset.CloneSetItem.AnnotationsEntry
	6,  // 5: cloneset.CloneSetItem.update_strategy:type_name -> cloneset.CloneSetUpdateStrategy
	36, // 6: cloneset.CloneSetItem.selector:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	4,  // 7: cloneset.CloneSetItem.conditions:type_name -> cloneset.CloneSetCondition
	27, // 8: cloneset.CloneSetItem.scale_strategy:type_name -> cloneset.ScaleStrategyItem
	7,  // 9: cloneset.ListCloneSetResponse.list:type_name -> cloneset.CloneSetItem
	7,  // 10: cloneset.CloneSetDetailResponse.detail:type_name -> cloneset.CloneSetItem
	1,  // 11: cloneset.DeleteCloneSetPodRequest.delete_policy:type_name -> cloneset.DeleteCloneSetPodRequest.DeletePolicy
	2,  // 12: cloneset.UpdateUpgradeStrategyRequest.update_strategy_type:type_name -> cloneset.UpdateUpgradeStrategyRequest.UpgradeStrategy
	31, // 13: cloneset.ListCloneSetReversionResponse.list:type_name -> cloneset.CloneSetControllerReversionItem
	3,  // 14: cloneset.CloneSet.ListCloneSet:input_type -> cloneset.ListCloneSetRequest
	9,  // 15: cloneset.CloneSet.CreateOrUpdateCloneSetByYaml:input_type -> cloneset.CreateOrUpdateCloneSetByYamlRequest
	13, // 16: cloneset.CloneSet.DeleteCloneSet:input_type -> cloneset.DeleteCloneSetRequest
	15, // 17: cloneset.CloneSet.RestartCloneSet:input_type -> cloneset.RestartCloneSetRequest
	17, // 18: cloneset.CloneSet.ScaleCloneSet:input_type -> cloneset.ScaleCloneSetRequest
	19, // 19: cloneset.CloneSet.GetCloneSetDetail:input_type -> cloneset.CloneSetDetailRequest
	21, // 20: cloneset.CloneSet.RollbackCloneSet:input_type -> cloneset.RollbackCloneSetRequest
	23, // 21: cloneset.CloneSet.DeleteCloneSetPods:input_type -> cloneset.DeleteCloneSetPodRequest
	25, // 22: cloneset.CloneSet.UpdateScaleStrategy:input_type -> cloneset.UpdateScaleStrategyRequest
	28, // 23: cloneset.CloneSet.UpdateUpgradeStrategy:input_type -> cloneset.UpdateUpgradeStrategyRequest
	30, // 24: cloneset.CloneSet.ListCloneSetControllerRevision:input_type -> cloneset.ListCloneSetReversionRequest
	8,  // 25: cloneset.CloneSet.ListCloneSet:output_type -> cloneset.ListCloneSetResponse
	10, // 26: cloneset.CloneSet.CreateOrUpdateCloneSetByYaml:output_type -> cloneset.CreateOrUpdateCloneSetByYamlResponse
	14, // 27: cloneset.CloneSet.DeleteCloneSet:output_type -> cloneset.DeleteCloneSetResponse
	16, // 28: cloneset.CloneSet.RestartCloneSet:output_type -> cloneset.RestartCloneSetResponse
	18, // 29: cloneset.CloneSet.ScaleCloneSet:output_type -> cloneset.ScaleCloneSetResponse
	20, // 30: cloneset.CloneSet.GetCloneSetDetail:output_type -> cloneset.CloneSetDetailResponse
	22, // 31: cloneset.CloneSet.RollbackCloneSet:output_type -> cloneset.RollbackCloneSetResponse
	24, // 32: cloneset.CloneSet.DeleteCloneSetPods:output_type -> cloneset.DeleteCloneSetPodResponse
	26, // 33: cloneset.CloneSet.UpdateScaleStrategy:output_type -> cloneset.UpdateScaleStrategyResponse
	29, // 34: cloneset.CloneSet.UpdateUpgradeStrategy:output_type -> cloneset.UpdateUpgradeStrategyResponse
	32, // 35: cloneset.CloneSet.ListCloneSetControllerRevision:output_type -> cloneset.ListCloneSetReversionResponse
	25, // [25:36] is the sub-list for method output_type
	14, // [14:25] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_pb_cloneset_v1_proto_init() }
func file_pb_cloneset_v1_proto_init() {
	if File_pb_cloneset_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_cloneset_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloneSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneSetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneSetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneSetUpdateStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneSetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloneSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateCloneSetByYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateCloneSetByYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloneSetByYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloneSetByYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloneSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloneSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartCloneSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartCloneSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleCloneSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleCloneSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneSetDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneSetDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackCloneSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackCloneSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloneSetPodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCloneSetPodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScaleStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateScaleStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleStrategyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUpgradeStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUpgradeStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloneSetReversionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneSetControllerReversionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_cloneset_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCloneSetReversionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_cloneset_v1_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_cloneset_v1_proto_goTypes,
		DependencyIndexes: file_pb_cloneset_v1_proto_depIdxs,
		EnumInfos:         file_pb_cloneset_v1_proto_enumTypes,
		MessageInfos:      file_pb_cloneset_v1_proto_msgTypes,
	}.Build()
	File_pb_cloneset_v1_proto = out.File
	file_pb_cloneset_v1_proto_rawDesc = nil
	file_pb_cloneset_v1_proto_goTypes = nil
	file_pb_cloneset_v1_proto_depIdxs = nil
}
