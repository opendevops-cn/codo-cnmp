// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/auditlog.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationAuditLogListAuditLog = "/auditlog.v1.AuditLog/ListAuditLog"
const OperationAuditLogListAuditLogQueryCondition = "/auditlog.v1.AuditLog/ListAuditLogQueryCondition"
const OperationAuditLogGetAuditLog = "/auditlog.v1.AuditLog/GetAuditLog"

type AuditLogHTTPServer interface {
	// ListAuditLog查看-云原生管理-审计日志
	ListAuditLog(context.Context, *ListAuditLogRequest) (*ListAuditLogResponse, error)
	// ListAuditLogQueryCondition查看-云原生管理-审计日志-查询条件
	ListAuditLogQueryCondition(context.Context, *AuditLogQueryConditionRequest) (*AuditLogQueryConditionResponse, error)
	// GetAuditLog查看-云原生管理-审计日志详情
	GetAuditLog(context.Context, *GetAuditLogRequest) (*GetAuditLogResponse, error)
}

func NewAuditLogHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationAuditLogListAuditLog).Build(),
		selector.Server().Path(OperationAuditLogListAuditLogQueryCondition).Build(),
		selector.Server().Path(OperationAuditLogGetAuditLog).Build(),
	).Path(
		OperationAuditLogListAuditLog,
		OperationAuditLogListAuditLogQueryCondition,
		OperationAuditLogGetAuditLog,
	).Build()
}

func RegisterAuditLogHTTPServer(s *http.Server, srv AuditLogHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/audit_log/list", _AuditLog_ListAuditLog0_HTTP_Handler(srv))
	r.GET("/api/v1/audit_log/query_condition/list", _AuditLog_ListAuditLogQueryCondition0_HTTP_Handler(srv))
	r.GET("/api/v1/audit_log/detail", _AuditLog_GetAuditLog0_HTTP_Handler(srv))
}

func GenerateAuditLogHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 3)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/audit_log/list",
		Comment: "查看-云原生管理-审计日志",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/audit_log/query_condition/list",
		Comment: "查看-云原生管理-审计日志-查询条件",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/audit_log/detail",
		Comment: "查看-云原生管理-审计日志详情",
	})
	return routes
}

func _AuditLog_ListAuditLog0_HTTP_Handler(srv AuditLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListAuditLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuditLogListAuditLog)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAuditLog(ctx, req.(*ListAuditLogRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAuditLogResponse)
		return ctx.Result(200, reply)
	}
}

func _AuditLog_ListAuditLogQueryCondition0_HTTP_Handler(srv AuditLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in AuditLogQueryConditionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuditLogListAuditLogQueryCondition)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAuditLogQueryCondition(ctx, req.(*AuditLogQueryConditionRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuditLogQueryConditionResponse)
		return ctx.Result(200, reply)
	}
}

func _AuditLog_GetAuditLog0_HTTP_Handler(srv AuditLogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetAuditLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuditLogGetAuditLog)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAuditLog(ctx, req.(*GetAuditLogRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAuditLogResponse)
		return ctx.Result(200, reply)
	}
}

type AuditLogHTTPClient interface {
	ListAuditLog(ctx context.Context, req *ListAuditLogRequest, opts ...http.CallOption) (rsp *ListAuditLogResponse, err error)
	ListAuditLogQueryCondition(ctx context.Context, req *AuditLogQueryConditionRequest, opts ...http.CallOption) (rsp *AuditLogQueryConditionResponse, err error)
	GetAuditLog(ctx context.Context, req *GetAuditLogRequest, opts ...http.CallOption) (rsp *GetAuditLogResponse, err error)
}

type AuditLogHTTPClientImpl struct {
	cc *http.Client
}

func NewAuditLogHTTPClient(client *http.Client) AuditLogHTTPClient {
	return &AuditLogHTTPClientImpl{client}
}

func (c *AuditLogHTTPClientImpl) ListAuditLog(ctx context.Context, in *ListAuditLogRequest, opts ...http.CallOption) (*ListAuditLogResponse, error) {
	var out ListAuditLogResponse
	pattern := "/api/v1/audit_log/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuditLogListAuditLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuditLogHTTPClientImpl) ListAuditLogQueryCondition(ctx context.Context, in *AuditLogQueryConditionRequest, opts ...http.CallOption) (*AuditLogQueryConditionResponse, error) {
	var out AuditLogQueryConditionResponse
	pattern := "/api/v1/audit_log/query_condition/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuditLogListAuditLogQueryCondition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AuditLogHTTPClientImpl) GetAuditLog(ctx context.Context, in *GetAuditLogRequest, opts ...http.CallOption) (*GetAuditLogResponse, error) {
	var out GetAuditLogResponse
	pattern := "/api/v1/audit_log/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuditLogGetAuditLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
