// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/ezrollout.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HPAScalingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 扩容策略类型，支持：
	// - "Pods": 根据CPU使用率或内存使用率扩容
	// - "Percent": 根据百分比扩容
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	// 值
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,optional"`
	// 步长
	// PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
	PeriodSeconds uint32 `protobuf:"varint,3,opt,name=periodSeconds,proto3" json:"periodSeconds,optional"`
}

func (x *HPAScalingPolicy) Reset() {
	*x = HPAScalingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPAScalingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPAScalingPolicy) ProtoMessage() {}

func (x *HPAScalingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPAScalingPolicy.ProtoReflect.Descriptor instead.
func (*HPAScalingPolicy) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{0}
}

func (x *HPAScalingPolicy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *HPAScalingPolicy) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *HPAScalingPolicy) GetPeriodSeconds() uint32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

// 伸缩规则
type HPAScalingRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 窗口稳定时间
	// If not set, use the default values:
	// - For scale up: 0 (i.e. no stabilization is done).
	// - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
	StabilizationWindowSeconds uint32 `protobuf:"varint,3,opt,name=stabilizationWindowSeconds,proto3" json:"stabilizationWindowSeconds,optional"`
	// selectPolicy, 默认为Max
	SelectPolicy string `protobuf:"bytes,1,opt,name=selectPolicy,proto3" json:"selectPolicy,optional"`
	// 扩容策略列表
	Policies []*HPAScalingPolicy `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,optional"`
}

func (x *HPAScalingRules) Reset() {
	*x = HPAScalingRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HPAScalingRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HPAScalingRules) ProtoMessage() {}

func (x *HPAScalingRules) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HPAScalingRules.ProtoReflect.Descriptor instead.
func (*HPAScalingRules) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{1}
}

func (x *HPAScalingRules) GetStabilizationWindowSeconds() uint32 {
	if x != nil {
		return x.StabilizationWindowSeconds
	}
	return 0
}

func (x *HPAScalingRules) GetSelectPolicy() string {
	if x != nil {
		return x.SelectPolicy
	}
	return ""
}

func (x *HPAScalingRules) GetPolicies() []*HPAScalingPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type HorizontalPodAutoscalerBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 扩容策略
	ScaleUp *HPAScalingRules `protobuf:"bytes,1,opt,name=scaleUp,proto3" json:"scaleUp,optional"`
	// 缩容策略
	ScaleDown *HPAScalingRules `protobuf:"bytes,2,opt,name=scaleDown,proto3" json:"scaleDown,optional"`
}

func (x *HorizontalPodAutoscalerBehavior) Reset() {
	*x = HorizontalPodAutoscalerBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodAutoscalerBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodAutoscalerBehavior) ProtoMessage() {}

func (x *HorizontalPodAutoscalerBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodAutoscalerBehavior.ProtoReflect.Descriptor instead.
func (*HorizontalPodAutoscalerBehavior) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{2}
}

func (x *HorizontalPodAutoscalerBehavior) GetScaleUp() *HPAScalingRules {
	if x != nil {
		return x.ScaleUp
	}
	return nil
}

func (x *HorizontalPodAutoscalerBehavior) GetScaleDown() *HPAScalingRules {
	if x != nil {
		return x.ScaleDown
	}
	return nil
}

type MetricIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指标名称
	// cpu, memory, entity_count, online_number
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
}

func (x *MetricIdentifier) Reset() {
	*x = MetricIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricIdentifier) ProtoMessage() {}

func (x *MetricIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricIdentifier.ProtoReflect.Descriptor instead.
func (*MetricIdentifier) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{3}
}

func (x *MetricIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// MetricTarget defines the target value, average value, or average utilization of a specific metric
type MetricTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指标名称为cpu, memory type == Utilization, 对象填充 averageUtilization
	// 指标名称为entity_count, online_number type == AverageValue, 对象填充 averageValue
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	// 单个对象值（绝对值）.
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,optional"`
	// 绝对值的目标值, 表示所有pod的平均值
	AverageValue uint32 `protobuf:"varint,3,opt,name=averageValue,proto3" json:"averageValue,optional"`
	// 基于百分比的目标值, 仅在type为Utilization时有效
	AverageUtilization uint32 `protobuf:"varint,4,opt,name=averageUtilization,proto3" json:"averageUtilization,optional"`
}

func (x *MetricTarget) Reset() {
	*x = MetricTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricTarget) ProtoMessage() {}

func (x *MetricTarget) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricTarget.ProtoReflect.Descriptor instead.
func (*MetricTarget) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{4}
}

func (x *MetricTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MetricTarget) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricTarget) GetAverageValue() uint32 {
	if x != nil {
		return x.AverageValue
	}
	return 0
}

func (x *MetricTarget) GetAverageUtilization() uint32 {
	if x != nil {
		return x.AverageUtilization
	}
	return 0
}

type PodsMetricSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metrics标识符
	Metric *MetricIdentifier `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,optional"`
	// target specifies the target value for the given metric
	Target *MetricTarget `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,optional"`
}

func (x *PodsMetricSource) Reset() {
	*x = PodsMetricSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodsMetricSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodsMetricSource) ProtoMessage() {}

func (x *PodsMetricSource) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodsMetricSource.ProtoReflect.Descriptor instead.
func (*PodsMetricSource) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{5}
}

func (x *PodsMetricSource) GetMetric() *MetricIdentifier {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *PodsMetricSource) GetTarget() *MetricTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type ResourceMetricSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指标名称 "cpu" or "memory"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// target specifies the target value for the given metric
	Target *MetricTarget `protobuf:"bytes,2,opt,name=target,proto3,oneof" json:"target,optional"`
}

func (x *ResourceMetricSource) Reset() {
	*x = ResourceMetricSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetricSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetricSource) ProtoMessage() {}

func (x *ResourceMetricSource) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetricSource.ProtoReflect.Descriptor instead.
func (*ResourceMetricSource) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceMetricSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceMetricSource) GetTarget() *MetricTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type MetricSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指标类型 "Pods" or "Resource"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	// Pods类型指标
	Pods *PodsMetricSource `protobuf:"bytes,3,opt,name=pods,proto3" json:"pods,optional"`
	// Resource类型指标
	Resource *ResourceMetricSource `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,optional"`
}

func (x *MetricSpec) Reset() {
	*x = MetricSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSpec) ProtoMessage() {}

func (x *MetricSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSpec.ProtoReflect.Descriptor instead.
func (*MetricSpec) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{7}
}

func (x *MetricSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MetricSpec) GetPods() *PodsMetricSource {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *MetricSpec) GetResource() *ResourceMetricSource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type MetricSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 指标名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 期望值
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,optional"`
	// 当前值
	CurrentValue uint32 `protobuf:"varint,3,opt,name=current_value,json=currentValue,proto3" json:"current_value,optional"`
}

func (x *MetricSpecV2) Reset() {
	*x = MetricSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricSpecV2) ProtoMessage() {}

func (x *MetricSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricSpecV2.ProtoReflect.Descriptor instead.
func (*MetricSpecV2) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{8}
}

func (x *MetricSpecV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricSpecV2) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricSpecV2) GetCurrentValue() uint32 {
	if x != nil {
		return x.CurrentValue
	}
	return 0
}

type EzRolloutInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	Ready     bool   `protobuf:"varint,3,opt,name=ready,proto3" json:"ready,optional"`
	// 线上版本
	OnlineVersion string `protobuf:"bytes,4,opt,name=online_version,json=onlineVersion,proto3" json:"online_version,optional"`
	// 最小实例数
	MinReplicas uint32 `protobuf:"varint,5,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,optional"`
	// 最大实例数
	MaxReplicas uint32 `protobuf:"varint,6,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,optional"`
	// 当前实例数
	CurrentReplicas uint32 `protobuf:"varint,7,opt,name=current_replicas,json=currentReplicas,proto3" json:"current_replicas,optional"`
	// 历史版本下线时间[毫秒级别时间戳]
	OfflineDeadline uint64 `protobuf:"varint,8,opt,name=offline_deadline,json=offlineDeadline,proto3" json:"offline_deadline,optional"`
	// 选择器
	Selector map[string]string `protobuf:"bytes,9,rep,name=selector,proto3" json:"selector,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 标签
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注释
	Annotations map[string]string `protobuf:"bytes,11,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 扩容指标
	ScaleUpMetrics []*MetricSpecV2 `protobuf:"bytes,12,rep,name=scale_up_metrics,json=scaleUpMetrics,proto3" json:"scale_up_metrics,optional"`
	// 缩容指标
	ScaleDownMetrics []*MetricSpecV2 `protobuf:"bytes,13,rep,name=scale_down_metrics,json=scaleDownMetrics,proto3" json:"scale_down_metrics,optional"`
	// 线上版本扩容策略
	ScaleUp *HPAScalingRules `protobuf:"bytes,14,opt,name=scale_up,json=scaleUp,proto3" json:"scale_up,optional"`
	// 线上版本缩容策略
	ScaleDown *HPAScalingRules `protobuf:"bytes,15,opt,name=scale_down,json=scaleDown,proto3" json:"scale_down,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,16,opt,name=create_time,json=createTime,proto3" json:"create_time,optional"`
	// Yaml
	Yaml string `protobuf:"bytes,17,opt,name=yaml,proto3" json:"yaml,optional"`
	// 最新错误时间 [毫秒级别时间戳]
	LatestErrorTime uint64 `protobuf:"varint,18,opt,name=latest_error_time,json=latestErrorTime,proto3" json:"latest_error_time,optional"`
	// 最新错误信息
	LatestErrorMessage string `protobuf:"bytes,19,opt,name=latest_error_message,json=latestErrorMessage,proto3" json:"latest_error_message,optional"`
	// 允许扩容
	EnableScaleUp bool `protobuf:"varint,20,opt,name=enable_scale_up,json=enableScaleUp,proto3" json:"enable_scale_up,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,21,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
}

func (x *EzRolloutInfo) Reset() {
	*x = EzRolloutInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EzRolloutInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EzRolloutInfo) ProtoMessage() {}

func (x *EzRolloutInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EzRolloutInfo.ProtoReflect.Descriptor instead.
func (*EzRolloutInfo) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{9}
}

func (x *EzRolloutInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EzRolloutInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EzRolloutInfo) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *EzRolloutInfo) GetOnlineVersion() string {
	if x != nil {
		return x.OnlineVersion
	}
	return ""
}

func (x *EzRolloutInfo) GetMinReplicas() uint32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *EzRolloutInfo) GetMaxReplicas() uint32 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

func (x *EzRolloutInfo) GetCurrentReplicas() uint32 {
	if x != nil {
		return x.CurrentReplicas
	}
	return 0
}

func (x *EzRolloutInfo) GetOfflineDeadline() uint64 {
	if x != nil {
		return x.OfflineDeadline
	}
	return 0
}

func (x *EzRolloutInfo) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *EzRolloutInfo) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EzRolloutInfo) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *EzRolloutInfo) GetScaleUpMetrics() []*MetricSpecV2 {
	if x != nil {
		return x.ScaleUpMetrics
	}
	return nil
}

func (x *EzRolloutInfo) GetScaleDownMetrics() []*MetricSpecV2 {
	if x != nil {
		return x.ScaleDownMetrics
	}
	return nil
}

func (x *EzRolloutInfo) GetScaleUp() *HPAScalingRules {
	if x != nil {
		return x.ScaleUp
	}
	return nil
}

func (x *EzRolloutInfo) GetScaleDown() *HPAScalingRules {
	if x != nil {
		return x.ScaleDown
	}
	return nil
}

func (x *EzRolloutInfo) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *EzRolloutInfo) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *EzRolloutInfo) GetLatestErrorTime() uint64 {
	if x != nil {
		return x.LatestErrorTime
	}
	return 0
}

func (x *EzRolloutInfo) GetLatestErrorMessage() string {
	if x != nil {
		return x.LatestErrorMessage
	}
	return ""
}

func (x *EzRolloutInfo) GetEnableScaleUp() bool {
	if x != nil {
		return x.EnableScaleUp
	}
	return false
}

func (x *EzRolloutInfo) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

type ListEzRolloutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	Keyword     string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,optional"`
	Page        uint32 `protobuf:"varint,4,opt,name=page,proto3" json:"page,optional"`
	PageSize    uint32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	ListAll     uint32 `protobuf:"varint,6,opt,name=list_all,json=listAll,proto3" json:"list_all,optional"`
}

func (x *ListEzRolloutRequest) Reset() {
	*x = ListEzRolloutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEzRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEzRolloutRequest) ProtoMessage() {}

func (x *ListEzRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEzRolloutRequest.ProtoReflect.Descriptor instead.
func (*ListEzRolloutRequest) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{10}
}

func (x *ListEzRolloutRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListEzRolloutRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListEzRolloutRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListEzRolloutRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListEzRolloutRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEzRolloutRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

type ListEzRolloutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	List  []*EzRolloutInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListEzRolloutResponse) Reset() {
	*x = ListEzRolloutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEzRolloutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEzRolloutResponse) ProtoMessage() {}

func (x *ListEzRolloutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEzRolloutResponse.ProtoReflect.Descriptor instead.
func (*ListEzRolloutResponse) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{11}
}

func (x *ListEzRolloutResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListEzRolloutResponse) GetList() []*EzRolloutInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type CreateEzRolloutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 线上版本
	OnlineVersion string `protobuf:"bytes,4,opt,name=online_version,json=onlineVersion,proto3" json:"online_version,optional"`
	// 最小实例数
	MinReplicas uint32 `protobuf:"varint,5,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,optional"`
	// 最大实例数
	MaxReplicas uint32 `protobuf:"varint,6,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,optional"`
	// 历史版本下线时间[毫秒级别时间戳]
	OfflineDeadline uint64 `protobuf:"varint,8,opt,name=offline_deadline,json=offlineDeadline,proto3" json:"offline_deadline,optional"`
	// 选择器
	Selector map[string]string `protobuf:"bytes,9,rep,name=selector,proto3" json:"selector,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 标签
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注释
	Annotations map[string]string `protobuf:"bytes,11,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 扩容指标
	ScaleUpMetrics []*MetricSpecV2 `protobuf:"bytes,12,rep,name=scale_up_metrics,json=scaleUpMetrics,proto3" json:"scale_up_metrics,optional"`
	// 缩容指标
	ScaleDownMetrics []*MetricSpecV2 `protobuf:"bytes,13,rep,name=scale_down_metrics,json=scaleDownMetrics,proto3" json:"scale_down_metrics,optional"`
	// 线上版本扩容策略
	ScaleUp *HPAScalingRules `protobuf:"bytes,14,opt,name=scale_up,json=scaleUp,proto3" json:"scale_up,optional"`
	// 线上版本缩容策略
	ScaleDown *HPAScalingRules `protobuf:"bytes,15,opt,name=scale_down,json=scaleDown,proto3" json:"scale_down,optional"`
	// 允许扩容
	EnableScaleUp bool `protobuf:"varint,16,opt,name=enable_scale_up,json=enableScaleUp,proto3" json:"enable_scale_up,optional"`
}

func (x *CreateEzRolloutRequest) Reset() {
	*x = CreateEzRolloutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEzRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEzRolloutRequest) ProtoMessage() {}

func (x *CreateEzRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEzRolloutRequest.ProtoReflect.Descriptor instead.
func (*CreateEzRolloutRequest) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{12}
}

func (x *CreateEzRolloutRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateEzRolloutRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateEzRolloutRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateEzRolloutRequest) GetOnlineVersion() string {
	if x != nil {
		return x.OnlineVersion
	}
	return ""
}

func (x *CreateEzRolloutRequest) GetMinReplicas() uint32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *CreateEzRolloutRequest) GetMaxReplicas() uint32 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

func (x *CreateEzRolloutRequest) GetOfflineDeadline() uint64 {
	if x != nil {
		return x.OfflineDeadline
	}
	return 0
}

func (x *CreateEzRolloutRequest) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *CreateEzRolloutRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateEzRolloutRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateEzRolloutRequest) GetScaleUpMetrics() []*MetricSpecV2 {
	if x != nil {
		return x.ScaleUpMetrics
	}
	return nil
}

func (x *CreateEzRolloutRequest) GetScaleDownMetrics() []*MetricSpecV2 {
	if x != nil {
		return x.ScaleDownMetrics
	}
	return nil
}

func (x *CreateEzRolloutRequest) GetScaleUp() *HPAScalingRules {
	if x != nil {
		return x.ScaleUp
	}
	return nil
}

func (x *CreateEzRolloutRequest) GetScaleDown() *HPAScalingRules {
	if x != nil {
		return x.ScaleDown
	}
	return nil
}

func (x *CreateEzRolloutRequest) GetEnableScaleUp() bool {
	if x != nil {
		return x.EnableScaleUp
	}
	return false
}

type CreateEzRolloutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateEzRolloutResponse) Reset() {
	*x = CreateEzRolloutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEzRolloutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEzRolloutResponse) ProtoMessage() {}

func (x *CreateEzRolloutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEzRolloutResponse.ProtoReflect.Descriptor instead.
func (*CreateEzRolloutResponse) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{13}
}

type UpdateEzRolloutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	Namespace   string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 线上版本
	OnlineVersion string `protobuf:"bytes,4,opt,name=online_version,json=onlineVersion,proto3" json:"online_version,optional"`
	// 最小实例数
	MinReplicas uint32 `protobuf:"varint,5,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,optional"`
	// 最大实例数
	MaxReplicas uint32 `protobuf:"varint,6,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,optional"`
	// 历史版本下线时间
	OfflineDeadline uint64 `protobuf:"varint,8,opt,name=offline_deadline,json=offlineDeadline,proto3" json:"offline_deadline,optional"`
	// 选择器
	Selector map[string]string `protobuf:"bytes,9,rep,name=selector,proto3" json:"selector,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 标签
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注释
	Annotations map[string]string `protobuf:"bytes,11,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 扩容指标
	ScaleUpMetrics []*MetricSpecV2 `protobuf:"bytes,12,rep,name=scale_up_metrics,json=scaleUpMetrics,proto3" json:"scale_up_metrics,optional"`
	// 缩容指标
	ScaleDownMetrics []*MetricSpecV2 `protobuf:"bytes,13,rep,name=scale_down_metrics,json=scaleDownMetrics,proto3" json:"scale_down_metrics,optional"`
	// 线上版本扩容策略
	ScaleUp *HPAScalingRules `protobuf:"bytes,14,opt,name=scale_up,json=scaleUp,proto3" json:"scale_up,optional"`
	// 线上版本缩容策略
	ScaleDown *HPAScalingRules `protobuf:"bytes,15,opt,name=scale_down,json=scaleDown,proto3" json:"scale_down,optional"`
	// 允许扩容
	EnableScaleUp bool `protobuf:"varint,16,opt,name=enable_scale_up,json=enableScaleUp,proto3" json:"enable_scale_up,optional"`
}

func (x *UpdateEzRolloutRequest) Reset() {
	*x = UpdateEzRolloutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEzRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEzRolloutRequest) ProtoMessage() {}

func (x *UpdateEzRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEzRolloutRequest.ProtoReflect.Descriptor instead.
func (*UpdateEzRolloutRequest) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateEzRolloutRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateEzRolloutRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateEzRolloutRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateEzRolloutRequest) GetOnlineVersion() string {
	if x != nil {
		return x.OnlineVersion
	}
	return ""
}

func (x *UpdateEzRolloutRequest) GetMinReplicas() uint32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *UpdateEzRolloutRequest) GetMaxReplicas() uint32 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

func (x *UpdateEzRolloutRequest) GetOfflineDeadline() uint64 {
	if x != nil {
		return x.OfflineDeadline
	}
	return 0
}

func (x *UpdateEzRolloutRequest) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *UpdateEzRolloutRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateEzRolloutRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateEzRolloutRequest) GetScaleUpMetrics() []*MetricSpecV2 {
	if x != nil {
		return x.ScaleUpMetrics
	}
	return nil
}

func (x *UpdateEzRolloutRequest) GetScaleDownMetrics() []*MetricSpecV2 {
	if x != nil {
		return x.ScaleDownMetrics
	}
	return nil
}

func (x *UpdateEzRolloutRequest) GetScaleUp() *HPAScalingRules {
	if x != nil {
		return x.ScaleUp
	}
	return nil
}

func (x *UpdateEzRolloutRequest) GetScaleDown() *HPAScalingRules {
	if x != nil {
		return x.ScaleDown
	}
	return nil
}

func (x *UpdateEzRolloutRequest) GetEnableScaleUp() bool {
	if x != nil {
		return x.EnableScaleUp
	}
	return false
}

type UpdateEzRolloutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateEzRolloutResponse) Reset() {
	*x = UpdateEzRolloutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEzRolloutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEzRolloutResponse) ProtoMessage() {}

func (x *UpdateEzRolloutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEzRolloutResponse.ProtoReflect.Descriptor instead.
func (*UpdateEzRolloutResponse) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{15}
}

type DeleteEzRolloutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *DeleteEzRolloutRequest) Reset() {
	*x = DeleteEzRolloutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEzRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEzRolloutRequest) ProtoMessage() {}

func (x *DeleteEzRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEzRolloutRequest.ProtoReflect.Descriptor instead.
func (*DeleteEzRolloutRequest) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteEzRolloutRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteEzRolloutRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteEzRolloutRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DeleteEzRolloutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteEzRolloutResponse) Reset() {
	*x = DeleteEzRolloutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEzRolloutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEzRolloutResponse) ProtoMessage() {}

func (x *DeleteEzRolloutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEzRolloutResponse.ProtoReflect.Descriptor instead.
func (*DeleteEzRolloutResponse) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{17}
}

type CreateOrUpdateEzRolloutByYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	Yaml        string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *CreateOrUpdateEzRolloutByYamlRequest) Reset() {
	*x = CreateOrUpdateEzRolloutByYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateEzRolloutByYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateEzRolloutByYamlRequest) ProtoMessage() {}

func (x *CreateOrUpdateEzRolloutByYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateEzRolloutByYamlRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateEzRolloutByYamlRequest) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{18}
}

func (x *CreateOrUpdateEzRolloutByYamlRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateOrUpdateEzRolloutByYamlRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type CreateOrUpdateEzRolloutByYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrUpdateEzRolloutByYamlResponse) Reset() {
	*x = CreateOrUpdateEzRolloutByYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateEzRolloutByYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateEzRolloutByYamlResponse) ProtoMessage() {}

func (x *CreateOrUpdateEzRolloutByYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateEzRolloutByYamlResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateEzRolloutByYamlResponse) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{19}
}

type EzRolloutDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	Namespace   string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *EzRolloutDetailRequest) Reset() {
	*x = EzRolloutDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EzRolloutDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EzRolloutDetailRequest) ProtoMessage() {}

func (x *EzRolloutDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EzRolloutDetailRequest.ProtoReflect.Descriptor instead.
func (*EzRolloutDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{20}
}

func (x *EzRolloutDetailRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EzRolloutDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EzRolloutDetailRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type EzRolloutDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *EzRolloutInfo `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *EzRolloutDetailResponse) Reset() {
	*x = EzRolloutDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_ezrollout_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EzRolloutDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EzRolloutDetailResponse) ProtoMessage() {}

func (x *EzRolloutDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_ezrollout_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EzRolloutDetailResponse.ProtoReflect.Descriptor instead.
func (*EzRolloutDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_ezrollout_v1_proto_rawDescGZIP(), []int{21}
}

func (x *EzRolloutDetailResponse) GetDetail() *EzRolloutInfo {
	if x != nil {
		return x.Detail
	}
	return nil
}

var File_pb_ezrollout_v1_proto protoreflect.FileDescriptor

var file_pb_ezrollout_v1_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x62, 0x2f, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x48, 0x50, 0x41,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x11, 0x72, 0x0f, 0x52, 0x04, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x07, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x33, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x2a,
	0x05, 0x18, 0x88, 0x0e, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x73,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x0a,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1f, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x37, 0x0a,
	0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x50,
	0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x7a, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44,
	0x6f, 0x77, 0x6e, 0x22, 0x26, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x50,
	0x6f, 0x64, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x36, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x6e, 0x0a, 0x14, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x0a,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x12,
	0x72, 0x10, 0x52, 0x04, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x75, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x12, 0x1e, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xbe, 0x09, 0x0a, 0x0d, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x3f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x10,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x45, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x7a,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x7a, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x70,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x55, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x32, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x12, 0x3c,
	0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x1a, 0x3b, 0x0a, 0x0d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x7a, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x22, 0x63, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x7a,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xb6, 0x08, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x3f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0c, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2d, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x35, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x0f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x4e, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32,
	0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x12, 0x3c, 0x0a, 0x0a,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x55, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x08, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x3f, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0e, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2d, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x35, 0x0a, 0x10,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x28, 0x01, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x57, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x52, 0x0e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x55, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x12,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x56, 0x32, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x55, 0x70,
	0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x50, 0x41, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x75,
	0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x55, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x19,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x19, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22,
	0x27, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x45, 0x7a, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x17,
	0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x32, 0xcb, 0x0a, 0x0a,
	0x09, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x7d, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x7a,
	0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x7a, 0x72, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xf9, 0x01, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x2e,
	0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0xc2, 0xdb, 0xaa,
	0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x6b, 0x0a, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4,
	0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0x12, 0x06, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0x1a, 0x17, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x14,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbc,
	0xb8, 0xe7, 0xbc, 0xa9, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0xf9, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x7a, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb,
	0xaa, 0x03, 0x6b, 0x0a, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc,
	0xa9, 0x12, 0x06, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x14, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x1a, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9,
	0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0xf9, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x7a,
	0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x98, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x6b, 0x0a,
	0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0x12, 0x06, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x14, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x0c,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0x1a, 0x0c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x7a, 0x72,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xbf, 0x02,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x12,
	0x32, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x7a, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0xca, 0xdb, 0xaa, 0x03, 0x75, 0x0a, 0x0c, 0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbc, 0xb8,
	0xe7, 0xbc, 0xa9, 0x12, 0x10, 0x59, 0x61, 0x6d, 0x6c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x14, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x0c,
	0xe7, 0x89, 0x88, 0xe6, 0x9c, 0xac, 0xe4, 0xbc, 0xb8, 0xe7, 0xbc, 0xa9, 0x1a, 0x0c, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x7a, 0x72,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x12,
	0x88, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x7a, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65,
	0x7a, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x7a, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x7a, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f,
	0x64, 0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_ezrollout_v1_proto_rawDescOnce sync.Once
	file_pb_ezrollout_v1_proto_rawDescData = file_pb_ezrollout_v1_proto_rawDesc
)

func file_pb_ezrollout_v1_proto_rawDescGZIP() []byte {
	file_pb_ezrollout_v1_proto_rawDescOnce.Do(func() {
		file_pb_ezrollout_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_ezrollout_v1_proto_rawDescData)
	})
	return file_pb_ezrollout_v1_proto_rawDescData
}

var file_pb_ezrollout_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pb_ezrollout_v1_proto_goTypes = []interface{}{
	(*HPAScalingPolicy)(nil),                      // 0: ezrollout.v1.HPAScalingPolicy
	(*HPAScalingRules)(nil),                       // 1: ezrollout.v1.HPAScalingRules
	(*HorizontalPodAutoscalerBehavior)(nil),       // 2: ezrollout.v1.HorizontalPodAutoscalerBehavior
	(*MetricIdentifier)(nil),                      // 3: ezrollout.v1.MetricIdentifier
	(*MetricTarget)(nil),                          // 4: ezrollout.v1.MetricTarget
	(*PodsMetricSource)(nil),                      // 5: ezrollout.v1.PodsMetricSource
	(*ResourceMetricSource)(nil),                  // 6: ezrollout.v1.ResourceMetricSource
	(*MetricSpec)(nil),                            // 7: ezrollout.v1.MetricSpec
	(*MetricSpecV2)(nil),                          // 8: ezrollout.v1.MetricSpecV2
	(*EzRolloutInfo)(nil),                         // 9: ezrollout.v1.EzRolloutInfo
	(*ListEzRolloutRequest)(nil),                  // 10: ezrollout.v1.ListEzRolloutRequest
	(*ListEzRolloutResponse)(nil),                 // 11: ezrollout.v1.ListEzRolloutResponse
	(*CreateEzRolloutRequest)(nil),                // 12: ezrollout.v1.CreateEzRolloutRequest
	(*CreateEzRolloutResponse)(nil),               // 13: ezrollout.v1.CreateEzRolloutResponse
	(*UpdateEzRolloutRequest)(nil),                // 14: ezrollout.v1.UpdateEzRolloutRequest
	(*UpdateEzRolloutResponse)(nil),               // 15: ezrollout.v1.UpdateEzRolloutResponse
	(*DeleteEzRolloutRequest)(nil),                // 16: ezrollout.v1.DeleteEzRolloutRequest
	(*DeleteEzRolloutResponse)(nil),               // 17: ezrollout.v1.DeleteEzRolloutResponse
	(*CreateOrUpdateEzRolloutByYamlRequest)(nil),  // 18: ezrollout.v1.CreateOrUpdateEzRolloutByYamlRequest
	(*CreateOrUpdateEzRolloutByYamlResponse)(nil), // 19: ezrollout.v1.CreateOrUpdateEzRolloutByYamlResponse
	(*EzRolloutDetailRequest)(nil),                // 20: ezrollout.v1.EzRolloutDetailRequest
	(*EzRolloutDetailResponse)(nil),               // 21: ezrollout.v1.EzRolloutDetailResponse
	nil,                                           // 22: ezrollout.v1.EzRolloutInfo.SelectorEntry
	nil,                                           // 23: ezrollout.v1.EzRolloutInfo.LabelsEntry
	nil,                                           // 24: ezrollout.v1.EzRolloutInfo.AnnotationsEntry
	nil,                                           // 25: ezrollout.v1.CreateEzRolloutRequest.SelectorEntry
	nil,                                           // 26: ezrollout.v1.CreateEzRolloutRequest.LabelsEntry
	nil,                                           // 27: ezrollout.v1.CreateEzRolloutRequest.AnnotationsEntry
	nil,                                           // 28: ezrollout.v1.UpdateEzRolloutRequest.SelectorEntry
	nil,                                           // 29: ezrollout.v1.UpdateEzRolloutRequest.LabelsEntry
	nil,                                           // 30: ezrollout.v1.UpdateEzRolloutRequest.AnnotationsEntry
}
var file_pb_ezrollout_v1_proto_depIdxs = []int32{
	0,  // 0: ezrollout.v1.HPAScalingRules.policies:type_name -> ezrollout.v1.HPAScalingPolicy
	1,  // 1: ezrollout.v1.HorizontalPodAutoscalerBehavior.scaleUp:type_name -> ezrollout.v1.HPAScalingRules
	1,  // 2: ezrollout.v1.HorizontalPodAutoscalerBehavior.scaleDown:type_name -> ezrollout.v1.HPAScalingRules
	3,  // 3: ezrollout.v1.PodsMetricSource.metric:type_name -> ezrollout.v1.MetricIdentifier
	4,  // 4: ezrollout.v1.PodsMetricSource.target:type_name -> ezrollout.v1.MetricTarget
	4,  // 5: ezrollout.v1.ResourceMetricSource.target:type_name -> ezrollout.v1.MetricTarget
	5,  // 6: ezrollout.v1.MetricSpec.pods:type_name -> ezrollout.v1.PodsMetricSource
	6,  // 7: ezrollout.v1.MetricSpec.resource:type_name -> ezrollout.v1.ResourceMetricSource
	22, // 8: ezrollout.v1.EzRolloutInfo.selector:type_name -> ezrollout.v1.EzRolloutInfo.SelectorEntry
	23, // 9: ezrollout.v1.EzRolloutInfo.labels:type_name -> ezrollout.v1.EzRolloutInfo.LabelsEntry
	24, // 10: ezrollout.v1.EzRolloutInfo.annotations:type_name -> ezrollout.v1.EzRolloutInfo.AnnotationsEntry
	8,  // 11: ezrollout.v1.EzRolloutInfo.scale_up_metrics:type_name -> ezrollout.v1.MetricSpecV2
	8,  // 12: ezrollout.v1.EzRolloutInfo.scale_down_metrics:type_name -> ezrollout.v1.MetricSpecV2
	1,  // 13: ezrollout.v1.EzRolloutInfo.scale_up:type_name -> ezrollout.v1.HPAScalingRules
	1,  // 14: ezrollout.v1.EzRolloutInfo.scale_down:type_name -> ezrollout.v1.HPAScalingRules
	9,  // 15: ezrollout.v1.ListEzRolloutResponse.list:type_name -> ezrollout.v1.EzRolloutInfo
	25, // 16: ezrollout.v1.CreateEzRolloutRequest.selector:type_name -> ezrollout.v1.CreateEzRolloutRequest.SelectorEntry
	26, // 17: ezrollout.v1.CreateEzRolloutRequest.labels:type_name -> ezrollout.v1.CreateEzRolloutRequest.LabelsEntry
	27, // 18: ezrollout.v1.CreateEzRolloutRequest.annotations:type_name -> ezrollout.v1.CreateEzRolloutRequest.AnnotationsEntry
	8,  // 19: ezrollout.v1.CreateEzRolloutRequest.scale_up_metrics:type_name -> ezrollout.v1.MetricSpecV2
	8,  // 20: ezrollout.v1.CreateEzRolloutRequest.scale_down_metrics:type_name -> ezrollout.v1.MetricSpecV2
	1,  // 21: ezrollout.v1.CreateEzRolloutRequest.scale_up:type_name -> ezrollout.v1.HPAScalingRules
	1,  // 22: ezrollout.v1.CreateEzRolloutRequest.scale_down:type_name -> ezrollout.v1.HPAScalingRules
	28, // 23: ezrollout.v1.UpdateEzRolloutRequest.selector:type_name -> ezrollout.v1.UpdateEzRolloutRequest.SelectorEntry
	29, // 24: ezrollout.v1.UpdateEzRolloutRequest.labels:type_name -> ezrollout.v1.UpdateEzRolloutRequest.LabelsEntry
	30, // 25: ezrollout.v1.UpdateEzRolloutRequest.annotations:type_name -> ezrollout.v1.UpdateEzRolloutRequest.AnnotationsEntry
	8,  // 26: ezrollout.v1.UpdateEzRolloutRequest.scale_up_metrics:type_name -> ezrollout.v1.MetricSpecV2
	8,  // 27: ezrollout.v1.UpdateEzRolloutRequest.scale_down_metrics:type_name -> ezrollout.v1.MetricSpecV2
	1,  // 28: ezrollout.v1.UpdateEzRolloutRequest.scale_up:type_name -> ezrollout.v1.HPAScalingRules
	1,  // 29: ezrollout.v1.UpdateEzRolloutRequest.scale_down:type_name -> ezrollout.v1.HPAScalingRules
	9,  // 30: ezrollout.v1.EzRolloutDetailResponse.detail:type_name -> ezrollout.v1.EzRolloutInfo
	10, // 31: ezrollout.v1.EzRollout.ListEzRollout:input_type -> ezrollout.v1.ListEzRolloutRequest
	12, // 32: ezrollout.v1.EzRollout.CreateEzRollout:input_type -> ezrollout.v1.CreateEzRolloutRequest
	14, // 33: ezrollout.v1.EzRollout.UpdateEzRollout:input_type -> ezrollout.v1.UpdateEzRolloutRequest
	16, // 34: ezrollout.v1.EzRollout.DeleteEzRollout:input_type -> ezrollout.v1.DeleteEzRolloutRequest
	18, // 35: ezrollout.v1.EzRollout.CreateOrUpdateEzRolloutByYaml:input_type -> ezrollout.v1.CreateOrUpdateEzRolloutByYamlRequest
	20, // 36: ezrollout.v1.EzRollout.GetEzRolloutDetail:input_type -> ezrollout.v1.EzRolloutDetailRequest
	11, // 37: ezrollout.v1.EzRollout.ListEzRollout:output_type -> ezrollout.v1.ListEzRolloutResponse
	13, // 38: ezrollout.v1.EzRollout.CreateEzRollout:output_type -> ezrollout.v1.CreateEzRolloutResponse
	15, // 39: ezrollout.v1.EzRollout.UpdateEzRollout:output_type -> ezrollout.v1.UpdateEzRolloutResponse
	17, // 40: ezrollout.v1.EzRollout.DeleteEzRollout:output_type -> ezrollout.v1.DeleteEzRolloutResponse
	19, // 41: ezrollout.v1.EzRollout.CreateOrUpdateEzRolloutByYaml:output_type -> ezrollout.v1.CreateOrUpdateEzRolloutByYamlResponse
	21, // 42: ezrollout.v1.EzRollout.GetEzRolloutDetail:output_type -> ezrollout.v1.EzRolloutDetailResponse
	37, // [37:43] is the sub-list for method output_type
	31, // [31:37] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_pb_ezrollout_v1_proto_init() }
func file_pb_ezrollout_v1_proto_init() {
	if File_pb_ezrollout_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_ezrollout_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPAScalingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HPAScalingRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodAutoscalerBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodsMetricSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetricSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EzRolloutInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEzRolloutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEzRolloutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEzRolloutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEzRolloutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEzRolloutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEzRolloutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEzRolloutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEzRolloutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateEzRolloutByYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateEzRolloutByYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EzRolloutDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_ezrollout_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EzRolloutDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_ezrollout_v1_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_pb_ezrollout_v1_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_ezrollout_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_ezrollout_v1_proto_goTypes,
		DependencyIndexes: file_pb_ezrollout_v1_proto_depIdxs,
		MessageInfos:      file_pb_ezrollout_v1_proto_msgTypes,
	}.Build()
	File_pb_ezrollout_v1_proto = out.File
	file_pb_ezrollout_v1_proto_rawDesc = nil
	file_pb_ezrollout_v1_proto_goTypes = nil
	file_pb_ezrollout_v1_proto_depIdxs = nil
}
