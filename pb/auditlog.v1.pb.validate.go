// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/auditlog.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogRequestMultiError, or nil if none found.
func (m *ListAuditLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for ClientIp

	// no validation rules for Cluster

	// no validation rules for Namespace

	// no validation rules for Module

	// no validation rules for ResourceType

	// no validation rules for ResourceName

	// no validation rules for Action

	// no validation rules for Status

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if m.StartTime != nil {
		// no validation rules for StartTime
	}

	if m.EndTime != nil {
		// no validation rules for EndTime
	}

	if len(errors) > 0 {
		return ListAuditLogRequestMultiError(errors)
	}

	return nil
}

// ListAuditLogRequestMultiError is an error wrapping multiple validation
// errors returned by ListAuditLogRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAuditLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogRequestMultiError) AllErrors() []error { return m }

// ListAuditLogRequestValidationError is the validation error returned by
// ListAuditLogRequest.Validate if the designated constraints aren't met.
type ListAuditLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogRequestValidationError) ErrorName() string {
	return "ListAuditLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogRequestValidationError{}

// Validate checks the field values on ListAuditLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogResponseMultiError, or nil if none found.
func (m *ListAuditLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditLogResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditLogResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAuditLogResponseMultiError(errors)
	}

	return nil
}

// ListAuditLogResponseMultiError is an error wrapping multiple validation
// errors returned by ListAuditLogResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAuditLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogResponseMultiError) AllErrors() []error { return m }

// ListAuditLogResponseValidationError is the validation error returned by
// ListAuditLogResponse.Validate if the designated constraints aren't met.
type ListAuditLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogResponseValidationError) ErrorName() string {
	return "ListAuditLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogResponseValidationError{}

// Validate checks the field values on AuditLogItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditLogItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLogItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditLogItemMultiError, or
// nil if none found.
func (m *AuditLogItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLogItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for ClientIp

	// no validation rules for Cluster

	// no validation rules for Namespace

	// no validation rules for Module

	// no validation rules for ResourceType

	// no validation rules for ResourceName

	// no validation rules for Action

	// no validation rules for RequestPath

	// no validation rules for RequestBody

	// no validation rules for ResponseBody

	// no validation rules for Status

	// no validation rules for Duration

	// no validation rules for OperationTime

	// no validation rules for CreatedTime

	if len(errors) > 0 {
		return AuditLogItemMultiError(errors)
	}

	return nil
}

// AuditLogItemMultiError is an error wrapping multiple validation errors
// returned by AuditLogItem.ValidateAll() if the designated constraints aren't met.
type AuditLogItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogItemMultiError) AllErrors() []error { return m }

// AuditLogItemValidationError is the validation error returned by
// AuditLogItem.Validate if the designated constraints aren't met.
type AuditLogItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogItemValidationError) ErrorName() string { return "AuditLogItemValidationError" }

// Error satisfies the builtin error interface
func (e AuditLogItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLogItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogItemValidationError{}

// Validate checks the field values on GetAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditLogRequestMultiError, or nil if none found.
func (m *GetAuditLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAuditLogRequestMultiError(errors)
	}

	return nil
}

// GetAuditLogRequestMultiError is an error wrapping multiple validation errors
// returned by GetAuditLogRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAuditLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditLogRequestMultiError) AllErrors() []error { return m }

// GetAuditLogRequestValidationError is the validation error returned by
// GetAuditLogRequest.Validate if the designated constraints aren't met.
type GetAuditLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditLogRequestValidationError) ErrorName() string {
	return "GetAuditLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditLogRequestValidationError{}

// Validate checks the field values on GetAuditLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditLogResponseMultiError, or nil if none found.
func (m *GetAuditLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuditLogResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuditLogResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuditLogResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuditLogResponseMultiError(errors)
	}

	return nil
}

// GetAuditLogResponseMultiError is an error wrapping multiple validation
// errors returned by GetAuditLogResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuditLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditLogResponseMultiError) AllErrors() []error { return m }

// GetAuditLogResponseValidationError is the validation error returned by
// GetAuditLogResponse.Validate if the designated constraints aren't met.
type GetAuditLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditLogResponseValidationError) ErrorName() string {
	return "GetAuditLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditLogResponseValidationError{}

// Validate checks the field values on AuditLogQueryConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditLogQueryConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLogQueryConditionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuditLogQueryConditionRequestMultiError, or nil if none found.
func (m *AuditLogQueryConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLogQueryConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditLogQueryConditionRequestMultiError(errors)
	}

	return nil
}

// AuditLogQueryConditionRequestMultiError is an error wrapping multiple
// validation errors returned by AuditLogQueryConditionRequest.ValidateAll()
// if the designated constraints aren't met.
type AuditLogQueryConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogQueryConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogQueryConditionRequestMultiError) AllErrors() []error { return m }

// AuditLogQueryConditionRequestValidationError is the validation error
// returned by AuditLogQueryConditionRequest.Validate if the designated
// constraints aren't met.
type AuditLogQueryConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogQueryConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogQueryConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogQueryConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogQueryConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogQueryConditionRequestValidationError) ErrorName() string {
	return "AuditLogQueryConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuditLogQueryConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLogQueryConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogQueryConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogQueryConditionRequestValidationError{}

// Validate checks the field values on AuditLogQueryConditionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuditLogQueryConditionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLogQueryConditionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuditLogQueryConditionResponseMultiError, or nil if none found.
func (m *AuditLogQueryConditionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLogQueryConditionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuditLogQueryConditionResponseMultiError(errors)
	}

	return nil
}

// AuditLogQueryConditionResponseMultiError is an error wrapping multiple
// validation errors returned by AuditLogQueryConditionResponse.ValidateAll()
// if the designated constraints aren't met.
type AuditLogQueryConditionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogQueryConditionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogQueryConditionResponseMultiError) AllErrors() []error { return m }

// AuditLogQueryConditionResponseValidationError is the validation error
// returned by AuditLogQueryConditionResponse.Validate if the designated
// constraints aren't met.
type AuditLogQueryConditionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogQueryConditionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogQueryConditionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogQueryConditionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogQueryConditionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogQueryConditionResponseValidationError) ErrorName() string {
	return "AuditLogQueryConditionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuditLogQueryConditionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLogQueryConditionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogQueryConditionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogQueryConditionResponseValidationError{}
