// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/pv.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListPersistentVolumeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPersistentVolumeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPersistentVolumeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPersistentVolumeRequestMultiError, or nil if none found.
func (m *ListPersistentVolumeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPersistentVolumeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListPersistentVolumeRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListPersistentVolumeRequestMultiError(errors)
	}

	return nil
}

// ListPersistentVolumeRequestMultiError is an error wrapping multiple
// validation errors returned by ListPersistentVolumeRequest.ValidateAll() if
// the designated constraints aren't met.
type ListPersistentVolumeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPersistentVolumeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPersistentVolumeRequestMultiError) AllErrors() []error { return m }

// ListPersistentVolumeRequestValidationError is the validation error returned
// by ListPersistentVolumeRequest.Validate if the designated constraints
// aren't met.
type ListPersistentVolumeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersistentVolumeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersistentVolumeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersistentVolumeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersistentVolumeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersistentVolumeRequestValidationError) ErrorName() string {
	return "ListPersistentVolumeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersistentVolumeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersistentVolumeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersistentVolumeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersistentVolumeRequestValidationError{}

// Validate checks the field values on ClaimRef with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClaimRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClaimRef with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClaimRefMultiError, or nil
// if none found.
func (m *ClaimRef) ValidateAll() error {
	return m.validate(true)
}

func (m *ClaimRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ClaimRefValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ClaimRefValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := ClaimRefValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClaimRefMultiError(errors)
	}

	return nil
}

// ClaimRefMultiError is an error wrapping multiple validation errors returned
// by ClaimRef.ValidateAll() if the designated constraints aren't met.
type ClaimRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClaimRefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClaimRefMultiError) AllErrors() []error { return m }

// ClaimRefValidationError is the validation error returned by
// ClaimRef.Validate if the designated constraints aren't met.
type ClaimRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimRefValidationError) ErrorName() string { return "ClaimRefValidationError" }

// Error satisfies the builtin error interface
func (e ClaimRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimRefValidationError{}

// Validate checks the field values on PersistentVolumeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PersistentVolumeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PersistentVolumeItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PersistentVolumeItemMultiError, or nil if none found.
func (m *PersistentVolumeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PersistentVolumeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PersistentVolumeItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	// no validation rules for IsFollowed

	// no validation rules for Yaml

	// no validation rules for Capacity

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetClaimRef()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PersistentVolumeItemValidationError{
					field:  "ClaimRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PersistentVolumeItemValidationError{
					field:  "ClaimRef",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClaimRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PersistentVolumeItemValidationError{
				field:  "ClaimRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VolumeMode

	// no validation rules for StorageClassName

	if len(errors) > 0 {
		return PersistentVolumeItemMultiError(errors)
	}

	return nil
}

// PersistentVolumeItemMultiError is an error wrapping multiple validation
// errors returned by PersistentVolumeItem.ValidateAll() if the designated
// constraints aren't met.
type PersistentVolumeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersistentVolumeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersistentVolumeItemMultiError) AllErrors() []error { return m }

// PersistentVolumeItemValidationError is the validation error returned by
// PersistentVolumeItem.Validate if the designated constraints aren't met.
type PersistentVolumeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersistentVolumeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersistentVolumeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersistentVolumeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersistentVolumeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersistentVolumeItemValidationError) ErrorName() string {
	return "PersistentVolumeItemValidationError"
}

// Error satisfies the builtin error interface
func (e PersistentVolumeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPersistentVolumeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersistentVolumeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersistentVolumeItemValidationError{}

// Validate checks the field values on ListPersistentVolumeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPersistentVolumeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPersistentVolumeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPersistentVolumeResponseMultiError, or nil if none found.
func (m *ListPersistentVolumeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPersistentVolumeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPersistentVolumeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPersistentVolumeResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPersistentVolumeResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPersistentVolumeResponseMultiError(errors)
	}

	return nil
}

// ListPersistentVolumeResponseMultiError is an error wrapping multiple
// validation errors returned by ListPersistentVolumeResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPersistentVolumeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPersistentVolumeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPersistentVolumeResponseMultiError) AllErrors() []error { return m }

// ListPersistentVolumeResponseValidationError is the validation error returned
// by ListPersistentVolumeResponse.Validate if the designated constraints
// aren't met.
type ListPersistentVolumeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersistentVolumeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersistentVolumeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersistentVolumeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersistentVolumeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersistentVolumeResponseValidationError) ErrorName() string {
	return "ListPersistentVolumeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersistentVolumeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersistentVolumeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersistentVolumeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersistentVolumeResponseValidationError{}
