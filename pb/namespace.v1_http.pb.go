// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/namespace.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationNameSpaceCreateNameSpace = "/namespace.NameSpace/CreateNameSpace"
const OperationNameSpaceListNameSpace = "/namespace.NameSpace/ListNameSpace"
const OperationNameSpaceDeleteNameSpace = "/namespace.NameSpace/DeleteNameSpace"
const OperationNameSpaceUpdateNameSpace = "/namespace.NameSpace/UpdateNameSpace"
const OperationNameSpaceCreateNameSpaceByYaml = "/namespace.NameSpace/CreateNameSpaceByYaml"
const OperationNameSpaceUpdateNameSpaceByYaml = "/namespace.NameSpace/UpdateNameSpaceByYaml"
const OperationNameSpaceRefreshNameSpaceYaml = "/namespace.NameSpace/RefreshNameSpaceYaml"
const OperationNameSpaceGetNameSpaceDetail = "/namespace.NameSpace/GetNameSpaceDetail"

type NameSpaceHTTPServer interface {
	// CreateNameSpace管理-云原生管理-命名空间-创建
	CreateNameSpace(context.Context, *CreateNameSpaceRequest) (*CreateNameSpaceResponse, error)
	// ListNameSpace查看-云原生管理-命名空间-列表
	ListNameSpace(context.Context, *ListNameSpaceRequest) (*ListNameSpaceResponse, error)
	// DeleteNameSpace管理-云原生管理-命名空间-删除
	DeleteNameSpace(context.Context, *DeleteNameSpaceRequest) (*DeleteNameSpaceResponse, error)
	// UpdateNameSpace管理-云原生管理-命名空间-编辑
	UpdateNameSpace(context.Context, *UpdateNameSpaceRequest) (*DeleteNameSpaceResponse, error)
	// CreateNameSpaceByYaml管理-云原生管理-命名空间-YAML创建
	CreateNameSpaceByYaml(context.Context, *CreateNameSpaceByYamlRequest) (*CreateNameSpaceResponse, error)
	// UpdateNameSpaceByYaml管理-云原生管理-命名空间-YAML更新
	UpdateNameSpaceByYaml(context.Context, *CreateNameSpaceByYamlRequest) (*CreateNameSpaceResponse, error)
	// RefreshNameSpaceYaml查看-云原生管理-命名空间-YAML
	RefreshNameSpaceYaml(context.Context, *GetNameSpaceYamlRequest) (*GetNameSpaceYamlResponse, error)
	// GetNameSpaceDetail查看-云原生管理-命名空间-详情
	GetNameSpaceDetail(context.Context, *GetNameSpaceDetailRequest) (*GetNameSpaceDetailResponse, error)
}

func NewNameSpaceHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationNameSpaceCreateNameSpace).Build(),
		selector.Server().Path(OperationNameSpaceListNameSpace).Build(),
		selector.Server().Path(OperationNameSpaceDeleteNameSpace).Build(),
		selector.Server().Path(OperationNameSpaceUpdateNameSpace).Build(),
		selector.Server().Path(OperationNameSpaceCreateNameSpaceByYaml).Build(),
		selector.Server().Path(OperationNameSpaceUpdateNameSpaceByYaml).Build(),
		selector.Server().Path(OperationNameSpaceRefreshNameSpaceYaml).Build(),
		selector.Server().Path(OperationNameSpaceGetNameSpaceDetail).Build(),
	).Path(
		OperationNameSpaceCreateNameSpace,
		OperationNameSpaceListNameSpace,
		OperationNameSpaceDeleteNameSpace,
		OperationNameSpaceUpdateNameSpace,
		OperationNameSpaceCreateNameSpaceByYaml,
		OperationNameSpaceUpdateNameSpaceByYaml,
		OperationNameSpaceRefreshNameSpaceYaml,
		OperationNameSpaceGetNameSpaceDetail,
	).Build()
}

func RegisterNameSpaceHTTPServer(s *http.Server, srv NameSpaceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/namespace/create", _NameSpace_CreateNameSpace0_HTTP_Handler(srv))
	r.GET("/api/v1/namespace/list", _NameSpace_ListNameSpace0_HTTP_Handler(srv))
	r.POST("/api/v1/namespace/delete", _NameSpace_DeleteNameSpace0_HTTP_Handler(srv))
	r.POST("/api/v1/namespace/update", _NameSpace_UpdateNameSpace0_HTTP_Handler(srv))
	r.POST("/api/v1/namespace/create_by_yaml", _NameSpace_CreateNameSpaceByYaml0_HTTP_Handler(srv))
	r.POST("/api/v1/namespace/update_by_yaml", _NameSpace_UpdateNameSpaceByYaml0_HTTP_Handler(srv))
	r.GET("/api/v1/namespace/yaml", _NameSpace_RefreshNameSpaceYaml0_HTTP_Handler(srv))
	r.GET("/api/v1/namespace/detail", _NameSpace_GetNameSpaceDetail0_HTTP_Handler(srv))
}

func GenerateNameSpaceHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 8)
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/namespace/create",
		Comment: "管理-云原生管理-命名空间-创建",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/namespace/list",
		Comment: "查看-云原生管理-命名空间-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/namespace/delete",
		Comment: "管理-云原生管理-命名空间-删除",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/namespace/update",
		Comment: "管理-云原生管理-命名空间-编辑",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/namespace/create_by_yaml",
		Comment: "管理-云原生管理-命名空间-YAML创建",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/namespace/update_by_yaml",
		Comment: "管理-云原生管理-命名空间-YAML更新",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/namespace/yaml",
		Comment: "查看-云原生管理-命名空间-YAML",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/namespace/detail",
		Comment: "查看-云原生管理-命名空间-详情",
	})
	return routes
}

func _NameSpace_CreateNameSpace0_HTTP_Handler(srv NameSpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateNameSpaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNameSpaceCreateNameSpace)
		auditRule := audit.NewAudit(
			"命名空间",
			"新建命名空间",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "namespace",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNameSpace(ctx, req.(*CreateNameSpaceRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNameSpaceResponse)
		return ctx.Result(200, reply)
	}
}

func _NameSpace_ListNameSpace0_HTTP_Handler(srv NameSpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListNameSpaceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNameSpaceListNameSpace)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListNameSpace(ctx, req.(*ListNameSpaceRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNameSpaceResponse)
		return ctx.Result(200, reply)
	}
}

func _NameSpace_DeleteNameSpace0_HTTP_Handler(srv NameSpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteNameSpaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNameSpaceDeleteNameSpace)
		auditRule := audit.NewAudit(
			"命名空间",
			"删除命名空间",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "namespace",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNameSpace(ctx, req.(*DeleteNameSpaceRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNameSpaceResponse)
		return ctx.Result(200, reply)
	}
}

func _NameSpace_UpdateNameSpace0_HTTP_Handler(srv NameSpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateNameSpaceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNameSpaceUpdateNameSpace)
		auditRule := audit.NewAudit(
			"命名空间",
			"编辑命名空间",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "namespace",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNameSpace(ctx, req.(*UpdateNameSpaceRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNameSpaceResponse)
		return ctx.Result(200, reply)
	}
}

func _NameSpace_CreateNameSpaceByYaml0_HTTP_Handler(srv NameSpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateNameSpaceByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNameSpaceCreateNameSpaceByYaml)
		auditRule := audit.NewAudit(
			"命名空间",
			"YAML创建资源",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "namespace",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNameSpaceByYaml(ctx, req.(*CreateNameSpaceByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNameSpaceResponse)
		return ctx.Result(200, reply)
	}
}

func _NameSpace_UpdateNameSpaceByYaml0_HTTP_Handler(srv NameSpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateNameSpaceByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNameSpaceUpdateNameSpaceByYaml)
		auditRule := audit.NewAudit(
			"命名空间",
			"YAML更新资源",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "namespace",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateNameSpaceByYaml(ctx, req.(*CreateNameSpaceByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNameSpaceResponse)
		return ctx.Result(200, reply)
	}
}

func _NameSpace_RefreshNameSpaceYaml0_HTTP_Handler(srv NameSpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetNameSpaceYamlRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNameSpaceRefreshNameSpaceYaml)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshNameSpaceYaml(ctx, req.(*GetNameSpaceYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNameSpaceYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _NameSpace_GetNameSpaceDetail0_HTTP_Handler(srv NameSpaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetNameSpaceDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNameSpaceGetNameSpaceDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNameSpaceDetail(ctx, req.(*GetNameSpaceDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNameSpaceDetailResponse)
		return ctx.Result(200, reply)
	}
}

type NameSpaceHTTPClient interface {
	CreateNameSpace(ctx context.Context, req *CreateNameSpaceRequest, opts ...http.CallOption) (rsp *CreateNameSpaceResponse, err error)
	ListNameSpace(ctx context.Context, req *ListNameSpaceRequest, opts ...http.CallOption) (rsp *ListNameSpaceResponse, err error)
	DeleteNameSpace(ctx context.Context, req *DeleteNameSpaceRequest, opts ...http.CallOption) (rsp *DeleteNameSpaceResponse, err error)
	UpdateNameSpace(ctx context.Context, req *UpdateNameSpaceRequest, opts ...http.CallOption) (rsp *DeleteNameSpaceResponse, err error)
	CreateNameSpaceByYaml(ctx context.Context, req *CreateNameSpaceByYamlRequest, opts ...http.CallOption) (rsp *CreateNameSpaceResponse, err error)
	UpdateNameSpaceByYaml(ctx context.Context, req *CreateNameSpaceByYamlRequest, opts ...http.CallOption) (rsp *CreateNameSpaceResponse, err error)
	RefreshNameSpaceYaml(ctx context.Context, req *GetNameSpaceYamlRequest, opts ...http.CallOption) (rsp *GetNameSpaceYamlResponse, err error)
	GetNameSpaceDetail(ctx context.Context, req *GetNameSpaceDetailRequest, opts ...http.CallOption) (rsp *GetNameSpaceDetailResponse, err error)
}

type NameSpaceHTTPClientImpl struct {
	cc *http.Client
}

func NewNameSpaceHTTPClient(client *http.Client) NameSpaceHTTPClient {
	return &NameSpaceHTTPClientImpl{client}
}

func (c *NameSpaceHTTPClientImpl) CreateNameSpace(ctx context.Context, in *CreateNameSpaceRequest, opts ...http.CallOption) (*CreateNameSpaceResponse, error) {
	var out CreateNameSpaceResponse
	pattern := "/api/v1/namespace/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNameSpaceCreateNameSpace))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NameSpaceHTTPClientImpl) ListNameSpace(ctx context.Context, in *ListNameSpaceRequest, opts ...http.CallOption) (*ListNameSpaceResponse, error) {
	var out ListNameSpaceResponse
	pattern := "/api/v1/namespace/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNameSpaceListNameSpace))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NameSpaceHTTPClientImpl) DeleteNameSpace(ctx context.Context, in *DeleteNameSpaceRequest, opts ...http.CallOption) (*DeleteNameSpaceResponse, error) {
	var out DeleteNameSpaceResponse
	pattern := "/api/v1/namespace/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNameSpaceDeleteNameSpace))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NameSpaceHTTPClientImpl) UpdateNameSpace(ctx context.Context, in *UpdateNameSpaceRequest, opts ...http.CallOption) (*DeleteNameSpaceResponse, error) {
	var out DeleteNameSpaceResponse
	pattern := "/api/v1/namespace/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNameSpaceUpdateNameSpace))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NameSpaceHTTPClientImpl) CreateNameSpaceByYaml(ctx context.Context, in *CreateNameSpaceByYamlRequest, opts ...http.CallOption) (*CreateNameSpaceResponse, error) {
	var out CreateNameSpaceResponse
	pattern := "/api/v1/namespace/create_by_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNameSpaceCreateNameSpaceByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NameSpaceHTTPClientImpl) UpdateNameSpaceByYaml(ctx context.Context, in *CreateNameSpaceByYamlRequest, opts ...http.CallOption) (*CreateNameSpaceResponse, error) {
	var out CreateNameSpaceResponse
	pattern := "/api/v1/namespace/update_by_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNameSpaceUpdateNameSpaceByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NameSpaceHTTPClientImpl) RefreshNameSpaceYaml(ctx context.Context, in *GetNameSpaceYamlRequest, opts ...http.CallOption) (*GetNameSpaceYamlResponse, error) {
	var out GetNameSpaceYamlResponse
	pattern := "/api/v1/namespace/yaml"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNameSpaceRefreshNameSpaceYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *NameSpaceHTTPClientImpl) GetNameSpaceDetail(ctx context.Context, in *GetNameSpaceDetailRequest, opts ...http.CallOption) (*GetNameSpaceDetailResponse, error) {
	var out GetNameSpaceDetailResponse
	pattern := "/api/v1/namespace/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNameSpaceGetNameSpaceDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
