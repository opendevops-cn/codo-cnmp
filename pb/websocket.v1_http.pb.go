// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/websocket.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationWebSocketTailPodLogs = "/websocket.WebSocket/TailPodLogs"
const OperationWebSocketExecPodCommand = "/websocket.WebSocket/ExecPodCommand"

type WebSocketHTTPServer interface {
	// TailPodLogs查看-云原生管理-终端-Pod日志
	TailPodLogs(context.Context, *TailPodLogsRequest) (*TailPodLogsResponse, error)
	// ExecPodCommand执行-云原生管理-终端-Pod命令
	ExecPodCommand(context.Context, *ExecPodCommandRequest) (*PodCommandResponse, error)
}

func NewWebSocketHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationWebSocketTailPodLogs).Build(),
		selector.Server().Path(OperationWebSocketExecPodCommand).Build(),
	).Path(
		OperationWebSocketTailPodLogs,
		OperationWebSocketExecPodCommand,
	).Build()
}

func RegisterWebSocketHTTPServer(s *http.Server, srv WebSocketHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/ws/pod/log", _WebSocket_TailPodLogs0_HTTP_Handler(srv))
	r.GET("/api/v1/ws/pod/command", _WebSocket_ExecPodCommand0_HTTP_Handler(srv))
}

func GenerateWebSocketHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 2)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/ws/pod/log",
		Comment: "查看-云原生管理-终端-Pod日志",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/ws/pod/command",
		Comment: "执行-云原生管理-终端-Pod命令",
	})
	return routes
}

func _WebSocket_TailPodLogs0_HTTP_Handler(srv WebSocketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in TailPodLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebSocketTailPodLogs)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TailPodLogs(ctx, req.(*TailPodLogsRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TailPodLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _WebSocket_ExecPodCommand0_HTTP_Handler(srv WebSocketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ExecPodCommandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWebSocketExecPodCommand)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExecPodCommand(ctx, req.(*ExecPodCommandRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PodCommandResponse)
		return ctx.Result(200, reply)
	}
}

type WebSocketHTTPClient interface {
	TailPodLogs(ctx context.Context, req *TailPodLogsRequest, opts ...http.CallOption) (rsp *TailPodLogsResponse, err error)
	ExecPodCommand(ctx context.Context, req *ExecPodCommandRequest, opts ...http.CallOption) (rsp *PodCommandResponse, err error)
}

type WebSocketHTTPClientImpl struct {
	cc *http.Client
}

func NewWebSocketHTTPClient(client *http.Client) WebSocketHTTPClient {
	return &WebSocketHTTPClientImpl{client}
}

func (c *WebSocketHTTPClientImpl) TailPodLogs(ctx context.Context, in *TailPodLogsRequest, opts ...http.CallOption) (*TailPodLogsResponse, error) {
	var out TailPodLogsResponse
	pattern := "/api/v1/ws/pod/log"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebSocketTailPodLogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WebSocketHTTPClientImpl) ExecPodCommand(ctx context.Context, in *ExecPodCommandRequest, opts ...http.CallOption) (*PodCommandResponse, error) {
	var out PodCommandResponse
	pattern := "/api/v1/ws/pod/command"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWebSocketExecPodCommand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
