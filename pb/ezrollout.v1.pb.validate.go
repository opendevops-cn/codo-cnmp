// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/ezrollout.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HPAScalingPolicy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HPAScalingPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HPAScalingPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HPAScalingPolicyMultiError, or nil if none found.
func (m *HPAScalingPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *HPAScalingPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _HPAScalingPolicy_Type_InLookup[m.GetType()]; !ok {
		err := HPAScalingPolicyValidationError{
			field:  "Type",
			reason: "value must be in list [Pods Percent]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if val := m.GetPeriodSeconds(); val < 1 || val > 1800 {
		err := HPAScalingPolicyValidationError{
			field:  "PeriodSeconds",
			reason: "value must be inside range [1, 1800]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return HPAScalingPolicyMultiError(errors)
	}

	return nil
}

// HPAScalingPolicyMultiError is an error wrapping multiple validation errors
// returned by HPAScalingPolicy.ValidateAll() if the designated constraints
// aren't met.
type HPAScalingPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HPAScalingPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HPAScalingPolicyMultiError) AllErrors() []error { return m }

// HPAScalingPolicyValidationError is the validation error returned by
// HPAScalingPolicy.Validate if the designated constraints aren't met.
type HPAScalingPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HPAScalingPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HPAScalingPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HPAScalingPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HPAScalingPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HPAScalingPolicyValidationError) ErrorName() string { return "HPAScalingPolicyValidationError" }

// Error satisfies the builtin error interface
func (e HPAScalingPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHPAScalingPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HPAScalingPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HPAScalingPolicyValidationError{}

var _HPAScalingPolicy_Type_InLookup = map[string]struct{}{
	"Pods":    {},
	"Percent": {},
}

// Validate checks the field values on HPAScalingRules with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HPAScalingRules) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HPAScalingRules with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HPAScalingRulesMultiError, or nil if none found.
func (m *HPAScalingRules) ValidateAll() error {
	return m.validate(true)
}

func (m *HPAScalingRules) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StabilizationWindowSeconds

	// no validation rules for SelectPolicy

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HPAScalingRulesValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HPAScalingRulesValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HPAScalingRulesValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HPAScalingRulesMultiError(errors)
	}

	return nil
}

// HPAScalingRulesMultiError is an error wrapping multiple validation errors
// returned by HPAScalingRules.ValidateAll() if the designated constraints
// aren't met.
type HPAScalingRulesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HPAScalingRulesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HPAScalingRulesMultiError) AllErrors() []error { return m }

// HPAScalingRulesValidationError is the validation error returned by
// HPAScalingRules.Validate if the designated constraints aren't met.
type HPAScalingRulesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HPAScalingRulesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HPAScalingRulesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HPAScalingRulesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HPAScalingRulesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HPAScalingRulesValidationError) ErrorName() string { return "HPAScalingRulesValidationError" }

// Error satisfies the builtin error interface
func (e HPAScalingRulesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHPAScalingRules.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HPAScalingRulesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HPAScalingRulesValidationError{}

// Validate checks the field values on HorizontalPodAutoscalerBehavior with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HorizontalPodAutoscalerBehavior) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HorizontalPodAutoscalerBehavior with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// HorizontalPodAutoscalerBehaviorMultiError, or nil if none found.
func (m *HorizontalPodAutoscalerBehavior) ValidateAll() error {
	return m.validate(true)
}

func (m *HorizontalPodAutoscalerBehavior) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScaleUp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HorizontalPodAutoscalerBehaviorValidationError{
					field:  "ScaleUp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HorizontalPodAutoscalerBehaviorValidationError{
					field:  "ScaleUp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleUp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HorizontalPodAutoscalerBehaviorValidationError{
				field:  "ScaleUp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScaleDown()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HorizontalPodAutoscalerBehaviorValidationError{
					field:  "ScaleDown",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HorizontalPodAutoscalerBehaviorValidationError{
					field:  "ScaleDown",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleDown()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HorizontalPodAutoscalerBehaviorValidationError{
				field:  "ScaleDown",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HorizontalPodAutoscalerBehaviorMultiError(errors)
	}

	return nil
}

// HorizontalPodAutoscalerBehaviorMultiError is an error wrapping multiple
// validation errors returned by HorizontalPodAutoscalerBehavior.ValidateAll()
// if the designated constraints aren't met.
type HorizontalPodAutoscalerBehaviorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HorizontalPodAutoscalerBehaviorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HorizontalPodAutoscalerBehaviorMultiError) AllErrors() []error { return m }

// HorizontalPodAutoscalerBehaviorValidationError is the validation error
// returned by HorizontalPodAutoscalerBehavior.Validate if the designated
// constraints aren't met.
type HorizontalPodAutoscalerBehaviorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HorizontalPodAutoscalerBehaviorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HorizontalPodAutoscalerBehaviorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HorizontalPodAutoscalerBehaviorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HorizontalPodAutoscalerBehaviorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HorizontalPodAutoscalerBehaviorValidationError) ErrorName() string {
	return "HorizontalPodAutoscalerBehaviorValidationError"
}

// Error satisfies the builtin error interface
func (e HorizontalPodAutoscalerBehaviorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHorizontalPodAutoscalerBehavior.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HorizontalPodAutoscalerBehaviorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HorizontalPodAutoscalerBehaviorValidationError{}

// Validate checks the field values on MetricIdentifier with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetricIdentifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricIdentifier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricIdentifierMultiError, or nil if none found.
func (m *MetricIdentifier) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricIdentifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return MetricIdentifierMultiError(errors)
	}

	return nil
}

// MetricIdentifierMultiError is an error wrapping multiple validation errors
// returned by MetricIdentifier.ValidateAll() if the designated constraints
// aren't met.
type MetricIdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricIdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricIdentifierMultiError) AllErrors() []error { return m }

// MetricIdentifierValidationError is the validation error returned by
// MetricIdentifier.Validate if the designated constraints aren't met.
type MetricIdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricIdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricIdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricIdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricIdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricIdentifierValidationError) ErrorName() string { return "MetricIdentifierValidationError" }

// Error satisfies the builtin error interface
func (e MetricIdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricIdentifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricIdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricIdentifierValidationError{}

// Validate checks the field values on MetricTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricTargetMultiError, or
// nil if none found.
func (m *MetricTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Value

	// no validation rules for AverageValue

	// no validation rules for AverageUtilization

	if len(errors) > 0 {
		return MetricTargetMultiError(errors)
	}

	return nil
}

// MetricTargetMultiError is an error wrapping multiple validation errors
// returned by MetricTarget.ValidateAll() if the designated constraints aren't met.
type MetricTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricTargetMultiError) AllErrors() []error { return m }

// MetricTargetValidationError is the validation error returned by
// MetricTarget.Validate if the designated constraints aren't met.
type MetricTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricTargetValidationError) ErrorName() string { return "MetricTargetValidationError" }

// Error satisfies the builtin error interface
func (e MetricTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricTargetValidationError{}

// Validate checks the field values on PodsMetricSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PodsMetricSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodsMetricSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodsMetricSourceMultiError, or nil if none found.
func (m *PodsMetricSource) ValidateAll() error {
	return m.validate(true)
}

func (m *PodsMetricSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodsMetricSourceValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodsMetricSourceValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodsMetricSourceValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Target != nil {

		if all {
			switch v := interface{}(m.GetTarget()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PodsMetricSourceValidationError{
						field:  "Target",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PodsMetricSourceValidationError{
						field:  "Target",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PodsMetricSourceValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PodsMetricSourceMultiError(errors)
	}

	return nil
}

// PodsMetricSourceMultiError is an error wrapping multiple validation errors
// returned by PodsMetricSource.ValidateAll() if the designated constraints
// aren't met.
type PodsMetricSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodsMetricSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodsMetricSourceMultiError) AllErrors() []error { return m }

// PodsMetricSourceValidationError is the validation error returned by
// PodsMetricSource.Validate if the designated constraints aren't met.
type PodsMetricSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodsMetricSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodsMetricSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodsMetricSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodsMetricSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodsMetricSourceValidationError) ErrorName() string { return "PodsMetricSourceValidationError" }

// Error satisfies the builtin error interface
func (e PodsMetricSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodsMetricSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodsMetricSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodsMetricSourceValidationError{}

// Validate checks the field values on ResourceMetricSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceMetricSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceMetricSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceMetricSourceMultiError, or nil if none found.
func (m *ResourceMetricSource) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceMetricSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.Target != nil {

		if all {
			switch v := interface{}(m.GetTarget()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResourceMetricSourceValidationError{
						field:  "Target",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResourceMetricSourceValidationError{
						field:  "Target",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResourceMetricSourceValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResourceMetricSourceMultiError(errors)
	}

	return nil
}

// ResourceMetricSourceMultiError is an error wrapping multiple validation
// errors returned by ResourceMetricSource.ValidateAll() if the designated
// constraints aren't met.
type ResourceMetricSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMetricSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMetricSourceMultiError) AllErrors() []error { return m }

// ResourceMetricSourceValidationError is the validation error returned by
// ResourceMetricSource.Validate if the designated constraints aren't met.
type ResourceMetricSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceMetricSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceMetricSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceMetricSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceMetricSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceMetricSourceValidationError) ErrorName() string {
	return "ResourceMetricSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceMetricSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceMetricSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceMetricSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceMetricSourceValidationError{}

// Validate checks the field values on MetricSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricSpec with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricSpecMultiError, or
// nil if none found.
func (m *MetricSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _MetricSpec_Type_InLookup[m.GetType()]; !ok {
		err := MetricSpecValidationError{
			field:  "Type",
			reason: "value must be in list [Pods Resource]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPods()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricSpecValidationError{
					field:  "Pods",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricSpecValidationError{
					field:  "Pods",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPods()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricSpecValidationError{
				field:  "Pods",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricSpecValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricSpecValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricSpecValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MetricSpecMultiError(errors)
	}

	return nil
}

// MetricSpecMultiError is an error wrapping multiple validation errors
// returned by MetricSpec.ValidateAll() if the designated constraints aren't met.
type MetricSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricSpecMultiError) AllErrors() []error { return m }

// MetricSpecValidationError is the validation error returned by
// MetricSpec.Validate if the designated constraints aren't met.
type MetricSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSpecValidationError) ErrorName() string { return "MetricSpecValidationError" }

// Error satisfies the builtin error interface
func (e MetricSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSpecValidationError{}

var _MetricSpec_Type_InLookup = map[string]struct{}{
	"Pods":     {},
	"Resource": {},
}

// Validate checks the field values on MetricSpecV2 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricSpecV2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricSpecV2 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricSpecV2MultiError, or
// nil if none found.
func (m *MetricSpecV2) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricSpecV2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := MetricSpecV2ValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetValue() < 0 {
		err := MetricSpecV2ValidationError{
			field:  "Value",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CurrentValue

	if len(errors) > 0 {
		return MetricSpecV2MultiError(errors)
	}

	return nil
}

// MetricSpecV2MultiError is an error wrapping multiple validation errors
// returned by MetricSpecV2.ValidateAll() if the designated constraints aren't met.
type MetricSpecV2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricSpecV2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricSpecV2MultiError) AllErrors() []error { return m }

// MetricSpecV2ValidationError is the validation error returned by
// MetricSpecV2.Validate if the designated constraints aren't met.
type MetricSpecV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSpecV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSpecV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSpecV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSpecV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSpecV2ValidationError) ErrorName() string { return "MetricSpecV2ValidationError" }

// Error satisfies the builtin error interface
func (e MetricSpecV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSpecV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSpecV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSpecV2ValidationError{}

// Validate checks the field values on EzRolloutInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EzRolloutInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EzRolloutInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EzRolloutInfoMultiError, or
// nil if none found.
func (m *EzRolloutInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *EzRolloutInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := EzRolloutInfoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Ready

	// no validation rules for OnlineVersion

	// no validation rules for MinReplicas

	// no validation rules for MaxReplicas

	// no validation rules for CurrentReplicas

	// no validation rules for OfflineDeadline

	// no validation rules for Selector

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetScaleUpMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EzRolloutInfoValidationError{
						field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EzRolloutInfoValidationError{
						field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EzRolloutInfoValidationError{
					field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetScaleDownMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EzRolloutInfoValidationError{
						field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EzRolloutInfoValidationError{
						field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EzRolloutInfoValidationError{
					field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetScaleUp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EzRolloutInfoValidationError{
					field:  "ScaleUp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EzRolloutInfoValidationError{
					field:  "ScaleUp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleUp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EzRolloutInfoValidationError{
				field:  "ScaleUp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScaleDown()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EzRolloutInfoValidationError{
					field:  "ScaleDown",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EzRolloutInfoValidationError{
					field:  "ScaleDown",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleDown()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EzRolloutInfoValidationError{
				field:  "ScaleDown",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for Yaml

	// no validation rules for LatestErrorTime

	// no validation rules for LatestErrorMessage

	// no validation rules for EnableScaleUp

	// no validation rules for IsFollowed

	if len(errors) > 0 {
		return EzRolloutInfoMultiError(errors)
	}

	return nil
}

// EzRolloutInfoMultiError is an error wrapping multiple validation errors
// returned by EzRolloutInfo.ValidateAll() if the designated constraints
// aren't met.
type EzRolloutInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EzRolloutInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EzRolloutInfoMultiError) AllErrors() []error { return m }

// EzRolloutInfoValidationError is the validation error returned by
// EzRolloutInfo.Validate if the designated constraints aren't met.
type EzRolloutInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EzRolloutInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EzRolloutInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EzRolloutInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EzRolloutInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EzRolloutInfoValidationError) ErrorName() string { return "EzRolloutInfoValidationError" }

// Error satisfies the builtin error interface
func (e EzRolloutInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEzRolloutInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EzRolloutInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EzRolloutInfoValidationError{}

// Validate checks the field values on ListEzRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEzRolloutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEzRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEzRolloutRequestMultiError, or nil if none found.
func (m *ListEzRolloutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEzRolloutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListEzRolloutRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListEzRolloutRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListEzRolloutRequestMultiError(errors)
	}

	return nil
}

// ListEzRolloutRequestMultiError is an error wrapping multiple validation
// errors returned by ListEzRolloutRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEzRolloutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEzRolloutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEzRolloutRequestMultiError) AllErrors() []error { return m }

// ListEzRolloutRequestValidationError is the validation error returned by
// ListEzRolloutRequest.Validate if the designated constraints aren't met.
type ListEzRolloutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEzRolloutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEzRolloutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEzRolloutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEzRolloutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEzRolloutRequestValidationError) ErrorName() string {
	return "ListEzRolloutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEzRolloutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEzRolloutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEzRolloutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEzRolloutRequestValidationError{}

// Validate checks the field values on ListEzRolloutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEzRolloutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEzRolloutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEzRolloutResponseMultiError, or nil if none found.
func (m *ListEzRolloutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEzRolloutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEzRolloutResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEzRolloutResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEzRolloutResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEzRolloutResponseMultiError(errors)
	}

	return nil
}

// ListEzRolloutResponseMultiError is an error wrapping multiple validation
// errors returned by ListEzRolloutResponse.ValidateAll() if the designated
// constraints aren't met.
type ListEzRolloutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEzRolloutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEzRolloutResponseMultiError) AllErrors() []error { return m }

// ListEzRolloutResponseValidationError is the validation error returned by
// ListEzRolloutResponse.Validate if the designated constraints aren't met.
type ListEzRolloutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEzRolloutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEzRolloutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEzRolloutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEzRolloutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEzRolloutResponseValidationError) ErrorName() string {
	return "ListEzRolloutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEzRolloutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEzRolloutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEzRolloutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEzRolloutResponseValidationError{}

// Validate checks the field values on CreateEzRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEzRolloutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEzRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEzRolloutRequestMultiError, or nil if none found.
func (m *CreateEzRolloutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEzRolloutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := CreateEzRolloutRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateEzRolloutRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateEzRolloutRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOnlineVersion()) < 1 {
		err := CreateEzRolloutRequestValidationError{
			field:  "OnlineVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinReplicas() < 0 {
		err := CreateEzRolloutRequestValidationError{
			field:  "MinReplicas",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxReplicas() < 0 {
		err := CreateEzRolloutRequestValidationError{
			field:  "MaxReplicas",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOfflineDeadline() < 0 {
		err := CreateEzRolloutRequestValidationError{
			field:  "OfflineDeadline",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Selector

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetScaleUpMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEzRolloutRequestValidationError{
						field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEzRolloutRequestValidationError{
						field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEzRolloutRequestValidationError{
					field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetScaleDownMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEzRolloutRequestValidationError{
						field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEzRolloutRequestValidationError{
						field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEzRolloutRequestValidationError{
					field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetScaleUp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEzRolloutRequestValidationError{
					field:  "ScaleUp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEzRolloutRequestValidationError{
					field:  "ScaleUp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleUp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEzRolloutRequestValidationError{
				field:  "ScaleUp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScaleDown()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEzRolloutRequestValidationError{
					field:  "ScaleDown",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEzRolloutRequestValidationError{
					field:  "ScaleDown",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleDown()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEzRolloutRequestValidationError{
				field:  "ScaleDown",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableScaleUp

	if len(errors) > 0 {
		return CreateEzRolloutRequestMultiError(errors)
	}

	return nil
}

// CreateEzRolloutRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEzRolloutRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEzRolloutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEzRolloutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEzRolloutRequestMultiError) AllErrors() []error { return m }

// CreateEzRolloutRequestValidationError is the validation error returned by
// CreateEzRolloutRequest.Validate if the designated constraints aren't met.
type CreateEzRolloutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEzRolloutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEzRolloutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEzRolloutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEzRolloutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEzRolloutRequestValidationError) ErrorName() string {
	return "CreateEzRolloutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEzRolloutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEzRolloutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEzRolloutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEzRolloutRequestValidationError{}

// Validate checks the field values on CreateEzRolloutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEzRolloutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEzRolloutResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEzRolloutResponseMultiError, or nil if none found.
func (m *CreateEzRolloutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEzRolloutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateEzRolloutResponseMultiError(errors)
	}

	return nil
}

// CreateEzRolloutResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEzRolloutResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEzRolloutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEzRolloutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEzRolloutResponseMultiError) AllErrors() []error { return m }

// CreateEzRolloutResponseValidationError is the validation error returned by
// CreateEzRolloutResponse.Validate if the designated constraints aren't met.
type CreateEzRolloutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEzRolloutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEzRolloutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEzRolloutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEzRolloutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEzRolloutResponseValidationError) ErrorName() string {
	return "CreateEzRolloutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEzRolloutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEzRolloutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEzRolloutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEzRolloutResponseValidationError{}

// Validate checks the field values on UpdateEzRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEzRolloutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEzRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEzRolloutRequestMultiError, or nil if none found.
func (m *UpdateEzRolloutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEzRolloutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 63 {
		err := UpdateEzRolloutRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 63 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateEzRolloutRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateEzRolloutRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOnlineVersion()) < 1 {
		err := UpdateEzRolloutRequestValidationError{
			field:  "OnlineVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinReplicas() < 0 {
		err := UpdateEzRolloutRequestValidationError{
			field:  "MinReplicas",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxReplicas() < 0 {
		err := UpdateEzRolloutRequestValidationError{
			field:  "MaxReplicas",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOfflineDeadline() < 1 {
		err := UpdateEzRolloutRequestValidationError{
			field:  "OfflineDeadline",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Selector

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetScaleUpMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateEzRolloutRequestValidationError{
						field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateEzRolloutRequestValidationError{
						field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateEzRolloutRequestValidationError{
					field:  fmt.Sprintf("ScaleUpMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetScaleDownMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateEzRolloutRequestValidationError{
						field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateEzRolloutRequestValidationError{
						field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateEzRolloutRequestValidationError{
					field:  fmt.Sprintf("ScaleDownMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetScaleUp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEzRolloutRequestValidationError{
					field:  "ScaleUp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEzRolloutRequestValidationError{
					field:  "ScaleUp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleUp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEzRolloutRequestValidationError{
				field:  "ScaleUp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScaleDown()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEzRolloutRequestValidationError{
					field:  "ScaleDown",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEzRolloutRequestValidationError{
					field:  "ScaleDown",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleDown()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEzRolloutRequestValidationError{
				field:  "ScaleDown",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EnableScaleUp

	if len(errors) > 0 {
		return UpdateEzRolloutRequestMultiError(errors)
	}

	return nil
}

// UpdateEzRolloutRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEzRolloutRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEzRolloutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEzRolloutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEzRolloutRequestMultiError) AllErrors() []error { return m }

// UpdateEzRolloutRequestValidationError is the validation error returned by
// UpdateEzRolloutRequest.Validate if the designated constraints aren't met.
type UpdateEzRolloutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEzRolloutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEzRolloutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEzRolloutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEzRolloutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEzRolloutRequestValidationError) ErrorName() string {
	return "UpdateEzRolloutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEzRolloutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEzRolloutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEzRolloutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEzRolloutRequestValidationError{}

// Validate checks the field values on UpdateEzRolloutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEzRolloutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEzRolloutResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEzRolloutResponseMultiError, or nil if none found.
func (m *UpdateEzRolloutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEzRolloutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEzRolloutResponseMultiError(errors)
	}

	return nil
}

// UpdateEzRolloutResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEzRolloutResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateEzRolloutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEzRolloutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEzRolloutResponseMultiError) AllErrors() []error { return m }

// UpdateEzRolloutResponseValidationError is the validation error returned by
// UpdateEzRolloutResponse.Validate if the designated constraints aren't met.
type UpdateEzRolloutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEzRolloutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEzRolloutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEzRolloutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEzRolloutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEzRolloutResponseValidationError) ErrorName() string {
	return "UpdateEzRolloutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEzRolloutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEzRolloutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEzRolloutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEzRolloutResponseValidationError{}

// Validate checks the field values on DeleteEzRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEzRolloutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEzRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEzRolloutRequestMultiError, or nil if none found.
func (m *DeleteEzRolloutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEzRolloutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteEzRolloutRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteEzRolloutRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteEzRolloutRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEzRolloutRequestMultiError(errors)
	}

	return nil
}

// DeleteEzRolloutRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEzRolloutRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEzRolloutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEzRolloutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEzRolloutRequestMultiError) AllErrors() []error { return m }

// DeleteEzRolloutRequestValidationError is the validation error returned by
// DeleteEzRolloutRequest.Validate if the designated constraints aren't met.
type DeleteEzRolloutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEzRolloutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEzRolloutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEzRolloutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEzRolloutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEzRolloutRequestValidationError) ErrorName() string {
	return "DeleteEzRolloutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEzRolloutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEzRolloutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEzRolloutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEzRolloutRequestValidationError{}

// Validate checks the field values on DeleteEzRolloutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEzRolloutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEzRolloutResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEzRolloutResponseMultiError, or nil if none found.
func (m *DeleteEzRolloutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEzRolloutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEzRolloutResponseMultiError(errors)
	}

	return nil
}

// DeleteEzRolloutResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteEzRolloutResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteEzRolloutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEzRolloutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEzRolloutResponseMultiError) AllErrors() []error { return m }

// DeleteEzRolloutResponseValidationError is the validation error returned by
// DeleteEzRolloutResponse.Validate if the designated constraints aren't met.
type DeleteEzRolloutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEzRolloutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEzRolloutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEzRolloutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEzRolloutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEzRolloutResponseValidationError) ErrorName() string {
	return "DeleteEzRolloutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEzRolloutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEzRolloutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEzRolloutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEzRolloutResponseValidationError{}

// Validate checks the field values on CreateOrUpdateEzRolloutByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateEzRolloutByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateEzRolloutByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateEzRolloutByYamlRequestMultiError, or nil if none found.
func (m *CreateOrUpdateEzRolloutByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateEzRolloutByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateOrUpdateEzRolloutByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := CreateOrUpdateEzRolloutByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrUpdateEzRolloutByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateEzRolloutByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateEzRolloutByYamlRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateEzRolloutByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateEzRolloutByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateEzRolloutByYamlRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateEzRolloutByYamlRequestValidationError is the validation error
// returned by CreateOrUpdateEzRolloutByYamlRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateEzRolloutByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateEzRolloutByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateEzRolloutByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateEzRolloutByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateEzRolloutByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateEzRolloutByYamlRequestValidationError) ErrorName() string {
	return "CreateOrUpdateEzRolloutByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateEzRolloutByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateEzRolloutByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateEzRolloutByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateEzRolloutByYamlRequestValidationError{}

// Validate checks the field values on CreateOrUpdateEzRolloutByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateEzRolloutByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateEzRolloutByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateEzRolloutByYamlResponseMultiError, or nil if none found.
func (m *CreateOrUpdateEzRolloutByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateEzRolloutByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrUpdateEzRolloutByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateEzRolloutByYamlResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateEzRolloutByYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateEzRolloutByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateEzRolloutByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateEzRolloutByYamlResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateEzRolloutByYamlResponseValidationError is the validation error
// returned by CreateOrUpdateEzRolloutByYamlResponse.Validate if the
// designated constraints aren't met.
type CreateOrUpdateEzRolloutByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateEzRolloutByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateEzRolloutByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateEzRolloutByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateEzRolloutByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateEzRolloutByYamlResponseValidationError) ErrorName() string {
	return "CreateOrUpdateEzRolloutByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateEzRolloutByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateEzRolloutByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateEzRolloutByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateEzRolloutByYamlResponseValidationError{}

// Validate checks the field values on EzRolloutDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EzRolloutDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EzRolloutDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EzRolloutDetailRequestMultiError, or nil if none found.
func (m *EzRolloutDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EzRolloutDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := EzRolloutDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := EzRolloutDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := EzRolloutDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EzRolloutDetailRequestMultiError(errors)
	}

	return nil
}

// EzRolloutDetailRequestMultiError is an error wrapping multiple validation
// errors returned by EzRolloutDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type EzRolloutDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EzRolloutDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EzRolloutDetailRequestMultiError) AllErrors() []error { return m }

// EzRolloutDetailRequestValidationError is the validation error returned by
// EzRolloutDetailRequest.Validate if the designated constraints aren't met.
type EzRolloutDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EzRolloutDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EzRolloutDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EzRolloutDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EzRolloutDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EzRolloutDetailRequestValidationError) ErrorName() string {
	return "EzRolloutDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EzRolloutDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEzRolloutDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EzRolloutDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EzRolloutDetailRequestValidationError{}

// Validate checks the field values on EzRolloutDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EzRolloutDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EzRolloutDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EzRolloutDetailResponseMultiError, or nil if none found.
func (m *EzRolloutDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EzRolloutDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EzRolloutDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EzRolloutDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EzRolloutDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EzRolloutDetailResponseMultiError(errors)
	}

	return nil
}

// EzRolloutDetailResponseMultiError is an error wrapping multiple validation
// errors returned by EzRolloutDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type EzRolloutDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EzRolloutDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EzRolloutDetailResponseMultiError) AllErrors() []error { return m }

// EzRolloutDetailResponseValidationError is the validation error returned by
// EzRolloutDetailResponse.Validate if the designated constraints aren't met.
type EzRolloutDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EzRolloutDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EzRolloutDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EzRolloutDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EzRolloutDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EzRolloutDetailResponseValidationError) ErrorName() string {
	return "EzRolloutDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EzRolloutDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEzRolloutDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EzRolloutDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EzRolloutDetailResponseValidationError{}
