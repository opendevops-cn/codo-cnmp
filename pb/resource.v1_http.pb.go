// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/resource.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationResourceCreateOrUpdateResource = "/resource.v1.Resource/CreateOrUpdateResource"
const OperationResourceDryRunResource = "/resource.v1.Resource/DryRunResource"

type ResourceHTTPServer interface {
	// CreateOrUpdateResource管理-云原生管理-Resource-Yaml创建更新
	CreateOrUpdateResource(context.Context, *CreateOrUpdateResourceRequest) (*CreateOrUpdateResourceResponse, error)
	// DryRunResource管理-云原生管理-Resource-DryRun
	DryRunResource(context.Context, *CreateOrUpdateResourceRequest) (*CreateOrUpdateResourceResponse, error)
}

func NewResourceHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationResourceCreateOrUpdateResource).Build(),
		selector.Server().Path(OperationResourceDryRunResource).Build(),
	).Path(
		OperationResourceCreateOrUpdateResource,
		OperationResourceDryRunResource,
	).Build()
}

func RegisterResourceHTTPServer(s *http.Server, srv ResourceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/resource/from_yaml", _Resource_CreateOrUpdateResource0_HTTP_Handler(srv))
	r.POST("/api/v1/resource/dry_run", _Resource_DryRunResource0_HTTP_Handler(srv))
}

func GenerateResourceHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 2)
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/resource/from_yaml",
		Comment: "管理-云原生管理-Resource-Yaml创建更新",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/resource/dry_run",
		Comment: "管理-云原生管理-Resource-DryRun",
	})
	return routes
}

func _Resource_CreateOrUpdateResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceCreateOrUpdateResource)
		auditRule := audit.NewAudit(
			"resource",
			"YAML创建更新资源",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key:   "kind",
					Value: audit.MetaValue{},
				},
				{
					Key:   "name",
					Value: audit.MetaValue{},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateResource(ctx, req.(*CreateOrUpdateResourceRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateResourceResponse)
		return ctx.Result(200, reply)
	}
}

func _Resource_DryRunResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceDryRunResource)
		auditRule := audit.NewAudit(
			"resource",
			"DryRun",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key:   "kind",
					Value: audit.MetaValue{},
				},
				{
					Key:   "name",
					Value: audit.MetaValue{},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DryRunResource(ctx, req.(*CreateOrUpdateResourceRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateResourceResponse)
		return ctx.Result(200, reply)
	}
}

type ResourceHTTPClient interface {
	CreateOrUpdateResource(ctx context.Context, req *CreateOrUpdateResourceRequest, opts ...http.CallOption) (rsp *CreateOrUpdateResourceResponse, err error)
	DryRunResource(ctx context.Context, req *CreateOrUpdateResourceRequest, opts ...http.CallOption) (rsp *CreateOrUpdateResourceResponse, err error)
}

type ResourceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceHTTPClient(client *http.Client) ResourceHTTPClient {
	return &ResourceHTTPClientImpl{client}
}

func (c *ResourceHTTPClientImpl) CreateOrUpdateResource(ctx context.Context, in *CreateOrUpdateResourceRequest, opts ...http.CallOption) (*CreateOrUpdateResourceResponse, error) {
	var out CreateOrUpdateResourceResponse
	pattern := "/api/v1/resource/from_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceCreateOrUpdateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceHTTPClientImpl) DryRunResource(ctx context.Context, in *CreateOrUpdateResourceRequest, opts ...http.CallOption) (*CreateOrUpdateResourceResponse, error) {
	var out CreateOrUpdateResourceResponse
	pattern := "/api/v1/resource/dry_run"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceDryRunResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
