// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/sidecarset.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateSideCarSetStrategyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSideCarSetStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSideCarSetStrategyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSideCarSetStrategyRequestMultiError, or nil if none found.
func (m *UpdateSideCarSetStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSideCarSetStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateSideCarSetStrategyRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateSideCarSetStrategyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateSideCarSetStrategyRequest_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := UpdateSideCarSetStrategyRequestValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Partition

	// no validation rules for MaxUnavailable

	// no validation rules for Pause

	if len(errors) > 0 {
		return UpdateSideCarSetStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateSideCarSetStrategyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSideCarSetStrategyRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateSideCarSetStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSideCarSetStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSideCarSetStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateSideCarSetStrategyRequestValidationError is the validation error
// returned by UpdateSideCarSetStrategyRequest.Validate if the designated
// constraints aren't met.
type UpdateSideCarSetStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSideCarSetStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSideCarSetStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSideCarSetStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSideCarSetStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSideCarSetStrategyRequestValidationError) ErrorName() string {
	return "UpdateSideCarSetStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSideCarSetStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSideCarSetStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSideCarSetStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSideCarSetStrategyRequestValidationError{}

// Validate checks the field values on UpdateSideCarSetStrategyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateSideCarSetStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSideCarSetStrategyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSideCarSetStrategyResponseMultiError, or nil if none found.
func (m *UpdateSideCarSetStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSideCarSetStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateSideCarSetStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateSideCarSetStrategyResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateSideCarSetStrategyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSideCarSetStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSideCarSetStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSideCarSetStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateSideCarSetStrategyResponseValidationError is the validation error
// returned by UpdateSideCarSetStrategyResponse.Validate if the designated
// constraints aren't met.
type UpdateSideCarSetStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSideCarSetStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSideCarSetStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSideCarSetStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSideCarSetStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSideCarSetStrategyResponseValidationError) ErrorName() string {
	return "UpdateSideCarSetStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSideCarSetStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSideCarSetStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSideCarSetStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSideCarSetStrategyResponseValidationError{}

// Validate checks the field values on ListSidecarSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSidecarSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSidecarSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSidecarSetRequestMultiError, or nil if none found.
func (m *ListSidecarSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSidecarSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListSidecarSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListSidecarSetRequestMultiError(errors)
	}

	return nil
}

// ListSidecarSetRequestMultiError is an error wrapping multiple validation
// errors returned by ListSidecarSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSidecarSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSidecarSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSidecarSetRequestMultiError) AllErrors() []error { return m }

// ListSidecarSetRequestValidationError is the validation error returned by
// ListSidecarSetRequest.Validate if the designated constraints aren't met.
type ListSidecarSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSidecarSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSidecarSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSidecarSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSidecarSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSidecarSetRequestValidationError) ErrorName() string {
	return "ListSidecarSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSidecarSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSidecarSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSidecarSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSidecarSetRequestValidationError{}

// Validate checks the field values on SideCarSetStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SideCarSetStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SideCarSetStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SideCarSetStatusMultiError, or nil if none found.
func (m *SideCarSetStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *SideCarSetStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMatchedPods() < 0 {
		err := SideCarSetStatusValidationError{
			field:  "MatchedPods",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReadyPods() < 0 {
		err := SideCarSetStatusValidationError{
			field:  "ReadyPods",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedPods() < 0 {
		err := SideCarSetStatusValidationError{
			field:  "UpdatedPods",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedReadyPods() < 0 {
		err := SideCarSetStatusValidationError{
			field:  "UpdatedReadyPods",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SideCarSetStatusMultiError(errors)
	}

	return nil
}

// SideCarSetStatusMultiError is an error wrapping multiple validation errors
// returned by SideCarSetStatus.ValidateAll() if the designated constraints
// aren't met.
type SideCarSetStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SideCarSetStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SideCarSetStatusMultiError) AllErrors() []error { return m }

// SideCarSetStatusValidationError is the validation error returned by
// SideCarSetStatus.Validate if the designated constraints aren't met.
type SideCarSetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SideCarSetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SideCarSetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SideCarSetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SideCarSetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SideCarSetStatusValidationError) ErrorName() string { return "SideCarSetStatusValidationError" }

// Error satisfies the builtin error interface
func (e SideCarSetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSideCarSetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SideCarSetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SideCarSetStatusValidationError{}

// Validate checks the field values on SidecarSetItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SidecarSetItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SidecarSetItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SidecarSetItemMultiError,
// or nil if none found.
func (m *SidecarSetItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SidecarSetItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SidecarSetItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReadyPods() < 0 {
		err := SidecarSetItemValidationError{
			field:  "ReadyPods",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMatchedPods() < 0 {
		err := SidecarSetItemValidationError{
			field:  "MatchedPods",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedPods() < 0 {
		err := SidecarSetItemValidationError{
			field:  "UpdatedPods",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedReadyPods() < 0 {
		err := SidecarSetItemValidationError{
			field:  "UpdatedReadyPods",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SidecarSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SidecarSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SidecarSetItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreateTime

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := SidecarSetItemValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	// no validation rules for Annotations

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SidecarSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SidecarSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SidecarSetItemValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsFollowed

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SidecarSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SidecarSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SidecarSetItemValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SidecarSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SidecarSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SidecarSetItemValidationError{
				field:  "UpdateStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SidecarSetItemMultiError(errors)
	}

	return nil
}

// SidecarSetItemMultiError is an error wrapping multiple validation errors
// returned by SidecarSetItem.ValidateAll() if the designated constraints
// aren't met.
type SidecarSetItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SidecarSetItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SidecarSetItemMultiError) AllErrors() []error { return m }

// SidecarSetItemValidationError is the validation error returned by
// SidecarSetItem.Validate if the designated constraints aren't met.
type SidecarSetItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SidecarSetItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SidecarSetItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SidecarSetItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SidecarSetItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SidecarSetItemValidationError) ErrorName() string { return "SidecarSetItemValidationError" }

// Error satisfies the builtin error interface
func (e SidecarSetItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSidecarSetItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SidecarSetItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SidecarSetItemValidationError{}

// Validate checks the field values on ListSidecarSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSidecarSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSidecarSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSidecarSetResponseMultiError, or nil if none found.
func (m *ListSidecarSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSidecarSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSidecarSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSidecarSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSidecarSetResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSidecarSetResponseMultiError(errors)
	}

	return nil
}

// ListSidecarSetResponseMultiError is an error wrapping multiple validation
// errors returned by ListSidecarSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSidecarSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSidecarSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSidecarSetResponseMultiError) AllErrors() []error { return m }

// ListSidecarSetResponseValidationError is the validation error returned by
// ListSidecarSetResponse.Validate if the designated constraints aren't met.
type ListSidecarSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSidecarSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSidecarSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSidecarSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSidecarSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSidecarSetResponseValidationError) ErrorName() string {
	return "ListSidecarSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSidecarSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSidecarSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSidecarSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSidecarSetResponseValidationError{}

// Validate checks the field values on GetSidecarSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSidecarSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSidecarSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSidecarSetRequestMultiError, or nil if none found.
func (m *GetSidecarSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSidecarSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetSidecarSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetSidecarSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSidecarSetRequestMultiError(errors)
	}

	return nil
}

// GetSidecarSetRequestMultiError is an error wrapping multiple validation
// errors returned by GetSidecarSetRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSidecarSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSidecarSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSidecarSetRequestMultiError) AllErrors() []error { return m }

// GetSidecarSetRequestValidationError is the validation error returned by
// GetSidecarSetRequest.Validate if the designated constraints aren't met.
type GetSidecarSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSidecarSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSidecarSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSidecarSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSidecarSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSidecarSetRequestValidationError) ErrorName() string {
	return "GetSidecarSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSidecarSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSidecarSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSidecarSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSidecarSetRequestValidationError{}

// Validate checks the field values on GetSidecarSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSidecarSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSidecarSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSidecarSetResponseMultiError, or nil if none found.
func (m *GetSidecarSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSidecarSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSidecarSetResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSidecarSetResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSidecarSetResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSidecarSetResponseMultiError(errors)
	}

	return nil
}

// GetSidecarSetResponseMultiError is an error wrapping multiple validation
// errors returned by GetSidecarSetResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSidecarSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSidecarSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSidecarSetResponseMultiError) AllErrors() []error { return m }

// GetSidecarSetResponseValidationError is the validation error returned by
// GetSidecarSetResponse.Validate if the designated constraints aren't met.
type GetSidecarSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSidecarSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSidecarSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSidecarSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSidecarSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSidecarSetResponseValidationError) ErrorName() string {
	return "GetSidecarSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSidecarSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSidecarSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSidecarSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSidecarSetResponseValidationError{}

// Validate checks the field values on DeleteSidecarSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSidecarSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSidecarSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSidecarSetRequestMultiError, or nil if none found.
func (m *DeleteSidecarSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSidecarSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteSidecarSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteSidecarSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSidecarSetRequestMultiError(errors)
	}

	return nil
}

// DeleteSidecarSetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSidecarSetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSidecarSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSidecarSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSidecarSetRequestMultiError) AllErrors() []error { return m }

// DeleteSidecarSetRequestValidationError is the validation error returned by
// DeleteSidecarSetRequest.Validate if the designated constraints aren't met.
type DeleteSidecarSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSidecarSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSidecarSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSidecarSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSidecarSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSidecarSetRequestValidationError) ErrorName() string {
	return "DeleteSidecarSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSidecarSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSidecarSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSidecarSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSidecarSetRequestValidationError{}

// Validate checks the field values on DeleteSidecarSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSidecarSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSidecarSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSidecarSetResponseMultiError, or nil if none found.
func (m *DeleteSidecarSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSidecarSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteSidecarSetResponseMultiError(errors)
	}

	return nil
}

// DeleteSidecarSetResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSidecarSetResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSidecarSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSidecarSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSidecarSetResponseMultiError) AllErrors() []error { return m }

// DeleteSidecarSetResponseValidationError is the validation error returned by
// DeleteSidecarSetResponse.Validate if the designated constraints aren't met.
type DeleteSidecarSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSidecarSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSidecarSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSidecarSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSidecarSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSidecarSetResponseValidationError) ErrorName() string {
	return "DeleteSidecarSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSidecarSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSidecarSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSidecarSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSidecarSetResponseValidationError{}
