// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/deployment.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentRequestMultiError, or nil if none found.
func (m *ListDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListDeploymentRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListDeploymentRequestMultiError(errors)
	}

	return nil
}

// ListDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by ListDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentRequestMultiError) AllErrors() []error { return m }

// ListDeploymentRequestValidationError is the validation error returned by
// ListDeploymentRequest.Validate if the designated constraints aren't met.
type ListDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentRequestValidationError) ErrorName() string {
	return "ListDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentRequestValidationError{}

// Validate checks the field values on DeploymentCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentConditionMultiError, or nil if none found.
func (m *DeploymentCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastUpdateTime

	// no validation rules for LastTransitionTime

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return DeploymentConditionMultiError(errors)
	}

	return nil
}

// DeploymentConditionMultiError is an error wrapping multiple validation
// errors returned by DeploymentCondition.ValidateAll() if the designated
// constraints aren't met.
type DeploymentConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentConditionMultiError) AllErrors() []error { return m }

// DeploymentConditionValidationError is the validation error returned by
// DeploymentCondition.Validate if the designated constraints aren't met.
type DeploymentConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentConditionValidationError) ErrorName() string {
	return "DeploymentConditionValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentConditionValidationError{}

// Validate checks the field values on DeploymentStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeploymentStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentStatusMultiError, or nil if none found.
func (m *DeploymentStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObservedGeneration

	// no validation rules for Replicas

	// no validation rules for UpdatedReplicas

	// no validation rules for ReadyReplicas

	// no validation rules for AvailableReplicas

	// no validation rules for UnavailableReplicas

	// no validation rules for CollisionCount

	if len(errors) > 0 {
		return DeploymentStatusMultiError(errors)
	}

	return nil
}

// DeploymentStatusMultiError is an error wrapping multiple validation errors
// returned by DeploymentStatus.ValidateAll() if the designated constraints
// aren't met.
type DeploymentStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentStatusMultiError) AllErrors() []error { return m }

// DeploymentStatusValidationError is the validation error returned by
// DeploymentStatus.Validate if the designated constraints aren't met.
type DeploymentStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentStatusValidationError) ErrorName() string { return "DeploymentStatusValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentStatusValidationError{}

// Validate checks the field values on DeploymentStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentStrategyMultiError, or nil if none found.
func (m *DeploymentStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := DeploymentStrategy_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := DeploymentStrategyValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxUnavailable

	// no validation rules for MaxSurge

	if len(errors) > 0 {
		return DeploymentStrategyMultiError(errors)
	}

	return nil
}

// DeploymentStrategyMultiError is an error wrapping multiple validation errors
// returned by DeploymentStrategy.ValidateAll() if the designated constraints
// aren't met.
type DeploymentStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentStrategyMultiError) AllErrors() []error { return m }

// DeploymentStrategyValidationError is the validation error returned by
// DeploymentStrategy.Validate if the designated constraints aren't met.
type DeploymentStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentStrategyValidationError) ErrorName() string {
	return "DeploymentStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentStrategyValidationError{}

// Validate checks the field values on DeploymentItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeploymentItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeploymentItemMultiError,
// or nil if none found.
func (m *DeploymentItem) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeploymentItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeploymentItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeploymentItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentItemValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for Labels

	// no validation rules for Yaml

	// no validation rules for Annotations

	// no validation rules for Replicas

	if all {
		switch v := interface{}(m.GetUpdateStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentItemValidationError{
				field:  "UpdateStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentItemValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeploymentItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeploymentItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeploymentItemValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SpecReplicas

	// no validation rules for IsFollowed

	if len(errors) > 0 {
		return DeploymentItemMultiError(errors)
	}

	return nil
}

// DeploymentItemMultiError is an error wrapping multiple validation errors
// returned by DeploymentItem.ValidateAll() if the designated constraints
// aren't met.
type DeploymentItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentItemMultiError) AllErrors() []error { return m }

// DeploymentItemValidationError is the validation error returned by
// DeploymentItem.Validate if the designated constraints aren't met.
type DeploymentItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentItemValidationError) ErrorName() string { return "DeploymentItemValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentItemValidationError{}

// Validate checks the field values on ListDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentResponseMultiError, or nil if none found.
func (m *ListDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeploymentResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeploymentResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDeploymentResponseMultiError(errors)
	}

	return nil
}

// ListDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by ListDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentResponseMultiError) AllErrors() []error { return m }

// ListDeploymentResponseValidationError is the validation error returned by
// ListDeploymentResponse.Validate if the designated constraints aren't met.
type ListDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentResponseValidationError) ErrorName() string {
	return "ListDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentResponseValidationError{}

// Validate checks the field values on CreateOrUpdateDeploymentByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateDeploymentByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateDeploymentByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateDeploymentByYamlRequestMultiError, or nil if none found.
func (m *CreateOrUpdateDeploymentByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateDeploymentByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateOrUpdateDeploymentByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := CreateOrUpdateDeploymentByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrUpdateDeploymentByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateDeploymentByYamlRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateDeploymentByYamlRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateDeploymentByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateDeploymentByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateDeploymentByYamlRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateDeploymentByYamlRequestValidationError is the validation error
// returned by CreateOrUpdateDeploymentByYamlRequest.Validate if the
// designated constraints aren't met.
type CreateOrUpdateDeploymentByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateDeploymentByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateDeploymentByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateDeploymentByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateDeploymentByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateDeploymentByYamlRequestValidationError) ErrorName() string {
	return "CreateOrUpdateDeploymentByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateDeploymentByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateDeploymentByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateDeploymentByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateDeploymentByYamlRequestValidationError{}

// Validate checks the field values on CreateOrUpdateDeploymentByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateDeploymentByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrUpdateDeploymentByYamlResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateOrUpdateDeploymentByYamlResponseMultiError, or nil if none found.
func (m *CreateOrUpdateDeploymentByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateDeploymentByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrUpdateDeploymentByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateDeploymentByYamlResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateDeploymentByYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateDeploymentByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateDeploymentByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateDeploymentByYamlResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateDeploymentByYamlResponseValidationError is the validation
// error returned by CreateOrUpdateDeploymentByYamlResponse.Validate if the
// designated constraints aren't met.
type CreateOrUpdateDeploymentByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateDeploymentByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateDeploymentByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateDeploymentByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateDeploymentByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateDeploymentByYamlResponseValidationError) ErrorName() string {
	return "CreateOrUpdateDeploymentByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateDeploymentByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateDeploymentByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateDeploymentByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateDeploymentByYamlResponseValidationError{}

// Validate checks the field values on UpdateDeploymentByYamlRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeploymentByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeploymentByYamlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDeploymentByYamlRequestMultiError, or nil if none found.
func (m *UpdateDeploymentByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeploymentByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateDeploymentByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := UpdateDeploymentByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDeploymentByYamlRequestMultiError(errors)
	}

	return nil
}

// UpdateDeploymentByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDeploymentByYamlRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDeploymentByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeploymentByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeploymentByYamlRequestMultiError) AllErrors() []error { return m }

// UpdateDeploymentByYamlRequestValidationError is the validation error
// returned by UpdateDeploymentByYamlRequest.Validate if the designated
// constraints aren't met.
type UpdateDeploymentByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentByYamlRequestValidationError) ErrorName() string {
	return "UpdateDeploymentByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentByYamlRequestValidationError{}

// Validate checks the field values on UpdateDeploymentByYamlResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeploymentByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeploymentByYamlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDeploymentByYamlResponseMultiError, or nil if none found.
func (m *UpdateDeploymentByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeploymentByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDeploymentByYamlResponseMultiError(errors)
	}

	return nil
}

// UpdateDeploymentByYamlResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDeploymentByYamlResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateDeploymentByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeploymentByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeploymentByYamlResponseMultiError) AllErrors() []error { return m }

// UpdateDeploymentByYamlResponseValidationError is the validation error
// returned by UpdateDeploymentByYamlResponse.Validate if the designated
// constraints aren't met.
type UpdateDeploymentByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentByYamlResponseValidationError) ErrorName() string {
	return "UpdateDeploymentByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentByYamlResponseValidationError{}

// Validate checks the field values on DeleteDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeploymentRequestMultiError, or nil if none found.
func (m *DeleteDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteDeploymentRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteDeploymentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteDeploymentRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDeploymentRequestMultiError(errors)
	}

	return nil
}

// DeleteDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeploymentRequestMultiError) AllErrors() []error { return m }

// DeleteDeploymentRequestValidationError is the validation error returned by
// DeleteDeploymentRequest.Validate if the designated constraints aren't met.
type DeleteDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeploymentRequestValidationError) ErrorName() string {
	return "DeleteDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeploymentRequestValidationError{}

// Validate checks the field values on DeleteDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDeploymentResponseMultiError, or nil if none found.
func (m *DeleteDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDeploymentResponseMultiError(errors)
	}

	return nil
}

// DeleteDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDeploymentResponseMultiError) AllErrors() []error { return m }

// DeleteDeploymentResponseValidationError is the validation error returned by
// DeleteDeploymentResponse.Validate if the designated constraints aren't met.
type DeleteDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeploymentResponseValidationError) ErrorName() string {
	return "DeleteDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeploymentResponseValidationError{}

// Validate checks the field values on RestartDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartDeploymentRequestMultiError, or nil if none found.
func (m *RestartDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RestartDeploymentRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RestartDeploymentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RestartDeploymentRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestartDeploymentRequestMultiError(errors)
	}

	return nil
}

// RestartDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by RestartDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type RestartDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartDeploymentRequestMultiError) AllErrors() []error { return m }

// RestartDeploymentRequestValidationError is the validation error returned by
// RestartDeploymentRequest.Validate if the designated constraints aren't met.
type RestartDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartDeploymentRequestValidationError) ErrorName() string {
	return "RestartDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartDeploymentRequestValidationError{}

// Validate checks the field values on RestartDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartDeploymentResponseMultiError, or nil if none found.
func (m *RestartDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartDeploymentResponseMultiError(errors)
	}

	return nil
}

// RestartDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by RestartDeploymentResponse.ValidateAll() if the
// designated constraints aren't met.
type RestartDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartDeploymentResponseMultiError) AllErrors() []error { return m }

// RestartDeploymentResponseValidationError is the validation error returned by
// RestartDeploymentResponse.Validate if the designated constraints aren't met.
type RestartDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartDeploymentResponseValidationError) ErrorName() string {
	return "RestartDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartDeploymentResponseValidationError{}

// Validate checks the field values on ScaleDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleDeploymentRequestMultiError, or nil if none found.
func (m *ScaleDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ScaleDeploymentRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ScaleDeploymentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ScaleDeploymentRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReplicas() < 0 {
		err := ScaleDeploymentRequestValidationError{
			field:  "Replicas",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScaleDeploymentRequestMultiError(errors)
	}

	return nil
}

// ScaleDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by ScaleDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type ScaleDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleDeploymentRequestMultiError) AllErrors() []error { return m }

// ScaleDeploymentRequestValidationError is the validation error returned by
// ScaleDeploymentRequest.Validate if the designated constraints aren't met.
type ScaleDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleDeploymentRequestValidationError) ErrorName() string {
	return "ScaleDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleDeploymentRequestValidationError{}

// Validate checks the field values on ScaleDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleDeploymentResponseMultiError, or nil if none found.
func (m *ScaleDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScaleDeploymentResponseMultiError(errors)
	}

	return nil
}

// ScaleDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by ScaleDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type ScaleDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleDeploymentResponseMultiError) AllErrors() []error { return m }

// ScaleDeploymentResponseValidationError is the validation error returned by
// ScaleDeploymentResponse.Validate if the designated constraints aren't met.
type ScaleDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleDeploymentResponseValidationError) ErrorName() string {
	return "ScaleDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleDeploymentResponseValidationError{}

// Validate checks the field values on ReplicaSetItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReplicaSetItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplicaSetItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReplicaSetItemMultiError,
// or nil if none found.
func (m *ReplicaSetItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplicaSetItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Yaml

	// no validation rules for CreateTime

	// no validation rules for IsCurrent

	if len(errors) > 0 {
		return ReplicaSetItemMultiError(errors)
	}

	return nil
}

// ReplicaSetItemMultiError is an error wrapping multiple validation errors
// returned by ReplicaSetItem.ValidateAll() if the designated constraints
// aren't met.
type ReplicaSetItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplicaSetItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplicaSetItemMultiError) AllErrors() []error { return m }

// ReplicaSetItemValidationError is the validation error returned by
// ReplicaSetItem.Validate if the designated constraints aren't met.
type ReplicaSetItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplicaSetItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplicaSetItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplicaSetItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplicaSetItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplicaSetItemValidationError) ErrorName() string { return "ReplicaSetItemValidationError" }

// Error satisfies the builtin error interface
func (e ReplicaSetItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplicaSetItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplicaSetItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplicaSetItemValidationError{}

// Validate checks the field values on DeploymentDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentDetailRequestMultiError, or nil if none found.
func (m *DeploymentDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeploymentDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeploymentDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeploymentDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeploymentDetailRequestMultiError(errors)
	}

	return nil
}

// DeploymentDetailRequestMultiError is an error wrapping multiple validation
// errors returned by DeploymentDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type DeploymentDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentDetailRequestMultiError) AllErrors() []error { return m }

// DeploymentDetailRequestValidationError is the validation error returned by
// DeploymentDetailRequest.Validate if the designated constraints aren't met.
type DeploymentDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentDetailRequestValidationError) ErrorName() string {
	return "DeploymentDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentDetailRequestValidationError{}

// Validate checks the field values on DeploymentDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeploymentDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeploymentDetailResponseMultiError, or nil if none found.
func (m *DeploymentDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeploymentDetailResponseMultiError(errors)
	}

	return nil
}

// DeploymentDetailResponseMultiError is an error wrapping multiple validation
// errors returned by DeploymentDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type DeploymentDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentDetailResponseMultiError) AllErrors() []error { return m }

// DeploymentDetailResponseValidationError is the validation error returned by
// DeploymentDetailResponse.Validate if the designated constraints aren't met.
type DeploymentDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentDetailResponseValidationError) ErrorName() string {
	return "DeploymentDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeploymentDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentDetailResponseValidationError{}

// Validate checks the field values on RollbackDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackDeploymentRequestMultiError, or nil if none found.
func (m *RollbackDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RollbackDeploymentRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RollbackDeploymentRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RollbackDeploymentRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := RollbackDeploymentRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RollbackDeploymentRequestMultiError(errors)
	}

	return nil
}

// RollbackDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by RollbackDeploymentRequest.ValidateAll() if the
// designated constraints aren't met.
type RollbackDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackDeploymentRequestMultiError) AllErrors() []error { return m }

// RollbackDeploymentRequestValidationError is the validation error returned by
// RollbackDeploymentRequest.Validate if the designated constraints aren't met.
type RollbackDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackDeploymentRequestValidationError) ErrorName() string {
	return "RollbackDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackDeploymentRequestValidationError{}

// Validate checks the field values on RollbackDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackDeploymentResponseMultiError, or nil if none found.
func (m *RollbackDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RollbackDeploymentResponseMultiError(errors)
	}

	return nil
}

// RollbackDeploymentResponseMultiError is an error wrapping multiple
// validation errors returned by RollbackDeploymentResponse.ValidateAll() if
// the designated constraints aren't met.
type RollbackDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackDeploymentResponseMultiError) AllErrors() []error { return m }

// RollbackDeploymentResponseValidationError is the validation error returned
// by RollbackDeploymentResponse.Validate if the designated constraints aren't met.
type RollbackDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackDeploymentResponseValidationError) ErrorName() string {
	return "RollbackDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackDeploymentResponseValidationError{}

// Validate checks the field values on ListReplicaSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReplicaSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReplicaSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReplicaSetResponseMultiError, or nil if none found.
func (m *ListReplicaSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReplicaSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReplicaSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReplicaSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReplicaSetResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListReplicaSetResponseMultiError(errors)
	}

	return nil
}

// ListReplicaSetResponseMultiError is an error wrapping multiple validation
// errors returned by ListReplicaSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ListReplicaSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReplicaSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReplicaSetResponseMultiError) AllErrors() []error { return m }

// ListReplicaSetResponseValidationError is the validation error returned by
// ListReplicaSetResponse.Validate if the designated constraints aren't met.
type ListReplicaSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReplicaSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReplicaSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReplicaSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReplicaSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReplicaSetResponseValidationError) ErrorName() string {
	return "ListReplicaSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReplicaSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReplicaSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReplicaSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReplicaSetResponseValidationError{}

// Validate checks the field values on UpdateDeploymentStrategyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeploymentStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeploymentStrategyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDeploymentStrategyRequestMultiError, or nil if none found.
func (m *UpdateDeploymentStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeploymentStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateDeploymentStrategyRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateDeploymentStrategyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateDeploymentStrategyRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateDeploymentStrategyRequest_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := UpdateDeploymentStrategyRequestValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxUnavailable

	// no validation rules for MaxSurge

	if len(errors) > 0 {
		return UpdateDeploymentStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateDeploymentStrategyRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDeploymentStrategyRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateDeploymentStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeploymentStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeploymentStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateDeploymentStrategyRequestValidationError is the validation error
// returned by UpdateDeploymentStrategyRequest.Validate if the designated
// constraints aren't met.
type UpdateDeploymentStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentStrategyRequestValidationError) ErrorName() string {
	return "UpdateDeploymentStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentStrategyRequestValidationError{}

// Validate checks the field values on UpdateDeploymentStrategyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateDeploymentStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeploymentStrategyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateDeploymentStrategyResponseMultiError, or nil if none found.
func (m *UpdateDeploymentStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeploymentStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateDeploymentStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateDeploymentStrategyResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDeploymentStrategyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeploymentStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeploymentStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeploymentStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateDeploymentStrategyResponseValidationError is the validation error
// returned by UpdateDeploymentStrategyResponse.Validate if the designated
// constraints aren't met.
type UpdateDeploymentStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentStrategyResponseValidationError) ErrorName() string {
	return "UpdateDeploymentStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentStrategyResponseValidationError{}
