// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/hpa.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationHPAListHpa = "/hpa.v1.HPA/ListHpa"
const OperationHPACreateOrUpdateHpaByYaml = "/hpa.v1.HPA/CreateOrUpdateHpaByYaml"
const OperationHPADeleteHpa = "/hpa.v1.HPA/DeleteHpa"
const OperationHPAGetHpaDetail = "/hpa.v1.HPA/GetHpaDetail"

type HPAHTTPServer interface {
	// ListHpa查看-云原生管理-HPA-列表
	ListHpa(context.Context, *ListHpaRequest) (*ListHpaResponse, error)
	// CreateOrUpdateHpaByYaml管理-云原生管理-HPA-Yaml创建更新
	CreateOrUpdateHpaByYaml(context.Context, *CreateOrUpdateHpaByYamlRequest) (*CreateOrUpdateHpaByYamlResponse, error)
	// DeleteHpa管理-云原生管理-HPA-删除
	DeleteHpa(context.Context, *DeleteHpaRequest) (*DeleteHpaResponse, error)
	// GetHpaDetail查看-云原生管理-HPA-详情
	GetHpaDetail(context.Context, *HpaDetailRequest) (*HpaDetailResponse, error)
}

func NewHPAHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationHPAListHpa).Build(),
		selector.Server().Path(OperationHPACreateOrUpdateHpaByYaml).Build(),
		selector.Server().Path(OperationHPADeleteHpa).Build(),
		selector.Server().Path(OperationHPAGetHpaDetail).Build(),
	).Path(
		OperationHPAListHpa,
		OperationHPACreateOrUpdateHpaByYaml,
		OperationHPADeleteHpa,
		OperationHPAGetHpaDetail,
	).Build()
}

func RegisterHPAHTTPServer(s *http.Server, srv HPAHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/hpa/list", _HPA_ListHpa0_HTTP_Handler(srv))
	r.POST("/api/v1/hpa/create_or_update_by_yaml", _HPA_CreateOrUpdateHpaByYaml0_HTTP_Handler(srv))
	r.POST("/api/v1/hpa/delete", _HPA_DeleteHpa0_HTTP_Handler(srv))
	r.GET("/api/v1/hpa/detail", _HPA_GetHpaDetail0_HTTP_Handler(srv))
}

func GenerateHPAHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 4)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/hpa/list",
		Comment: "查看-云原生管理-HPA-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/hpa/create_or_update_by_yaml",
		Comment: "管理-云原生管理-HPA-Yaml创建更新",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/hpa/delete",
		Comment: "管理-云原生管理-HPA-删除",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/hpa/detail",
		Comment: "查看-云原生管理-HPA-详情",
	})
	return routes
}

func _HPA_ListHpa0_HTTP_Handler(srv HPAHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListHpaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHPAListHpa)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHpa(ctx, req.(*ListHpaRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListHpaResponse)
		return ctx.Result(200, reply)
	}
}

func _HPA_CreateOrUpdateHpaByYaml0_HTTP_Handler(srv HPAHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateHpaByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHPACreateOrUpdateHpaByYaml)
		auditRule := audit.NewAudit(
			"弹性伸缩",
			"YAML创建更新资源",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key:   "kind",
					Value: audit.MetaValue{},
				},
				{
					Key:   "name",
					Value: audit.MetaValue{},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateHpaByYaml(ctx, req.(*CreateOrUpdateHpaByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateHpaByYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _HPA_DeleteHpa0_HTTP_Handler(srv HPAHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteHpaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHPADeleteHpa)
		auditRule := audit.NewAudit(
			"弹性伸缩",
			"删除弹性伸缩",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "弹性伸缩HPA",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHpa(ctx, req.(*DeleteHpaRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteHpaResponse)
		return ctx.Result(200, reply)
	}
}

func _HPA_GetHpaDetail0_HTTP_Handler(srv HPAHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in HpaDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHPAGetHpaDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHpaDetail(ctx, req.(*HpaDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HpaDetailResponse)
		return ctx.Result(200, reply)
	}
}

type HPAHTTPClient interface {
	ListHpa(ctx context.Context, req *ListHpaRequest, opts ...http.CallOption) (rsp *ListHpaResponse, err error)
	CreateOrUpdateHpaByYaml(ctx context.Context, req *CreateOrUpdateHpaByYamlRequest, opts ...http.CallOption) (rsp *CreateOrUpdateHpaByYamlResponse, err error)
	DeleteHpa(ctx context.Context, req *DeleteHpaRequest, opts ...http.CallOption) (rsp *DeleteHpaResponse, err error)
	GetHpaDetail(ctx context.Context, req *HpaDetailRequest, opts ...http.CallOption) (rsp *HpaDetailResponse, err error)
}

type HPAHTTPClientImpl struct {
	cc *http.Client
}

func NewHPAHTTPClient(client *http.Client) HPAHTTPClient {
	return &HPAHTTPClientImpl{client}
}

func (c *HPAHTTPClientImpl) ListHpa(ctx context.Context, in *ListHpaRequest, opts ...http.CallOption) (*ListHpaResponse, error) {
	var out ListHpaResponse
	pattern := "/api/v1/hpa/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHPAListHpa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HPAHTTPClientImpl) CreateOrUpdateHpaByYaml(ctx context.Context, in *CreateOrUpdateHpaByYamlRequest, opts ...http.CallOption) (*CreateOrUpdateHpaByYamlResponse, error) {
	var out CreateOrUpdateHpaByYamlResponse
	pattern := "/api/v1/hpa/create_or_update_by_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHPACreateOrUpdateHpaByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HPAHTTPClientImpl) DeleteHpa(ctx context.Context, in *DeleteHpaRequest, opts ...http.CallOption) (*DeleteHpaResponse, error) {
	var out DeleteHpaResponse
	pattern := "/api/v1/hpa/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHPADeleteHpa))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HPAHTTPClientImpl) GetHpaDetail(ctx context.Context, in *HpaDetailRequest, opts ...http.CallOption) (*HpaDetailResponse, error) {
	var out HpaDetailResponse
	pattern := "/api/v1/hpa/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHPAGetHpaDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
