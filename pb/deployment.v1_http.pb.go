// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/deployment.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationDeploymentListDeployment = "/deployment.Deployment/ListDeployment"
const OperationDeploymentCreateOrUpdateDeploymentByYaml = "/deployment.Deployment/CreateOrUpdateDeploymentByYaml"
const OperationDeploymentDeleteDeployment = "/deployment.Deployment/DeleteDeployment"
const OperationDeploymentRestartDeployment = "/deployment.Deployment/RestartDeployment"
const OperationDeploymentScaleDeployment = "/deployment.Deployment/ScaleDeployment"
const OperationDeploymentGetDeploymentDetail = "/deployment.Deployment/GetDeploymentDetail"
const OperationDeploymentRollbackDeployment = "/deployment.Deployment/RollbackDeployment"
const OperationDeploymentListReplicaSet = "/deployment.Deployment/ListReplicaSet"
const OperationDeploymentUpdateDeploymentStrategy = "/deployment.Deployment/UpdateDeploymentStrategy"

type DeploymentHTTPServer interface {
	// ListDeployment查看-云原生管理-Deployment-列表
	ListDeployment(context.Context, *ListDeploymentRequest) (*ListDeploymentResponse, error)
	// CreateOrUpdateDeploymentByYaml管理-云原生管理-Deployment-Yaml创建更新
	CreateOrUpdateDeploymentByYaml(context.Context, *CreateOrUpdateDeploymentByYamlRequest) (*CreateOrUpdateDeploymentByYamlResponse, error)
	// DeleteDeployment管理-云原生管理-Deployment-删除
	DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error)
	// RestartDeployment管理-云原生管理-Deployment-重启
	RestartDeployment(context.Context, *RestartDeploymentRequest) (*RestartDeploymentResponse, error)
	// ScaleDeployment管理-云原生管理-Deployment-扩缩容
	ScaleDeployment(context.Context, *ScaleDeploymentRequest) (*ScaleDeploymentResponse, error)
	// GetDeploymentDetail查看-云原生管理-Deployment-详情
	GetDeploymentDetail(context.Context, *DeploymentDetailRequest) (*DeploymentDetailResponse, error)
	// RollbackDeployment管理-云原生管理-Deployment-回滚
	RollbackDeployment(context.Context, *RollbackDeploymentRequest) (*RollbackDeploymentResponse, error)
	// ListReplicaSet查看-云原生管理-Deployment-历史版本
	ListReplicaSet(context.Context, *DeploymentDetailRequest) (*ListReplicaSetResponse, error)
	// UpdateDeploymentStrategy管理-云原生管理-Deployment-更新策略
	UpdateDeploymentStrategy(context.Context, *UpdateDeploymentStrategyRequest) (*UpdateDeploymentStrategyResponse, error)
}

func NewDeploymentHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationDeploymentListDeployment).Build(),
		selector.Server().Path(OperationDeploymentCreateOrUpdateDeploymentByYaml).Build(),
		selector.Server().Path(OperationDeploymentDeleteDeployment).Build(),
		selector.Server().Path(OperationDeploymentRestartDeployment).Build(),
		selector.Server().Path(OperationDeploymentScaleDeployment).Build(),
		selector.Server().Path(OperationDeploymentGetDeploymentDetail).Build(),
		selector.Server().Path(OperationDeploymentRollbackDeployment).Build(),
		selector.Server().Path(OperationDeploymentListReplicaSet).Build(),
		selector.Server().Path(OperationDeploymentUpdateDeploymentStrategy).Build(),
	).Path(
		OperationDeploymentListDeployment,
		OperationDeploymentCreateOrUpdateDeploymentByYaml,
		OperationDeploymentDeleteDeployment,
		OperationDeploymentRestartDeployment,
		OperationDeploymentScaleDeployment,
		OperationDeploymentGetDeploymentDetail,
		OperationDeploymentRollbackDeployment,
		OperationDeploymentListReplicaSet,
		OperationDeploymentUpdateDeploymentStrategy,
	).Build()
}

func RegisterDeploymentHTTPServer(s *http.Server, srv DeploymentHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/deployment/list", _Deployment_ListDeployment0_HTTP_Handler(srv))
	r.POST("/api/v1/deployment/create_or_update_by_yaml", _Deployment_CreateOrUpdateDeploymentByYaml0_HTTP_Handler(srv))
	r.POST("/api/v1/deployment/delete", _Deployment_DeleteDeployment0_HTTP_Handler(srv))
	r.POST("/api/v1/deployment/restart", _Deployment_RestartDeployment0_HTTP_Handler(srv))
	r.POST("/api/v1/deployment/scale", _Deployment_ScaleDeployment0_HTTP_Handler(srv))
	r.GET("/api/v1/deployment/detail", _Deployment_GetDeploymentDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/deployment/rollback", _Deployment_RollbackDeployment0_HTTP_Handler(srv))
	r.GET("/api/v1/deployment/replicaset/list", _Deployment_ListReplicaSet0_HTTP_Handler(srv))
	r.POST("/api/v1/deployment/upgrade_strategy/update", _Deployment_UpdateDeploymentStrategy0_HTTP_Handler(srv))
}

func GenerateDeploymentHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 9)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/deployment/list",
		Comment: "查看-云原生管理-Deployment-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/deployment/create_or_update_by_yaml",
		Comment: "管理-云原生管理-Deployment-Yaml创建更新",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/deployment/delete",
		Comment: "管理-云原生管理-Deployment-删除",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/deployment/restart",
		Comment: "管理-云原生管理-Deployment-重启",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/deployment/scale",
		Comment: "管理-云原生管理-Deployment-扩缩容",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/deployment/detail",
		Comment: "查看-云原生管理-Deployment-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/deployment/rollback",
		Comment: "管理-云原生管理-Deployment-回滚",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/deployment/replicaset/list",
		Comment: "查看-云原生管理-Deployment-历史版本",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/deployment/upgrade_strategy/update",
		Comment: "管理-云原生管理-Deployment-更新策略",
	})
	return routes
}

func _Deployment_ListDeployment0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListDeploymentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentListDeployment)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDeployment(ctx, req.(*ListDeploymentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDeploymentResponse)
		return ctx.Result(200, reply)
	}
}

func _Deployment_CreateOrUpdateDeploymentByYaml0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateDeploymentByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentCreateOrUpdateDeploymentByYaml)
		auditRule := audit.NewAudit(
			"deployment",
			"Yaml创建更新",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "namespace",
					},
				},
				{
					Key:   "name",
					Value: audit.MetaValue{},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateDeploymentByYaml(ctx, req.(*CreateOrUpdateDeploymentByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateDeploymentByYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _Deployment_DeleteDeployment0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteDeploymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentDeleteDeployment)
		auditRule := audit.NewAudit(
			"deployment",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "deployment",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDeployment(ctx, req.(*DeleteDeploymentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDeploymentResponse)
		return ctx.Result(200, reply)
	}
}

func _Deployment_RestartDeployment0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in RestartDeploymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentRestartDeployment)
		auditRule := audit.NewAudit(
			"deployment",
			"重启",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "deployment",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RestartDeployment(ctx, req.(*RestartDeploymentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RestartDeploymentResponse)
		return ctx.Result(200, reply)
	}
}

func _Deployment_ScaleDeployment0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ScaleDeploymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentScaleDeployment)
		auditRule := audit.NewAudit(
			"deployment",
			"伸缩",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "deployment",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScaleDeployment(ctx, req.(*ScaleDeploymentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScaleDeploymentResponse)
		return ctx.Result(200, reply)
	}
}

func _Deployment_GetDeploymentDetail0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeploymentDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentGetDeploymentDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDeploymentDetail(ctx, req.(*DeploymentDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeploymentDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Deployment_RollbackDeployment0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in RollbackDeploymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentRollbackDeployment)
		auditRule := audit.NewAudit(
			"deployment",
			"回滚",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "deployment",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RollbackDeployment(ctx, req.(*RollbackDeploymentRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RollbackDeploymentResponse)
		return ctx.Result(200, reply)
	}
}

func _Deployment_ListReplicaSet0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeploymentDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentListReplicaSet)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListReplicaSet(ctx, req.(*DeploymentDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListReplicaSetResponse)
		return ctx.Result(200, reply)
	}
}

func _Deployment_UpdateDeploymentStrategy0_HTTP_Handler(srv DeploymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateDeploymentStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDeploymentUpdateDeploymentStrategy)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDeploymentStrategy(ctx, req.(*UpdateDeploymentStrategyRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDeploymentStrategyResponse)
		return ctx.Result(200, reply)
	}
}

type DeploymentHTTPClient interface {
	ListDeployment(ctx context.Context, req *ListDeploymentRequest, opts ...http.CallOption) (rsp *ListDeploymentResponse, err error)
	CreateOrUpdateDeploymentByYaml(ctx context.Context, req *CreateOrUpdateDeploymentByYamlRequest, opts ...http.CallOption) (rsp *CreateOrUpdateDeploymentByYamlResponse, err error)
	DeleteDeployment(ctx context.Context, req *DeleteDeploymentRequest, opts ...http.CallOption) (rsp *DeleteDeploymentResponse, err error)
	RestartDeployment(ctx context.Context, req *RestartDeploymentRequest, opts ...http.CallOption) (rsp *RestartDeploymentResponse, err error)
	ScaleDeployment(ctx context.Context, req *ScaleDeploymentRequest, opts ...http.CallOption) (rsp *ScaleDeploymentResponse, err error)
	GetDeploymentDetail(ctx context.Context, req *DeploymentDetailRequest, opts ...http.CallOption) (rsp *DeploymentDetailResponse, err error)
	RollbackDeployment(ctx context.Context, req *RollbackDeploymentRequest, opts ...http.CallOption) (rsp *RollbackDeploymentResponse, err error)
	ListReplicaSet(ctx context.Context, req *DeploymentDetailRequest, opts ...http.CallOption) (rsp *ListReplicaSetResponse, err error)
	UpdateDeploymentStrategy(ctx context.Context, req *UpdateDeploymentStrategyRequest, opts ...http.CallOption) (rsp *UpdateDeploymentStrategyResponse, err error)
}

type DeploymentHTTPClientImpl struct {
	cc *http.Client
}

func NewDeploymentHTTPClient(client *http.Client) DeploymentHTTPClient {
	return &DeploymentHTTPClientImpl{client}
}

func (c *DeploymentHTTPClientImpl) ListDeployment(ctx context.Context, in *ListDeploymentRequest, opts ...http.CallOption) (*ListDeploymentResponse, error) {
	var out ListDeploymentResponse
	pattern := "/api/v1/deployment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeploymentListDeployment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeploymentHTTPClientImpl) CreateOrUpdateDeploymentByYaml(ctx context.Context, in *CreateOrUpdateDeploymentByYamlRequest, opts ...http.CallOption) (*CreateOrUpdateDeploymentByYamlResponse, error) {
	var out CreateOrUpdateDeploymentByYamlResponse
	pattern := "/api/v1/deployment/create_or_update_by_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeploymentCreateOrUpdateDeploymentByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeploymentHTTPClientImpl) DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...http.CallOption) (*DeleteDeploymentResponse, error) {
	var out DeleteDeploymentResponse
	pattern := "/api/v1/deployment/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeploymentDeleteDeployment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeploymentHTTPClientImpl) RestartDeployment(ctx context.Context, in *RestartDeploymentRequest, opts ...http.CallOption) (*RestartDeploymentResponse, error) {
	var out RestartDeploymentResponse
	pattern := "/api/v1/deployment/restart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeploymentRestartDeployment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeploymentHTTPClientImpl) ScaleDeployment(ctx context.Context, in *ScaleDeploymentRequest, opts ...http.CallOption) (*ScaleDeploymentResponse, error) {
	var out ScaleDeploymentResponse
	pattern := "/api/v1/deployment/scale"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeploymentScaleDeployment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeploymentHTTPClientImpl) GetDeploymentDetail(ctx context.Context, in *DeploymentDetailRequest, opts ...http.CallOption) (*DeploymentDetailResponse, error) {
	var out DeploymentDetailResponse
	pattern := "/api/v1/deployment/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeploymentGetDeploymentDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeploymentHTTPClientImpl) RollbackDeployment(ctx context.Context, in *RollbackDeploymentRequest, opts ...http.CallOption) (*RollbackDeploymentResponse, error) {
	var out RollbackDeploymentResponse
	pattern := "/api/v1/deployment/rollback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeploymentRollbackDeployment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeploymentHTTPClientImpl) ListReplicaSet(ctx context.Context, in *DeploymentDetailRequest, opts ...http.CallOption) (*ListReplicaSetResponse, error) {
	var out ListReplicaSetResponse
	pattern := "/api/v1/deployment/replicaset/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDeploymentListReplicaSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DeploymentHTTPClientImpl) UpdateDeploymentStrategy(ctx context.Context, in *UpdateDeploymentStrategyRequest, opts ...http.CallOption) (*UpdateDeploymentStrategyResponse, error) {
	var out UpdateDeploymentStrategyResponse
	pattern := "/api/v1/deployment/upgrade_strategy/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDeploymentUpdateDeploymentStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
