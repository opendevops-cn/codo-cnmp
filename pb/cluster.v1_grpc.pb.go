// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/cluster.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cluster_CreateCluster_FullMethodName      = "/cluster.Cluster/CreateCluster"
	Cluster_ListCluster_FullMethodName        = "/cluster.Cluster/ListCluster"
	Cluster_GetClusterDetail_FullMethodName   = "/cluster.Cluster/GetClusterDetail"
	Cluster_PingIdip_FullMethodName           = "/cluster.Cluster/PingIdip"
	Cluster_DeleteCluster_FullMethodName      = "/cluster.Cluster/DeleteCluster"
	Cluster_OverviewCluster_FullMethodName    = "/cluster.Cluster/OverviewCluster"
	Cluster_UpdateCluster_FullMethodName      = "/cluster.Cluster/UpdateCluster"
	Cluster_DownloadKubeConfig_FullMethodName = "/cluster.Cluster/DownloadKubeConfig"
)

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterClient interface {
	// 管理-云原生管理-集群-导入
	CreateCluster(ctx context.Context, in *ImportClusterRequest, opts ...grpc.CallOption) (*ImportClusterResponse, error)
	// 查看-云原生管理-集群-列表
	ListCluster(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (*ListClusterResponse, error)
	// 查看-云原生管理-集群-详情
	GetClusterDetail(ctx context.Context, in *GetClusterDetailRequest, opts ...grpc.CallOption) (*GetClusterDetailResponse, error)
	// 查看-云原生管理-集群-IdIP连通性
	PingIdip(ctx context.Context, in *PingIdipRequest, opts ...grpc.CallOption) (*PingIdipResponse, error)
	// 管理-云原生管理-集群-删除
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error)
	// 查看-云原生管理-集群-概览
	OverviewCluster(ctx context.Context, in *ClusterOverviewRequest, opts ...grpc.CallOption) (*ClusterOverviewResponse, error)
	// 管理-云原生管理-集群-编辑
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*UpdateClusterResponse, error)
	// 管理-云原生管理-集群-下载kubeConfig
	DownloadKubeConfig(ctx context.Context, in *DownloadKubeConfigRequest, opts ...grpc.CallOption) (*DownloadKubeConfigResponse, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) CreateCluster(ctx context.Context, in *ImportClusterRequest, opts ...grpc.CallOption) (*ImportClusterResponse, error) {
	out := new(ImportClusterResponse)
	err := c.cc.Invoke(ctx, Cluster_CreateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ListCluster(ctx context.Context, in *ListClusterRequest, opts ...grpc.CallOption) (*ListClusterResponse, error) {
	out := new(ListClusterResponse)
	err := c.cc.Invoke(ctx, Cluster_ListCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetClusterDetail(ctx context.Context, in *GetClusterDetailRequest, opts ...grpc.CallOption) (*GetClusterDetailResponse, error) {
	out := new(GetClusterDetailResponse)
	err := c.cc.Invoke(ctx, Cluster_GetClusterDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) PingIdip(ctx context.Context, in *PingIdipRequest, opts ...grpc.CallOption) (*PingIdipResponse, error) {
	out := new(PingIdipResponse)
	err := c.cc.Invoke(ctx, Cluster_PingIdip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error) {
	out := new(DeleteClusterResponse)
	err := c.cc.Invoke(ctx, Cluster_DeleteCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) OverviewCluster(ctx context.Context, in *ClusterOverviewRequest, opts ...grpc.CallOption) (*ClusterOverviewResponse, error) {
	out := new(ClusterOverviewResponse)
	err := c.cc.Invoke(ctx, Cluster_OverviewCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*UpdateClusterResponse, error) {
	out := new(UpdateClusterResponse)
	err := c.cc.Invoke(ctx, Cluster_UpdateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DownloadKubeConfig(ctx context.Context, in *DownloadKubeConfigRequest, opts ...grpc.CallOption) (*DownloadKubeConfigResponse, error) {
	out := new(DownloadKubeConfigResponse)
	err := c.cc.Invoke(ctx, Cluster_DownloadKubeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
// All implementations must embed UnimplementedClusterServer
// for forward compatibility
type ClusterServer interface {
	// 管理-云原生管理-集群-导入
	CreateCluster(context.Context, *ImportClusterRequest) (*ImportClusterResponse, error)
	// 查看-云原生管理-集群-列表
	ListCluster(context.Context, *ListClusterRequest) (*ListClusterResponse, error)
	// 查看-云原生管理-集群-详情
	GetClusterDetail(context.Context, *GetClusterDetailRequest) (*GetClusterDetailResponse, error)
	// 查看-云原生管理-集群-IdIP连通性
	PingIdip(context.Context, *PingIdipRequest) (*PingIdipResponse, error)
	// 管理-云原生管理-集群-删除
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	// 查看-云原生管理-集群-概览
	OverviewCluster(context.Context, *ClusterOverviewRequest) (*ClusterOverviewResponse, error)
	// 管理-云原生管理-集群-编辑
	UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error)
	// 管理-云原生管理-集群-下载kubeConfig
	DownloadKubeConfig(context.Context, *DownloadKubeConfigRequest) (*DownloadKubeConfigResponse, error)
	mustEmbedUnimplementedClusterServer()
}

// UnimplementedClusterServer must be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (UnimplementedClusterServer) CreateCluster(context.Context, *ImportClusterRequest) (*ImportClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedClusterServer) ListCluster(context.Context, *ListClusterRequest) (*ListClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCluster not implemented")
}
func (UnimplementedClusterServer) GetClusterDetail(context.Context, *GetClusterDetailRequest) (*GetClusterDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterDetail not implemented")
}
func (UnimplementedClusterServer) PingIdip(context.Context, *PingIdipRequest) (*PingIdipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingIdip not implemented")
}
func (UnimplementedClusterServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedClusterServer) OverviewCluster(context.Context, *ClusterOverviewRequest) (*ClusterOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverviewCluster not implemented")
}
func (UnimplementedClusterServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedClusterServer) DownloadKubeConfig(context.Context, *DownloadKubeConfigRequest) (*DownloadKubeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadKubeConfig not implemented")
}
func (UnimplementedClusterServer) mustEmbedUnimplementedClusterServer() {}

// UnsafeClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServer will
// result in compilation errors.
type UnsafeClusterServer interface {
	mustEmbedUnimplementedClusterServer()
}

func RegisterClusterServer(s grpc.ServiceRegistrar, srv ClusterServer) {
	s.RegisterService(&Cluster_ServiceDesc, srv)
}

func _Cluster_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).CreateCluster(ctx, req.(*ImportClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ListCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ListCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_ListCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ListCluster(ctx, req.(*ListClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetClusterDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetClusterDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_GetClusterDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetClusterDetail(ctx, req.(*GetClusterDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_PingIdip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingIdipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).PingIdip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_PingIdip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).PingIdip(ctx, req.(*PingIdipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_OverviewCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).OverviewCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_OverviewCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).OverviewCluster(ctx, req.(*ClusterOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DownloadKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadKubeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DownloadKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cluster_DownloadKubeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DownloadKubeConfig(ctx, req.(*DownloadKubeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cluster_ServiceDesc is the grpc.ServiceDesc for Cluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _Cluster_CreateCluster_Handler,
		},
		{
			MethodName: "ListCluster",
			Handler:    _Cluster_ListCluster_Handler,
		},
		{
			MethodName: "GetClusterDetail",
			Handler:    _Cluster_GetClusterDetail_Handler,
		},
		{
			MethodName: "PingIdip",
			Handler:    _Cluster_PingIdip_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Cluster_DeleteCluster_Handler,
		},
		{
			MethodName: "OverviewCluster",
			Handler:    _Cluster_OverviewCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _Cluster_UpdateCluster_Handler,
		},
		{
			MethodName: "DownloadKubeConfig",
			Handler:    _Cluster_DownloadKubeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/cluster.v1.proto",
}
