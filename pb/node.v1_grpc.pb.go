// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/node.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Node_ListNode_FullMethodName                 = "/node.Node/ListNode"
	Node_GetNodeDetail_FullMethodName            = "/node.Node/GetNodeDetail"
	Node_UpdateNode_FullMethodName               = "/node.Node/UpdateNode"
	Node_CreateOrUpdateNodeByYaml_FullMethodName = "/node.Node/CreateOrUpdateNodeByYaml"
	Node_CheckEviction_FullMethodName            = "/node.Node/CheckEviction"
	Node_HandleNode_FullMethodName               = "/node.Node/HandleNode"
)

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeClient interface {
	// 查看-云原生管理-节点-列表
	ListNode(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error)
	// 查看-云原生管理-节点-详情
	GetNodeDetail(ctx context.Context, in *GetNodeDetailRequest, opts ...grpc.CallOption) (*GetNodeDetailResponse, error)
	// 管理-云原生管理-节点-编辑
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error)
	// 管理-云原生管理-节点-Yaml创建更新
	CreateOrUpdateNodeByYaml(ctx context.Context, in *CreateOrUpdateNodeByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateNodeByYamlResponse, error)
	// 管理-云原生管理-节点-Pod驱逐检查
	CheckEviction(ctx context.Context, in *CheckEvictionRequest, opts ...grpc.CallOption) (*CheckEvictionResponse, error)
	// 管理-云原生管理-节点-操作
	HandleNode(ctx context.Context, in *HandleNodeRequest, opts ...grpc.CallOption) (*HandleNodeResponse, error)
}

type nodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeClient(cc grpc.ClientConnInterface) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) ListNode(ctx context.Context, in *ListNodeRequest, opts ...grpc.CallOption) (*ListNodeResponse, error) {
	out := new(ListNodeResponse)
	err := c.cc.Invoke(ctx, Node_ListNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetNodeDetail(ctx context.Context, in *GetNodeDetailRequest, opts ...grpc.CallOption) (*GetNodeDetailResponse, error) {
	out := new(GetNodeDetailResponse)
	err := c.cc.Invoke(ctx, Node_GetNodeDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	out := new(UpdateNodeResponse)
	err := c.cc.Invoke(ctx, Node_UpdateNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CreateOrUpdateNodeByYaml(ctx context.Context, in *CreateOrUpdateNodeByYamlRequest, opts ...grpc.CallOption) (*CreateOrUpdateNodeByYamlResponse, error) {
	out := new(CreateOrUpdateNodeByYamlResponse)
	err := c.cc.Invoke(ctx, Node_CreateOrUpdateNodeByYaml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) CheckEviction(ctx context.Context, in *CheckEvictionRequest, opts ...grpc.CallOption) (*CheckEvictionResponse, error) {
	out := new(CheckEvictionResponse)
	err := c.cc.Invoke(ctx, Node_CheckEviction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) HandleNode(ctx context.Context, in *HandleNodeRequest, opts ...grpc.CallOption) (*HandleNodeResponse, error) {
	out := new(HandleNodeResponse)
	err := c.cc.Invoke(ctx, Node_HandleNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
// All implementations must embed UnimplementedNodeServer
// for forward compatibility
type NodeServer interface {
	// 查看-云原生管理-节点-列表
	ListNode(context.Context, *ListNodeRequest) (*ListNodeResponse, error)
	// 查看-云原生管理-节点-详情
	GetNodeDetail(context.Context, *GetNodeDetailRequest) (*GetNodeDetailResponse, error)
	// 管理-云原生管理-节点-编辑
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	// 管理-云原生管理-节点-Yaml创建更新
	CreateOrUpdateNodeByYaml(context.Context, *CreateOrUpdateNodeByYamlRequest) (*CreateOrUpdateNodeByYamlResponse, error)
	// 管理-云原生管理-节点-Pod驱逐检查
	CheckEviction(context.Context, *CheckEvictionRequest) (*CheckEvictionResponse, error)
	// 管理-云原生管理-节点-操作
	HandleNode(context.Context, *HandleNodeRequest) (*HandleNodeResponse, error)
	mustEmbedUnimplementedNodeServer()
}

// UnimplementedNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (UnimplementedNodeServer) ListNode(context.Context, *ListNodeRequest) (*ListNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedNodeServer) GetNodeDetail(context.Context, *GetNodeDetailRequest) (*GetNodeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeDetail not implemented")
}
func (UnimplementedNodeServer) UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedNodeServer) CreateOrUpdateNodeByYaml(context.Context, *CreateOrUpdateNodeByYamlRequest) (*CreateOrUpdateNodeByYamlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateNodeByYaml not implemented")
}
func (UnimplementedNodeServer) CheckEviction(context.Context, *CheckEvictionRequest) (*CheckEvictionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEviction not implemented")
}
func (UnimplementedNodeServer) HandleNode(context.Context, *HandleNodeRequest) (*HandleNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNode not implemented")
}
func (UnimplementedNodeServer) mustEmbedUnimplementedNodeServer() {}

// UnsafeNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServer will
// result in compilation errors.
type UnsafeNodeServer interface {
	mustEmbedUnimplementedNodeServer()
}

func RegisterNodeServer(s grpc.ServiceRegistrar, srv NodeServer) {
	s.RegisterService(&Node_ServiceDesc, srv)
}

func _Node_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_ListNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ListNode(ctx, req.(*ListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_GetNodeDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).GetNodeDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_GetNodeDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).GetNodeDetail(ctx, req.(*GetNodeDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_UpdateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CreateOrUpdateNodeByYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateNodeByYamlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CreateOrUpdateNodeByYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CreateOrUpdateNodeByYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CreateOrUpdateNodeByYaml(ctx, req.(*CreateOrUpdateNodeByYamlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_CheckEviction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEvictionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).CheckEviction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_CheckEviction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).CheckEviction(ctx, req.(*CheckEvictionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_HandleNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).HandleNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Node_HandleNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).HandleNode(ctx, req.(*HandleNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Node_ServiceDesc is the grpc.ServiceDesc for Node service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Node_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "node.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNode",
			Handler:    _Node_ListNode_Handler,
		},
		{
			MethodName: "GetNodeDetail",
			Handler:    _Node_GetNodeDetail_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _Node_UpdateNode_Handler,
		},
		{
			MethodName: "CreateOrUpdateNodeByYaml",
			Handler:    _Node_CreateOrUpdateNodeByYaml_Handler,
		},
		{
			MethodName: "CheckEviction",
			Handler:    _Node_CheckEviction_Handler,
		},
		{
			MethodName: "HandleNode",
			Handler:    _Node_HandleNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/node.v1.proto",
}
