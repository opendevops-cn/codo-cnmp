// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/resourcequota.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationResourceQuotaListResourceQuota = "/resourcequota.v1.ResourceQuota/ListResourceQuota"
const OperationResourceQuotaCreateResourceQuota = "/resourcequota.v1.ResourceQuota/CreateResourceQuota"
const OperationResourceQuotaUpdateResourceQuota = "/resourcequota.v1.ResourceQuota/UpdateResourceQuota"
const OperationResourceQuotaCreateOrUpdateResourceQuota = "/resourcequota.v1.ResourceQuota/CreateOrUpdateResourceQuota"
const OperationResourceQuotaGetResourceQuotaDetail = "/resourcequota.v1.ResourceQuota/GetResourceQuotaDetail"
const OperationResourceQuotaDeleteResourceQuota = "/resourcequota.v1.ResourceQuota/DeleteResourceQuota"

type ResourceQuotaHTTPServer interface {
	// ListResourceQuota查看-云原生管理-ResourceQuota-列表
	ListResourceQuota(context.Context, *ListResourceQuotaRequest) (*ListResourceQuotaResponse, error)
	// CreateResourceQuota管理-云原生管理-ResourceQuota-创建
	CreateResourceQuota(context.Context, *CreateResourceQuotaRequest) (*CreateResourceQuotaResponse, error)
	// UpdateResourceQuota管理-云原生管理-ResourceQuota-编辑
	UpdateResourceQuota(context.Context, *CreateResourceQuotaRequest) (*CreateResourceQuotaResponse, error)
	// CreateOrUpdateResourceQuota管理-云原生管理-ResourceQuota-创建或编辑
	CreateOrUpdateResourceQuota(context.Context, *CreateResourceQuotaRequest) (*CreateResourceQuotaResponse, error)
	// GetResourceQuotaDetail查看-云原生管理-ResourceQuota-详情
	GetResourceQuotaDetail(context.Context, *ResourceQuotaDetailRequest) (*ResourceQuotaDetailResponse, error)
	// DeleteResourceQuota管理-云原生管理-ResourceQuota-删除
	DeleteResourceQuota(context.Context, *DeleteResourceQuotaRequest) (*DeleteResourceQuotaResponse, error)
}

func NewResourceQuotaHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationResourceQuotaListResourceQuota).Build(),
		selector.Server().Path(OperationResourceQuotaCreateResourceQuota).Build(),
		selector.Server().Path(OperationResourceQuotaUpdateResourceQuota).Build(),
		selector.Server().Path(OperationResourceQuotaCreateOrUpdateResourceQuota).Build(),
		selector.Server().Path(OperationResourceQuotaGetResourceQuotaDetail).Build(),
		selector.Server().Path(OperationResourceQuotaDeleteResourceQuota).Build(),
	).Path(
		OperationResourceQuotaListResourceQuota,
		OperationResourceQuotaCreateResourceQuota,
		OperationResourceQuotaUpdateResourceQuota,
		OperationResourceQuotaCreateOrUpdateResourceQuota,
		OperationResourceQuotaGetResourceQuotaDetail,
		OperationResourceQuotaDeleteResourceQuota,
	).Build()
}

func RegisterResourceQuotaHTTPServer(s *http.Server, srv ResourceQuotaHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/resourcequota/list", _ResourceQuota_ListResourceQuota0_HTTP_Handler(srv))
	r.POST("/api/v1/resourcequota/create", _ResourceQuota_CreateResourceQuota0_HTTP_Handler(srv))
	r.POST("/api/v1/resourcequota/update", _ResourceQuota_UpdateResourceQuota0_HTTP_Handler(srv))
	r.POST("/api/v1/resourcequota/create_or_update", _ResourceQuota_CreateOrUpdateResourceQuota0_HTTP_Handler(srv))
	r.GET("/api/v1/resourcequota/detail", _ResourceQuota_GetResourceQuotaDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/resourcequota/delete", _ResourceQuota_DeleteResourceQuota0_HTTP_Handler(srv))
}

func GenerateResourceQuotaHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 6)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/resourcequota/list",
		Comment: "查看-云原生管理-ResourceQuota-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/resourcequota/create",
		Comment: "管理-云原生管理-ResourceQuota-创建",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/resourcequota/update",
		Comment: "管理-云原生管理-ResourceQuota-编辑",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/resourcequota/create_or_update",
		Comment: "管理-云原生管理-ResourceQuota-创建或编辑",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/resourcequota/detail",
		Comment: "查看-云原生管理-ResourceQuota-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/resourcequota/delete",
		Comment: "管理-云原生管理-ResourceQuota-删除",
	})
	return routes
}

func _ResourceQuota_ListResourceQuota0_HTTP_Handler(srv ResourceQuotaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListResourceQuotaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceQuotaListResourceQuota)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResourceQuota(ctx, req.(*ListResourceQuotaRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResourceQuotaResponse)
		return ctx.Result(200, reply)
	}
}

func _ResourceQuota_CreateResourceQuota0_HTTP_Handler(srv ResourceQuotaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateResourceQuotaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceQuotaCreateResourceQuota)
		auditRule := audit.NewAudit(
			"ResourceQuota",
			"创建",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "ResourceQuota",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateResourceQuota(ctx, req.(*CreateResourceQuotaRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateResourceQuotaResponse)
		return ctx.Result(200, reply)
	}
}

func _ResourceQuota_UpdateResourceQuota0_HTTP_Handler(srv ResourceQuotaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateResourceQuotaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceQuotaUpdateResourceQuota)
		auditRule := audit.NewAudit(
			"ResourceQuota",
			"编辑",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "ResourceQuota",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateResourceQuota(ctx, req.(*CreateResourceQuotaRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateResourceQuotaResponse)
		return ctx.Result(200, reply)
	}
}

func _ResourceQuota_CreateOrUpdateResourceQuota0_HTTP_Handler(srv ResourceQuotaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateResourceQuotaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceQuotaCreateOrUpdateResourceQuota)
		auditRule := audit.NewAudit(
			"ResourceQuota",
			"创建或编辑",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "ResourceQuota",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateResourceQuota(ctx, req.(*CreateResourceQuotaRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateResourceQuotaResponse)
		return ctx.Result(200, reply)
	}
}

func _ResourceQuota_GetResourceQuotaDetail0_HTTP_Handler(srv ResourceQuotaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ResourceQuotaDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceQuotaGetResourceQuotaDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResourceQuotaDetail(ctx, req.(*ResourceQuotaDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResourceQuotaDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _ResourceQuota_DeleteResourceQuota0_HTTP_Handler(srv ResourceQuotaHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteResourceQuotaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceQuotaDeleteResourceQuota)
		auditRule := audit.NewAudit(
			"ResourceQuota",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "ResourceQuota",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResourceQuota(ctx, req.(*DeleteResourceQuotaRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceQuotaResponse)
		return ctx.Result(200, reply)
	}
}

type ResourceQuotaHTTPClient interface {
	ListResourceQuota(ctx context.Context, req *ListResourceQuotaRequest, opts ...http.CallOption) (rsp *ListResourceQuotaResponse, err error)
	CreateResourceQuota(ctx context.Context, req *CreateResourceQuotaRequest, opts ...http.CallOption) (rsp *CreateResourceQuotaResponse, err error)
	UpdateResourceQuota(ctx context.Context, req *CreateResourceQuotaRequest, opts ...http.CallOption) (rsp *CreateResourceQuotaResponse, err error)
	CreateOrUpdateResourceQuota(ctx context.Context, req *CreateResourceQuotaRequest, opts ...http.CallOption) (rsp *CreateResourceQuotaResponse, err error)
	GetResourceQuotaDetail(ctx context.Context, req *ResourceQuotaDetailRequest, opts ...http.CallOption) (rsp *ResourceQuotaDetailResponse, err error)
	DeleteResourceQuota(ctx context.Context, req *DeleteResourceQuotaRequest, opts ...http.CallOption) (rsp *DeleteResourceQuotaResponse, err error)
}

type ResourceQuotaHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceQuotaHTTPClient(client *http.Client) ResourceQuotaHTTPClient {
	return &ResourceQuotaHTTPClientImpl{client}
}

func (c *ResourceQuotaHTTPClientImpl) ListResourceQuota(ctx context.Context, in *ListResourceQuotaRequest, opts ...http.CallOption) (*ListResourceQuotaResponse, error) {
	var out ListResourceQuotaResponse
	pattern := "/api/v1/resourcequota/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceQuotaListResourceQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceQuotaHTTPClientImpl) CreateResourceQuota(ctx context.Context, in *CreateResourceQuotaRequest, opts ...http.CallOption) (*CreateResourceQuotaResponse, error) {
	var out CreateResourceQuotaResponse
	pattern := "/api/v1/resourcequota/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceQuotaCreateResourceQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceQuotaHTTPClientImpl) UpdateResourceQuota(ctx context.Context, in *CreateResourceQuotaRequest, opts ...http.CallOption) (*CreateResourceQuotaResponse, error) {
	var out CreateResourceQuotaResponse
	pattern := "/api/v1/resourcequota/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceQuotaUpdateResourceQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceQuotaHTTPClientImpl) CreateOrUpdateResourceQuota(ctx context.Context, in *CreateResourceQuotaRequest, opts ...http.CallOption) (*CreateResourceQuotaResponse, error) {
	var out CreateResourceQuotaResponse
	pattern := "/api/v1/resourcequota/create_or_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceQuotaCreateOrUpdateResourceQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceQuotaHTTPClientImpl) GetResourceQuotaDetail(ctx context.Context, in *ResourceQuotaDetailRequest, opts ...http.CallOption) (*ResourceQuotaDetailResponse, error) {
	var out ResourceQuotaDetailResponse
	pattern := "/api/v1/resourcequota/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceQuotaGetResourceQuotaDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ResourceQuotaHTTPClientImpl) DeleteResourceQuota(ctx context.Context, in *DeleteResourceQuotaRequest, opts ...http.CallOption) (*DeleteResourceQuotaResponse, error) {
	var out DeleteResourceQuotaResponse
	pattern := "/api/v1/resourcequota/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceQuotaDeleteResourceQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
