syntax = "proto3";


package secret.v1;

import "google/api/annotations.proto";
import "khttp/middleware.proto";
import "validate/validate.proto";
import "google/api/field_behavior.proto";
import "khttp/audit.proto";


option go_package = "codo-cnmp/pb;pb";


service Secret {
  // 查看-云原生管理-Secret-列表
  rpc ListSecret (ListSecretsRequest) returns (ListSecretsResponse) {
    option (google.api.http) = {
      get: "/api/v1/secret/list"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
  }
  // 管理-云原生管理-Secret-Yaml创建更新
  rpc CreateOrUpdateSecretByYaml (CreateOrUpdateSecretByYamlRequest) returns (CreateOrUpdateSecretByYamlResponse) {
    option (google.api.http) = {
      post: "/api/v1/secret/create_or_update_by_yaml"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "secret";
      action: "Yaml创建更新";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "Secret"
        },
        {
          key: "name",
          extract: "name"
        }
      ];
    };
  }
  // 管理-云原生管理-Secret-删除
  rpc DeleteSecret (DeleteSecretRequest) returns (DeleteSecretResponse) {
    option (google.api.http) = {
      post: "/api/v1/secret/delete"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "secret";
      action: "删除";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "secret"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
  // 查看-云原生管理-Secret-详情
  rpc GetSecretDetail (SecretDetailRequest) returns (SecretDetailResponse) {
    option (google.api.http) = {
      get: "/api/v1/secret/detail"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
  }
  // 管理-云原生管理-Secret-创建
  rpc CreateSecret (CreateSecretRequest) returns (CreateSecretResponse) {
    option (google.api.http) = {
      post: "/api/v1/secret/create"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "secret";
      action: "创建";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "secret"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
  // 管理-云原生管理-Secret-更新
  rpc UpdateSecret (UpdateSecretRequest) returns (UpdateSecretResponse) {
    option (google.api.http) = {
      post: "/api/v1/secret/update"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "secret";
      action: "更新";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "secret"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
}

message ListSecretsRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 查询关键字
  string keyword = 3 [(google.api.field_behavior) = OPTIONAL];
  // 页码
  uint32 page = 4 [(google.api.field_behavior) = OPTIONAL];
  // 页大小
  uint32 page_size = 5 [(google.api.field_behavior) = OPTIONAL];
  // 查询全部
  uint32  list_all = 6 [(google.api.field_behavior) = OPTIONAL];
  // secret类型
  SecretType type = 7 [(google.api.field_behavior) = OPTIONAL];
}

message SecretReference {
  // 资源类型
  string kind = 1;
  // 名称
  string name = 2;
}


message SecretItem {
  // 名称
  string name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 引用数量
  uint32 ref_count = 2 [(google.api.field_behavior) = REQUIRED];
  // 标签
  map<string, string> labels = 3 [(google.api.field_behavior) = OPTIONAL];
  // 注解
  map<string, string> annotations = 4 [(google.api.field_behavior) = OPTIONAL];
  // 创建时间
  uint64 create_time = 5 [(validate.rules).uint64.gte = 1, (google.api.field_behavior) = REQUIRED];
  // 更新时间
  uint64 update_time = 6 [(validate.rules).uint64.gte = 1, (google.api.field_behavior) = REQUIRED];
  // 内容
  map<string, bytes> data = 7 [(google.api.field_behavior) = REQUIRED];
  // yaml
  string yaml = 8 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 引用资源
  repeated SecretReference refs = 9[(google.api.field_behavior) = OPTIONAL];
  // 类型
  SecretType type = 10 [(google.api.field_behavior) = REQUIRED];
  // tls_crt
  string tls_crt = 11 [(google.api.field_behavior) = OPTIONAL];
  // tls_key
  string tls_key = 12 [(google.api.field_behavior) = OPTIONAL];
  // 仓库地址
  string registry = 13 [(google.api.field_behavior) = OPTIONAL];
  // 仓库用户名
  string username = 14 [(google.api.field_behavior) = OPTIONAL];
  // 仓库密码
  string password = 15 [(google.api.field_behavior) = OPTIONAL];
  // 是否关注
  bool is_followed = 16 [json_name = "is_follow", (google.api.field_behavior) = REQUIRED];

}


message ListSecretsResponse {
  // 总数
  uint32 total = 1;
  // 列表
  repeated SecretItem list = 2;
}

message CreateOrUpdateSecretByYamlRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // yaml内容
  string yaml = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}

message CreateOrUpdateSecretByYamlResponse {}


enum SecretType {
  // 未知
  Unknown_SecretType = 0;
  // Opaque类型
  Opaque = 1;
  // DockerConfigJson类型
  DockerConfigJson = 2;
  // TLS类型
  TLS = 3;
  // ServiceAccountToken
  ServiceAccountToken = 4;
  // DockerConfig
  DockerConfig = 5;
  // BasicAuth
  BasicAuth = 6;
  // SSHAuth
  SSHAuth = 7;
  // BootstrapToken
  BootstrapToken = 8;
}

// 删除Secret请求
message DeleteSecretRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}

// 删除Secret响应
message DeleteSecretResponse {}


// Secret详情请求
message SecretDetailRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}

// Secret详情响应
message SecretDetailResponse {
  SecretItem detail = 9;
}

// 创建Secret请求
message CreateSecretRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 标签
  map<string, string> labels = 4 [(google.api.field_behavior) = OPTIONAL];
  // 注解
  map<string, string> annotations = 5 [(google.api.field_behavior) = OPTIONAL];
  // 内容
  map<string, string> data = 6 [(google.api.field_behavior) = OPTIONAL];
  // 类型
  SecretType type = 12 [(validate.rules).enum.defined_only = true, (google.api.field_behavior) = REQUIRED];
  string tls_crt = 7  [(google.api.field_behavior) = OPTIONAL];
  string tls_key = 8  [(google.api.field_behavior) = OPTIONAL];
  string registry = 9  [(google.api.field_behavior) = OPTIONAL];
  string username = 10  [(google.api.field_behavior) = OPTIONAL];
  string password = 11  [(google.api.field_behavior) = OPTIONAL];

}

// 创建Secret响应
message CreateSecretResponse {}


// 更新Secret请求
message UpdateSecretRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 标签
  map<string, string> labels = 4  [(google.api.field_behavior) = OPTIONAL];
  // 注解
  map<string, string> annotations = 5  [(google.api.field_behavior) = OPTIONAL];
  // 内容
  map<string, string> data = 6  [(google.api.field_behavior) = OPTIONAL];
}

// 更新Secret响应
message UpdateSecretResponse {}