// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/gameserverset.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationGameServerSetListGameServerSet = "/gameserverset.GameServerSet/ListGameServerSet"
const OperationGameServerSetCreateOrUpdateGameServerSetByYaml = "/gameserverset.GameServerSet/CreateOrUpdateGameServerSetByYaml"
const OperationGameServerSetDeleteGameServerSet = "/gameserverset.GameServerSet/DeleteGameServerSet"
const OperationGameServerSetRestartGameServerSet = "/gameserverset.GameServerSet/RestartGameServerSet"
const OperationGameServerSetScaleGameServerSet = "/gameserverset.GameServerSet/ScaleGameServerSet"
const OperationGameServerSetGetGameServerSetDetail = "/gameserverset.GameServerSet/GetGameServerSetDetail"
const OperationGameServerSetRollbackGameServerSet = "/gameserverset.GameServerSet/RollbackGameServerSet"
const OperationGameServerSetDeleteGameServerSetPods = "/gameserverset.GameServerSet/DeleteGameServerSetPods"
const OperationGameServerSetUpdateScaleStrategy = "/gameserverset.GameServerSet/UpdateScaleStrategy"
const OperationGameServerSetUpdateUpgradeStrategy = "/gameserverset.GameServerSet/UpdateUpgradeStrategy"
const OperationGameServerSetListGameServerSetControllerRevision = "/gameserverset.GameServerSet/ListGameServerSetControllerRevision"

type GameServerSetHTTPServer interface {
	// ListGameServerSet查看-云原生管理-GameServerSet-列表
	ListGameServerSet(context.Context, *ListGameServerSetRequest) (*ListGameServerSetResponse, error)
	// CreateOrUpdateGameServerSetByYaml管理-云原生管理-GameServerSet-Yaml创建更新
	CreateOrUpdateGameServerSetByYaml(context.Context, *CreateOrUpdateGameServerSetByYamlRequest) (*CreateOrUpdateGameServerSetByYamlResponse, error)
	// DeleteGameServerSet管理-云原生管理-GameServerSet-删除
	DeleteGameServerSet(context.Context, *DeleteGameServerSetRequest) (*DeleteGameServerSetResponse, error)
	// RestartGameServerSet管理-云原生管理-GameServerSet-重启
	RestartGameServerSet(context.Context, *RestartGameServerSetRequest) (*RestartGameServerSetResponse, error)
	// ScaleGameServerSet管理-云原生管理-GameServerSet-伸缩
	ScaleGameServerSet(context.Context, *ScaleGameServerSetRequest) (*ScaleGameServerSetResponse, error)
	// GetGameServerSetDetail查看-云原生管理-GameServerSet-详情
	GetGameServerSetDetail(context.Context, *GameServerSetDetailRequest) (*GameServerSetDetailResponse, error)
	// RollbackGameServerSet管理-云原生管理-GameServerSet-回滚
	RollbackGameServerSet(context.Context, *RollbackGameServerSetRequest) (*RollbackGameServerSetResponse, error)
	// DeleteGameServerSetPods管理-云原生管理-GameServerSet-删除Pod
	DeleteGameServerSetPods(context.Context, *DeleteGameServerSetPodRequest) (*DeleteGameServerSetPodResponse, error)
	// UpdateScaleStrategy管理-云原生管理-GameServerSet-扩容策略
	UpdateScaleStrategy(context.Context, *UpdateGameServerSetScaleStrategyRequest) (*UpdateGameServerSetScaleStrategyResponse, error)
	// UpdateUpgradeStrategy管理-云原生管理-GameServerSet-升级策略
	UpdateUpgradeStrategy(context.Context, *UpdateGameServerSetUpgradeStrategyRequest) (*UpdateGameServerSetUpgradeStrategyResponse, error)
	// ListGameServerSetControllerRevision查看-云原生管理-GameServerSet-历史版本
	ListGameServerSetControllerRevision(context.Context, *ListGameServerSetReversionRequest) (*ListGameServerSetReversionResponse, error)
}

func NewGameServerSetHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationGameServerSetListGameServerSet).Build(),
		selector.Server().Path(OperationGameServerSetCreateOrUpdateGameServerSetByYaml).Build(),
		selector.Server().Path(OperationGameServerSetDeleteGameServerSet).Build(),
		selector.Server().Path(OperationGameServerSetRestartGameServerSet).Build(),
		selector.Server().Path(OperationGameServerSetScaleGameServerSet).Build(),
		selector.Server().Path(OperationGameServerSetGetGameServerSetDetail).Build(),
		selector.Server().Path(OperationGameServerSetRollbackGameServerSet).Build(),
		selector.Server().Path(OperationGameServerSetDeleteGameServerSetPods).Build(),
		selector.Server().Path(OperationGameServerSetUpdateScaleStrategy).Build(),
		selector.Server().Path(OperationGameServerSetUpdateUpgradeStrategy).Build(),
		selector.Server().Path(OperationGameServerSetListGameServerSetControllerRevision).Build(),
	).Path(
		OperationGameServerSetListGameServerSet,
		OperationGameServerSetCreateOrUpdateGameServerSetByYaml,
		OperationGameServerSetDeleteGameServerSet,
		OperationGameServerSetRestartGameServerSet,
		OperationGameServerSetScaleGameServerSet,
		OperationGameServerSetGetGameServerSetDetail,
		OperationGameServerSetRollbackGameServerSet,
		OperationGameServerSetDeleteGameServerSetPods,
		OperationGameServerSetUpdateScaleStrategy,
		OperationGameServerSetUpdateUpgradeStrategy,
		OperationGameServerSetListGameServerSetControllerRevision,
	).Build()
}

func RegisterGameServerSetHTTPServer(s *http.Server, srv GameServerSetHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/gameserverset/list", _GameServerSet_ListGameServerSet0_HTTP_Handler(srv))
	r.POST("/api/v1/gameserverset/create_or_update_by_yaml", _GameServerSet_CreateOrUpdateGameServerSetByYaml0_HTTP_Handler(srv))
	r.POST("/api/v1/gameserverset/delete", _GameServerSet_DeleteGameServerSet0_HTTP_Handler(srv))
	r.POST("/api/v1/gameserverset/restart", _GameServerSet_RestartGameServerSet0_HTTP_Handler(srv))
	r.POST("/api/v1/gameserverset/scale", _GameServerSet_ScaleGameServerSet0_HTTP_Handler(srv))
	r.GET("/api/v1/gameserverset/detail", _GameServerSet_GetGameServerSetDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/gameserverset/rollback", _GameServerSet_RollbackGameServerSet0_HTTP_Handler(srv))
	r.POST("/api/v1/gameserverset/pod/delete", _GameServerSet_DeleteGameServerSetPods0_HTTP_Handler(srv))
	r.POST("/api/v1/gameserverset/scale_stream", _GameServerSet_UpdateScaleStrategy1_HTTP_Handler(srv))
	r.POST("/api/v1/gameserverset/upgrade_strategy/update", _GameServerSet_UpdateUpgradeStrategy1_HTTP_Handler(srv))
	r.GET("/api/v1/gameserverset/controller_reversion/list", _GameServerSet_ListGameServerSetControllerRevision0_HTTP_Handler(srv))
}

func GenerateGameServerSetHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 11)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/gameserverset/list",
		Comment: "查看-云原生管理-GameServerSet-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/gameserverset/create_or_update_by_yaml",
		Comment: "管理-云原生管理-GameServerSet-Yaml创建更新",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/gameserverset/delete",
		Comment: "管理-云原生管理-GameServerSet-删除",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/gameserverset/restart",
		Comment: "管理-云原生管理-GameServerSet-重启",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/gameserverset/scale",
		Comment: "管理-云原生管理-GameServerSet-伸缩",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/gameserverset/detail",
		Comment: "查看-云原生管理-GameServerSet-详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/gameserverset/rollback",
		Comment: "管理-云原生管理-GameServerSet-回滚",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/gameserverset/pod/delete",
		Comment: "管理-云原生管理-GameServerSet-删除Pod",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/gameserverset/scale_stream",
		Comment: "管理-云原生管理-GameServerSet-扩容策略",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/gameserverset/upgrade_strategy/update",
		Comment: "管理-云原生管理-GameServerSet-升级策略",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/gameserverset/controller_reversion/list",
		Comment: "查看-云原生管理-GameServerSet-历史版本",
	})
	return routes
}

func _GameServerSet_ListGameServerSet0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListGameServerSetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetListGameServerSet)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameServerSet(ctx, req.(*ListGameServerSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameServerSetResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_CreateOrUpdateGameServerSetByYaml0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdateGameServerSetByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetCreateOrUpdateGameServerSetByYaml)
		auditRule := audit.NewAudit(
			"gameserverset",
			"Yaml创建更新",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "gameserverset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdateGameServerSetByYaml(ctx, req.(*CreateOrUpdateGameServerSetByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdateGameServerSetByYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_DeleteGameServerSet0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteGameServerSetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetDeleteGameServerSet)
		auditRule := audit.NewAudit(
			"gameserverset",
			"Yaml创建更新",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "gameserverset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGameServerSet(ctx, req.(*DeleteGameServerSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGameServerSetResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_RestartGameServerSet0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in RestartGameServerSetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetRestartGameServerSet)
		auditRule := audit.NewAudit(
			"gameserverset",
			"重启",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "gameserverset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RestartGameServerSet(ctx, req.(*RestartGameServerSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RestartGameServerSetResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_ScaleGameServerSet0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ScaleGameServerSetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetScaleGameServerSet)
		auditRule := audit.NewAudit(
			"gameserverset",
			"伸缩",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "gameserverset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScaleGameServerSet(ctx, req.(*ScaleGameServerSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScaleGameServerSetResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_GetGameServerSetDetail0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GameServerSetDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetGetGameServerSetDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameServerSetDetail(ctx, req.(*GameServerSetDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GameServerSetDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_RollbackGameServerSet0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in RollbackGameServerSetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetRollbackGameServerSet)
		auditRule := audit.NewAudit(
			"gameserverset",
			"回滚",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "gameserverset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RollbackGameServerSet(ctx, req.(*RollbackGameServerSetRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RollbackGameServerSetResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_DeleteGameServerSetPods0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteGameServerSetPodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetDeleteGameServerSetPods)
		auditRule := audit.NewAudit(
			"gameserverset",
			"删除pod",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "gameserverset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGameServerSetPods(ctx, req.(*DeleteGameServerSetPodRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGameServerSetPodResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_UpdateScaleStrategy1_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateGameServerSetScaleStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetUpdateScaleStrategy)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateScaleStrategy(ctx, req.(*UpdateGameServerSetScaleStrategyRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGameServerSetScaleStrategyResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_UpdateUpgradeStrategy1_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateGameServerSetUpgradeStrategyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetUpdateUpgradeStrategy)
		auditRule := audit.NewAudit(
			"gameserverset",
			"编辑升级策略",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "gameserverset",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUpgradeStrategy(ctx, req.(*UpdateGameServerSetUpgradeStrategyRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGameServerSetUpgradeStrategyResponse)
		return ctx.Result(200, reply)
	}
}

func _GameServerSet_ListGameServerSetControllerRevision0_HTTP_Handler(srv GameServerSetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListGameServerSetReversionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameServerSetListGameServerSetControllerRevision)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGameServerSetControllerRevision(ctx, req.(*ListGameServerSetReversionRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameServerSetReversionResponse)
		return ctx.Result(200, reply)
	}
}

type GameServerSetHTTPClient interface {
	ListGameServerSet(ctx context.Context, req *ListGameServerSetRequest, opts ...http.CallOption) (rsp *ListGameServerSetResponse, err error)
	CreateOrUpdateGameServerSetByYaml(ctx context.Context, req *CreateOrUpdateGameServerSetByYamlRequest, opts ...http.CallOption) (rsp *CreateOrUpdateGameServerSetByYamlResponse, err error)
	DeleteGameServerSet(ctx context.Context, req *DeleteGameServerSetRequest, opts ...http.CallOption) (rsp *DeleteGameServerSetResponse, err error)
	RestartGameServerSet(ctx context.Context, req *RestartGameServerSetRequest, opts ...http.CallOption) (rsp *RestartGameServerSetResponse, err error)
	ScaleGameServerSet(ctx context.Context, req *ScaleGameServerSetRequest, opts ...http.CallOption) (rsp *ScaleGameServerSetResponse, err error)
	GetGameServerSetDetail(ctx context.Context, req *GameServerSetDetailRequest, opts ...http.CallOption) (rsp *GameServerSetDetailResponse, err error)
	RollbackGameServerSet(ctx context.Context, req *RollbackGameServerSetRequest, opts ...http.CallOption) (rsp *RollbackGameServerSetResponse, err error)
	DeleteGameServerSetPods(ctx context.Context, req *DeleteGameServerSetPodRequest, opts ...http.CallOption) (rsp *DeleteGameServerSetPodResponse, err error)
	UpdateScaleStrategy(ctx context.Context, req *UpdateGameServerSetScaleStrategyRequest, opts ...http.CallOption) (rsp *UpdateGameServerSetScaleStrategyResponse, err error)
	UpdateUpgradeStrategy(ctx context.Context, req *UpdateGameServerSetUpgradeStrategyRequest, opts ...http.CallOption) (rsp *UpdateGameServerSetUpgradeStrategyResponse, err error)
	ListGameServerSetControllerRevision(ctx context.Context, req *ListGameServerSetReversionRequest, opts ...http.CallOption) (rsp *ListGameServerSetReversionResponse, err error)
}

type GameServerSetHTTPClientImpl struct {
	cc *http.Client
}

func NewGameServerSetHTTPClient(client *http.Client) GameServerSetHTTPClient {
	return &GameServerSetHTTPClientImpl{client}
}

func (c *GameServerSetHTTPClientImpl) ListGameServerSet(ctx context.Context, in *ListGameServerSetRequest, opts ...http.CallOption) (*ListGameServerSetResponse, error) {
	var out ListGameServerSetResponse
	pattern := "/api/v1/gameserverset/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGameServerSetListGameServerSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) CreateOrUpdateGameServerSetByYaml(ctx context.Context, in *CreateOrUpdateGameServerSetByYamlRequest, opts ...http.CallOption) (*CreateOrUpdateGameServerSetByYamlResponse, error) {
	var out CreateOrUpdateGameServerSetByYamlResponse
	pattern := "/api/v1/gameserverset/create_or_update_by_yaml"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameServerSetCreateOrUpdateGameServerSetByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) DeleteGameServerSet(ctx context.Context, in *DeleteGameServerSetRequest, opts ...http.CallOption) (*DeleteGameServerSetResponse, error) {
	var out DeleteGameServerSetResponse
	pattern := "/api/v1/gameserverset/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameServerSetDeleteGameServerSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) RestartGameServerSet(ctx context.Context, in *RestartGameServerSetRequest, opts ...http.CallOption) (*RestartGameServerSetResponse, error) {
	var out RestartGameServerSetResponse
	pattern := "/api/v1/gameserverset/restart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameServerSetRestartGameServerSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) ScaleGameServerSet(ctx context.Context, in *ScaleGameServerSetRequest, opts ...http.CallOption) (*ScaleGameServerSetResponse, error) {
	var out ScaleGameServerSetResponse
	pattern := "/api/v1/gameserverset/scale"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameServerSetScaleGameServerSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) GetGameServerSetDetail(ctx context.Context, in *GameServerSetDetailRequest, opts ...http.CallOption) (*GameServerSetDetailResponse, error) {
	var out GameServerSetDetailResponse
	pattern := "/api/v1/gameserverset/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGameServerSetGetGameServerSetDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) RollbackGameServerSet(ctx context.Context, in *RollbackGameServerSetRequest, opts ...http.CallOption) (*RollbackGameServerSetResponse, error) {
	var out RollbackGameServerSetResponse
	pattern := "/api/v1/gameserverset/rollback"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameServerSetRollbackGameServerSet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) DeleteGameServerSetPods(ctx context.Context, in *DeleteGameServerSetPodRequest, opts ...http.CallOption) (*DeleteGameServerSetPodResponse, error) {
	var out DeleteGameServerSetPodResponse
	pattern := "/api/v1/gameserverset/pod/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameServerSetDeleteGameServerSetPods))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) UpdateScaleStrategy(ctx context.Context, in *UpdateGameServerSetScaleStrategyRequest, opts ...http.CallOption) (*UpdateGameServerSetScaleStrategyResponse, error) {
	var out UpdateGameServerSetScaleStrategyResponse
	pattern := "/api/v1/gameserverset/scale_stream"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameServerSetUpdateScaleStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) UpdateUpgradeStrategy(ctx context.Context, in *UpdateGameServerSetUpgradeStrategyRequest, opts ...http.CallOption) (*UpdateGameServerSetUpgradeStrategyResponse, error) {
	var out UpdateGameServerSetUpgradeStrategyResponse
	pattern := "/api/v1/gameserverset/upgrade_strategy/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameServerSetUpdateUpgradeStrategy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GameServerSetHTTPClientImpl) ListGameServerSetControllerRevision(ctx context.Context, in *ListGameServerSetReversionRequest, opts ...http.CallOption) (*ListGameServerSetReversionResponse, error) {
	var out ListGameServerSetReversionResponse
	pattern := "/api/v1/gameserverset/controller_reversion/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGameServerSetListGameServerSetControllerRevision))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
