// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/user.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserFollow_CreateUserFollow_FullMethodName = "/user.UserFollow/CreateUserFollow"
	UserFollow_DeleteUserFollow_FullMethodName = "/user.UserFollow/DeleteUserFollow"
	UserFollow_ListUserFollow_FullMethodName   = "/user.UserFollow/ListUserFollow"
)

// UserFollowClient is the client API for UserFollow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFollowClient interface {
	// 管理-云原生管理-我的关注
	CreateUserFollow(ctx context.Context, in *UserFollowRequest, opts ...grpc.CallOption) (*UserFollowResponse, error)
	// 管理-云原生管理-取消关注
	DeleteUserFollow(ctx context.Context, in *DeleteUserFollowRequest, opts ...grpc.CallOption) (*DeleteUserFollowResponse, error)
	// 查看-云原生管理-用户关注列表
	ListUserFollow(ctx context.Context, in *ListUserFollowRequest, opts ...grpc.CallOption) (*ListUserFollowResponse, error)
}

type userFollowClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFollowClient(cc grpc.ClientConnInterface) UserFollowClient {
	return &userFollowClient{cc}
}

func (c *userFollowClient) CreateUserFollow(ctx context.Context, in *UserFollowRequest, opts ...grpc.CallOption) (*UserFollowResponse, error) {
	out := new(UserFollowResponse)
	err := c.cc.Invoke(ctx, UserFollow_CreateUserFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowClient) DeleteUserFollow(ctx context.Context, in *DeleteUserFollowRequest, opts ...grpc.CallOption) (*DeleteUserFollowResponse, error) {
	out := new(DeleteUserFollowResponse)
	err := c.cc.Invoke(ctx, UserFollow_DeleteUserFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowClient) ListUserFollow(ctx context.Context, in *ListUserFollowRequest, opts ...grpc.CallOption) (*ListUserFollowResponse, error) {
	out := new(ListUserFollowResponse)
	err := c.cc.Invoke(ctx, UserFollow_ListUserFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFollowServer is the server API for UserFollow service.
// All implementations must embed UnimplementedUserFollowServer
// for forward compatibility
type UserFollowServer interface {
	// 管理-云原生管理-我的关注
	CreateUserFollow(context.Context, *UserFollowRequest) (*UserFollowResponse, error)
	// 管理-云原生管理-取消关注
	DeleteUserFollow(context.Context, *DeleteUserFollowRequest) (*DeleteUserFollowResponse, error)
	// 查看-云原生管理-用户关注列表
	ListUserFollow(context.Context, *ListUserFollowRequest) (*ListUserFollowResponse, error)
	mustEmbedUnimplementedUserFollowServer()
}

// UnimplementedUserFollowServer must be embedded to have forward compatible implementations.
type UnimplementedUserFollowServer struct {
}

func (UnimplementedUserFollowServer) CreateUserFollow(context.Context, *UserFollowRequest) (*UserFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFollow not implemented")
}
func (UnimplementedUserFollowServer) DeleteUserFollow(context.Context, *DeleteUserFollowRequest) (*DeleteUserFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFollow not implemented")
}
func (UnimplementedUserFollowServer) ListUserFollow(context.Context, *ListUserFollowRequest) (*ListUserFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserFollow not implemented")
}
func (UnimplementedUserFollowServer) mustEmbedUnimplementedUserFollowServer() {}

// UnsafeUserFollowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFollowServer will
// result in compilation errors.
type UnsafeUserFollowServer interface {
	mustEmbedUnimplementedUserFollowServer()
}

func RegisterUserFollowServer(s grpc.ServiceRegistrar, srv UserFollowServer) {
	s.RegisterService(&UserFollow_ServiceDesc, srv)
}

func _UserFollow_CreateUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServer).CreateUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollow_CreateUserFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServer).CreateUserFollow(ctx, req.(*UserFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollow_DeleteUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServer).DeleteUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollow_DeleteUserFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServer).DeleteUserFollow(ctx, req.(*DeleteUserFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollow_ListUserFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServer).ListUserFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollow_ListUserFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServer).ListUserFollow(ctx, req.(*ListUserFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFollow_ServiceDesc is the grpc.ServiceDesc for UserFollow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFollow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserFollow",
	HandlerType: (*UserFollowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserFollow",
			Handler:    _UserFollow_CreateUserFollow_Handler,
		},
		{
			MethodName: "DeleteUserFollow",
			Handler:    _UserFollow_DeleteUserFollow_Handler,
		},
		{
			MethodName: "ListUserFollow",
			Handler:    _UserFollow_ListUserFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/user.v1.proto",
}
