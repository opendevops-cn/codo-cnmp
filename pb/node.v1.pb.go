// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/node.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 节点状态
type NodeStatus int32

const (
	// 运行中
	NodeStatus_NodeReady NodeStatus = 0
	// 异常
	NodeStatus_NodeError NodeStatus = 1
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0: "NodeReady",
		1: "NodeError",
	}
	NodeStatus_value = map[string]int32{
		"NodeReady": 0,
		"NodeError": 1,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_node_v1_proto_enumTypes[0].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_pb_node_v1_proto_enumTypes[0]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{0}
}

type NodeHealthState int32

const (
	// 健康
	NodeHealthState_Healthy NodeHealthState = 0
	// 磁盘空间异常
	NodeHealthState_DiskPressure NodeHealthState = 1
	// 内存空间异常
	NodeHealthState_MemoryPressure NodeHealthState = 2
	// 进程异常
	NodeHealthState_PIDPressure NodeHealthState = 3
	// 网络异常
	NodeHealthState_NetworkUnavailable NodeHealthState = 4
	// 路由异常
	NodeHealthState_RouteUnavailable NodeHealthState = 5
	// Cpu使用过高
	NodeHealthState_CpuUsageHigh NodeHealthState = 6
	// 内存使用过高
	NodeHealthState_MemoryUsageHigh NodeHealthState = 7
)

// Enum value maps for NodeHealthState.
var (
	NodeHealthState_name = map[int32]string{
		0: "Healthy",
		1: "DiskPressure",
		2: "MemoryPressure",
		3: "PIDPressure",
		4: "NetworkUnavailable",
		5: "RouteUnavailable",
		6: "CpuUsageHigh",
		7: "MemoryUsageHigh",
	}
	NodeHealthState_value = map[string]int32{
		"Healthy":            0,
		"DiskPressure":       1,
		"MemoryPressure":     2,
		"PIDPressure":        3,
		"NetworkUnavailable": 4,
		"RouteUnavailable":   5,
		"CpuUsageHigh":       6,
		"MemoryUsageHigh":    7,
	}
)

func (x NodeHealthState) Enum() *NodeHealthState {
	p := new(NodeHealthState)
	*p = x
	return p
}

func (x NodeHealthState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeHealthState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_node_v1_proto_enumTypes[1].Descriptor()
}

func (NodeHealthState) Type() protoreflect.EnumType {
	return &file_pb_node_v1_proto_enumTypes[1]
}

func (x NodeHealthState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeHealthState.Descriptor instead.
func (NodeHealthState) EnumDescriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{1}
}

type NodeOperation int32

const (
	// 未知操作
	NodeOperation_UnknownOperation NodeOperation = 0
	// 封锁节点
	NodeOperation_NodeCordon NodeOperation = 1
	// 取消封锁节点
	NodeOperation_NodeUncordon NodeOperation = 2
	// 驱逐节点
	NodeOperation_NodeDrain NodeOperation = 3
	// 取消驱逐节点
	NodeOperation_NodeUndrain NodeOperation = 4
)

// Enum value maps for NodeOperation.
var (
	NodeOperation_name = map[int32]string{
		0: "UnknownOperation",
		1: "NodeCordon",
		2: "NodeUncordon",
		3: "NodeDrain",
		4: "NodeUndrain",
	}
	NodeOperation_value = map[string]int32{
		"UnknownOperation": 0,
		"NodeCordon":       1,
		"NodeUncordon":     2,
		"NodeDrain":        3,
		"NodeUndrain":      4,
	}
)

func (x NodeOperation) Enum() *NodeOperation {
	p := new(NodeOperation)
	*p = x
	return p
}

func (x NodeOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_node_v1_proto_enumTypes[2].Descriptor()
}

func (NodeOperation) Type() protoreflect.EnumType {
	return &file_pb_node_v1_proto_enumTypes[2]
}

func (x NodeOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeOperation.Descriptor instead.
func (NodeOperation) EnumDescriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{2}
}

// 查询节点列表请求
type ListNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,proto3" json:"cluster_name,optional"`
	// 关键字
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,5,opt,name=list_all,proto3" json:"list_all,optional"`
}

func (x *ListNodeRequest) Reset() {
	*x = ListNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeRequest) ProtoMessage() {}

func (x *ListNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeRequest.ProtoReflect.Descriptor instead.
func (*ListNodeRequest) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListNodeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListNodeRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListNodeRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListNodeRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNodeRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

type ResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 内存总量
	NodeMemoryTotal float32 `protobuf:"fixed32,1,opt,name=node_memory_total,proto3" json:"node_memory_total,optional"`
	// 内存使用量
	NodeMemoryUsage float32 `protobuf:"fixed32,2,opt,name=node_memory_usage,json=node_memory_used,proto3" json:"node_memory_usage,optional"`
	// CPU总量
	NodeCpuTotal float32 `protobuf:"fixed32,3,opt,name=node_cpu_total,proto3" json:"node_cpu_total,optional"`
	// CPU使用量
	NodeCpuUsage float32 `protobuf:"fixed32,4,opt,name=node_cpu_usage,json=node_cpu_used,proto3" json:"node_cpu_usage,optional"`
	// Pod总量
	PodTotal uint32 `protobuf:"varint,5,opt,name=pod_total,proto3" json:"pod_total,optional"`
	// Pod使用量
	PodUsage uint32 `protobuf:"varint,6,opt,name=pod_usage,json=pod_used,proto3" json:"pod_usage,optional"`
	// requestsCpu总量
	RequestsCpuTotal float32 `protobuf:"fixed32,7,opt,name=requests_cpu_total,proto3" json:"requests_cpu_total,optional"`
	// requestsCpu使用量
	RequestsCpuUsage float32 `protobuf:"fixed32,8,opt,name=requests_cpu_usage,json=requests_cpu_used,proto3" json:"requests_cpu_usage,optional"`
	// requestsMemory总量
	RequestsMemoryTotal float32 `protobuf:"fixed32,9,opt,name=requests_memory_total,proto3" json:"requests_memory_total,optional"`
	// requestsMemory使用量
	RequestsMemoryUsage float32 `protobuf:"fixed32,10,opt,name=requests_memory_usage,json=requests_memory_used,proto3" json:"requests_memory_usage,optional"`
	// limitsCpu总量
	LimitsCpuTotal float32 `protobuf:"fixed32,11,opt,name=limits_cpu_total,proto3" json:"limits_cpu_total,optional"`
	// limitsCpu使用量
	LimitsCpuUsage float32 `protobuf:"fixed32,12,opt,name=limits_cpu_usage,json=limits_cpu_used,proto3" json:"limits_cpu_usage,optional"`
	// limitsMemory总量
	LimitsMemoryTotal float32 `protobuf:"fixed32,13,opt,name=limits_memory_total,proto3" json:"limits_memory_total,optional"`
	// limitsMemory使用量
	LimitsMemoryUsage float32 `protobuf:"fixed32,14,opt,name=limits_memory_usage,json=limits_memory_used,proto3" json:"limits_memory_usage,optional"`
	// 节点内存可分配
	NodeAllocatableMemory float32 `protobuf:"fixed32,15,opt,name=node_allocatable_memory,json=allocatable_memory,proto3" json:"node_allocatable_memory,optional"`
	// 节点CPU可分配
	NodeAllocatableCpu float32 `protobuf:"fixed32,16,opt,name=node_allocatable_cpu,json=allocatable_cpu,proto3" json:"node_allocatable_cpu,optional"`
}

func (x *ResourceUsage) Reset() {
	*x = ResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsage) ProtoMessage() {}

func (x *ResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsage.ProtoReflect.Descriptor instead.
func (*ResourceUsage) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceUsage) GetNodeMemoryTotal() float32 {
	if x != nil {
		return x.NodeMemoryTotal
	}
	return 0
}

func (x *ResourceUsage) GetNodeMemoryUsage() float32 {
	if x != nil {
		return x.NodeMemoryUsage
	}
	return 0
}

func (x *ResourceUsage) GetNodeCpuTotal() float32 {
	if x != nil {
		return x.NodeCpuTotal
	}
	return 0
}

func (x *ResourceUsage) GetNodeCpuUsage() float32 {
	if x != nil {
		return x.NodeCpuUsage
	}
	return 0
}

func (x *ResourceUsage) GetPodTotal() uint32 {
	if x != nil {
		return x.PodTotal
	}
	return 0
}

func (x *ResourceUsage) GetPodUsage() uint32 {
	if x != nil {
		return x.PodUsage
	}
	return 0
}

func (x *ResourceUsage) GetRequestsCpuTotal() float32 {
	if x != nil {
		return x.RequestsCpuTotal
	}
	return 0
}

func (x *ResourceUsage) GetRequestsCpuUsage() float32 {
	if x != nil {
		return x.RequestsCpuUsage
	}
	return 0
}

func (x *ResourceUsage) GetRequestsMemoryTotal() float32 {
	if x != nil {
		return x.RequestsMemoryTotal
	}
	return 0
}

func (x *ResourceUsage) GetRequestsMemoryUsage() float32 {
	if x != nil {
		return x.RequestsMemoryUsage
	}
	return 0
}

func (x *ResourceUsage) GetLimitsCpuTotal() float32 {
	if x != nil {
		return x.LimitsCpuTotal
	}
	return 0
}

func (x *ResourceUsage) GetLimitsCpuUsage() float32 {
	if x != nil {
		return x.LimitsCpuUsage
	}
	return 0
}

func (x *ResourceUsage) GetLimitsMemoryTotal() float32 {
	if x != nil {
		return x.LimitsMemoryTotal
	}
	return 0
}

func (x *ResourceUsage) GetLimitsMemoryUsage() float32 {
	if x != nil {
		return x.LimitsMemoryUsage
	}
	return 0
}

func (x *ResourceUsage) GetNodeAllocatableMemory() float32 {
	if x != nil {
		return x.NodeAllocatableMemory
	}
	return 0
}

func (x *ResourceUsage) GetNodeAllocatableCpu() float32 {
	if x != nil {
		return x.NodeAllocatableCpu
	}
	return 0
}

// 节点
type NodeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 节点状态
	State NodeStatus `protobuf:"varint,2,opt,name=state,proto3,enum=node.NodeStatus" json:"state,optional"`
	// 健康检查
	HealthState []NodeHealthState `protobuf:"varint,3,rep,packed,name=health_state,proto3,enum=node.NodeHealthState" json:"health_state,optional"`
	// 角色
	Roles []string `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,optional"`
	// IP地址
	InternalIp string `protobuf:"bytes,5,opt,name=internal_ip,proto3" json:"internal_ip,optional"`
	// 节点版本
	KubeletVersion string `protobuf:"bytes,6,opt,name=kubelet_version,proto3" json:"kubelet_version,optional"`
	// 系统镜像
	OsImage string `protobuf:"bytes,7,opt,name=os_image,proto3" json:"os_image,optional"`
	// 容器引擎
	ContainerRuntimeVersion string `protobuf:"bytes,8,opt,name=container_runtime_version,proto3" json:"container_runtime_version,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,9,opt,name=create_time,proto3" json:"create_time,optional"`
	// UID
	Uid string `protobuf:"bytes,10,opt,name=uid,proto3" json:"uid,optional"`
	// 是否封锁
	Unschedulable bool `protobuf:"varint,11,opt,name=unschedulable,proto3" json:"unschedulable,optional"`
	// deprecated 使用 resource_usage 替代, pod总数
	PodTotal uint32 `protobuf:"varint,12,opt,name=pod_total,proto3" json:"pod_total,optional"`
	// deprecated 使用 resource_usage 替代, pod已使用
	PodUsage uint32 `protobuf:"varint,13,opt,name=pod_usage,json=pod_used,proto3" json:"pod_usage,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,14,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
	// 操作系统
	OperatingSystem string `protobuf:"bytes,15,opt,name=operating_system,proto3" json:"operating_system,optional"`
	// 资源使用情况
	ResourceUsage *ResourceUsage `protobuf:"bytes,21,opt,name=resource_usage,proto3" json:"resource_usage,optional"`
}

func (x *NodeItem) Reset() {
	*x = NodeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeItem) ProtoMessage() {}

func (x *NodeItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeItem.ProtoReflect.Descriptor instead.
func (*NodeItem) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{2}
}

func (x *NodeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeItem) GetState() NodeStatus {
	if x != nil {
		return x.State
	}
	return NodeStatus_NodeReady
}

func (x *NodeItem) GetHealthState() []NodeHealthState {
	if x != nil {
		return x.HealthState
	}
	return nil
}

func (x *NodeItem) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *NodeItem) GetInternalIp() string {
	if x != nil {
		return x.InternalIp
	}
	return ""
}

func (x *NodeItem) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *NodeItem) GetOsImage() string {
	if x != nil {
		return x.OsImage
	}
	return ""
}

func (x *NodeItem) GetContainerRuntimeVersion() string {
	if x != nil {
		return x.ContainerRuntimeVersion
	}
	return ""
}

func (x *NodeItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *NodeItem) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NodeItem) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

func (x *NodeItem) GetPodTotal() uint32 {
	if x != nil {
		return x.PodTotal
	}
	return 0
}

func (x *NodeItem) GetPodUsage() uint32 {
	if x != nil {
		return x.PodUsage
	}
	return 0
}

func (x *NodeItem) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

func (x *NodeItem) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *NodeItem) GetResourceUsage() *ResourceUsage {
	if x != nil {
		return x.ResourceUsage
	}
	return nil
}

// 节点列表
type ListNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*NodeItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,optional"`
	// 总数
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,optional"`
}

func (x *ListNodeResponse) Reset() {
	*x = ListNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeResponse) ProtoMessage() {}

func (x *ListNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeResponse.ProtoReflect.Descriptor instead.
func (*ListNodeResponse) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{3}
}

func (x *ListNodeResponse) GetList() []*NodeItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListNodeResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 标签
type Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Labels) Reset() {
	*x = Labels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Labels) ProtoMessage() {}

func (x *Labels) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Labels.ProtoReflect.Descriptor instead.
func (*Labels) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{4}
}

func (x *Labels) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// 注解
type Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations map[string]string `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Annotations) Reset() {
	*x = Annotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotations) ProtoMessage() {}

func (x *Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotations.ProtoReflect.Descriptor instead.
func (*Annotations) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{5}
}

func (x *Annotations) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// 查询节点列表请求
type GetNodeDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,proto3" json:"cluster_name,optional"`
	// 节点名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
}

func (x *GetNodeDetailRequest) Reset() {
	*x = GetNodeDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeDetailRequest) ProtoMessage() {}

func (x *GetNodeDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeDetailRequest.ProtoReflect.Descriptor instead.
func (*GetNodeDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{6}
}

func (x *GetNodeDetailRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetNodeDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NodeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	Status             string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,optional"`
	LastTransitionTime uint64 `protobuf:"varint,3,opt,name=last_transition_time,proto3" json:"last_transition_time,optional"`
	LastHeartbeatTime  uint64 `protobuf:"varint,4,opt,name=last_heartbeat_time,proto3" json:"last_heartbeat_time,optional"`
	Reason             string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,optional"`
	Message            string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,optional"`
}

func (x *NodeCondition) Reset() {
	*x = NodeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCondition) ProtoMessage() {}

func (x *NodeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCondition.ProtoReflect.Descriptor instead.
func (*NodeCondition) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{7}
}

func (x *NodeCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NodeCondition) GetLastTransitionTime() uint64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *NodeCondition) GetLastHeartbeatTime() uint64 {
	if x != nil {
		return x.LastHeartbeatTime
	}
	return 0
}

func (x *NodeCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *NodeCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询节点详情响应
type GetNodeDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 污点
	Taints []*v1.Taint `protobuf:"bytes,1,rep,name=taints,proto3" json:"taints,optional"`
	// 标签
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注解
	Annotations map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Pods
	Pods []*v1.Pod `protobuf:"bytes,4,rep,name=pods,proto3" json:"pods,optional"`
	// yaml
	Yaml string `protobuf:"bytes,5,opt,name=yaml,proto3" json:"yaml,optional"`
	// 节点信息
	NodeItem *NodeItem `protobuf:"bytes,6,opt,name=node_item,proto3" json:"node_item,optional"`
	// 系统信息，包含节点的硬件和操作系统信息
	SystemInfo *v1.NodeSystemInfo `protobuf:"bytes,7,opt,name=system_info,proto3" json:"system_info,optional"`
	// 资源使用情况
	ResourceUsage *ResourceUsage `protobuf:"bytes,8,opt,name=resource_usage,proto3" json:"resource_usage,optional"`
	// 健康检查
	NodeCondition []*NodeCondition `protobuf:"bytes,9,rep,name=node_condition,proto3" json:"node_condition,optional"`
	// 是否封锁
	Unschedulable bool `protobuf:"varint,10,opt,name=unschedulable,proto3" json:"unschedulable,optional"`
}

func (x *GetNodeDetailResponse) Reset() {
	*x = GetNodeDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeDetailResponse) ProtoMessage() {}

func (x *GetNodeDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeDetailResponse.ProtoReflect.Descriptor instead.
func (*GetNodeDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{8}
}

func (x *GetNodeDetailResponse) GetTaints() []*v1.Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

func (x *GetNodeDetailResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetNodeDetailResponse) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *GetNodeDetailResponse) GetPods() []*v1.Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *GetNodeDetailResponse) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *GetNodeDetailResponse) GetNodeItem() *NodeItem {
	if x != nil {
		return x.NodeItem
	}
	return nil
}

func (x *GetNodeDetailResponse) GetSystemInfo() *v1.NodeSystemInfo {
	if x != nil {
		return x.SystemInfo
	}
	return nil
}

func (x *GetNodeDetailResponse) GetResourceUsage() *ResourceUsage {
	if x != nil {
		return x.ResourceUsage
	}
	return nil
}

func (x *GetNodeDetailResponse) GetNodeCondition() []*NodeCondition {
	if x != nil {
		return x.NodeCondition
	}
	return nil
}

func (x *GetNodeDetailResponse) GetUnschedulable() bool {
	if x != nil {
		return x.Unschedulable
	}
	return false
}

// 更新节点请求
type UpdateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,proto3" json:"cluster_name,optional"`
	// 节点名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 标签
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 注解
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 污点
	Taints []*v1.Taint `protobuf:"bytes,5,rep,name=taints,proto3" json:"taints,optional"`
}

func (x *UpdateNodeRequest) Reset() {
	*x = UpdateNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRequest) ProtoMessage() {}

func (x *UpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateNodeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateNodeRequest) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateNodeRequest) GetTaints() []*v1.Taint {
	if x != nil {
		return x.Taints
	}
	return nil
}

// 更新节点响应
type UpdateNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateNodeResponse) Reset() {
	*x = UpdateNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeResponse) ProtoMessage() {}

func (x *UpdateNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{10}
}

// 创建或者更新节点请求
type CreateOrUpdateNodeByYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,proto3" json:"cluster_name,optional"`
	// Yaml
	Yaml string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *CreateOrUpdateNodeByYamlRequest) Reset() {
	*x = CreateOrUpdateNodeByYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateNodeByYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateNodeByYamlRequest) ProtoMessage() {}

func (x *CreateOrUpdateNodeByYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateNodeByYamlRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateNodeByYamlRequest) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{11}
}

func (x *CreateOrUpdateNodeByYamlRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateOrUpdateNodeByYamlRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

// 根据Yaml创建或者更新节点响应
type CreateOrUpdateNodeByYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrUpdateNodeByYamlResponse) Reset() {
	*x = CreateOrUpdateNodeByYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateNodeByYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateNodeByYamlResponse) ProtoMessage() {}

func (x *CreateOrUpdateNodeByYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateNodeByYamlResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateNodeByYamlResponse) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{12}
}

type HandleNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,proto3" json:"cluster_name,optional"`
	// 节点名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 操作类型
	Operation NodeOperation `protobuf:"varint,3,opt,name=operation,proto3,enum=node.NodeOperation" json:"operation,optional"`
}

func (x *HandleNodeRequest) Reset() {
	*x = HandleNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleNodeRequest) ProtoMessage() {}

func (x *HandleNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleNodeRequest.ProtoReflect.Descriptor instead.
func (*HandleNodeRequest) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{13}
}

func (x *HandleNodeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *HandleNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HandleNodeRequest) GetOperation() NodeOperation {
	if x != nil {
		return x.Operation
	}
	return NodeOperation_UnknownOperation
}

type HandleNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,optional"`
}

func (x *HandleNodeResponse) Reset() {
	*x = HandleNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleNodeResponse) ProtoMessage() {}

func (x *HandleNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleNodeResponse.ProtoReflect.Descriptor instead.
func (*HandleNodeResponse) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{14}
}

func (x *HandleNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CheckEvictionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 准备驱逐的Pod数量
	ReadyToEvictPodsCount uint32 `protobuf:"varint,1,opt,name=ready_to_evict_pods_count,proto3" json:"ready_to_evict_pods_count,optional"`
	// 忽略驱逐的Pod数量
	IgnoreEvictPodsCount uint32 `protobuf:"varint,2,opt,name=ignore_evict_pods_count,proto3" json:"ignore_evict_pods_count,optional"`
}

func (x *CheckEvictionItem) Reset() {
	*x = CheckEvictionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEvictionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEvictionItem) ProtoMessage() {}

func (x *CheckEvictionItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEvictionItem.ProtoReflect.Descriptor instead.
func (*CheckEvictionItem) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{15}
}

func (x *CheckEvictionItem) GetReadyToEvictPodsCount() uint32 {
	if x != nil {
		return x.ReadyToEvictPodsCount
	}
	return 0
}

func (x *CheckEvictionItem) GetIgnoreEvictPodsCount() uint32 {
	if x != nil {
		return x.IgnoreEvictPodsCount
	}
	return 0
}

type CheckEvictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,proto3" json:"cluster_name,optional"`
	// 节点名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
}

func (x *CheckEvictionRequest) Reset() {
	*x = CheckEvictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEvictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEvictionRequest) ProtoMessage() {}

func (x *CheckEvictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEvictionRequest.ProtoReflect.Descriptor instead.
func (*CheckEvictionRequest) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{16}
}

func (x *CheckEvictionRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CheckEvictionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CheckEvictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *CheckEvictionItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *CheckEvictionResponse) Reset() {
	*x = CheckEvictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_node_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEvictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEvictionResponse) ProtoMessage() {}

func (x *CheckEvictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_node_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEvictionResponse.ProtoReflect.Descriptor instead.
func (*CheckEvictionResponse) Descriptor() ([]byte, []int) {
	return file_pb_node_v1_proto_rawDescGZIP(), []int{17}
}

func (x *CheckEvictionResponse) GetDetail() *CheckEvictionItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

var File_pb_node_v1_proto protoreflect.FileDescriptor

var file_pb_node_v1_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x62, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6b, 0x38, 0x73,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64,
	0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0xac, 0x06, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x11, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x0e,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x70, 0x75,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70,
	0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x32, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38,
	0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x10, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x13, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x13, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x32, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x70, 0x75, 0x22, 0xb3, 0x05, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x12, 0x2d, 0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x41, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d,
	0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a,
	0x09, 0x70, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x73,
	0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x2f, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x7a, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98,
	0x01, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x05, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x79, 0x61, 0x6d,
	0x6c, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x40, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0d, 0x75, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x03, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x64, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x06,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x77, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x08, 0x72, 0x06, 0x10, 0x01, 0x18,
	0xa0, 0x8d, 0x06, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42,
	0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01,
	0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x95, 0x01, 0x0a,
	0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x41, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65,
	0x76, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x19, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f,
	0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64,
	0x52, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x4d, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2a,
	0x2a, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x2a, 0xaa, 0x01, 0x0a, 0x0f,
	0x4e, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x69, 0x73, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x49, 0x44, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x67, 0x68, 0x10, 0x07, 0x2a, 0x67, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x6f, 0x6e, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x10,
	0x04, 0x32, 0xe2, 0x07, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x20, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0xca, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x60,
	0x0a, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x12, 0x0c,
	0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x1a, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x1a, 0x00, 0x1a, 0x0c, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xfc,
	0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x25, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x59, 0x61,
	0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0xc2, 0xdb, 0xaa,
	0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x5e, 0x0a, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7,
	0xae, 0xa1, 0xe7, 0x90, 0x86, 0x12, 0x0a, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0x59, 0x41, 0x4d,
	0x4c, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x00, 0x1a, 0x0c, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x1a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a,
	0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x2f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0xd2, 0x01, 0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x68,
	0x0a, 0x0c, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x12, 0x14,
	0xe9, 0xa9, 0xb1, 0xe9, 0x80, 0x90, 0x2f, 0xe5, 0xb0, 0x81, 0xe9, 0x94, 0x81, 0x2f, 0xe8, 0xa7,
	0xa3, 0xe5, 0xb0, 0x81, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x00, 0x1a, 0x0c, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01,
	0x2a, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x63,
	0x6e, 0x6d, 0x70, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pb_node_v1_proto_rawDescOnce sync.Once
	file_pb_node_v1_proto_rawDescData = file_pb_node_v1_proto_rawDesc
)

func file_pb_node_v1_proto_rawDescGZIP() []byte {
	file_pb_node_v1_proto_rawDescOnce.Do(func() {
		file_pb_node_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_node_v1_proto_rawDescData)
	})
	return file_pb_node_v1_proto_rawDescData
}

var file_pb_node_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pb_node_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_pb_node_v1_proto_goTypes = []interface{}{
	(NodeStatus)(0),                          // 0: node.NodeStatus
	(NodeHealthState)(0),                     // 1: node.NodeHealthState
	(NodeOperation)(0),                       // 2: node.NodeOperation
	(*ListNodeRequest)(nil),                  // 3: node.ListNodeRequest
	(*ResourceUsage)(nil),                    // 4: node.ResourceUsage
	(*NodeItem)(nil),                         // 5: node.NodeItem
	(*ListNodeResponse)(nil),                 // 6: node.ListNodeResponse
	(*Labels)(nil),                           // 7: node.Labels
	(*Annotations)(nil),                      // 8: node.Annotations
	(*GetNodeDetailRequest)(nil),             // 9: node.GetNodeDetailRequest
	(*NodeCondition)(nil),                    // 10: node.NodeCondition
	(*GetNodeDetailResponse)(nil),            // 11: node.GetNodeDetailResponse
	(*UpdateNodeRequest)(nil),                // 12: node.UpdateNodeRequest
	(*UpdateNodeResponse)(nil),               // 13: node.UpdateNodeResponse
	(*CreateOrUpdateNodeByYamlRequest)(nil),  // 14: node.CreateOrUpdateNodeByYamlRequest
	(*CreateOrUpdateNodeByYamlResponse)(nil), // 15: node.CreateOrUpdateNodeByYamlResponse
	(*HandleNodeRequest)(nil),                // 16: node.HandleNodeRequest
	(*HandleNodeResponse)(nil),               // 17: node.HandleNodeResponse
	(*CheckEvictionItem)(nil),                // 18: node.CheckEvictionItem
	(*CheckEvictionRequest)(nil),             // 19: node.CheckEvictionRequest
	(*CheckEvictionResponse)(nil),            // 20: node.CheckEvictionResponse
	nil,                                      // 21: node.Labels.LabelsEntry
	nil,                                      // 22: node.Annotations.AnnotationsEntry
	nil,                                      // 23: node.GetNodeDetailResponse.LabelsEntry
	nil,                                      // 24: node.GetNodeDetailResponse.AnnotationsEntry
	nil,                                      // 25: node.UpdateNodeRequest.LabelsEntry
	nil,                                      // 26: node.UpdateNodeRequest.AnnotationsEntry
	(*v1.Taint)(nil),                         // 27: k8s.io.api.core.v1.Taint
	(*v1.Pod)(nil),                           // 28: k8s.io.api.core.v1.Pod
	(*v1.NodeSystemInfo)(nil),                // 29: k8s.io.api.core.v1.NodeSystemInfo
}
var file_pb_node_v1_proto_depIdxs = []int32{
	0,  // 0: node.NodeItem.state:type_name -> node.NodeStatus
	1,  // 1: node.NodeItem.health_state:type_name -> node.NodeHealthState
	4,  // 2: node.NodeItem.resource_usage:type_name -> node.ResourceUsage
	5,  // 3: node.ListNodeResponse.list:type_name -> node.NodeItem
	21, // 4: node.Labels.labels:type_name -> node.Labels.LabelsEntry
	22, // 5: node.Annotations.annotations:type_name -> node.Annotations.AnnotationsEntry
	27, // 6: node.GetNodeDetailResponse.taints:type_name -> k8s.io.api.core.v1.Taint
	23, // 7: node.GetNodeDetailResponse.labels:type_name -> node.GetNodeDetailResponse.LabelsEntry
	24, // 8: node.GetNodeDetailResponse.annotations:type_name -> node.GetNodeDetailResponse.AnnotationsEntry
	28, // 9: node.GetNodeDetailResponse.pods:type_name -> k8s.io.api.core.v1.Pod
	5,  // 10: node.GetNodeDetailResponse.node_item:type_name -> node.NodeItem
	29, // 11: node.GetNodeDetailResponse.system_info:type_name -> k8s.io.api.core.v1.NodeSystemInfo
	4,  // 12: node.GetNodeDetailResponse.resource_usage:type_name -> node.ResourceUsage
	10, // 13: node.GetNodeDetailResponse.node_condition:type_name -> node.NodeCondition
	25, // 14: node.UpdateNodeRequest.labels:type_name -> node.UpdateNodeRequest.LabelsEntry
	26, // 15: node.UpdateNodeRequest.annotations:type_name -> node.UpdateNodeRequest.AnnotationsEntry
	27, // 16: node.UpdateNodeRequest.taints:type_name -> k8s.io.api.core.v1.Taint
	2,  // 17: node.HandleNodeRequest.operation:type_name -> node.NodeOperation
	18, // 18: node.CheckEvictionResponse.detail:type_name -> node.CheckEvictionItem
	3,  // 19: node.Node.ListNode:input_type -> node.ListNodeRequest
	9,  // 20: node.Node.GetNodeDetail:input_type -> node.GetNodeDetailRequest
	12, // 21: node.Node.UpdateNode:input_type -> node.UpdateNodeRequest
	14, // 22: node.Node.CreateOrUpdateNodeByYaml:input_type -> node.CreateOrUpdateNodeByYamlRequest
	19, // 23: node.Node.CheckEviction:input_type -> node.CheckEvictionRequest
	16, // 24: node.Node.HandleNode:input_type -> node.HandleNodeRequest
	6,  // 25: node.Node.ListNode:output_type -> node.ListNodeResponse
	11, // 26: node.Node.GetNodeDetail:output_type -> node.GetNodeDetailResponse
	13, // 27: node.Node.UpdateNode:output_type -> node.UpdateNodeResponse
	15, // 28: node.Node.CreateOrUpdateNodeByYaml:output_type -> node.CreateOrUpdateNodeByYamlResponse
	20, // 29: node.Node.CheckEviction:output_type -> node.CheckEvictionResponse
	17, // 30: node.Node.HandleNode:output_type -> node.HandleNodeResponse
	25, // [25:31] is the sub-list for method output_type
	19, // [19:25] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_pb_node_v1_proto_init() }
func file_pb_node_v1_proto_init() {
	if File_pb_node_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_node_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Labels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateNodeByYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateNodeByYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEvictionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEvictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_node_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEvictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_node_v1_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_node_v1_proto_goTypes,
		DependencyIndexes: file_pb_node_v1_proto_depIdxs,
		EnumInfos:         file_pb_node_v1_proto_enumTypes,
		MessageInfos:      file_pb_node_v1_proto_msgTypes,
	}.Build()
	File_pb_node_v1_proto = out.File
	file_pb_node_v1_proto_rawDesc = nil
	file_pb_node_v1_proto_goTypes = nil
	file_pb_node_v1_proto_depIdxs = nil
}
