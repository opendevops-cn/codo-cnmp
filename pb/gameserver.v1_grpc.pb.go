// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/gameserver.v1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GameServer_ListGameServer_FullMethodName              = "/gameserver.v1.GameServer/ListGameServer"
	GameServer_ListGameServerType_FullMethodName          = "/gameserver.v1.GameServer/ListGameServerType"
	GameServer_ManageGameServerEntity_FullMethodName      = "/gameserver.v1.GameServer/ManageGameServerEntity"
	GameServer_ManageGameServerLB_FullMethodName          = "/gameserver.v1.GameServer/ManageGameServerLB"
	GameServer_BatchManageGameServerEntity_FullMethodName = "/gameserver.v1.GameServer/BatchManageGameServerEntity"
	GameServer_BatchManageGameServerLB_FullMethodName     = "/gameserver.v1.GameServer/BatchManageGameServerLB"
)

// GameServerClient is the client API for GameServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerClient interface {
	// 查看-云原生管理-游戏进程-列表
	ListGameServer(ctx context.Context, in *ListGameServerRequest, opts ...grpc.CallOption) (*ListGameServerResponse, error)
	// 查看-云原生管理-游戏进程-进程类型
	ListGameServerType(ctx context.Context, in *ListGameServerTypeRequest, opts ...grpc.CallOption) (*ListGameServerTypeResponse, error)
	// 管理-云原生管理-游戏进程-Entity
	ManageGameServerEntity(ctx context.Context, in *ManageGameServerEntityRequest, opts ...grpc.CallOption) (*ManageGameServerEntityResponse, error)
	// 管理-云原生管理-游戏进程-LB
	ManageGameServerLB(ctx context.Context, in *ManageGameServerEntityRequest, opts ...grpc.CallOption) (*ManageGameServerEntityResponse, error)
	// 管理-云原生管理-游戏进程-批量管理
	BatchManageGameServerEntity(ctx context.Context, in *BatchManageGameServerEntityRequest, opts ...grpc.CallOption) (*BatchManageGameServerEntityResponse, error)
	// 管理-云原生管理-LB-批量管理
	BatchManageGameServerLB(ctx context.Context, in *BatchManageGameServerEntityRequest, opts ...grpc.CallOption) (*BatchManageGameServerEntityResponse, error)
}

type gameServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerClient(cc grpc.ClientConnInterface) GameServerClient {
	return &gameServerClient{cc}
}

func (c *gameServerClient) ListGameServer(ctx context.Context, in *ListGameServerRequest, opts ...grpc.CallOption) (*ListGameServerResponse, error) {
	out := new(ListGameServerResponse)
	err := c.cc.Invoke(ctx, GameServer_ListGameServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) ListGameServerType(ctx context.Context, in *ListGameServerTypeRequest, opts ...grpc.CallOption) (*ListGameServerTypeResponse, error) {
	out := new(ListGameServerTypeResponse)
	err := c.cc.Invoke(ctx, GameServer_ListGameServerType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) ManageGameServerEntity(ctx context.Context, in *ManageGameServerEntityRequest, opts ...grpc.CallOption) (*ManageGameServerEntityResponse, error) {
	out := new(ManageGameServerEntityResponse)
	err := c.cc.Invoke(ctx, GameServer_ManageGameServerEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) ManageGameServerLB(ctx context.Context, in *ManageGameServerEntityRequest, opts ...grpc.CallOption) (*ManageGameServerEntityResponse, error) {
	out := new(ManageGameServerEntityResponse)
	err := c.cc.Invoke(ctx, GameServer_ManageGameServerLB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) BatchManageGameServerEntity(ctx context.Context, in *BatchManageGameServerEntityRequest, opts ...grpc.CallOption) (*BatchManageGameServerEntityResponse, error) {
	out := new(BatchManageGameServerEntityResponse)
	err := c.cc.Invoke(ctx, GameServer_BatchManageGameServerEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerClient) BatchManageGameServerLB(ctx context.Context, in *BatchManageGameServerEntityRequest, opts ...grpc.CallOption) (*BatchManageGameServerEntityResponse, error) {
	out := new(BatchManageGameServerEntityResponse)
	err := c.cc.Invoke(ctx, GameServer_BatchManageGameServerLB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerServer is the server API for GameServer service.
// All implementations must embed UnimplementedGameServerServer
// for forward compatibility
type GameServerServer interface {
	// 查看-云原生管理-游戏进程-列表
	ListGameServer(context.Context, *ListGameServerRequest) (*ListGameServerResponse, error)
	// 查看-云原生管理-游戏进程-进程类型
	ListGameServerType(context.Context, *ListGameServerTypeRequest) (*ListGameServerTypeResponse, error)
	// 管理-云原生管理-游戏进程-Entity
	ManageGameServerEntity(context.Context, *ManageGameServerEntityRequest) (*ManageGameServerEntityResponse, error)
	// 管理-云原生管理-游戏进程-LB
	ManageGameServerLB(context.Context, *ManageGameServerEntityRequest) (*ManageGameServerEntityResponse, error)
	// 管理-云原生管理-游戏进程-批量管理
	BatchManageGameServerEntity(context.Context, *BatchManageGameServerEntityRequest) (*BatchManageGameServerEntityResponse, error)
	// 管理-云原生管理-LB-批量管理
	BatchManageGameServerLB(context.Context, *BatchManageGameServerEntityRequest) (*BatchManageGameServerEntityResponse, error)
	mustEmbedUnimplementedGameServerServer()
}

// UnimplementedGameServerServer must be embedded to have forward compatible implementations.
type UnimplementedGameServerServer struct {
}

func (UnimplementedGameServerServer) ListGameServer(context.Context, *ListGameServerRequest) (*ListGameServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameServer not implemented")
}
func (UnimplementedGameServerServer) ListGameServerType(context.Context, *ListGameServerTypeRequest) (*ListGameServerTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameServerType not implemented")
}
func (UnimplementedGameServerServer) ManageGameServerEntity(context.Context, *ManageGameServerEntityRequest) (*ManageGameServerEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageGameServerEntity not implemented")
}
func (UnimplementedGameServerServer) ManageGameServerLB(context.Context, *ManageGameServerEntityRequest) (*ManageGameServerEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageGameServerLB not implemented")
}
func (UnimplementedGameServerServer) BatchManageGameServerEntity(context.Context, *BatchManageGameServerEntityRequest) (*BatchManageGameServerEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchManageGameServerEntity not implemented")
}
func (UnimplementedGameServerServer) BatchManageGameServerLB(context.Context, *BatchManageGameServerEntityRequest) (*BatchManageGameServerEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchManageGameServerLB not implemented")
}
func (UnimplementedGameServerServer) mustEmbedUnimplementedGameServerServer() {}

// UnsafeGameServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerServer will
// result in compilation errors.
type UnsafeGameServerServer interface {
	mustEmbedUnimplementedGameServerServer()
}

func RegisterGameServerServer(s grpc.ServiceRegistrar, srv GameServerServer) {
	s.RegisterService(&GameServer_ServiceDesc, srv)
}

func _GameServer_ListGameServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).ListGameServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServer_ListGameServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).ListGameServer(ctx, req.(*ListGameServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_ListGameServerType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameServerTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).ListGameServerType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServer_ListGameServerType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).ListGameServerType(ctx, req.(*ListGameServerTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_ManageGameServerEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGameServerEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).ManageGameServerEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServer_ManageGameServerEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).ManageGameServerEntity(ctx, req.(*ManageGameServerEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_ManageGameServerLB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageGameServerEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).ManageGameServerLB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServer_ManageGameServerLB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).ManageGameServerLB(ctx, req.(*ManageGameServerEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_BatchManageGameServerEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchManageGameServerEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).BatchManageGameServerEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServer_BatchManageGameServerEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).BatchManageGameServerEntity(ctx, req.(*BatchManageGameServerEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServer_BatchManageGameServerLB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchManageGameServerEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServer).BatchManageGameServerLB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServer_BatchManageGameServerLB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServer).BatchManageGameServerLB(ctx, req.(*BatchManageGameServerEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServer_ServiceDesc is the grpc.ServiceDesc for GameServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameserver.v1.GameServer",
	HandlerType: (*GameServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGameServer",
			Handler:    _GameServer_ListGameServer_Handler,
		},
		{
			MethodName: "ListGameServerType",
			Handler:    _GameServer_ListGameServerType_Handler,
		},
		{
			MethodName: "ManageGameServerEntity",
			Handler:    _GameServer_ManageGameServerEntity_Handler,
		},
		{
			MethodName: "ManageGameServerLB",
			Handler:    _GameServer_ManageGameServerLB_Handler,
		},
		{
			MethodName: "BatchManageGameServerEntity",
			Handler:    _GameServer_BatchManageGameServerEntity_Handler,
		},
		{
			MethodName: "BatchManageGameServerLB",
			Handler:    _GameServer_BatchManageGameServerLB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/gameserver.v1.proto",
}
