// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/crr.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCRRDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCRRDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCRRDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCRRDetailRequestMultiError, or nil if none found.
func (m *GetCRRDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCRRDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetCRRDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetCRRDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetCRRDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCRRDetailRequestMultiError(errors)
	}

	return nil
}

// GetCRRDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetCRRDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCRRDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCRRDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCRRDetailRequestMultiError) AllErrors() []error { return m }

// GetCRRDetailRequestValidationError is the validation error returned by
// GetCRRDetailRequest.Validate if the designated constraints aren't met.
type GetCRRDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCRRDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCRRDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCRRDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCRRDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCRRDetailRequestValidationError) ErrorName() string {
	return "GetCRRDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCRRDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCRRDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCRRDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCRRDetailRequestValidationError{}

// Validate checks the field values on GetCRRDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCRRDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCRRDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCRRDetailResponseMultiError, or nil if none found.
func (m *GetCRRDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCRRDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := GetCRRDetailResponseValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalCount() < 0 {
		err := GetCRRDetailResponseValidationError{
			field:  "TotalCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSuccessCount() < 0 {
		err := GetCRRDetailResponseValidationError{
			field:  "SuccessCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCRRDetailResponseMultiError(errors)
	}

	return nil
}

// GetCRRDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetCRRDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCRRDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCRRDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCRRDetailResponseMultiError) AllErrors() []error { return m }

// GetCRRDetailResponseValidationError is the validation error returned by
// GetCRRDetailResponse.Validate if the designated constraints aren't met.
type GetCRRDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCRRDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCRRDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCRRDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCRRDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCRRDetailResponseValidationError) ErrorName() string {
	return "GetCRRDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCRRDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCRRDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCRRDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCRRDetailResponseValidationError{}

// Validate checks the field values on BatchCRRDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BatchCRRDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCRRDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BatchCRRDetailMultiError,
// or nil if none found.
func (m *BatchCRRDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCRRDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := BatchCRRDetailValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := BatchCRRDetailValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalCount() < 0 {
		err := BatchCRRDetailValidationError{
			field:  "TotalCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSuccessCount() < 0 {
		err := BatchCRRDetailValidationError{
			field:  "SuccessCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BatchCRRDetailMultiError(errors)
	}

	return nil
}

// BatchCRRDetailMultiError is an error wrapping multiple validation errors
// returned by BatchCRRDetail.ValidateAll() if the designated constraints
// aren't met.
type BatchCRRDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCRRDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCRRDetailMultiError) AllErrors() []error { return m }

// BatchCRRDetailValidationError is the validation error returned by
// BatchCRRDetail.Validate if the designated constraints aren't met.
type BatchCRRDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCRRDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCRRDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCRRDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCRRDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCRRDetailValidationError) ErrorName() string { return "BatchCRRDetailValidationError" }

// Error satisfies the builtin error interface
func (e BatchCRRDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCRRDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCRRDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCRRDetailValidationError{}

// Validate checks the field values on RequestContainerItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestContainerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestContainerItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestContainerItemMultiError, or nil if none found.
func (m *RequestContainerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestContainerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := RequestContainerItemValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContainerNames()) < 1 {
		err := RequestContainerItemValidationError{
			field:  "ContainerNames",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RequestContainerItemMultiError(errors)
	}

	return nil
}

// RequestContainerItemMultiError is an error wrapping multiple validation
// errors returned by RequestContainerItem.ValidateAll() if the designated
// constraints aren't met.
type RequestContainerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestContainerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestContainerItemMultiError) AllErrors() []error { return m }

// RequestContainerItemValidationError is the validation error returned by
// RequestContainerItem.Validate if the designated constraints aren't met.
type RequestContainerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestContainerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestContainerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestContainerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestContainerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestContainerItemValidationError) ErrorName() string {
	return "RequestContainerItemValidationError"
}

// Error satisfies the builtin error interface
func (e RequestContainerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestContainerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestContainerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestContainerItemValidationError{}

// Validate checks the field values on BatchCreateCRRRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateCRRRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateCRRRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateCRRRequestMultiError, or nil if none found.
func (m *BatchCreateCRRRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateCRRRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := BatchCreateCRRRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := BatchCreateCRRRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContainerItems()) < 1 {
		err := BatchCreateCRRRequestValidationError{
			field:  "ContainerItems",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetContainerItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateCRRRequestValidationError{
						field:  fmt.Sprintf("ContainerItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateCRRRequestValidationError{
						field:  fmt.Sprintf("ContainerItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateCRRRequestValidationError{
					field:  fmt.Sprintf("ContainerItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateCRRRequestMultiError(errors)
	}

	return nil
}

// BatchCreateCRRRequestMultiError is an error wrapping multiple validation
// errors returned by BatchCreateCRRRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateCRRRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateCRRRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateCRRRequestMultiError) AllErrors() []error { return m }

// BatchCreateCRRRequestValidationError is the validation error returned by
// BatchCreateCRRRequest.Validate if the designated constraints aren't met.
type BatchCreateCRRRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateCRRRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateCRRRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateCRRRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateCRRRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateCRRRequestValidationError) ErrorName() string {
	return "BatchCreateCRRRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateCRRRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateCRRRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateCRRRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateCRRRequestValidationError{}

// Validate checks the field values on CreateCRRRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCRRRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCRRRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCRRRequestMultiError, or nil if none found.
func (m *CreateCRRRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCRRRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateCRRRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateCRRRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := CreateCRRRequestValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetContainerNames()) < 1 {
		err := CreateCRRRequestValidationError{
			field:  "ContainerNames",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCRRRequestMultiError(errors)
	}

	return nil
}

// CreateCRRRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCRRRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCRRRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCRRRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCRRRequestMultiError) AllErrors() []error { return m }

// CreateCRRRequestValidationError is the validation error returned by
// CreateCRRRequest.Validate if the designated constraints aren't met.
type CreateCRRRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCRRRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCRRRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCRRRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCRRRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCRRRequestValidationError) ErrorName() string { return "CreateCRRRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateCRRRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCRRRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCRRRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCRRRequestValidationError{}

// Validate checks the field values on CreateCRRResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCRRResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCRRResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCRRResponseMultiError, or nil if none found.
func (m *CreateCRRResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCRRResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCRRResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCRRResponseValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCRRResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCRRResponseMultiError(errors)
	}

	return nil
}

// CreateCRRResponseMultiError is an error wrapping multiple validation errors
// returned by CreateCRRResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateCRRResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCRRResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCRRResponseMultiError) AllErrors() []error { return m }

// CreateCRRResponseValidationError is the validation error returned by
// CreateCRRResponse.Validate if the designated constraints aren't met.
type CreateCRRResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCRRResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCRRResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCRRResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCRRResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCRRResponseValidationError) ErrorName() string {
	return "CreateCRRResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCRRResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCRRResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCRRResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCRRResponseValidationError{}

// Validate checks the field values on ResponseContainerItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResponseContainerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseContainerItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseContainerItemMultiError, or nil if none found.
func (m *ResponseContainerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseContainerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := ResponseContainerItemValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ResponseContainerItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResponseContainerItemMultiError(errors)
	}

	return nil
}

// ResponseContainerItemMultiError is an error wrapping multiple validation
// errors returned by ResponseContainerItem.ValidateAll() if the designated
// constraints aren't met.
type ResponseContainerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseContainerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseContainerItemMultiError) AllErrors() []error { return m }

// ResponseContainerItemValidationError is the validation error returned by
// ResponseContainerItem.Validate if the designated constraints aren't met.
type ResponseContainerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseContainerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseContainerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseContainerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseContainerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseContainerItemValidationError) ErrorName() string {
	return "ResponseContainerItemValidationError"
}

// Error satisfies the builtin error interface
func (e ResponseContainerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseContainerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseContainerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseContainerItemValidationError{}

// Validate checks the field values on BatchCreateCRRResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchCreateCRRResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateCRRResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchCreateCRRResponseMultiError, or nil if none found.
func (m *BatchCreateCRRResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateCRRResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateCRRResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateCRRResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateCRRResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateCRRResponseMultiError(errors)
	}

	return nil
}

// BatchCreateCRRResponseMultiError is an error wrapping multiple validation
// errors returned by BatchCreateCRRResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateCRRResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateCRRResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateCRRResponseMultiError) AllErrors() []error { return m }

// BatchCreateCRRResponseValidationError is the validation error returned by
// BatchCreateCRRResponse.Validate if the designated constraints aren't met.
type BatchCreateCRRResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateCRRResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateCRRResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateCRRResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateCRRResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateCRRResponseValidationError) ErrorName() string {
	return "BatchCreateCRRResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateCRRResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateCRRResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateCRRResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateCRRResponseValidationError{}

// Validate checks the field values on GetBatchCRRDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBatchCRRDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBatchCRRDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBatchCRRDetailRequestMultiError, or nil if none found.
func (m *GetBatchCRRDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBatchCRRDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetBatchCRRDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetBatchCRRDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNames()) < 1 {
		err := GetBatchCRRDetailRequestValidationError{
			field:  "Names",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBatchCRRDetailRequestMultiError(errors)
	}

	return nil
}

// GetBatchCRRDetailRequestMultiError is an error wrapping multiple validation
// errors returned by GetBatchCRRDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBatchCRRDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBatchCRRDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBatchCRRDetailRequestMultiError) AllErrors() []error { return m }

// GetBatchCRRDetailRequestValidationError is the validation error returned by
// GetBatchCRRDetailRequest.Validate if the designated constraints aren't met.
type GetBatchCRRDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBatchCRRDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBatchCRRDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBatchCRRDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBatchCRRDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBatchCRRDetailRequestValidationError) ErrorName() string {
	return "GetBatchCRRDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBatchCRRDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBatchCRRDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBatchCRRDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBatchCRRDetailRequestValidationError{}

// Validate checks the field values on GetBatchCRRDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBatchCRRDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBatchCRRDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBatchCRRDetailResponseMultiError, or nil if none found.
func (m *GetBatchCRRDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBatchCRRDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBatchCRRDetailResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBatchCRRDetailResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBatchCRRDetailResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBatchCRRDetailResponseMultiError(errors)
	}

	return nil
}

// GetBatchCRRDetailResponseMultiError is an error wrapping multiple validation
// errors returned by GetBatchCRRDetailResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBatchCRRDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBatchCRRDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBatchCRRDetailResponseMultiError) AllErrors() []error { return m }

// GetBatchCRRDetailResponseValidationError is the validation error returned by
// GetBatchCRRDetailResponse.Validate if the designated constraints aren't met.
type GetBatchCRRDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBatchCRRDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBatchCRRDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBatchCRRDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBatchCRRDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBatchCRRDetailResponseValidationError) ErrorName() string {
	return "GetBatchCRRDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBatchCRRDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBatchCRRDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBatchCRRDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBatchCRRDetailResponseValidationError{}
