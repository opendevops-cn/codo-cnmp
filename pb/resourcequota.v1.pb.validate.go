// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/resourcequota.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListResourceQuotaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourceQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourceQuotaRequestMultiError, or nil if none found.
func (m *ListResourceQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourceQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListResourceQuotaRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListResourceQuotaRequestMultiError(errors)
	}

	return nil
}

// ListResourceQuotaRequestMultiError is an error wrapping multiple validation
// errors returned by ListResourceQuotaRequest.ValidateAll() if the designated
// constraints aren't met.
type ListResourceQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourceQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourceQuotaRequestMultiError) AllErrors() []error { return m }

// ListResourceQuotaRequestValidationError is the validation error returned by
// ListResourceQuotaRequest.Validate if the designated constraints aren't met.
type ListResourceQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourceQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourceQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourceQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourceQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourceQuotaRequestValidationError) ErrorName() string {
	return "ListResourceQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourceQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourceQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourceQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourceQuotaRequestValidationError{}

// Validate checks the field values on HardResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HardResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HardResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HardResourceMultiError, or
// nil if none found.
func (m *HardResource) ValidateAll() error {
	return m.validate(true)
}

func (m *HardResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuLimit

	// no validation rules for MemLimit

	// no validation rules for CpuRequest

	// no validation rules for MemRequest

	// no validation rules for MaxPod

	// no validation rules for MaxConfigmap

	// no validation rules for MaxSecret

	// no validation rules for MaxService

	// no validation rules for MaxResourceStorage

	// no validation rules for MaxPersistentVolumeClaim

	if len(errors) > 0 {
		return HardResourceMultiError(errors)
	}

	return nil
}

// HardResourceMultiError is an error wrapping multiple validation errors
// returned by HardResource.ValidateAll() if the designated constraints aren't met.
type HardResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HardResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HardResourceMultiError) AllErrors() []error { return m }

// HardResourceValidationError is the validation error returned by
// HardResource.Validate if the designated constraints aren't met.
type HardResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HardResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HardResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HardResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HardResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HardResourceValidationError) ErrorName() string { return "HardResourceValidationError" }

// Error satisfies the builtin error interface
func (e HardResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHardResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HardResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HardResourceValidationError{}

// Validate checks the field values on CreateResourceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourceQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourceQuotaRequestMultiError, or nil if none found.
func (m *CreateResourceQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourceQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateResourceQuotaRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateResourceQuotaRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateResourceQuotaRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHardResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateResourceQuotaRequestValidationError{
					field:  "HardResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateResourceQuotaRequestValidationError{
					field:  "HardResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHardResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateResourceQuotaRequestValidationError{
				field:  "HardResource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateResourceQuotaRequestMultiError(errors)
	}

	return nil
}

// CreateResourceQuotaRequestMultiError is an error wrapping multiple
// validation errors returned by CreateResourceQuotaRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateResourceQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourceQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourceQuotaRequestMultiError) AllErrors() []error { return m }

// CreateResourceQuotaRequestValidationError is the validation error returned
// by CreateResourceQuotaRequest.Validate if the designated constraints aren't met.
type CreateResourceQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceQuotaRequestValidationError) ErrorName() string {
	return "CreateResourceQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceQuotaRequestValidationError{}

// Validate checks the field values on ResourceQuotaItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResourceQuotaItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceQuotaItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceQuotaItemMultiError, or nil if none found.
func (m *ResourceQuotaItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceQuotaItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ResourceQuotaItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ResourceQuotaItemValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHardResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceQuotaItemValidationError{
					field:  "HardResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceQuotaItemValidationError{
					field:  "HardResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHardResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceQuotaItemValidationError{
				field:  "HardResource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsedResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceQuotaItemValidationError{
					field:  "UsedResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceQuotaItemValidationError{
					field:  "UsedResource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsedResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceQuotaItemValidationError{
				field:  "UsedResource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for Yaml

	if len(errors) > 0 {
		return ResourceQuotaItemMultiError(errors)
	}

	return nil
}

// ResourceQuotaItemMultiError is an error wrapping multiple validation errors
// returned by ResourceQuotaItem.ValidateAll() if the designated constraints
// aren't met.
type ResourceQuotaItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceQuotaItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceQuotaItemMultiError) AllErrors() []error { return m }

// ResourceQuotaItemValidationError is the validation error returned by
// ResourceQuotaItem.Validate if the designated constraints aren't met.
type ResourceQuotaItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceQuotaItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceQuotaItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceQuotaItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceQuotaItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceQuotaItemValidationError) ErrorName() string {
	return "ResourceQuotaItemValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceQuotaItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceQuotaItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceQuotaItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceQuotaItemValidationError{}

// Validate checks the field values on CreateResourceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateResourceQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResourceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateResourceQuotaResponseMultiError, or nil if none found.
func (m *CreateResourceQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResourceQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateResourceQuotaResponseMultiError(errors)
	}

	return nil
}

// CreateResourceQuotaResponseMultiError is an error wrapping multiple
// validation errors returned by CreateResourceQuotaResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateResourceQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResourceQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResourceQuotaResponseMultiError) AllErrors() []error { return m }

// CreateResourceQuotaResponseValidationError is the validation error returned
// by CreateResourceQuotaResponse.Validate if the designated constraints
// aren't met.
type CreateResourceQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResourceQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResourceQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResourceQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResourceQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResourceQuotaResponseValidationError) ErrorName() string {
	return "CreateResourceQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateResourceQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResourceQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResourceQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResourceQuotaResponseValidationError{}

// Validate checks the field values on ListResourceQuotaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListResourceQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListResourceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListResourceQuotaResponseMultiError, or nil if none found.
func (m *ListResourceQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListResourceQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListResourceQuotaResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListResourceQuotaResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResourceQuotaResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListResourceQuotaResponseMultiError(errors)
	}

	return nil
}

// ListResourceQuotaResponseMultiError is an error wrapping multiple validation
// errors returned by ListResourceQuotaResponse.ValidateAll() if the
// designated constraints aren't met.
type ListResourceQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListResourceQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListResourceQuotaResponseMultiError) AllErrors() []error { return m }

// ListResourceQuotaResponseValidationError is the validation error returned by
// ListResourceQuotaResponse.Validate if the designated constraints aren't met.
type ListResourceQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResourceQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResourceQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResourceQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResourceQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResourceQuotaResponseValidationError) ErrorName() string {
	return "ListResourceQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListResourceQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResourceQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResourceQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResourceQuotaResponseValidationError{}

// Validate checks the field values on ResourceQuotaDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceQuotaDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceQuotaDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceQuotaDetailRequestMultiError, or nil if none found.
func (m *ResourceQuotaDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceQuotaDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ResourceQuotaDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ResourceQuotaDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ResourceQuotaDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResourceQuotaDetailRequestMultiError(errors)
	}

	return nil
}

// ResourceQuotaDetailRequestMultiError is an error wrapping multiple
// validation errors returned by ResourceQuotaDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type ResourceQuotaDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceQuotaDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceQuotaDetailRequestMultiError) AllErrors() []error { return m }

// ResourceQuotaDetailRequestValidationError is the validation error returned
// by ResourceQuotaDetailRequest.Validate if the designated constraints aren't met.
type ResourceQuotaDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceQuotaDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceQuotaDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceQuotaDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceQuotaDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceQuotaDetailRequestValidationError) ErrorName() string {
	return "ResourceQuotaDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceQuotaDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceQuotaDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceQuotaDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceQuotaDetailRequestValidationError{}

// Validate checks the field values on ResourceQuotaDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceQuotaDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceQuotaDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceQuotaDetailResponseMultiError, or nil if none found.
func (m *ResourceQuotaDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceQuotaDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceQuotaDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceQuotaDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceQuotaDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceQuotaDetailResponseMultiError(errors)
	}

	return nil
}

// ResourceQuotaDetailResponseMultiError is an error wrapping multiple
// validation errors returned by ResourceQuotaDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type ResourceQuotaDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceQuotaDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceQuotaDetailResponseMultiError) AllErrors() []error { return m }

// ResourceQuotaDetailResponseValidationError is the validation error returned
// by ResourceQuotaDetailResponse.Validate if the designated constraints
// aren't met.
type ResourceQuotaDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceQuotaDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceQuotaDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceQuotaDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceQuotaDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceQuotaDetailResponseValidationError) ErrorName() string {
	return "ResourceQuotaDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceQuotaDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceQuotaDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceQuotaDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceQuotaDetailResponseValidationError{}

// Validate checks the field values on DeleteResourceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceQuotaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceQuotaRequestMultiError, or nil if none found.
func (m *DeleteResourceQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteResourceQuotaRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteResourceQuotaRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteResourceQuotaRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteResourceQuotaRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceQuotaRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteResourceQuotaRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteResourceQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceQuotaRequestMultiError) AllErrors() []error { return m }

// DeleteResourceQuotaRequestValidationError is the validation error returned
// by DeleteResourceQuotaRequest.Validate if the designated constraints aren't met.
type DeleteResourceQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceQuotaRequestValidationError) ErrorName() string {
	return "DeleteResourceQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceQuotaRequestValidationError{}

// Validate checks the field values on DeleteResourceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceQuotaResponseMultiError, or nil if none found.
func (m *DeleteResourceQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResourceQuotaResponseMultiError(errors)
	}

	return nil
}

// DeleteResourceQuotaResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteResourceQuotaResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteResourceQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceQuotaResponseMultiError) AllErrors() []error { return m }

// DeleteResourceQuotaResponseValidationError is the validation error returned
// by DeleteResourceQuotaResponse.Validate if the designated constraints
// aren't met.
type DeleteResourceQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceQuotaResponseValidationError) ErrorName() string {
	return "DeleteResourceQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceQuotaResponseValidationError{}
