syntax = "proto3";

package statefulset;

import "google/api/annotations.proto";
import "khttp/middleware.proto";
import "validate/validate.proto";
import "google/api/field_behavior.proto";
import "k8s/core/v1/generated.proto";
import "khttp/audit.proto";
import "k8s/io/apimachinery/pkg/apis/generated.proto";

option go_package = "codo-cnmp/pb;pb";


service StatefulSet {
  // 查看-云原生管理-StatefulSet-列表
  rpc ListStatefulSet (ListStatefulSetRequest) returns (ListStatefulSetResponse) {
    option (google.api.http) = {
      get: "/api/v1/statefulset/list"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
  }
  // 管理-云原生管理-StatefulSet-Yaml创建更新
  rpc CreateOrUpdateStatefulSetByYaml (CreateOrUpdateStatefulSetByYamlRequest) returns (CreateOrUpdateStatefulSetByYamlResponse) {
    option (google.api.http) = {
      post: "/api/v1/statefulset/create_or_update_by_yaml"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "statefulset";
      action: "yaml创建更新";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "statefulset"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
  // 管理-云原生管理-StatefulSet-删除
  rpc DeleteStatefulSet (DeleteStatefulSetRequest) returns (DeleteStatefulSetResponse) {
    option (google.api.http) = {
      post: "/api/v1/statefulset/delete"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "statefulset";
      action: "删除";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "statefulset"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
  // 管理-云原生管理-StatefulSet-重启
  rpc RestartStatefulSet (RestartStatefulSetRequest) returns (RestartStatefulSetResponse) {
    option (google.api.http) = {
      post: "/api/v1/statefulset/restart"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "statefulset";
      action: "重启";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "statefulset"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
  // 管理-云原生管理-StatefulSet-伸缩
  rpc ScaleStatefulSet (ScaleStatefulSetRequest) returns (ScaleStatefulSetResponse) {
    option (google.api.http) = {
      post: "/api/v1/statefulset/scale"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "statefulset";
      action: "伸缩";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "statefulset"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
  // 查看-云原生管理-StatefulSet-详情
  rpc GetStatefulSetDetail (GetStatefulSetDetailRequest) returns (GetStatefulSetDetailResponse){
    option (google.api.http) = {
      get: "/api/v1/statefulset/detail"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
  }
  // 查看-云原生管理-StatefulSet-历史版本
  rpc GetStatefulSetRevisions (GetStatefulSetHistoryRequest) returns (GetStatefulSetHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/statefulset/revisions"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
  }
  // 管理-云原生管理-StatefulSet-回滚
  rpc RollbackStatefulSet (RollbackStatefulSetRequest) returns (RollbackStatefulSetResponse) {
    option (google.api.http) = {
      post: "/api/v1/statefulset/rollback"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "statefulset";
      action: "回滚";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "statefulset"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
  // 管理-云原生管理-StatefulSet-更新策略
  rpc UpdateStatefulSetUpdateStrategy (UpdateStatefulSetUpdateStrategyRequest) returns (UpdateStatefulSetUpdateStrategyResponse) {
    option (google.api.http) = {
      post: "/api/v1/statefulset/upgrade_strategy/update"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: []
    };
    option (github.ccheers.pggh.khttp.audit) = {
      module: "statefulset";
      action: "修改更新策略";
      metas: [
        {
          key: "cluster",
          extract: "cluster_name"
        },
        {
          key: "namespace",
          extract: "namespace"
        },
        {
          key: "kind",
          const: "statefulset"
        },
        {
          key: "name",
          extract: "name"
        }
      ]
    };
  }
}


message StatefulSetCondition {
  // Type of deployment condition.
  string type = 1;

  // Status of the condition, one of True, False, Unknown.
  string status = 2;

  // The last time this condition was updated.
  // 豪秒级时间戳
  uint64 lastUpdateTime = 6;

  // Last time the condition transitioned from one status to another.
  // 豪秒级时间戳
  uint64 lastTransitionTime = 7;

  // The reason for the condition's last transition.
  string reason = 4;

  // A human readable message indicating details about the transition.
  string message = 5;
}

// StatefulSet 状态
message StatefulSetStatus {
  uint32 observedGeneration = 1;
  // 副本数量
  uint32 replicas = 2 [(google.api.field_behavior) = REQUIRED];
  // 已更新副本数量
  uint32 updatedReplicas = 3 [(google.api.field_behavior) = REQUIRED];
  // 已就绪副本数量
  uint32 readyReplicas = 7 [(google.api.field_behavior) = REQUIRED];
  // 可用副本数量
  uint32 availableReplicas = 4 [(google.api.field_behavior) = REQUIRED];
  // 不可用副本数量
  uint32 unavailableReplicas = 5;
  uint32 collisionCount = 8;
}

message StatefulSetStrategy {
  // 更新方式
  enum UpdateStrategyType {
    // 滚动更新
    RollingUpdate = 0;
    // 删除后更新
    OnDelete = 1;
  }
  UpdateStrategyType update_strategy_type = 1 [(validate.rules).enum = {defined_only: true}, (google.api.field_behavior) = REQUIRED];
  // 分片数量
  uint32 partition = 2;
}

// StatefulSetItem
message StatefulSetItem {
  // 名称
  string name = 1  [(google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 2  [(google.api.field_behavior) = REQUIRED];
  // 容器
  repeated k8s.io.api.core.v1.Container containers = 3  [(google.api.field_behavior) = REQUIRED];
  // 状态
  StatefulSetStatus status = 4  [(google.api.field_behavior) = REQUIRED];
  // 创建时间
  uint64 create_time = 5 [json_name = "create_time", (google.api.field_behavior) = REQUIRED];
  // 标签
  map<string, string> labels = 6  [(google.api.field_behavior) = REQUIRED];
  // YAML
  string yaml = 7  [(google.api.field_behavior) = REQUIRED];
  // 注解
  map<string, string> annotations = 8  [(google.api.field_behavior) = REQUIRED];
  // 副本数量
  uint32 replicas = 9  [(google.api.field_behavior) = REQUIRED];
  // 更新策略
  StatefulSetStrategy update_strategy = 10  [(google.api.field_behavior) = REQUIRED];
  // 选择器
  k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 11  [(google.api.field_behavior) = REQUIRED];
  // 健康检查
  repeated StatefulSetCondition conditions = 12  [(google.api.field_behavior) = REQUIRED];
  // 期望副本数量
  uint32  spec_replicas = 13  [(google.api.field_behavior) = REQUIRED];
  // 是否关注
  bool is_followed = 14 [json_name = "is_follow", (google.api.field_behavior) = REQUIRED];

}
// StatefulSet列表请求
message ListStatefulSetRequest {
    // 集群名称
    string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
    // 命名空间
    string namespace = 2;
    // 查询关键字
    string keyword = 4;
    // 页码
    uint32 page = 5;
    // 页大小
    uint32 page_size = 6;
    // 查询全部
    uint32  list_all = 7 [json_name = "list_all"];
}

// StatefulSet列表响应
message ListStatefulSetResponse {
  // 总数
  uint32 total = 1;
  // 列表
  repeated StatefulSetItem list = 2;
}

// 从YAML创建或者更新StatefulSet请求
message CreateOrUpdateStatefulSetByYamlRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // YAML
  string yaml = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}

// 从YAML创建或者更新StatefulSet响应
message CreateOrUpdateStatefulSetByYamlResponse {}



message DeleteStatefulSetRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}

message DeleteStatefulSetResponse {}

// RestartStatefulSet请求
message RestartStatefulSetRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}


message RestartStatefulSetResponse {}


// 伸缩StatefulSet请求
message ScaleStatefulSetRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 副本数量
  uint32 replicas = 4 [(validate.rules).uint32.gte = 0, (google.api.field_behavior) = REQUIRED];
}


// 伸缩StatefulSet响应
message ScaleStatefulSetResponse {}

// 查看StatefulSet详情请求
message GetStatefulSetDetailRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}

// 查看StatefulSet详情响应
message GetStatefulSetDetailResponse {
  // 详情
  StatefulSetItem detail = 1;
}

// 回滚StatefulSet请求
message RollbackStatefulSetRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 版本号
  string version = 4 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}

// 回滚StatefulSet响应
message RollbackStatefulSetResponse {}

// 查看statefulset历史版本请求
message GetStatefulSetHistoryRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
}

message StatefulSetControllerReversionItem {
  // 名称
  string name = 1  [(google.api.field_behavior) = REQUIRED];
  // 镜像
  repeated string images = 2  [(google.api.field_behavior) = REQUIRED];
  // 版本
  string version = 3  [(google.api.field_behavior) = REQUIRED];
  // 版本详情
  string yaml = 4  [(google.api.field_behavior) = REQUIRED];
  // 创建时间
  uint64 create_time = 5 [json_name = "create_time", (google.api.field_behavior) = REQUIRED];
  // 是否当前版本
  bool is_current = 6  [(google.api.field_behavior) = REQUIRED];
}

// 查看statefulset历史版本响应
message GetStatefulSetHistoryResponse {
  // 列表
  repeated StatefulSetControllerReversionItem list = 1;
  // 总数
  uint32 total = 2;
}

// 修改StatefulSet更新策略请求
message UpdateStatefulSetUpdateStrategyRequest {
  // 集群名称
  string cluster_name = 1 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 名称
  string name = 2 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 命名空间
  string namespace = 3 [(validate.rules).string.min_len = 1, (google.api.field_behavior) = REQUIRED];
  // 更新方式
  enum UpdateStrategyType {
    // 滚动更新
    RollingUpdate = 0;
    // 删除后更新
    OnDelete = 1;
  }
  UpdateStrategyType update_strategy_type = 4 [(validate.rules).enum = {defined_only: true}, (google.api.field_behavior) = REQUIRED];
  // 分片数量
  uint32 partition = 5;
}

// 修改StatefulSet更新策略响应
message UpdateStatefulSetUpdateStrategyResponse {}