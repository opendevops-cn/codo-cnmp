// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/pod.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationPodListPod = "/pod.Pod/ListPod"
const OperationPodListPodByNamespace = "/pod.Pod/ListPodByNamespace"
const OperationPodGetNamespacePodDetail = "/pod.Pod/GetNamespacePodDetail"
const OperationPodDeletePod = "/pod.Pod/DeletePod"
const OperationPodBatchDeletePod = "/pod.Pod/BatchDeletePod"
const OperationPodGetPodCpuMetrics = "/pod.Pod/GetPodCpuMetrics"
const OperationPodGetPodMemoryMetrics = "/pod.Pod/GetPodMemoryMetrics"
const OperationPodGetPodContainerMetrics = "/pod.Pod/GetPodContainerMetrics"
const OperationPodListControllerPod = "/pod.Pod/ListControllerPod"
const OperationPodDownloadPodLogs = "/pod.Pod/DownloadPodLogs"
const OperationPodCreateOrUpdatePodByYaml = "/pod.Pod/CreateOrUpdatePodByYaml"
const OperationPodEvictPod = "/pod.Pod/EvictPod"

type PodHTTPServer interface {
	// ListPod查看-云原生管理-Pod-列表
	ListPod(context.Context, *ListPodRequest) (*ListPodResponse, error)
	// ListPodByNamespace查看-云原生管理-命名空间-Pod列表
	ListPodByNamespace(context.Context, *ListPodByNamespaceRequest) (*ListPodByNamespaceResponse, error)
	// GetNamespacePodDetail查看-云原生管理-命名空间-Pod详情
	GetNamespacePodDetail(context.Context, *GetNamespacePodDetailRequest) (*GetNamespacePodDetailResponse, error)
	// DeletePod管理-云原生管理-Pod-删除
	DeletePod(context.Context, *DeletePodRequest) (*DeletePodResponse, error)
	// BatchDeletePod管理-云原生管理-Pod-批量重启
	BatchDeletePod(context.Context, *BatchDeletePodsRequest) (*BatchDeletePodsResponse, error)
	// GetPodCpuMetrics查看-云原生管理-Pod-CPU指标
	GetPodCpuMetrics(context.Context, *GetPodMetricsRequest) (*SidecarMetricResultList, error)
	// GetPodMemoryMetrics查看-云原生管理-Pod-内存指标
	GetPodMemoryMetrics(context.Context, *GetPodMetricsRequest) (*SidecarMetricResultList, error)
	// GetPodContainerMetrics查看-云原生管理-Pod-容器指标
	GetPodContainerMetrics(context.Context, *GetPodContainerMetricsRequest) (*GetPodContainerMetricsResponse, error)
	// ListControllerPod查看-云原生管理-控制器-Pod列表
	ListControllerPod(context.Context, *ListControllerPodRequest) (*ListControllerPodResponse, error)
	// DownloadPodLogs查看-云原生管理-Pod-下载日志
	DownloadPodLogs(context.Context, *DownloadPodLogsRequest) (*DownloadPodLogsResponse, error)
	// CreateOrUpdatePodByYaml管理-云原生管理-Pod-Yaml创建更新
	CreateOrUpdatePodByYaml(context.Context, *CreateOrUpdatePodByYamlRequest) (*CreateOrUpdatePodByYamlResponse, error)
	// EvictPod管理-云原生管理-Pod-驱逐
	EvictPod(context.Context, *EvictPodRequest) (*EvictPodResponse, error)
}

func NewPodHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationPodListPod).Build(),
		selector.Server().Path(OperationPodListPodByNamespace).Build(),
		selector.Server().Path(OperationPodGetNamespacePodDetail).Build(),
		selector.Server().Path(OperationPodDeletePod).Build(),
		selector.Server().Path(OperationPodBatchDeletePod).Build(),
		selector.Server().Path(OperationPodGetPodCpuMetrics).Build(),
		selector.Server().Path(OperationPodGetPodMemoryMetrics).Build(),
		selector.Server().Path(OperationPodGetPodContainerMetrics).Build(),
		selector.Server().Path(OperationPodListControllerPod).Build(),
		selector.Server().Path(OperationPodDownloadPodLogs).Build(),
		selector.Server().Path(OperationPodCreateOrUpdatePodByYaml).Build(),
		selector.Server().Path(OperationPodEvictPod).Build(),
	).Path(
		OperationPodListPod,
		OperationPodListPodByNamespace,
		OperationPodGetNamespacePodDetail,
		OperationPodDeletePod,
		OperationPodBatchDeletePod,
		OperationPodGetPodCpuMetrics,
		OperationPodGetPodMemoryMetrics,
		OperationPodGetPodContainerMetrics,
		OperationPodListControllerPod,
		OperationPodDownloadPodLogs,
		OperationPodCreateOrUpdatePodByYaml,
		OperationPodEvictPod,
	).Build()
}

func RegisterPodHTTPServer(s *http.Server, srv PodHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/pod/list", _Pod_ListPod0_HTTP_Handler(srv))
	r.GET("/api/v1/namespace/pod/list", _Pod_ListPodByNamespace0_HTTP_Handler(srv))
	r.GET("/api/v1/namespace/pod/detail", _Pod_GetNamespacePodDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/pod/delete", _Pod_DeletePod0_HTTP_Handler(srv))
	r.POST("/api/v1/pod/batch/delete", _Pod_BatchDeletePod0_HTTP_Handler(srv))
	r.GET("/api/v1/pod/metrics/cpu", _Pod_GetPodCpuMetrics0_HTTP_Handler(srv))
	r.GET("/api/v1/pod/metrics/memory", _Pod_GetPodMemoryMetrics0_HTTP_Handler(srv))
	r.GET("/api/v1/pod/container/metrics", _Pod_GetPodContainerMetrics0_HTTP_Handler(srv))
	r.GET("/api/v1/controller/pod/list", _Pod_ListControllerPod0_HTTP_Handler(srv))
	r.GET("/api/v1/pod/logs/download", _Pod_DownloadPodLogs0_HTTP_Handler(srv))
	r.POST("/api/v1/pod/create_or_update", _Pod_CreateOrUpdatePodByYaml0_HTTP_Handler(srv))
	r.POST("/api/v1/pod/evict", _Pod_EvictPod0_HTTP_Handler(srv))
}

func GeneratePodHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 12)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/pod/list",
		Comment: "查看-云原生管理-Pod-列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/namespace/pod/list",
		Comment: "查看-云原生管理-命名空间-Pod列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/namespace/pod/detail",
		Comment: "查看-云原生管理-命名空间-Pod详情",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/pod/delete",
		Comment: "管理-云原生管理-Pod-删除",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/pod/batch/delete",
		Comment: "管理-云原生管理-Pod-批量重启",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/pod/metrics/cpu",
		Comment: "查看-云原生管理-Pod-CPU指标",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/pod/metrics/memory",
		Comment: "查看-云原生管理-Pod-内存指标",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/pod/container/metrics",
		Comment: "查看-云原生管理-Pod-容器指标",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/controller/pod/list",
		Comment: "查看-云原生管理-控制器-Pod列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/pod/logs/download",
		Comment: "查看-云原生管理-Pod-下载日志",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/pod/create_or_update",
		Comment: "管理-云原生管理-Pod-Yaml创建更新",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/pod/evict",
		Comment: "管理-云原生管理-Pod-驱逐",
	})
	return routes
}

func _Pod_ListPod0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListPodRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodListPod)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPod(ctx, req.(*ListPodRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPodResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_ListPodByNamespace0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListPodByNamespaceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodListPodByNamespace)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPodByNamespace(ctx, req.(*ListPodByNamespaceRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPodByNamespaceResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_GetNamespacePodDetail0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetNamespacePodDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodGetNamespacePodDetail)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetNamespacePodDetail(ctx, req.(*GetNamespacePodDetailRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetNamespacePodDetailResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_DeletePod0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeletePodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodDeletePod)
		auditRule := audit.NewAudit(
			"pod",
			"删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "pod",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "pod_name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePod(ctx, req.(*DeletePodRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePodResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_BatchDeletePod0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in BatchDeletePodsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodBatchDeletePod)
		auditRule := audit.NewAudit(
			"pod",
			"批量删除",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "pod",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "pod_names",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeletePod(ctx, req.(*BatchDeletePodsRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchDeletePodsResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_GetPodCpuMetrics0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetPodMetricsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodGetPodCpuMetrics)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPodCpuMetrics(ctx, req.(*GetPodMetricsRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SidecarMetricResultList)
		return ctx.Result(200, reply)
	}
}

func _Pod_GetPodMemoryMetrics0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetPodMetricsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodGetPodMemoryMetrics)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPodMemoryMetrics(ctx, req.(*GetPodMetricsRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SidecarMetricResultList)
		return ctx.Result(200, reply)
	}
}

func _Pod_GetPodContainerMetrics0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetPodContainerMetricsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodGetPodContainerMetrics)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPodContainerMetrics(ctx, req.(*GetPodContainerMetricsRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPodContainerMetricsResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_ListControllerPod0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListControllerPodRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodListControllerPod)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListControllerPod(ctx, req.(*ListControllerPodRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListControllerPodResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_DownloadPodLogs0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DownloadPodLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodDownloadPodLogs)
		auditRule := audit.NewAudit(
			"pod",
			"下载日志",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "pod",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "pod_name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DownloadPodLogs(ctx, req.(*DownloadPodLogsRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DownloadPodLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_CreateOrUpdatePodByYaml0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateOrUpdatePodByYamlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodCreateOrUpdatePodByYaml)
		auditRule := audit.NewAudit(
			"pod",
			"Yaml创建更新",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "node",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrUpdatePodByYaml(ctx, req.(*CreateOrUpdatePodByYamlRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrUpdatePodByYamlResponse)
		return ctx.Result(200, reply)
	}
}

func _Pod_EvictPod0_HTTP_Handler(srv PodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in EvictPodRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodEvictPod)
		auditRule := audit.NewAudit(
			"pod",
			"驱逐",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key: "namespace",
					Value: audit.MetaValue{
						Extract: "namespace",
					},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "pod",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "pod_name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EvictPod(ctx, req.(*EvictPodRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EvictPodResponse)
		return ctx.Result(200, reply)
	}
}

type PodHTTPClient interface {
	ListPod(ctx context.Context, req *ListPodRequest, opts ...http.CallOption) (rsp *ListPodResponse, err error)
	ListPodByNamespace(ctx context.Context, req *ListPodByNamespaceRequest, opts ...http.CallOption) (rsp *ListPodByNamespaceResponse, err error)
	GetNamespacePodDetail(ctx context.Context, req *GetNamespacePodDetailRequest, opts ...http.CallOption) (rsp *GetNamespacePodDetailResponse, err error)
	DeletePod(ctx context.Context, req *DeletePodRequest, opts ...http.CallOption) (rsp *DeletePodResponse, err error)
	BatchDeletePod(ctx context.Context, req *BatchDeletePodsRequest, opts ...http.CallOption) (rsp *BatchDeletePodsResponse, err error)
	GetPodCpuMetrics(ctx context.Context, req *GetPodMetricsRequest, opts ...http.CallOption) (rsp *SidecarMetricResultList, err error)
	GetPodMemoryMetrics(ctx context.Context, req *GetPodMetricsRequest, opts ...http.CallOption) (rsp *SidecarMetricResultList, err error)
	GetPodContainerMetrics(ctx context.Context, req *GetPodContainerMetricsRequest, opts ...http.CallOption) (rsp *GetPodContainerMetricsResponse, err error)
	ListControllerPod(ctx context.Context, req *ListControllerPodRequest, opts ...http.CallOption) (rsp *ListControllerPodResponse, err error)
	DownloadPodLogs(ctx context.Context, req *DownloadPodLogsRequest, opts ...http.CallOption) (rsp *DownloadPodLogsResponse, err error)
	CreateOrUpdatePodByYaml(ctx context.Context, req *CreateOrUpdatePodByYamlRequest, opts ...http.CallOption) (rsp *CreateOrUpdatePodByYamlResponse, err error)
	EvictPod(ctx context.Context, req *EvictPodRequest, opts ...http.CallOption) (rsp *EvictPodResponse, err error)
}

type PodHTTPClientImpl struct {
	cc *http.Client
}

func NewPodHTTPClient(client *http.Client) PodHTTPClient {
	return &PodHTTPClientImpl{client}
}

func (c *PodHTTPClientImpl) ListPod(ctx context.Context, in *ListPodRequest, opts ...http.CallOption) (*ListPodResponse, error) {
	var out ListPodResponse
	pattern := "/api/v1/pod/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodListPod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) ListPodByNamespace(ctx context.Context, in *ListPodByNamespaceRequest, opts ...http.CallOption) (*ListPodByNamespaceResponse, error) {
	var out ListPodByNamespaceResponse
	pattern := "/api/v1/namespace/pod/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodListPodByNamespace))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) GetNamespacePodDetail(ctx context.Context, in *GetNamespacePodDetailRequest, opts ...http.CallOption) (*GetNamespacePodDetailResponse, error) {
	var out GetNamespacePodDetailResponse
	pattern := "/api/v1/namespace/pod/detail"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodGetNamespacePodDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) DeletePod(ctx context.Context, in *DeletePodRequest, opts ...http.CallOption) (*DeletePodResponse, error) {
	var out DeletePodResponse
	pattern := "/api/v1/pod/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPodDeletePod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) BatchDeletePod(ctx context.Context, in *BatchDeletePodsRequest, opts ...http.CallOption) (*BatchDeletePodsResponse, error) {
	var out BatchDeletePodsResponse
	pattern := "/api/v1/pod/batch/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPodBatchDeletePod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) GetPodCpuMetrics(ctx context.Context, in *GetPodMetricsRequest, opts ...http.CallOption) (*SidecarMetricResultList, error) {
	var out SidecarMetricResultList
	pattern := "/api/v1/pod/metrics/cpu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodGetPodCpuMetrics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) GetPodMemoryMetrics(ctx context.Context, in *GetPodMetricsRequest, opts ...http.CallOption) (*SidecarMetricResultList, error) {
	var out SidecarMetricResultList
	pattern := "/api/v1/pod/metrics/memory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodGetPodMemoryMetrics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) GetPodContainerMetrics(ctx context.Context, in *GetPodContainerMetricsRequest, opts ...http.CallOption) (*GetPodContainerMetricsResponse, error) {
	var out GetPodContainerMetricsResponse
	pattern := "/api/v1/pod/container/metrics"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodGetPodContainerMetrics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) ListControllerPod(ctx context.Context, in *ListControllerPodRequest, opts ...http.CallOption) (*ListControllerPodResponse, error) {
	var out ListControllerPodResponse
	pattern := "/api/v1/controller/pod/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodListControllerPod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) DownloadPodLogs(ctx context.Context, in *DownloadPodLogsRequest, opts ...http.CallOption) (*DownloadPodLogsResponse, error) {
	var out DownloadPodLogsResponse
	pattern := "/api/v1/pod/logs/download"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodDownloadPodLogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) CreateOrUpdatePodByYaml(ctx context.Context, in *CreateOrUpdatePodByYamlRequest, opts ...http.CallOption) (*CreateOrUpdatePodByYamlResponse, error) {
	var out CreateOrUpdatePodByYamlResponse
	pattern := "/api/v1/pod/create_or_update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPodCreateOrUpdatePodByYaml))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PodHTTPClientImpl) EvictPod(ctx context.Context, in *EvictPodRequest, opts ...http.CallOption) (*EvictPodResponse, error) {
	var out EvictPodResponse
	pattern := "/api/v1/pod/evict"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPodEvictPod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
