// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/gameserverset.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListGameServerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGameServerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameServerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGameServerSetRequestMultiError, or nil if none found.
func (m *ListGameServerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameServerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListGameServerSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListGameServerSetRequestMultiError(errors)
	}

	return nil
}

// ListGameServerSetRequestMultiError is an error wrapping multiple validation
// errors returned by ListGameServerSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGameServerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameServerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameServerSetRequestMultiError) AllErrors() []error { return m }

// ListGameServerSetRequestValidationError is the validation error returned by
// ListGameServerSetRequest.Validate if the designated constraints aren't met.
type ListGameServerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameServerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameServerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameServerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameServerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameServerSetRequestValidationError) ErrorName() string {
	return "ListGameServerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameServerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameServerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameServerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameServerSetRequestValidationError{}

// Validate checks the field values on GameServerSetCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameServerSetCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerSetCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameServerSetConditionMultiError, or nil if none found.
func (m *GameServerSetCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerSetCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastUpdateTime

	// no validation rules for LastTransitionTime

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return GameServerSetConditionMultiError(errors)
	}

	return nil
}

// GameServerSetConditionMultiError is an error wrapping multiple validation
// errors returned by GameServerSetCondition.ValidateAll() if the designated
// constraints aren't met.
type GameServerSetConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerSetConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerSetConditionMultiError) AllErrors() []error { return m }

// GameServerSetConditionValidationError is the validation error returned by
// GameServerSetCondition.Validate if the designated constraints aren't met.
type GameServerSetConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerSetConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerSetConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerSetConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerSetConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerSetConditionValidationError) ErrorName() string {
	return "GameServerSetConditionValidationError"
}

// Error satisfies the builtin error interface
func (e GameServerSetConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerSetCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerSetConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerSetConditionValidationError{}

// Validate checks the field values on GameServerSetStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameServerSetStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerSetStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameServerSetStatusMultiError, or nil if none found.
func (m *GameServerSetStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerSetStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObservedGeneration

	// no validation rules for Replicas

	// no validation rules for UpdatedReplicas

	// no validation rules for ReadyReplicas

	// no validation rules for AvailableReplicas

	// no validation rules for UnavailableReplicas

	// no validation rules for CollisionCount

	if len(errors) > 0 {
		return GameServerSetStatusMultiError(errors)
	}

	return nil
}

// GameServerSetStatusMultiError is an error wrapping multiple validation
// errors returned by GameServerSetStatus.ValidateAll() if the designated
// constraints aren't met.
type GameServerSetStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerSetStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerSetStatusMultiError) AllErrors() []error { return m }

// GameServerSetStatusValidationError is the validation error returned by
// GameServerSetStatus.Validate if the designated constraints aren't met.
type GameServerSetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerSetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerSetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerSetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerSetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerSetStatusValidationError) ErrorName() string {
	return "GameServerSetStatusValidationError"
}

// Error satisfies the builtin error interface
func (e GameServerSetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerSetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerSetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerSetStatusValidationError{}

// Validate checks the field values on GameServerSetStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameServerSetStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerSetStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameServerSetStrategyMultiError, or nil if none found.
func (m *GameServerSetStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerSetStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := GameServerSetStrategy_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := GameServerSetStrategyValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := GameServerSetStrategy_PodUpdateStrategy_name[int32(m.GetPodUpdateStrategyType())]; !ok {
		err := GameServerSetStrategyValidationError{
			field:  "PodUpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGracePeriodSeconds() < 0 {
		err := GameServerSetStrategyValidationError{
			field:  "GracePeriodSeconds",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxSurge

	// no validation rules for MaxUnavailable

	// no validation rules for Partition

	if len(errors) > 0 {
		return GameServerSetStrategyMultiError(errors)
	}

	return nil
}

// GameServerSetStrategyMultiError is an error wrapping multiple validation
// errors returned by GameServerSetStrategy.ValidateAll() if the designated
// constraints aren't met.
type GameServerSetStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerSetStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerSetStrategyMultiError) AllErrors() []error { return m }

// GameServerSetStrategyValidationError is the validation error returned by
// GameServerSetStrategy.Validate if the designated constraints aren't met.
type GameServerSetStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerSetStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerSetStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerSetStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerSetStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerSetStrategyValidationError) ErrorName() string {
	return "GameServerSetStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e GameServerSetStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerSetStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerSetStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerSetStrategyValidationError{}

// Validate checks the field values on GameServerSetItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameServerSetItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerSetItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameServerSetItemMultiError, or nil if none found.
func (m *GameServerSetItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerSetItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameServerSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameServerSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameServerSetItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GameServerSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GameServerSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GameServerSetItemValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for Labels

	// no validation rules for Yaml

	// no validation rules for Annotations

	// no validation rules for Replicas

	if all {
		switch v := interface{}(m.GetUpdateStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GameServerSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GameServerSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GameServerSetItemValidationError{
				field:  "UpdateStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GameServerSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GameServerSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GameServerSetItemValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameServerSetItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameServerSetItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameServerSetItemValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SpecReplicas

	// no validation rules for IsFollowed

	if len(errors) > 0 {
		return GameServerSetItemMultiError(errors)
	}

	return nil
}

// GameServerSetItemMultiError is an error wrapping multiple validation errors
// returned by GameServerSetItem.ValidateAll() if the designated constraints
// aren't met.
type GameServerSetItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerSetItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerSetItemMultiError) AllErrors() []error { return m }

// GameServerSetItemValidationError is the validation error returned by
// GameServerSetItem.Validate if the designated constraints aren't met.
type GameServerSetItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerSetItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerSetItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerSetItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerSetItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerSetItemValidationError) ErrorName() string {
	return "GameServerSetItemValidationError"
}

// Error satisfies the builtin error interface
func (e GameServerSetItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerSetItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerSetItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerSetItemValidationError{}

// Validate checks the field values on ListGameServerSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGameServerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameServerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGameServerSetResponseMultiError, or nil if none found.
func (m *ListGameServerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameServerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGameServerSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGameServerSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGameServerSetResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGameServerSetResponseMultiError(errors)
	}

	return nil
}

// ListGameServerSetResponseMultiError is an error wrapping multiple validation
// errors returned by ListGameServerSetResponse.ValidateAll() if the
// designated constraints aren't met.
type ListGameServerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameServerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameServerSetResponseMultiError) AllErrors() []error { return m }

// ListGameServerSetResponseValidationError is the validation error returned by
// ListGameServerSetResponse.Validate if the designated constraints aren't met.
type ListGameServerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameServerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameServerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameServerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameServerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameServerSetResponseValidationError) ErrorName() string {
	return "ListGameServerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameServerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameServerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameServerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameServerSetResponseValidationError{}

// Validate checks the field values on CreateOrUpdateGameServerSetByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateGameServerSetByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrUpdateGameServerSetByYamlRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrUpdateGameServerSetByYamlRequestMultiError, or nil if none found.
func (m *CreateOrUpdateGameServerSetByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateGameServerSetByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateOrUpdateGameServerSetByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := CreateOrUpdateGameServerSetByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrUpdateGameServerSetByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateGameServerSetByYamlRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateGameServerSetByYamlRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateGameServerSetByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateGameServerSetByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateGameServerSetByYamlRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateGameServerSetByYamlRequestValidationError is the validation
// error returned by CreateOrUpdateGameServerSetByYamlRequest.Validate if the
// designated constraints aren't met.
type CreateOrUpdateGameServerSetByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateGameServerSetByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateGameServerSetByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateGameServerSetByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateGameServerSetByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateGameServerSetByYamlRequestValidationError) ErrorName() string {
	return "CreateOrUpdateGameServerSetByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateGameServerSetByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateGameServerSetByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateGameServerSetByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateGameServerSetByYamlRequestValidationError{}

// Validate checks the field values on
// CreateOrUpdateGameServerSetByYamlResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateGameServerSetByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrUpdateGameServerSetByYamlResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrUpdateGameServerSetByYamlResponseMultiError, or nil if none found.
func (m *CreateOrUpdateGameServerSetByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateGameServerSetByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrUpdateGameServerSetByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateGameServerSetByYamlResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateGameServerSetByYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateGameServerSetByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateGameServerSetByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateGameServerSetByYamlResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateGameServerSetByYamlResponseValidationError is the validation
// error returned by CreateOrUpdateGameServerSetByYamlResponse.Validate if the
// designated constraints aren't met.
type CreateOrUpdateGameServerSetByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateGameServerSetByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateGameServerSetByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateGameServerSetByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateGameServerSetByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateGameServerSetByYamlResponseValidationError) ErrorName() string {
	return "CreateOrUpdateGameServerSetByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateGameServerSetByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateGameServerSetByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateGameServerSetByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateGameServerSetByYamlResponseValidationError{}

// Validate checks the field values on UpdateGameServerSetByYamlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateGameServerSetByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameServerSetByYamlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateGameServerSetByYamlRequestMultiError, or nil if none found.
func (m *UpdateGameServerSetByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameServerSetByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateGameServerSetByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := UpdateGameServerSetByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateGameServerSetByYamlRequestMultiError(errors)
	}

	return nil
}

// UpdateGameServerSetByYamlRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateGameServerSetByYamlRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGameServerSetByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameServerSetByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameServerSetByYamlRequestMultiError) AllErrors() []error { return m }

// UpdateGameServerSetByYamlRequestValidationError is the validation error
// returned by UpdateGameServerSetByYamlRequest.Validate if the designated
// constraints aren't met.
type UpdateGameServerSetByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameServerSetByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameServerSetByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameServerSetByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameServerSetByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameServerSetByYamlRequestValidationError) ErrorName() string {
	return "UpdateGameServerSetByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameServerSetByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameServerSetByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameServerSetByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameServerSetByYamlRequestValidationError{}

// Validate checks the field values on UpdateGameServerSetByYamlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateGameServerSetByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameServerSetByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateGameServerSetByYamlResponseMultiError, or nil if none found.
func (m *UpdateGameServerSetByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameServerSetByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGameServerSetByYamlResponseMultiError(errors)
	}

	return nil
}

// UpdateGameServerSetByYamlResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateGameServerSetByYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGameServerSetByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameServerSetByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameServerSetByYamlResponseMultiError) AllErrors() []error { return m }

// UpdateGameServerSetByYamlResponseValidationError is the validation error
// returned by UpdateGameServerSetByYamlResponse.Validate if the designated
// constraints aren't met.
type UpdateGameServerSetByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameServerSetByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameServerSetByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameServerSetByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameServerSetByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameServerSetByYamlResponseValidationError) ErrorName() string {
	return "UpdateGameServerSetByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameServerSetByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameServerSetByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameServerSetByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameServerSetByYamlResponseValidationError{}

// Validate checks the field values on DeleteGameServerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGameServerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGameServerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGameServerSetRequestMultiError, or nil if none found.
func (m *DeleteGameServerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGameServerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteGameServerSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteGameServerSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteGameServerSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteGameServerSetRequestMultiError(errors)
	}

	return nil
}

// DeleteGameServerSetRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteGameServerSetRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteGameServerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGameServerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGameServerSetRequestMultiError) AllErrors() []error { return m }

// DeleteGameServerSetRequestValidationError is the validation error returned
// by DeleteGameServerSetRequest.Validate if the designated constraints aren't met.
type DeleteGameServerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGameServerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGameServerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGameServerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGameServerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGameServerSetRequestValidationError) ErrorName() string {
	return "DeleteGameServerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGameServerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGameServerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGameServerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGameServerSetRequestValidationError{}

// Validate checks the field values on DeleteGameServerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGameServerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGameServerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGameServerSetResponseMultiError, or nil if none found.
func (m *DeleteGameServerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGameServerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGameServerSetResponseMultiError(errors)
	}

	return nil
}

// DeleteGameServerSetResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteGameServerSetResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteGameServerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGameServerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGameServerSetResponseMultiError) AllErrors() []error { return m }

// DeleteGameServerSetResponseValidationError is the validation error returned
// by DeleteGameServerSetResponse.Validate if the designated constraints
// aren't met.
type DeleteGameServerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGameServerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGameServerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGameServerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGameServerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGameServerSetResponseValidationError) ErrorName() string {
	return "DeleteGameServerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGameServerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGameServerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGameServerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGameServerSetResponseValidationError{}

// Validate checks the field values on RestartGameServerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartGameServerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartGameServerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartGameServerSetRequestMultiError, or nil if none found.
func (m *RestartGameServerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartGameServerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RestartGameServerSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RestartGameServerSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RestartGameServerSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestartGameServerSetRequestMultiError(errors)
	}

	return nil
}

// RestartGameServerSetRequestMultiError is an error wrapping multiple
// validation errors returned by RestartGameServerSetRequest.ValidateAll() if
// the designated constraints aren't met.
type RestartGameServerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartGameServerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartGameServerSetRequestMultiError) AllErrors() []error { return m }

// RestartGameServerSetRequestValidationError is the validation error returned
// by RestartGameServerSetRequest.Validate if the designated constraints
// aren't met.
type RestartGameServerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartGameServerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartGameServerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartGameServerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartGameServerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartGameServerSetRequestValidationError) ErrorName() string {
	return "RestartGameServerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartGameServerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartGameServerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartGameServerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartGameServerSetRequestValidationError{}

// Validate checks the field values on RestartGameServerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartGameServerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartGameServerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartGameServerSetResponseMultiError, or nil if none found.
func (m *RestartGameServerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartGameServerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartGameServerSetResponseMultiError(errors)
	}

	return nil
}

// RestartGameServerSetResponseMultiError is an error wrapping multiple
// validation errors returned by RestartGameServerSetResponse.ValidateAll() if
// the designated constraints aren't met.
type RestartGameServerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartGameServerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartGameServerSetResponseMultiError) AllErrors() []error { return m }

// RestartGameServerSetResponseValidationError is the validation error returned
// by RestartGameServerSetResponse.Validate if the designated constraints
// aren't met.
type RestartGameServerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartGameServerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartGameServerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartGameServerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartGameServerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartGameServerSetResponseValidationError) ErrorName() string {
	return "RestartGameServerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartGameServerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartGameServerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartGameServerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartGameServerSetResponseValidationError{}

// Validate checks the field values on ScaleGameServerSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleGameServerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleGameServerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleGameServerSetRequestMultiError, or nil if none found.
func (m *ScaleGameServerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleGameServerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ScaleGameServerSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ScaleGameServerSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ScaleGameServerSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReplicas() < 0 {
		err := ScaleGameServerSetRequestValidationError{
			field:  "Replicas",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScaleGameServerSetRequestMultiError(errors)
	}

	return nil
}

// ScaleGameServerSetRequestMultiError is an error wrapping multiple validation
// errors returned by ScaleGameServerSetRequest.ValidateAll() if the
// designated constraints aren't met.
type ScaleGameServerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleGameServerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleGameServerSetRequestMultiError) AllErrors() []error { return m }

// ScaleGameServerSetRequestValidationError is the validation error returned by
// ScaleGameServerSetRequest.Validate if the designated constraints aren't met.
type ScaleGameServerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleGameServerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleGameServerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleGameServerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleGameServerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleGameServerSetRequestValidationError) ErrorName() string {
	return "ScaleGameServerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleGameServerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleGameServerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleGameServerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleGameServerSetRequestValidationError{}

// Validate checks the field values on ScaleGameServerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleGameServerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleGameServerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleGameServerSetResponseMultiError, or nil if none found.
func (m *ScaleGameServerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleGameServerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScaleGameServerSetResponseMultiError(errors)
	}

	return nil
}

// ScaleGameServerSetResponseMultiError is an error wrapping multiple
// validation errors returned by ScaleGameServerSetResponse.ValidateAll() if
// the designated constraints aren't met.
type ScaleGameServerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleGameServerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleGameServerSetResponseMultiError) AllErrors() []error { return m }

// ScaleGameServerSetResponseValidationError is the validation error returned
// by ScaleGameServerSetResponse.Validate if the designated constraints aren't met.
type ScaleGameServerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleGameServerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleGameServerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleGameServerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleGameServerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleGameServerSetResponseValidationError) ErrorName() string {
	return "ScaleGameServerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleGameServerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleGameServerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleGameServerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleGameServerSetResponseValidationError{}

// Validate checks the field values on GameServerSetDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameServerSetDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerSetDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameServerSetDetailRequestMultiError, or nil if none found.
func (m *GameServerSetDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerSetDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GameServerSetDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GameServerSetDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GameServerSetDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GameServerSetDetailRequestMultiError(errors)
	}

	return nil
}

// GameServerSetDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GameServerSetDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GameServerSetDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerSetDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerSetDetailRequestMultiError) AllErrors() []error { return m }

// GameServerSetDetailRequestValidationError is the validation error returned
// by GameServerSetDetailRequest.Validate if the designated constraints aren't met.
type GameServerSetDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerSetDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerSetDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerSetDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerSetDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerSetDetailRequestValidationError) ErrorName() string {
	return "GameServerSetDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GameServerSetDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerSetDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerSetDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerSetDetailRequestValidationError{}

// Validate checks the field values on GameServerSetDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameServerSetDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerSetDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameServerSetDetailResponseMultiError, or nil if none found.
func (m *GameServerSetDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerSetDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GameServerSetDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GameServerSetDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GameServerSetDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GameServerSetDetailResponseMultiError(errors)
	}

	return nil
}

// GameServerSetDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GameServerSetDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type GameServerSetDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerSetDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerSetDetailResponseMultiError) AllErrors() []error { return m }

// GameServerSetDetailResponseValidationError is the validation error returned
// by GameServerSetDetailResponse.Validate if the designated constraints
// aren't met.
type GameServerSetDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerSetDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerSetDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerSetDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerSetDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerSetDetailResponseValidationError) ErrorName() string {
	return "GameServerSetDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GameServerSetDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerSetDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerSetDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerSetDetailResponseValidationError{}

// Validate checks the field values on RollbackGameServerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackGameServerSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackGameServerSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackGameServerSetRequestMultiError, or nil if none found.
func (m *RollbackGameServerSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackGameServerSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RollbackGameServerSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RollbackGameServerSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RollbackGameServerSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := RollbackGameServerSetRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RollbackGameServerSetRequestMultiError(errors)
	}

	return nil
}

// RollbackGameServerSetRequestMultiError is an error wrapping multiple
// validation errors returned by RollbackGameServerSetRequest.ValidateAll() if
// the designated constraints aren't met.
type RollbackGameServerSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackGameServerSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackGameServerSetRequestMultiError) AllErrors() []error { return m }

// RollbackGameServerSetRequestValidationError is the validation error returned
// by RollbackGameServerSetRequest.Validate if the designated constraints
// aren't met.
type RollbackGameServerSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackGameServerSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackGameServerSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackGameServerSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackGameServerSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackGameServerSetRequestValidationError) ErrorName() string {
	return "RollbackGameServerSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackGameServerSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackGameServerSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackGameServerSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackGameServerSetRequestValidationError{}

// Validate checks the field values on RollbackGameServerSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackGameServerSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackGameServerSetResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RollbackGameServerSetResponseMultiError, or nil if none found.
func (m *RollbackGameServerSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackGameServerSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RollbackGameServerSetResponseMultiError(errors)
	}

	return nil
}

// RollbackGameServerSetResponseMultiError is an error wrapping multiple
// validation errors returned by RollbackGameServerSetResponse.ValidateAll()
// if the designated constraints aren't met.
type RollbackGameServerSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackGameServerSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackGameServerSetResponseMultiError) AllErrors() []error { return m }

// RollbackGameServerSetResponseValidationError is the validation error
// returned by RollbackGameServerSetResponse.Validate if the designated
// constraints aren't met.
type RollbackGameServerSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackGameServerSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackGameServerSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackGameServerSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackGameServerSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackGameServerSetResponseValidationError) ErrorName() string {
	return "RollbackGameServerSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackGameServerSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackGameServerSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackGameServerSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackGameServerSetResponseValidationError{}

// Validate checks the field values on DeleteGameServerSetPodRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGameServerSetPodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGameServerSetPodRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteGameServerSetPodRequestMultiError, or nil if none found.
func (m *DeleteGameServerSetPodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGameServerSetPodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteGameServerSetPodRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteGameServerSetPodRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteGameServerSetPodRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteGameServerSetPodRequestMultiError(errors)
	}

	return nil
}

// DeleteGameServerSetPodRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteGameServerSetPodRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteGameServerSetPodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGameServerSetPodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGameServerSetPodRequestMultiError) AllErrors() []error { return m }

// DeleteGameServerSetPodRequestValidationError is the validation error
// returned by DeleteGameServerSetPodRequest.Validate if the designated
// constraints aren't met.
type DeleteGameServerSetPodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGameServerSetPodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGameServerSetPodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGameServerSetPodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGameServerSetPodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGameServerSetPodRequestValidationError) ErrorName() string {
	return "DeleteGameServerSetPodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGameServerSetPodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGameServerSetPodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGameServerSetPodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGameServerSetPodRequestValidationError{}

// Validate checks the field values on DeleteGameServerSetPodResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGameServerSetPodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGameServerSetPodResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteGameServerSetPodResponseMultiError, or nil if none found.
func (m *DeleteGameServerSetPodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGameServerSetPodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteGameServerSetPodResponseMultiError(errors)
	}

	return nil
}

// DeleteGameServerSetPodResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteGameServerSetPodResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteGameServerSetPodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGameServerSetPodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGameServerSetPodResponseMultiError) AllErrors() []error { return m }

// DeleteGameServerSetPodResponseValidationError is the validation error
// returned by DeleteGameServerSetPodResponse.Validate if the designated
// constraints aren't met.
type DeleteGameServerSetPodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGameServerSetPodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGameServerSetPodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGameServerSetPodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGameServerSetPodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGameServerSetPodResponseValidationError) ErrorName() string {
	return "DeleteGameServerSetPodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGameServerSetPodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGameServerSetPodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGameServerSetPodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGameServerSetPodResponseValidationError{}

// Validate checks the field values on UpdateGameServerSetScaleStrategyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateGameServerSetScaleStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateGameServerSetScaleStrategyRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateGameServerSetScaleStrategyRequestMultiError, or nil if none found.
func (m *UpdateGameServerSetScaleStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameServerSetScaleStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateGameServerSetScaleStrategyRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateGameServerSetScaleStrategyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateGameServerSetScaleStrategyRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinReadySeconds() < 1 {
		err := UpdateGameServerSetScaleStrategyRequestValidationError{
			field:  "MinReadySeconds",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMaxUnavailable()) < 1 {
		err := UpdateGameServerSetScaleStrategyRequestValidationError{
			field:  "MaxUnavailable",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateGameServerSetScaleStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateGameServerSetScaleStrategyRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateGameServerSetScaleStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGameServerSetScaleStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameServerSetScaleStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameServerSetScaleStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateGameServerSetScaleStrategyRequestValidationError is the validation
// error returned by UpdateGameServerSetScaleStrategyRequest.Validate if the
// designated constraints aren't met.
type UpdateGameServerSetScaleStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameServerSetScaleStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameServerSetScaleStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameServerSetScaleStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameServerSetScaleStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameServerSetScaleStrategyRequestValidationError) ErrorName() string {
	return "UpdateGameServerSetScaleStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameServerSetScaleStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameServerSetScaleStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameServerSetScaleStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameServerSetScaleStrategyRequestValidationError{}

// Validate checks the field values on UpdateGameServerSetScaleStrategyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateGameServerSetScaleStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateGameServerSetScaleStrategyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateGameServerSetScaleStrategyResponseMultiError, or nil if none found.
func (m *UpdateGameServerSetScaleStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameServerSetScaleStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGameServerSetScaleStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateGameServerSetScaleStrategyResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateGameServerSetScaleStrategyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGameServerSetScaleStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameServerSetScaleStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameServerSetScaleStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateGameServerSetScaleStrategyResponseValidationError is the validation
// error returned by UpdateGameServerSetScaleStrategyResponse.Validate if the
// designated constraints aren't met.
type UpdateGameServerSetScaleStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameServerSetScaleStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameServerSetScaleStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameServerSetScaleStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameServerSetScaleStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameServerSetScaleStrategyResponseValidationError) ErrorName() string {
	return "UpdateGameServerSetScaleStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameServerSetScaleStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameServerSetScaleStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameServerSetScaleStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameServerSetScaleStrategyResponseValidationError{}

// Validate checks the field values on
// UpdateGameServerSetUpgradeStrategyRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateGameServerSetUpgradeStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateGameServerSetUpgradeStrategyRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateGameServerSetUpgradeStrategyRequestMultiError, or nil if none found.
func (m *UpdateGameServerSetUpgradeStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameServerSetUpgradeStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateGameServerSetUpgradeStrategyRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateGameServerSetUpgradeStrategyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateGameServerSetUpgradeStrategyRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateGameServerSetUpgradeStrategyRequest_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := UpdateGameServerSetUpgradeStrategyRequestValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateGameServerSetUpgradeStrategyRequest_PodUpdateStrategy_name[int32(m.GetPodUpdateStrategyType())]; !ok {
		err := UpdateGameServerSetUpgradeStrategyRequestValidationError{
			field:  "PodUpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGracePeriodSeconds() < 0 {
		err := UpdateGameServerSetUpgradeStrategyRequestValidationError{
			field:  "GracePeriodSeconds",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxSurge

	// no validation rules for MaxUnavailable

	// no validation rules for Partition

	if len(errors) > 0 {
		return UpdateGameServerSetUpgradeStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateGameServerSetUpgradeStrategyRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateGameServerSetUpgradeStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGameServerSetUpgradeStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameServerSetUpgradeStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameServerSetUpgradeStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateGameServerSetUpgradeStrategyRequestValidationError is the validation
// error returned by UpdateGameServerSetUpgradeStrategyRequest.Validate if the
// designated constraints aren't met.
type UpdateGameServerSetUpgradeStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameServerSetUpgradeStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameServerSetUpgradeStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameServerSetUpgradeStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameServerSetUpgradeStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameServerSetUpgradeStrategyRequestValidationError) ErrorName() string {
	return "UpdateGameServerSetUpgradeStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameServerSetUpgradeStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameServerSetUpgradeStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameServerSetUpgradeStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameServerSetUpgradeStrategyRequestValidationError{}

// Validate checks the field values on
// UpdateGameServerSetUpgradeStrategyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateGameServerSetUpgradeStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateGameServerSetUpgradeStrategyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateGameServerSetUpgradeStrategyResponseMultiError, or nil if none found.
func (m *UpdateGameServerSetUpgradeStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameServerSetUpgradeStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateGameServerSetUpgradeStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateGameServerSetUpgradeStrategyResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateGameServerSetUpgradeStrategyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGameServerSetUpgradeStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameServerSetUpgradeStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameServerSetUpgradeStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateGameServerSetUpgradeStrategyResponseValidationError is the validation
// error returned by UpdateGameServerSetUpgradeStrategyResponse.Validate if
// the designated constraints aren't met.
type UpdateGameServerSetUpgradeStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameServerSetUpgradeStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameServerSetUpgradeStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameServerSetUpgradeStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameServerSetUpgradeStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameServerSetUpgradeStrategyResponseValidationError) ErrorName() string {
	return "UpdateGameServerSetUpgradeStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameServerSetUpgradeStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameServerSetUpgradeStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameServerSetUpgradeStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameServerSetUpgradeStrategyResponseValidationError{}

// Validate checks the field values on ListGameServerSetReversionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGameServerSetReversionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameServerSetReversionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListGameServerSetReversionRequestMultiError, or nil if none found.
func (m *ListGameServerSetReversionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameServerSetReversionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListGameServerSetReversionRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ListGameServerSetReversionRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListGameServerSetReversionRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGameServerSetReversionRequestMultiError(errors)
	}

	return nil
}

// ListGameServerSetReversionRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListGameServerSetReversionRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGameServerSetReversionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameServerSetReversionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameServerSetReversionRequestMultiError) AllErrors() []error { return m }

// ListGameServerSetReversionRequestValidationError is the validation error
// returned by ListGameServerSetReversionRequest.Validate if the designated
// constraints aren't met.
type ListGameServerSetReversionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameServerSetReversionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameServerSetReversionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameServerSetReversionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameServerSetReversionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameServerSetReversionRequestValidationError) ErrorName() string {
	return "ListGameServerSetReversionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameServerSetReversionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameServerSetReversionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameServerSetReversionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameServerSetReversionRequestValidationError{}

// Validate checks the field values on GameServerSetControllerReversionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GameServerSetControllerReversionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameServerSetControllerReversionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GameServerSetControllerReversionItemMultiError, or nil if none found.
func (m *GameServerSetControllerReversionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GameServerSetControllerReversionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Yaml

	// no validation rules for CreateTime

	// no validation rules for IsCurrent

	if len(errors) > 0 {
		return GameServerSetControllerReversionItemMultiError(errors)
	}

	return nil
}

// GameServerSetControllerReversionItemMultiError is an error wrapping multiple
// validation errors returned by
// GameServerSetControllerReversionItem.ValidateAll() if the designated
// constraints aren't met.
type GameServerSetControllerReversionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameServerSetControllerReversionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameServerSetControllerReversionItemMultiError) AllErrors() []error { return m }

// GameServerSetControllerReversionItemValidationError is the validation error
// returned by GameServerSetControllerReversionItem.Validate if the designated
// constraints aren't met.
type GameServerSetControllerReversionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameServerSetControllerReversionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameServerSetControllerReversionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameServerSetControllerReversionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameServerSetControllerReversionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameServerSetControllerReversionItemValidationError) ErrorName() string {
	return "GameServerSetControllerReversionItemValidationError"
}

// Error satisfies the builtin error interface
func (e GameServerSetControllerReversionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameServerSetControllerReversionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameServerSetControllerReversionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameServerSetControllerReversionItemValidationError{}

// Validate checks the field values on ListGameServerSetReversionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGameServerSetReversionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGameServerSetReversionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListGameServerSetReversionResponseMultiError, or nil if none found.
func (m *ListGameServerSetReversionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGameServerSetReversionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGameServerSetReversionResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGameServerSetReversionResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGameServerSetReversionResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListGameServerSetReversionResponseMultiError(errors)
	}

	return nil
}

// ListGameServerSetReversionResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListGameServerSetReversionResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGameServerSetReversionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGameServerSetReversionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGameServerSetReversionResponseMultiError) AllErrors() []error { return m }

// ListGameServerSetReversionResponseValidationError is the validation error
// returned by ListGameServerSetReversionResponse.Validate if the designated
// constraints aren't met.
type ListGameServerSetReversionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGameServerSetReversionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGameServerSetReversionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGameServerSetReversionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGameServerSetReversionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGameServerSetReversionResponseValidationError) ErrorName() string {
	return "ListGameServerSetReversionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGameServerSetReversionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGameServerSetReversionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGameServerSetReversionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGameServerSetReversionResponseValidationError{}
