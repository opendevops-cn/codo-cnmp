// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/auditlog.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperationStatus int32

const (
	// 未知
	OperationStatus_OperationStatus_UNKNOWN OperationStatus = 0
	// 失败
	OperationStatus_Fail OperationStatus = 1
	// 成功
	OperationStatus_Success OperationStatus = 2
)

// Enum value maps for OperationStatus.
var (
	OperationStatus_name = map[int32]string{
		0: "OperationStatus_UNKNOWN",
		1: "Fail",
		2: "Success",
	}
	OperationStatus_value = map[string]int32{
		"OperationStatus_UNKNOWN": 0,
		"Fail":                    1,
		"Success":                 2,
	}
)

func (x OperationStatus) Enum() *OperationStatus {
	p := new(OperationStatus)
	*p = x
	return p
}

func (x OperationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_auditlog_v1_proto_enumTypes[0].Descriptor()
}

func (OperationStatus) Type() protoreflect.EnumType {
	return &file_pb_auditlog_v1_proto_enumTypes[0]
}

func (x OperationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus.Descriptor instead.
func (OperationStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_auditlog_v1_proto_rawDescGZIP(), []int{0}
}

type ListAuditLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作人
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,optional"`
	// 操作IP
	ClientIp string `protobuf:"bytes,2,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,optional"`
	// 集群
	Cluster string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,optional"`
	// 模块
	Module string `protobuf:"bytes,5,opt,name=module,proto3" json:"module,optional"`
	// 对象类型
	ResourceType string `protobuf:"bytes,6,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,optional"`
	// 对象名称
	ResourceName string `protobuf:"bytes,7,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,optional"`
	// 操作类型
	Action string `protobuf:"bytes,8,opt,name=action,proto3" json:"action,optional"`
	// 操作状态
	Status OperationStatus `protobuf:"varint,9,opt,name=status,proto3,enum=auditlog.v1.OperationStatus" json:"status,optional"`
	// 开始时间
	StartTime *string `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,optional"`
	// 结束时间
	EndTime *string `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,optional"`
	// 分页参数
	Page     uint32 `protobuf:"varint,12,opt,name=page,proto3" json:"page,optional"`
	PageSize uint32 `protobuf:"varint,13,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	ListAll  uint32 `protobuf:"varint,14,opt,name=list_all,json=listAll,proto3" json:"list_all,optional"`
}

func (x *ListAuditLogRequest) Reset() {
	*x = ListAuditLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_auditlog_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogRequest) ProtoMessage() {}

func (x *ListAuditLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_auditlog_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogRequest.ProtoReflect.Descriptor instead.
func (*ListAuditLogRequest) Descriptor() ([]byte, []int) {
	return file_pb_auditlog_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListAuditLogRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListAuditLogRequest) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *ListAuditLogRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ListAuditLogRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListAuditLogRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *ListAuditLogRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ListAuditLogRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ListAuditLogRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ListAuditLogRequest) GetStatus() OperationStatus {
	if x != nil {
		return x.Status
	}
	return OperationStatus_OperationStatus_UNKNOWN
}

func (x *ListAuditLogRequest) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *ListAuditLogRequest) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *ListAuditLogRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAuditLogRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAuditLogRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

// 响应消息
type ListAuditLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 审计日志列表
	List []*AuditLogItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListAuditLogResponse) Reset() {
	*x = ListAuditLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_auditlog_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAuditLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogResponse) ProtoMessage() {}

func (x *ListAuditLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_auditlog_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogResponse.ProtoReflect.Descriptor instead.
func (*ListAuditLogResponse) Descriptor() ([]byte, []int) {
	return file_pb_auditlog_v1_proto_rawDescGZIP(), []int{1}
}

func (x *ListAuditLogResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAuditLogResponse) GetList() []*AuditLogItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 审计日志详情
type AuditLogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,optional"`
	// 操作人
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,optional"`
	// 操作IP
	ClientIp string `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,optional"`
	// 集群
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,optional"`
	// 模块
	Module string `protobuf:"bytes,6,opt,name=module,proto3" json:"module,optional"`
	// 对象类型
	ResourceType string `protobuf:"bytes,7,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,optional"`
	// 对象名称
	ResourceName string `protobuf:"bytes,8,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,optional"`
	// 操作类型
	Action string `protobuf:"bytes,9,opt,name=action,proto3" json:"action,optional"`
	// 请求路径
	RequestPath string `protobuf:"bytes,10,opt,name=request_path,json=requestPath,proto3" json:"request_path,optional"`
	// 请求内容
	RequestBody string `protobuf:"bytes,11,opt,name=request_body,json=requestBody,proto3" json:"request_body,optional"`
	// 响应内容
	ResponseBody string `protobuf:"bytes,12,opt,name=response_body,json=responseBody,proto3" json:"response_body,optional"`
	// 操作状态
	Status OperationStatus `protobuf:"varint,13,opt,name=status,proto3,enum=auditlog.v1.OperationStatus" json:"status,optional"`
	// 操作耗时(ms)
	Duration string `protobuf:"bytes,14,opt,name=duration,proto3" json:"duration,optional"`
	// 操作时间
	OperationTime uint64 `protobuf:"varint,15,opt,name=operation_time,json=operationTime,proto3" json:"operation_time,optional"`
	// 创建时间
	CreatedTime uint64 `protobuf:"varint,16,opt,name=created_time,json=createdTime,proto3" json:"created_time,optional"`
}

func (x *AuditLogItem) Reset() {
	*x = AuditLogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_auditlog_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogItem) ProtoMessage() {}

func (x *AuditLogItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_auditlog_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogItem.ProtoReflect.Descriptor instead.
func (*AuditLogItem) Descriptor() ([]byte, []int) {
	return file_pb_auditlog_v1_proto_rawDescGZIP(), []int{2}
}

func (x *AuditLogItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AuditLogItem) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuditLogItem) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *AuditLogItem) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AuditLogItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AuditLogItem) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *AuditLogItem) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AuditLogItem) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *AuditLogItem) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *AuditLogItem) GetRequestPath() string {
	if x != nil {
		return x.RequestPath
	}
	return ""
}

func (x *AuditLogItem) GetRequestBody() string {
	if x != nil {
		return x.RequestBody
	}
	return ""
}

func (x *AuditLogItem) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *AuditLogItem) GetStatus() OperationStatus {
	if x != nil {
		return x.Status
	}
	return OperationStatus_OperationStatus_UNKNOWN
}

func (x *AuditLogItem) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AuditLogItem) GetOperationTime() uint64 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

func (x *AuditLogItem) GetCreatedTime() uint64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type GetAuditLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,optional"`
}

func (x *GetAuditLogRequest) Reset() {
	*x = GetAuditLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_auditlog_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLogRequest) ProtoMessage() {}

func (x *GetAuditLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_auditlog_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLogRequest.ProtoReflect.Descriptor instead.
func (*GetAuditLogRequest) Descriptor() ([]byte, []int) {
	return file_pb_auditlog_v1_proto_rawDescGZIP(), []int{3}
}

func (x *GetAuditLogRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAuditLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 审计日志详情
	Detail *AuditLogItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *GetAuditLogResponse) Reset() {
	*x = GetAuditLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_auditlog_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuditLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLogResponse) ProtoMessage() {}

func (x *GetAuditLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_auditlog_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLogResponse.ProtoReflect.Descriptor instead.
func (*GetAuditLogResponse) Descriptor() ([]byte, []int) {
	return file_pb_auditlog_v1_proto_rawDescGZIP(), []int{4}
}

func (x *GetAuditLogResponse) GetDetail() *AuditLogItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

type AuditLogQueryConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuditLogQueryConditionRequest) Reset() {
	*x = AuditLogQueryConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_auditlog_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogQueryConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogQueryConditionRequest) ProtoMessage() {}

func (x *AuditLogQueryConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_auditlog_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogQueryConditionRequest.ProtoReflect.Descriptor instead.
func (*AuditLogQueryConditionRequest) Descriptor() ([]byte, []int) {
	return file_pb_auditlog_v1_proto_rawDescGZIP(), []int{5}
}

type AuditLogQueryConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群
	Cluster []string `protobuf:"bytes,1,rep,name=cluster,proto3" json:"cluster,optional"`
	// 命名空间
	Namespace []string `protobuf:"bytes,2,rep,name=namespace,proto3" json:"namespace,optional"`
	// 模块
	Module []string `protobuf:"bytes,3,rep,name=module,proto3" json:"module,optional"`
	// 对象类型
	ResourceType []string `protobuf:"bytes,4,rep,name=resource_type,json=resourceType,proto3" json:"resource_type,optional"`
	// 操作类型
	Action []string `protobuf:"bytes,5,rep,name=action,proto3" json:"action,optional"`
	// 操作状态
	Status []OperationStatus `protobuf:"varint,6,rep,packed,name=status,proto3,enum=auditlog.v1.OperationStatus" json:"status,optional"`
}

func (x *AuditLogQueryConditionResponse) Reset() {
	*x = AuditLogQueryConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_auditlog_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogQueryConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogQueryConditionResponse) ProtoMessage() {}

func (x *AuditLogQueryConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_auditlog_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogQueryConditionResponse.ProtoReflect.Descriptor instead.
func (*AuditLogQueryConditionResponse) Descriptor() ([]byte, []int) {
	return file_pb_auditlog_v1_proto_rawDescGZIP(), []int{6}
}

func (x *AuditLogQueryConditionResponse) GetCluster() []string {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *AuditLogQueryConditionResponse) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *AuditLogQueryConditionResponse) GetModule() []string {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *AuditLogQueryConditionResponse) GetResourceType() []string {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *AuditLogQueryConditionResponse) GetAction() []string {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *AuditLogQueryConditionResponse) GetStatus() []OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_pb_auditlog_v1_proto protoreflect.FileDescriptor

var file_pb_auditlog_v1_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x62, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x03, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x6c, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x5b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x04, 0x0a,
	0x0c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x1f, 0x0a, 0x1d, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x1e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x45,
	0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x10, 0x02, 0x32, 0xaa, 0x03, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x12, 0x78, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xaa, 0x01, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1f, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0xc2, 0xdb, 0xaa,
	0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f,
	0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_auditlog_v1_proto_rawDescOnce sync.Once
	file_pb_auditlog_v1_proto_rawDescData = file_pb_auditlog_v1_proto_rawDesc
)

func file_pb_auditlog_v1_proto_rawDescGZIP() []byte {
	file_pb_auditlog_v1_proto_rawDescOnce.Do(func() {
		file_pb_auditlog_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_auditlog_v1_proto_rawDescData)
	})
	return file_pb_auditlog_v1_proto_rawDescData
}

var file_pb_auditlog_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_auditlog_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pb_auditlog_v1_proto_goTypes = []interface{}{
	(OperationStatus)(0),                   // 0: auditlog.v1.OperationStatus
	(*ListAuditLogRequest)(nil),            // 1: auditlog.v1.ListAuditLogRequest
	(*ListAuditLogResponse)(nil),           // 2: auditlog.v1.ListAuditLogResponse
	(*AuditLogItem)(nil),                   // 3: auditlog.v1.AuditLogItem
	(*GetAuditLogRequest)(nil),             // 4: auditlog.v1.GetAuditLogRequest
	(*GetAuditLogResponse)(nil),            // 5: auditlog.v1.GetAuditLogResponse
	(*AuditLogQueryConditionRequest)(nil),  // 6: auditlog.v1.AuditLogQueryConditionRequest
	(*AuditLogQueryConditionResponse)(nil), // 7: auditlog.v1.AuditLogQueryConditionResponse
}
var file_pb_auditlog_v1_proto_depIdxs = []int32{
	0, // 0: auditlog.v1.ListAuditLogRequest.status:type_name -> auditlog.v1.OperationStatus
	3, // 1: auditlog.v1.ListAuditLogResponse.list:type_name -> auditlog.v1.AuditLogItem
	0, // 2: auditlog.v1.AuditLogItem.status:type_name -> auditlog.v1.OperationStatus
	3, // 3: auditlog.v1.GetAuditLogResponse.detail:type_name -> auditlog.v1.AuditLogItem
	0, // 4: auditlog.v1.AuditLogQueryConditionResponse.status:type_name -> auditlog.v1.OperationStatus
	1, // 5: auditlog.v1.AuditLog.ListAuditLog:input_type -> auditlog.v1.ListAuditLogRequest
	6, // 6: auditlog.v1.AuditLog.ListAuditLogQueryCondition:input_type -> auditlog.v1.AuditLogQueryConditionRequest
	4, // 7: auditlog.v1.AuditLog.GetAuditLog:input_type -> auditlog.v1.GetAuditLogRequest
	2, // 8: auditlog.v1.AuditLog.ListAuditLog:output_type -> auditlog.v1.ListAuditLogResponse
	7, // 9: auditlog.v1.AuditLog.ListAuditLogQueryCondition:output_type -> auditlog.v1.AuditLogQueryConditionResponse
	5, // 10: auditlog.v1.AuditLog.GetAuditLog:output_type -> auditlog.v1.GetAuditLogResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pb_auditlog_v1_proto_init() }
func file_pb_auditlog_v1_proto_init() {
	if File_pb_auditlog_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_auditlog_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_auditlog_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAuditLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_auditlog_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_auditlog_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuditLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_auditlog_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuditLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_auditlog_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogQueryConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_auditlog_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogQueryConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pb_auditlog_v1_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_auditlog_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_auditlog_v1_proto_goTypes,
		DependencyIndexes: file_pb_auditlog_v1_proto_depIdxs,
		EnumInfos:         file_pb_auditlog_v1_proto_enumTypes,
		MessageInfos:      file_pb_auditlog_v1_proto_msgTypes,
	}.Build()
	File_pb_auditlog_v1_proto = out.File
	file_pb_auditlog_v1_proto_rawDesc = nil
	file_pb_auditlog_v1_proto_goTypes = nil
	file_pb_auditlog_v1_proto_depIdxs = nil
}
