// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/websocket.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TailPodLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TailPodLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailPodLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailPodLogsRequestMultiError, or nil if none found.
func (m *TailPodLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TailPodLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := TailPodLogsRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := TailPodLogsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := TailPodLogsRequestValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContainerName()) < 1 {
		err := TailPodLogsRequestValidationError{
			field:  "ContainerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTailLines() <= 0 {
		err := TailPodLogsRequestValidationError{
			field:  "TailLines",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TailPodLogsRequestMultiError(errors)
	}

	return nil
}

// TailPodLogsRequestMultiError is an error wrapping multiple validation errors
// returned by TailPodLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type TailPodLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailPodLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailPodLogsRequestMultiError) AllErrors() []error { return m }

// TailPodLogsRequestValidationError is the validation error returned by
// TailPodLogsRequest.Validate if the designated constraints aren't met.
type TailPodLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailPodLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailPodLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailPodLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailPodLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailPodLogsRequestValidationError) ErrorName() string {
	return "TailPodLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TailPodLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailPodLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailPodLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailPodLogsRequestValidationError{}

// Validate checks the field values on TailPodLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TailPodLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailPodLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailPodLogsResponseMultiError, or nil if none found.
func (m *TailPodLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TailPodLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Log

	if len(errors) > 0 {
		return TailPodLogsResponseMultiError(errors)
	}

	return nil
}

// TailPodLogsResponseMultiError is an error wrapping multiple validation
// errors returned by TailPodLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type TailPodLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailPodLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailPodLogsResponseMultiError) AllErrors() []error { return m }

// TailPodLogsResponseValidationError is the validation error returned by
// TailPodLogsResponse.Validate if the designated constraints aren't met.
type TailPodLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailPodLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailPodLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailPodLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailPodLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailPodLogsResponseValidationError) ErrorName() string {
	return "TailPodLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TailPodLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailPodLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailPodLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailPodLogsResponseValidationError{}

// Validate checks the field values on ExecPodCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecPodCommandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecPodCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecPodCommandRequestMultiError, or nil if none found.
func (m *ExecPodCommandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecPodCommandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationType

	if all {
		switch v := interface{}(m.GetConnectInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecPodCommandRequestValidationError{
					field:  "ConnectInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecPodCommandRequestValidationError{
					field:  "ConnectInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnectInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecPodCommandRequestValidationError{
				field:  "ConnectInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommandInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecPodCommandRequestValidationError{
					field:  "CommandInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecPodCommandRequestValidationError{
					field:  "CommandInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommandInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecPodCommandRequestValidationError{
				field:  "CommandInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResizeWindowInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecPodCommandRequestValidationError{
					field:  "ResizeWindowInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecPodCommandRequestValidationError{
					field:  "ResizeWindowInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResizeWindowInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecPodCommandRequestValidationError{
				field:  "ResizeWindowInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecPodCommandRequestMultiError(errors)
	}

	return nil
}

// ExecPodCommandRequestMultiError is an error wrapping multiple validation
// errors returned by ExecPodCommandRequest.ValidateAll() if the designated
// constraints aren't met.
type ExecPodCommandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecPodCommandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecPodCommandRequestMultiError) AllErrors() []error { return m }

// ExecPodCommandRequestValidationError is the validation error returned by
// ExecPodCommandRequest.Validate if the designated constraints aren't met.
type ExecPodCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecPodCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecPodCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecPodCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecPodCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecPodCommandRequestValidationError) ErrorName() string {
	return "ExecPodCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecPodCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecPodCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecPodCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecPodCommandRequestValidationError{}

// Validate checks the field values on PodCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PodCommandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodCommandResponseMultiError, or nil if none found.
func (m *PodCommandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PodCommandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Output

	if len(errors) > 0 {
		return PodCommandResponseMultiError(errors)
	}

	return nil
}

// PodCommandResponseMultiError is an error wrapping multiple validation errors
// returned by PodCommandResponse.ValidateAll() if the designated constraints
// aren't met.
type PodCommandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodCommandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodCommandResponseMultiError) AllErrors() []error { return m }

// PodCommandResponseValidationError is the validation error returned by
// PodCommandResponse.Validate if the designated constraints aren't met.
type PodCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodCommandResponseValidationError) ErrorName() string {
	return "PodCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PodCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodCommandResponseValidationError{}

// Validate checks the field values on ExecPodCommandRequest_ConnectInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExecPodCommandRequest_ConnectInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecPodCommandRequest_ConnectInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExecPodCommandRequest_ConnectInfoMultiError, or nil if none found.
func (m *ExecPodCommandRequest_ConnectInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecPodCommandRequest_ConnectInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ExecPodCommandRequest_ConnectInfoValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ExecPodCommandRequest_ConnectInfoValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPodName()) < 1 {
		err := ExecPodCommandRequest_ConnectInfoValidationError{
			field:  "PodName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContainerName()) < 1 {
		err := ExecPodCommandRequest_ConnectInfoValidationError{
			field:  "ContainerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetShell()) < 1 {
		err := ExecPodCommandRequest_ConnectInfoValidationError{
			field:  "Shell",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExecPodCommandRequest_ConnectInfoMultiError(errors)
	}

	return nil
}

// ExecPodCommandRequest_ConnectInfoMultiError is an error wrapping multiple
// validation errors returned by
// ExecPodCommandRequest_ConnectInfo.ValidateAll() if the designated
// constraints aren't met.
type ExecPodCommandRequest_ConnectInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecPodCommandRequest_ConnectInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecPodCommandRequest_ConnectInfoMultiError) AllErrors() []error { return m }

// ExecPodCommandRequest_ConnectInfoValidationError is the validation error
// returned by ExecPodCommandRequest_ConnectInfo.Validate if the designated
// constraints aren't met.
type ExecPodCommandRequest_ConnectInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecPodCommandRequest_ConnectInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecPodCommandRequest_ConnectInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecPodCommandRequest_ConnectInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecPodCommandRequest_ConnectInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecPodCommandRequest_ConnectInfoValidationError) ErrorName() string {
	return "ExecPodCommandRequest_ConnectInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ExecPodCommandRequest_ConnectInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecPodCommandRequest_ConnectInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecPodCommandRequest_ConnectInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecPodCommandRequest_ConnectInfoValidationError{}

// Validate checks the field values on ExecPodCommandRequest_CommandInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExecPodCommandRequest_CommandInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecPodCommandRequest_CommandInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExecPodCommandRequest_CommandInfoMultiError, or nil if none found.
func (m *ExecPodCommandRequest_CommandInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecPodCommandRequest_CommandInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCommand()) < 1 {
		err := ExecPodCommandRequest_CommandInfoValidationError{
			field:  "Command",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExecPodCommandRequest_CommandInfoMultiError(errors)
	}

	return nil
}

// ExecPodCommandRequest_CommandInfoMultiError is an error wrapping multiple
// validation errors returned by
// ExecPodCommandRequest_CommandInfo.ValidateAll() if the designated
// constraints aren't met.
type ExecPodCommandRequest_CommandInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecPodCommandRequest_CommandInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecPodCommandRequest_CommandInfoMultiError) AllErrors() []error { return m }

// ExecPodCommandRequest_CommandInfoValidationError is the validation error
// returned by ExecPodCommandRequest_CommandInfo.Validate if the designated
// constraints aren't met.
type ExecPodCommandRequest_CommandInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecPodCommandRequest_CommandInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecPodCommandRequest_CommandInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecPodCommandRequest_CommandInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecPodCommandRequest_CommandInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecPodCommandRequest_CommandInfoValidationError) ErrorName() string {
	return "ExecPodCommandRequest_CommandInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ExecPodCommandRequest_CommandInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecPodCommandRequest_CommandInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecPodCommandRequest_CommandInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecPodCommandRequest_CommandInfoValidationError{}

// Validate checks the field values on ExecPodCommandRequest_ResizeWindowInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ExecPodCommandRequest_ResizeWindowInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ExecPodCommandRequest_ResizeWindowInfo with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ExecPodCommandRequest_ResizeWindowInfoMultiError, or nil if none found.
func (m *ExecPodCommandRequest_ResizeWindowInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecPodCommandRequest_ResizeWindowInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRows() <= 0 {
		err := ExecPodCommandRequest_ResizeWindowInfoValidationError{
			field:  "Rows",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCols() <= 0 {
		err := ExecPodCommandRequest_ResizeWindowInfoValidationError{
			field:  "Cols",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExecPodCommandRequest_ResizeWindowInfoMultiError(errors)
	}

	return nil
}

// ExecPodCommandRequest_ResizeWindowInfoMultiError is an error wrapping
// multiple validation errors returned by
// ExecPodCommandRequest_ResizeWindowInfo.ValidateAll() if the designated
// constraints aren't met.
type ExecPodCommandRequest_ResizeWindowInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecPodCommandRequest_ResizeWindowInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecPodCommandRequest_ResizeWindowInfoMultiError) AllErrors() []error { return m }

// ExecPodCommandRequest_ResizeWindowInfoValidationError is the validation
// error returned by ExecPodCommandRequest_ResizeWindowInfo.Validate if the
// designated constraints aren't met.
type ExecPodCommandRequest_ResizeWindowInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecPodCommandRequest_ResizeWindowInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecPodCommandRequest_ResizeWindowInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecPodCommandRequest_ResizeWindowInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecPodCommandRequest_ResizeWindowInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecPodCommandRequest_ResizeWindowInfoValidationError) ErrorName() string {
	return "ExecPodCommandRequest_ResizeWindowInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ExecPodCommandRequest_ResizeWindowInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecPodCommandRequest_ResizeWindowInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecPodCommandRequest_ResizeWindowInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecPodCommandRequest_ResizeWindowInfoValidationError{}
