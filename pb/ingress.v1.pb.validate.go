// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/ingress.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIngressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIngressRequestMultiError, or nil if none found.
func (m *ListIngressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIngressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListIngressRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListIngressRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	// no validation rules for Host

	if len(errors) > 0 {
		return ListIngressRequestMultiError(errors)
	}

	return nil
}

// ListIngressRequestMultiError is an error wrapping multiple validation errors
// returned by ListIngressRequest.ValidateAll() if the designated constraints
// aren't met.
type ListIngressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIngressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIngressRequestMultiError) AllErrors() []error { return m }

// ListIngressRequestValidationError is the validation error returned by
// ListIngressRequest.Validate if the designated constraints aren't met.
type ListIngressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIngressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIngressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIngressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIngressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIngressRequestValidationError) ErrorName() string {
	return "ListIngressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIngressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIngressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIngressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIngressRequestValidationError{}

// Validate checks the field values on ServiceBackendPort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceBackendPort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceBackendPort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceBackendPortMultiError, or nil if none found.
func (m *ServiceBackendPort) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceBackendPort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Number

	if len(errors) > 0 {
		return ServiceBackendPortMultiError(errors)
	}

	return nil
}

// ServiceBackendPortMultiError is an error wrapping multiple validation errors
// returned by ServiceBackendPort.ValidateAll() if the designated constraints
// aren't met.
type ServiceBackendPortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceBackendPortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceBackendPortMultiError) AllErrors() []error { return m }

// ServiceBackendPortValidationError is the validation error returned by
// ServiceBackendPort.Validate if the designated constraints aren't met.
type ServiceBackendPortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceBackendPortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceBackendPortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceBackendPortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceBackendPortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceBackendPortValidationError) ErrorName() string {
	return "ServiceBackendPortValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceBackendPortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceBackendPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceBackendPortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceBackendPortValidationError{}

// Validate checks the field values on IngressServiceBackend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IngressServiceBackend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressServiceBackend with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressServiceBackendMultiError, or nil if none found.
func (m *IngressServiceBackend) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressServiceBackend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetPort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressServiceBackendValidationError{
					field:  "Port",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressServiceBackendValidationError{
					field:  "Port",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressServiceBackendValidationError{
				field:  "Port",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IngressServiceBackendMultiError(errors)
	}

	return nil
}

// IngressServiceBackendMultiError is an error wrapping multiple validation
// errors returned by IngressServiceBackend.ValidateAll() if the designated
// constraints aren't met.
type IngressServiceBackendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressServiceBackendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressServiceBackendMultiError) AllErrors() []error { return m }

// IngressServiceBackendValidationError is the validation error returned by
// IngressServiceBackend.Validate if the designated constraints aren't met.
type IngressServiceBackendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressServiceBackendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressServiceBackendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressServiceBackendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressServiceBackendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressServiceBackendValidationError) ErrorName() string {
	return "IngressServiceBackendValidationError"
}

// Error satisfies the builtin error interface
func (e IngressServiceBackendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressServiceBackend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressServiceBackendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressServiceBackendValidationError{}

// Validate checks the field values on IngressBackend with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressBackend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressBackend with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressBackendMultiError,
// or nil if none found.
func (m *IngressBackend) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressBackend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressBackendValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressBackendValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressBackendValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressBackendValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressBackendValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressBackendValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IngressBackendMultiError(errors)
	}

	return nil
}

// IngressBackendMultiError is an error wrapping multiple validation errors
// returned by IngressBackend.ValidateAll() if the designated constraints
// aren't met.
type IngressBackendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressBackendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressBackendMultiError) AllErrors() []error { return m }

// IngressBackendValidationError is the validation error returned by
// IngressBackend.Validate if the designated constraints aren't met.
type IngressBackendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressBackendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressBackendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressBackendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressBackendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressBackendValidationError) ErrorName() string { return "IngressBackendValidationError" }

// Error satisfies the builtin error interface
func (e IngressBackendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressBackend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressBackendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressBackendValidationError{}

// Validate checks the field values on HTTPIngressPath with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HTTPIngressPath) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPIngressPath with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HTTPIngressPathMultiError, or nil if none found.
func (m *HTTPIngressPath) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPIngressPath) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for PathType

	if all {
		switch v := interface{}(m.GetBackend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HTTPIngressPathValidationError{
					field:  "Backend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HTTPIngressPathValidationError{
					field:  "Backend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPIngressPathValidationError{
				field:  "Backend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HTTPIngressPathMultiError(errors)
	}

	return nil
}

// HTTPIngressPathMultiError is an error wrapping multiple validation errors
// returned by HTTPIngressPath.ValidateAll() if the designated constraints
// aren't met.
type HTTPIngressPathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPIngressPathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPIngressPathMultiError) AllErrors() []error { return m }

// HTTPIngressPathValidationError is the validation error returned by
// HTTPIngressPath.Validate if the designated constraints aren't met.
type HTTPIngressPathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPIngressPathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPIngressPathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPIngressPathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPIngressPathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPIngressPathValidationError) ErrorName() string { return "HTTPIngressPathValidationError" }

// Error satisfies the builtin error interface
func (e HTTPIngressPathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPIngressPath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPIngressPathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPIngressPathValidationError{}

// Validate checks the field values on HTTPIngressRuleValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HTTPIngressRuleValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPIngressRuleValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HTTPIngressRuleValueMultiError, or nil if none found.
func (m *HTTPIngressRuleValue) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPIngressRuleValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HTTPIngressRuleValueValidationError{
						field:  fmt.Sprintf("Paths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HTTPIngressRuleValueValidationError{
						field:  fmt.Sprintf("Paths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HTTPIngressRuleValueValidationError{
					field:  fmt.Sprintf("Paths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HTTPIngressRuleValueMultiError(errors)
	}

	return nil
}

// HTTPIngressRuleValueMultiError is an error wrapping multiple validation
// errors returned by HTTPIngressRuleValue.ValidateAll() if the designated
// constraints aren't met.
type HTTPIngressRuleValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPIngressRuleValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPIngressRuleValueMultiError) AllErrors() []error { return m }

// HTTPIngressRuleValueValidationError is the validation error returned by
// HTTPIngressRuleValue.Validate if the designated constraints aren't met.
type HTTPIngressRuleValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPIngressRuleValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPIngressRuleValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPIngressRuleValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPIngressRuleValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPIngressRuleValueValidationError) ErrorName() string {
	return "HTTPIngressRuleValueValidationError"
}

// Error satisfies the builtin error interface
func (e HTTPIngressRuleValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPIngressRuleValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPIngressRuleValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPIngressRuleValueValidationError{}

// Validate checks the field values on IngressRuleValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IngressRuleValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressRuleValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressRuleValueMultiError, or nil if none found.
func (m *IngressRuleValue) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressRuleValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressRuleValueValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressRuleValueValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressRuleValueValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IngressRuleValueMultiError(errors)
	}

	return nil
}

// IngressRuleValueMultiError is an error wrapping multiple validation errors
// returned by IngressRuleValue.ValidateAll() if the designated constraints
// aren't met.
type IngressRuleValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressRuleValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressRuleValueMultiError) AllErrors() []error { return m }

// IngressRuleValueValidationError is the validation error returned by
// IngressRuleValue.Validate if the designated constraints aren't met.
type IngressRuleValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressRuleValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressRuleValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressRuleValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressRuleValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressRuleValueValidationError) ErrorName() string { return "IngressRuleValueValidationError" }

// Error satisfies the builtin error interface
func (e IngressRuleValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressRuleValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressRuleValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressRuleValueValidationError{}

// Validate checks the field values on IngressRule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressRule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressRuleMultiError, or
// nil if none found.
func (m *IngressRule) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	if all {
		switch v := interface{}(m.GetIngressRuleValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressRuleValidationError{
					field:  "IngressRuleValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressRuleValidationError{
					field:  "IngressRuleValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIngressRuleValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressRuleValidationError{
				field:  "IngressRuleValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IngressRuleMultiError(errors)
	}

	return nil
}

// IngressRuleMultiError is an error wrapping multiple validation errors
// returned by IngressRule.ValidateAll() if the designated constraints aren't met.
type IngressRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressRuleMultiError) AllErrors() []error { return m }

// IngressRuleValidationError is the validation error returned by
// IngressRule.Validate if the designated constraints aren't met.
type IngressRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressRuleValidationError) ErrorName() string { return "IngressRuleValidationError" }

// Error satisfies the builtin error interface
func (e IngressRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressRuleValidationError{}

// Validate checks the field values on IngressItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressItemMultiError, or
// nil if none found.
func (m *IngressItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := IngressItemValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := IngressItemValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIngressRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IngressItemValidationError{
						field:  fmt.Sprintf("IngressRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IngressItemValidationError{
						field:  fmt.Sprintf("IngressRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IngressItemValidationError{
					field:  fmt.Sprintf("IngressRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IngressClassName

	// no validation rules for Vip

	// no validation rules for CreateTime

	// no validation rules for IsFollowed

	// no validation rules for Yaml

	// no validation rules for IngressRulesStr

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for UpdateTime

	if all {
		switch v := interface{}(m.GetDefaultBackend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressItemValidationError{
					field:  "DefaultBackend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressItemValidationError{
					field:  "DefaultBackend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultBackend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressItemValidationError{
				field:  "DefaultBackend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IngressItemValidationError{
						field:  fmt.Sprintf("Tls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IngressItemValidationError{
						field:  fmt.Sprintf("Tls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IngressItemValidationError{
					field:  fmt.Sprintf("Tls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IngressItemMultiError(errors)
	}

	return nil
}

// IngressItemMultiError is an error wrapping multiple validation errors
// returned by IngressItem.ValidateAll() if the designated constraints aren't met.
type IngressItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressItemMultiError) AllErrors() []error { return m }

// IngressItemValidationError is the validation error returned by
// IngressItem.Validate if the designated constraints aren't met.
type IngressItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressItemValidationError) ErrorName() string { return "IngressItemValidationError" }

// Error satisfies the builtin error interface
func (e IngressItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressItemValidationError{}

// Validate checks the field values on ListIngressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIngressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIngressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIngressResponseMultiError, or nil if none found.
func (m *ListIngressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIngressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIngressResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIngressResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIngressResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIngressResponseMultiError(errors)
	}

	return nil
}

// ListIngressResponseMultiError is an error wrapping multiple validation
// errors returned by ListIngressResponse.ValidateAll() if the designated
// constraints aren't met.
type ListIngressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIngressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIngressResponseMultiError) AllErrors() []error { return m }

// ListIngressResponseValidationError is the validation error returned by
// ListIngressResponse.Validate if the designated constraints aren't met.
type ListIngressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIngressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIngressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIngressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIngressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIngressResponseValidationError) ErrorName() string {
	return "ListIngressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIngressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIngressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIngressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIngressResponseValidationError{}

// Validate checks the field values on DeleteIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIngressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIngressRequestMultiError, or nil if none found.
func (m *DeleteIngressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIngressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteIngressRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteIngressRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteIngressRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteIngressRequestMultiError(errors)
	}

	return nil
}

// DeleteIngressRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteIngressRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteIngressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIngressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIngressRequestMultiError) AllErrors() []error { return m }

// DeleteIngressRequestValidationError is the validation error returned by
// DeleteIngressRequest.Validate if the designated constraints aren't met.
type DeleteIngressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIngressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIngressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIngressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIngressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIngressRequestValidationError) ErrorName() string {
	return "DeleteIngressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIngressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIngressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIngressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIngressRequestValidationError{}

// Validate checks the field values on DeleteIngressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIngressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIngressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIngressResponseMultiError, or nil if none found.
func (m *DeleteIngressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIngressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteIngressResponseMultiError(errors)
	}

	return nil
}

// DeleteIngressResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteIngressResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteIngressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIngressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIngressResponseMultiError) AllErrors() []error { return m }

// DeleteIngressResponseValidationError is the validation error returned by
// DeleteIngressResponse.Validate if the designated constraints aren't met.
type DeleteIngressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIngressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIngressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIngressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIngressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIngressResponseValidationError) ErrorName() string {
	return "DeleteIngressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIngressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIngressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIngressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIngressResponseValidationError{}

// Validate checks the field values on IngressDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IngressDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressDetailRequestMultiError, or nil if none found.
func (m *IngressDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := IngressDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := IngressDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := IngressDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IngressDetailRequestMultiError(errors)
	}

	return nil
}

// IngressDetailRequestMultiError is an error wrapping multiple validation
// errors returned by IngressDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type IngressDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressDetailRequestMultiError) AllErrors() []error { return m }

// IngressDetailRequestValidationError is the validation error returned by
// IngressDetailRequest.Validate if the designated constraints aren't met.
type IngressDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressDetailRequestValidationError) ErrorName() string {
	return "IngressDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IngressDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressDetailRequestValidationError{}

// Validate checks the field values on IngressDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IngressDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressDetailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressDetailResponseMultiError, or nil if none found.
func (m *IngressDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IngressDetailResponseMultiError(errors)
	}

	return nil
}

// IngressDetailResponseMultiError is an error wrapping multiple validation
// errors returned by IngressDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type IngressDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressDetailResponseMultiError) AllErrors() []error { return m }

// IngressDetailResponseValidationError is the validation error returned by
// IngressDetailResponse.Validate if the designated constraints aren't met.
type IngressDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressDetailResponseValidationError) ErrorName() string {
	return "IngressDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IngressDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressDetailResponseValidationError{}

// Validate checks the field values on ListHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHostRequestMultiError, or nil if none found.
func (m *ListHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListHostRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListHostRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListHostRequestMultiError(errors)
	}

	return nil
}

// ListHostRequestMultiError is an error wrapping multiple validation errors
// returned by ListHostRequest.ValidateAll() if the designated constraints
// aren't met.
type ListHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHostRequestMultiError) AllErrors() []error { return m }

// ListHostRequestValidationError is the validation error returned by
// ListHostRequest.Validate if the designated constraints aren't met.
type ListHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHostRequestValidationError) ErrorName() string { return "ListHostRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHostRequestValidationError{}

// Validate checks the field values on ListHostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHostResponseMultiError, or nil if none found.
func (m *ListHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	if len(errors) > 0 {
		return ListHostResponseMultiError(errors)
	}

	return nil
}

// ListHostResponseMultiError is an error wrapping multiple validation errors
// returned by ListHostResponse.ValidateAll() if the designated constraints
// aren't met.
type ListHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHostResponseMultiError) AllErrors() []error { return m }

// ListHostResponseValidationError is the validation error returned by
// ListHostResponse.Validate if the designated constraints aren't met.
type ListHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHostResponseValidationError) ErrorName() string { return "ListHostResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHostResponseValidationError{}

// Validate checks the field values on IngressTLS with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressTLS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressTLS with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressTLSMultiError, or
// nil if none found.
func (m *IngressTLS) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressTLS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SecretName

	if len(errors) > 0 {
		return IngressTLSMultiError(errors)
	}

	return nil
}

// IngressTLSMultiError is an error wrapping multiple validation errors
// returned by IngressTLS.ValidateAll() if the designated constraints aren't met.
type IngressTLSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressTLSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressTLSMultiError) AllErrors() []error { return m }

// IngressTLSValidationError is the validation error returned by
// IngressTLS.Validate if the designated constraints aren't met.
type IngressTLSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressTLSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressTLSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressTLSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressTLSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressTLSValidationError) ErrorName() string { return "IngressTLSValidationError" }

// Error satisfies the builtin error interface
func (e IngressTLSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressTLS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressTLSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressTLSValidationError{}

// Validate checks the field values on CreateIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIngressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIngressRequestMultiError, or nil if none found.
func (m *CreateIngressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIngressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateIngressRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateIngressRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IngressClassName

	for idx, item := range m.GetIngressRules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateIngressRequestValidationError{
						field:  fmt.Sprintf("IngressRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateIngressRequestValidationError{
						field:  fmt.Sprintf("IngressRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateIngressRequestValidationError{
					field:  fmt.Sprintf("IngressRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateIngressRequestValidationError{
						field:  fmt.Sprintf("Tls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateIngressRequestValidationError{
						field:  fmt.Sprintf("Tls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateIngressRequestValidationError{
					field:  fmt.Sprintf("Tls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Labels

	// no validation rules for Selector

	// no validation rules for Annotations

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateIngressRequestMultiError(errors)
	}

	return nil
}

// CreateIngressRequestMultiError is an error wrapping multiple validation
// errors returned by CreateIngressRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateIngressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIngressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIngressRequestMultiError) AllErrors() []error { return m }

// CreateIngressRequestValidationError is the validation error returned by
// CreateIngressRequest.Validate if the designated constraints aren't met.
type CreateIngressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIngressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIngressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIngressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIngressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIngressRequestValidationError) ErrorName() string {
	return "CreateIngressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIngressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIngressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIngressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIngressRequestValidationError{}

// Validate checks the field values on CreateIngressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIngressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIngressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIngressResponseMultiError, or nil if none found.
func (m *CreateIngressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIngressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateIngressResponseMultiError(errors)
	}

	return nil
}

// CreateIngressResponseMultiError is an error wrapping multiple validation
// errors returned by CreateIngressResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateIngressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIngressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIngressResponseMultiError) AllErrors() []error { return m }

// CreateIngressResponseValidationError is the validation error returned by
// CreateIngressResponse.Validate if the designated constraints aren't met.
type CreateIngressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIngressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIngressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIngressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIngressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIngressResponseValidationError) ErrorName() string {
	return "CreateIngressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIngressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIngressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIngressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIngressResponseValidationError{}
