// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.2
// source: pb/crd.v1.proto

package pb

import (
	context "context"
	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationCRDListCRD = "/crd.v1.CRD/ListCRD"
const OperationCRDListCRDInstance = "/crd.v1.CRD/ListCRDInstance"
const OperationCRDDeleteCRD = "/crd.v1.CRD/DeleteCRD"

type CRDHTTPServer interface {
	// ListCRD查看-云原生管理-CRD-列表
	ListCRD(context.Context, *ListCRDRequest) (*ListCRDResponse, error)
	// ListCRDInstance查看-云原生管理-CRD实例-列表
	ListCRDInstance(context.Context, *ListCRDInstanceRequest) (*ListCRDInstanceResponse, error)
	// DeleteCRD管理-云原生管理-CRD-删除
	DeleteCRD(context.Context, *DeleteCRDRequest) (*DeleteCRDResponse, error)
}

func NewCRDHTTPServerMiddleware() middleware.Middleware {
	return selector.Server(
		selector.Server().Path(OperationCRDListCRD).Build(),
		selector.Server().Path(OperationCRDListCRDInstance).Build(),
		selector.Server().Path(OperationCRDDeleteCRD).Build(),
	).Path(
		OperationCRDListCRD,
		OperationCRDListCRDInstance,
		OperationCRDDeleteCRD,
	).Build()
}

func RegisterCRDHTTPServer(s *http.Server, srv CRDHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/crd/list", _CRD_ListCRD0_HTTP_Handler(srv))
	r.GET("/api/v1/crd/instance/list", _CRD_ListCRDInstance0_HTTP_Handler(srv))
	r.POST("/api/v1/crd/delete", _CRD_DeleteCRD0_HTTP_Handler(srv))
}

func GenerateCRDHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 3)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/crd/list",
		Comment: "查看-云原生管理-CRD-列表",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/api/v1/crd/instance/list",
		Comment: "查看-云原生管理-CRD实例-列表",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/api/v1/crd/delete",
		Comment: "管理-云原生管理-CRD-删除",
	})
	return routes
}

func _CRD_ListCRD0_HTTP_Handler(srv CRDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListCRDRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCRDListCRD)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCRD(ctx, req.(*ListCRDRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCRDResponse)
		return ctx.Result(200, reply)
	}
}

func _CRD_ListCRDInstance0_HTTP_Handler(srv CRDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListCRDInstanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCRDListCRDInstance)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCRDInstance(ctx, req.(*ListCRDInstanceRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCRDInstanceResponse)
		return ctx.Result(200, reply)
	}
}

func _CRD_DeleteCRD0_HTTP_Handler(srv CRDHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteCRDRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCRDDeleteCRD)
		auditRule := audit.NewAudit(
			"crd",
			"删除crd",
			[]audit.Meta{
				{
					Key: "cluster",
					Value: audit.MetaValue{
						Extract: "cluster_name",
					},
				},
				{
					Key:   "namespace",
					Value: audit.MetaValue{},
				},
				{
					Key: "kind",
					Value: audit.MetaValue{
						Const: "CRD",
					},
				},
				{
					Key: "name",
					Value: audit.MetaValue{
						Extract: "name",
					},
				},
			},
		)
		auditInfo, err := audit.ExtractFromRequest(ctx.Request(), auditRule)
		if err != nil {
			return err
		}
		stdCtx = kcontext.SetKHTTPAuditContextWithContext(stdCtx, auditInfo)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCRD(ctx, req.(*DeleteCRDRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCRDResponse)
		return ctx.Result(200, reply)
	}
}

type CRDHTTPClient interface {
	ListCRD(ctx context.Context, req *ListCRDRequest, opts ...http.CallOption) (rsp *ListCRDResponse, err error)
	ListCRDInstance(ctx context.Context, req *ListCRDInstanceRequest, opts ...http.CallOption) (rsp *ListCRDInstanceResponse, err error)
	DeleteCRD(ctx context.Context, req *DeleteCRDRequest, opts ...http.CallOption) (rsp *DeleteCRDResponse, err error)
}

type CRDHTTPClientImpl struct {
	cc *http.Client
}

func NewCRDHTTPClient(client *http.Client) CRDHTTPClient {
	return &CRDHTTPClientImpl{client}
}

func (c *CRDHTTPClientImpl) ListCRD(ctx context.Context, in *ListCRDRequest, opts ...http.CallOption) (*ListCRDResponse, error) {
	var out ListCRDResponse
	pattern := "/api/v1/crd/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCRDListCRD))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CRDHTTPClientImpl) ListCRDInstance(ctx context.Context, in *ListCRDInstanceRequest, opts ...http.CallOption) (*ListCRDInstanceResponse, error) {
	var out ListCRDInstanceResponse
	pattern := "/api/v1/crd/instance/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCRDListCRDInstance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CRDHTTPClientImpl) DeleteCRD(ctx context.Context, in *DeleteCRDRequest, opts ...http.CallOption) (*DeleteCRDResponse, error) {
	var out DeleteCRDResponse
	pattern := "/api/v1/crd/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCRDDeleteCRD))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
