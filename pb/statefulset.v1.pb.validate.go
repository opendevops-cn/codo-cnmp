// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/statefulset.v1.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StatefulSetCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatefulSetCondition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatefulSetCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatefulSetConditionMultiError, or nil if none found.
func (m *StatefulSetCondition) ValidateAll() error {
	return m.validate(true)
}

func (m *StatefulSetCondition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for LastUpdateTime

	// no validation rules for LastTransitionTime

	// no validation rules for Reason

	// no validation rules for Message

	if len(errors) > 0 {
		return StatefulSetConditionMultiError(errors)
	}

	return nil
}

// StatefulSetConditionMultiError is an error wrapping multiple validation
// errors returned by StatefulSetCondition.ValidateAll() if the designated
// constraints aren't met.
type StatefulSetConditionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatefulSetConditionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatefulSetConditionMultiError) AllErrors() []error { return m }

// StatefulSetConditionValidationError is the validation error returned by
// StatefulSetCondition.Validate if the designated constraints aren't met.
type StatefulSetConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatefulSetConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatefulSetConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatefulSetConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatefulSetConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatefulSetConditionValidationError) ErrorName() string {
	return "StatefulSetConditionValidationError"
}

// Error satisfies the builtin error interface
func (e StatefulSetConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatefulSetCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatefulSetConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatefulSetConditionValidationError{}

// Validate checks the field values on StatefulSetStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StatefulSetStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatefulSetStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatefulSetStatusMultiError, or nil if none found.
func (m *StatefulSetStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *StatefulSetStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObservedGeneration

	// no validation rules for Replicas

	// no validation rules for UpdatedReplicas

	// no validation rules for ReadyReplicas

	// no validation rules for AvailableReplicas

	// no validation rules for UnavailableReplicas

	// no validation rules for CollisionCount

	if len(errors) > 0 {
		return StatefulSetStatusMultiError(errors)
	}

	return nil
}

// StatefulSetStatusMultiError is an error wrapping multiple validation errors
// returned by StatefulSetStatus.ValidateAll() if the designated constraints
// aren't met.
type StatefulSetStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatefulSetStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatefulSetStatusMultiError) AllErrors() []error { return m }

// StatefulSetStatusValidationError is the validation error returned by
// StatefulSetStatus.Validate if the designated constraints aren't met.
type StatefulSetStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatefulSetStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatefulSetStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatefulSetStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatefulSetStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatefulSetStatusValidationError) ErrorName() string {
	return "StatefulSetStatusValidationError"
}

// Error satisfies the builtin error interface
func (e StatefulSetStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatefulSetStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatefulSetStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatefulSetStatusValidationError{}

// Validate checks the field values on StatefulSetStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatefulSetStrategy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatefulSetStrategy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatefulSetStrategyMultiError, or nil if none found.
func (m *StatefulSetStrategy) ValidateAll() error {
	return m.validate(true)
}

func (m *StatefulSetStrategy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := StatefulSetStrategy_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := StatefulSetStrategyValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Partition

	if len(errors) > 0 {
		return StatefulSetStrategyMultiError(errors)
	}

	return nil
}

// StatefulSetStrategyMultiError is an error wrapping multiple validation
// errors returned by StatefulSetStrategy.ValidateAll() if the designated
// constraints aren't met.
type StatefulSetStrategyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatefulSetStrategyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatefulSetStrategyMultiError) AllErrors() []error { return m }

// StatefulSetStrategyValidationError is the validation error returned by
// StatefulSetStrategy.Validate if the designated constraints aren't met.
type StatefulSetStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatefulSetStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatefulSetStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatefulSetStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatefulSetStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatefulSetStrategyValidationError) ErrorName() string {
	return "StatefulSetStrategyValidationError"
}

// Error satisfies the builtin error interface
func (e StatefulSetStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatefulSetStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatefulSetStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatefulSetStrategyValidationError{}

// Validate checks the field values on StatefulSetItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StatefulSetItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatefulSetItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatefulSetItemMultiError, or nil if none found.
func (m *StatefulSetItem) ValidateAll() error {
	return m.validate(true)
}

func (m *StatefulSetItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatefulSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatefulSetItemValidationError{
						field:  fmt.Sprintf("Containers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatefulSetItemValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatefulSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatefulSetItemValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatefulSetItemValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateTime

	// no validation rules for Labels

	// no validation rules for Yaml

	// no validation rules for Annotations

	// no validation rules for Replicas

	if all {
		switch v := interface{}(m.GetUpdateStrategy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatefulSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatefulSetItemValidationError{
					field:  "UpdateStrategy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateStrategy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatefulSetItemValidationError{
				field:  "UpdateStrategy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSelector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatefulSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatefulSetItemValidationError{
					field:  "Selector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatefulSetItemValidationError{
				field:  "Selector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetConditions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StatefulSetItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StatefulSetItemValidationError{
						field:  fmt.Sprintf("Conditions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StatefulSetItemValidationError{
					field:  fmt.Sprintf("Conditions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SpecReplicas

	// no validation rules for IsFollowed

	if len(errors) > 0 {
		return StatefulSetItemMultiError(errors)
	}

	return nil
}

// StatefulSetItemMultiError is an error wrapping multiple validation errors
// returned by StatefulSetItem.ValidateAll() if the designated constraints
// aren't met.
type StatefulSetItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatefulSetItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatefulSetItemMultiError) AllErrors() []error { return m }

// StatefulSetItemValidationError is the validation error returned by
// StatefulSetItem.Validate if the designated constraints aren't met.
type StatefulSetItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatefulSetItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatefulSetItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatefulSetItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatefulSetItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatefulSetItemValidationError) ErrorName() string { return "StatefulSetItemValidationError" }

// Error satisfies the builtin error interface
func (e StatefulSetItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatefulSetItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatefulSetItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatefulSetItemValidationError{}

// Validate checks the field values on ListStatefulSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStatefulSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStatefulSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStatefulSetRequestMultiError, or nil if none found.
func (m *ListStatefulSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStatefulSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ListStatefulSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Keyword

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for ListAll

	if len(errors) > 0 {
		return ListStatefulSetRequestMultiError(errors)
	}

	return nil
}

// ListStatefulSetRequestMultiError is an error wrapping multiple validation
// errors returned by ListStatefulSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStatefulSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStatefulSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStatefulSetRequestMultiError) AllErrors() []error { return m }

// ListStatefulSetRequestValidationError is the validation error returned by
// ListStatefulSetRequest.Validate if the designated constraints aren't met.
type ListStatefulSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStatefulSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStatefulSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStatefulSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStatefulSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStatefulSetRequestValidationError) ErrorName() string {
	return "ListStatefulSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStatefulSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStatefulSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStatefulSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStatefulSetRequestValidationError{}

// Validate checks the field values on ListStatefulSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStatefulSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStatefulSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStatefulSetResponseMultiError, or nil if none found.
func (m *ListStatefulSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStatefulSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStatefulSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStatefulSetResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStatefulSetResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStatefulSetResponseMultiError(errors)
	}

	return nil
}

// ListStatefulSetResponseMultiError is an error wrapping multiple validation
// errors returned by ListStatefulSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ListStatefulSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStatefulSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStatefulSetResponseMultiError) AllErrors() []error { return m }

// ListStatefulSetResponseValidationError is the validation error returned by
// ListStatefulSetResponse.Validate if the designated constraints aren't met.
type ListStatefulSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStatefulSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStatefulSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStatefulSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStatefulSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStatefulSetResponseValidationError) ErrorName() string {
	return "ListStatefulSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStatefulSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStatefulSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStatefulSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStatefulSetResponseValidationError{}

// Validate checks the field values on CreateOrUpdateStatefulSetByYamlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateStatefulSetByYamlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrUpdateStatefulSetByYamlRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateOrUpdateStatefulSetByYamlRequestMultiError, or nil if none found.
func (m *CreateOrUpdateStatefulSetByYamlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateStatefulSetByYamlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := CreateOrUpdateStatefulSetByYamlRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetYaml()) < 1 {
		err := CreateOrUpdateStatefulSetByYamlRequestValidationError{
			field:  "Yaml",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrUpdateStatefulSetByYamlRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateStatefulSetByYamlRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateStatefulSetByYamlRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateStatefulSetByYamlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateStatefulSetByYamlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateStatefulSetByYamlRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateStatefulSetByYamlRequestValidationError is the validation
// error returned by CreateOrUpdateStatefulSetByYamlRequest.Validate if the
// designated constraints aren't met.
type CreateOrUpdateStatefulSetByYamlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateStatefulSetByYamlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateStatefulSetByYamlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateStatefulSetByYamlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateStatefulSetByYamlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateStatefulSetByYamlRequestValidationError) ErrorName() string {
	return "CreateOrUpdateStatefulSetByYamlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateStatefulSetByYamlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateStatefulSetByYamlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateStatefulSetByYamlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateStatefulSetByYamlRequestValidationError{}

// Validate checks the field values on CreateOrUpdateStatefulSetByYamlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrUpdateStatefulSetByYamlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrUpdateStatefulSetByYamlResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateOrUpdateStatefulSetByYamlResponseMultiError, or nil if none found.
func (m *CreateOrUpdateStatefulSetByYamlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateStatefulSetByYamlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrUpdateStatefulSetByYamlResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateStatefulSetByYamlResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrUpdateStatefulSetByYamlResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateStatefulSetByYamlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateStatefulSetByYamlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateStatefulSetByYamlResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateStatefulSetByYamlResponseValidationError is the validation
// error returned by CreateOrUpdateStatefulSetByYamlResponse.Validate if the
// designated constraints aren't met.
type CreateOrUpdateStatefulSetByYamlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateStatefulSetByYamlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateStatefulSetByYamlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateStatefulSetByYamlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateStatefulSetByYamlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateStatefulSetByYamlResponseValidationError) ErrorName() string {
	return "CreateOrUpdateStatefulSetByYamlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateStatefulSetByYamlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateStatefulSetByYamlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateStatefulSetByYamlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateStatefulSetByYamlResponseValidationError{}

// Validate checks the field values on DeleteStatefulSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStatefulSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStatefulSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStatefulSetRequestMultiError, or nil if none found.
func (m *DeleteStatefulSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStatefulSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := DeleteStatefulSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteStatefulSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DeleteStatefulSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteStatefulSetRequestMultiError(errors)
	}

	return nil
}

// DeleteStatefulSetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteStatefulSetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteStatefulSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStatefulSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStatefulSetRequestMultiError) AllErrors() []error { return m }

// DeleteStatefulSetRequestValidationError is the validation error returned by
// DeleteStatefulSetRequest.Validate if the designated constraints aren't met.
type DeleteStatefulSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStatefulSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStatefulSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStatefulSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStatefulSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStatefulSetRequestValidationError) ErrorName() string {
	return "DeleteStatefulSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStatefulSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStatefulSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStatefulSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStatefulSetRequestValidationError{}

// Validate checks the field values on DeleteStatefulSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStatefulSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStatefulSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStatefulSetResponseMultiError, or nil if none found.
func (m *DeleteStatefulSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStatefulSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteStatefulSetResponseMultiError(errors)
	}

	return nil
}

// DeleteStatefulSetResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteStatefulSetResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteStatefulSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStatefulSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStatefulSetResponseMultiError) AllErrors() []error { return m }

// DeleteStatefulSetResponseValidationError is the validation error returned by
// DeleteStatefulSetResponse.Validate if the designated constraints aren't met.
type DeleteStatefulSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStatefulSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStatefulSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStatefulSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStatefulSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStatefulSetResponseValidationError) ErrorName() string {
	return "DeleteStatefulSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStatefulSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStatefulSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStatefulSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStatefulSetResponseValidationError{}

// Validate checks the field values on RestartStatefulSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartStatefulSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartStatefulSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartStatefulSetRequestMultiError, or nil if none found.
func (m *RestartStatefulSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartStatefulSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RestartStatefulSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RestartStatefulSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RestartStatefulSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestartStatefulSetRequestMultiError(errors)
	}

	return nil
}

// RestartStatefulSetRequestMultiError is an error wrapping multiple validation
// errors returned by RestartStatefulSetRequest.ValidateAll() if the
// designated constraints aren't met.
type RestartStatefulSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartStatefulSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartStatefulSetRequestMultiError) AllErrors() []error { return m }

// RestartStatefulSetRequestValidationError is the validation error returned by
// RestartStatefulSetRequest.Validate if the designated constraints aren't met.
type RestartStatefulSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartStatefulSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartStatefulSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartStatefulSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartStatefulSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartStatefulSetRequestValidationError) ErrorName() string {
	return "RestartStatefulSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartStatefulSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartStatefulSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartStatefulSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartStatefulSetRequestValidationError{}

// Validate checks the field values on RestartStatefulSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartStatefulSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartStatefulSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartStatefulSetResponseMultiError, or nil if none found.
func (m *RestartStatefulSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartStatefulSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RestartStatefulSetResponseMultiError(errors)
	}

	return nil
}

// RestartStatefulSetResponseMultiError is an error wrapping multiple
// validation errors returned by RestartStatefulSetResponse.ValidateAll() if
// the designated constraints aren't met.
type RestartStatefulSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartStatefulSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartStatefulSetResponseMultiError) AllErrors() []error { return m }

// RestartStatefulSetResponseValidationError is the validation error returned
// by RestartStatefulSetResponse.Validate if the designated constraints aren't met.
type RestartStatefulSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartStatefulSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartStatefulSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartStatefulSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartStatefulSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartStatefulSetResponseValidationError) ErrorName() string {
	return "RestartStatefulSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartStatefulSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartStatefulSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartStatefulSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartStatefulSetResponseValidationError{}

// Validate checks the field values on ScaleStatefulSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleStatefulSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleStatefulSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleStatefulSetRequestMultiError, or nil if none found.
func (m *ScaleStatefulSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleStatefulSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := ScaleStatefulSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ScaleStatefulSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ScaleStatefulSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReplicas() < 0 {
		err := ScaleStatefulSetRequestValidationError{
			field:  "Replicas",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScaleStatefulSetRequestMultiError(errors)
	}

	return nil
}

// ScaleStatefulSetRequestMultiError is an error wrapping multiple validation
// errors returned by ScaleStatefulSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ScaleStatefulSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleStatefulSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleStatefulSetRequestMultiError) AllErrors() []error { return m }

// ScaleStatefulSetRequestValidationError is the validation error returned by
// ScaleStatefulSetRequest.Validate if the designated constraints aren't met.
type ScaleStatefulSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleStatefulSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleStatefulSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleStatefulSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleStatefulSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleStatefulSetRequestValidationError) ErrorName() string {
	return "ScaleStatefulSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleStatefulSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleStatefulSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleStatefulSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleStatefulSetRequestValidationError{}

// Validate checks the field values on ScaleStatefulSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleStatefulSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleStatefulSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleStatefulSetResponseMultiError, or nil if none found.
func (m *ScaleStatefulSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleStatefulSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ScaleStatefulSetResponseMultiError(errors)
	}

	return nil
}

// ScaleStatefulSetResponseMultiError is an error wrapping multiple validation
// errors returned by ScaleStatefulSetResponse.ValidateAll() if the designated
// constraints aren't met.
type ScaleStatefulSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleStatefulSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleStatefulSetResponseMultiError) AllErrors() []error { return m }

// ScaleStatefulSetResponseValidationError is the validation error returned by
// ScaleStatefulSetResponse.Validate if the designated constraints aren't met.
type ScaleStatefulSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleStatefulSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleStatefulSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleStatefulSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleStatefulSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleStatefulSetResponseValidationError) ErrorName() string {
	return "ScaleStatefulSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleStatefulSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleStatefulSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleStatefulSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleStatefulSetResponseValidationError{}

// Validate checks the field values on GetStatefulSetDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatefulSetDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatefulSetDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatefulSetDetailRequestMultiError, or nil if none found.
func (m *GetStatefulSetDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatefulSetDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetStatefulSetDetailRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetStatefulSetDetailRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetStatefulSetDetailRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStatefulSetDetailRequestMultiError(errors)
	}

	return nil
}

// GetStatefulSetDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetStatefulSetDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStatefulSetDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatefulSetDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatefulSetDetailRequestMultiError) AllErrors() []error { return m }

// GetStatefulSetDetailRequestValidationError is the validation error returned
// by GetStatefulSetDetailRequest.Validate if the designated constraints
// aren't met.
type GetStatefulSetDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatefulSetDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatefulSetDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatefulSetDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatefulSetDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatefulSetDetailRequestValidationError) ErrorName() string {
	return "GetStatefulSetDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatefulSetDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatefulSetDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatefulSetDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatefulSetDetailRequestValidationError{}

// Validate checks the field values on GetStatefulSetDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatefulSetDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatefulSetDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatefulSetDetailResponseMultiError, or nil if none found.
func (m *GetStatefulSetDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatefulSetDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatefulSetDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatefulSetDetailResponseValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatefulSetDetailResponseValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStatefulSetDetailResponseMultiError(errors)
	}

	return nil
}

// GetStatefulSetDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetStatefulSetDetailResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStatefulSetDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatefulSetDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatefulSetDetailResponseMultiError) AllErrors() []error { return m }

// GetStatefulSetDetailResponseValidationError is the validation error returned
// by GetStatefulSetDetailResponse.Validate if the designated constraints
// aren't met.
type GetStatefulSetDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatefulSetDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatefulSetDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatefulSetDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatefulSetDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatefulSetDetailResponseValidationError) ErrorName() string {
	return "GetStatefulSetDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatefulSetDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatefulSetDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatefulSetDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatefulSetDetailResponseValidationError{}

// Validate checks the field values on RollbackStatefulSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackStatefulSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackStatefulSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackStatefulSetRequestMultiError, or nil if none found.
func (m *RollbackStatefulSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackStatefulSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := RollbackStatefulSetRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RollbackStatefulSetRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := RollbackStatefulSetRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := RollbackStatefulSetRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RollbackStatefulSetRequestMultiError(errors)
	}

	return nil
}

// RollbackStatefulSetRequestMultiError is an error wrapping multiple
// validation errors returned by RollbackStatefulSetRequest.ValidateAll() if
// the designated constraints aren't met.
type RollbackStatefulSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackStatefulSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackStatefulSetRequestMultiError) AllErrors() []error { return m }

// RollbackStatefulSetRequestValidationError is the validation error returned
// by RollbackStatefulSetRequest.Validate if the designated constraints aren't met.
type RollbackStatefulSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackStatefulSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackStatefulSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackStatefulSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackStatefulSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackStatefulSetRequestValidationError) ErrorName() string {
	return "RollbackStatefulSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackStatefulSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackStatefulSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackStatefulSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackStatefulSetRequestValidationError{}

// Validate checks the field values on RollbackStatefulSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RollbackStatefulSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RollbackStatefulSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RollbackStatefulSetResponseMultiError, or nil if none found.
func (m *RollbackStatefulSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RollbackStatefulSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RollbackStatefulSetResponseMultiError(errors)
	}

	return nil
}

// RollbackStatefulSetResponseMultiError is an error wrapping multiple
// validation errors returned by RollbackStatefulSetResponse.ValidateAll() if
// the designated constraints aren't met.
type RollbackStatefulSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RollbackStatefulSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RollbackStatefulSetResponseMultiError) AllErrors() []error { return m }

// RollbackStatefulSetResponseValidationError is the validation error returned
// by RollbackStatefulSetResponse.Validate if the designated constraints
// aren't met.
type RollbackStatefulSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RollbackStatefulSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RollbackStatefulSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RollbackStatefulSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RollbackStatefulSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RollbackStatefulSetResponseValidationError) ErrorName() string {
	return "RollbackStatefulSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RollbackStatefulSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRollbackStatefulSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RollbackStatefulSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RollbackStatefulSetResponseValidationError{}

// Validate checks the field values on GetStatefulSetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatefulSetHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatefulSetHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatefulSetHistoryRequestMultiError, or nil if none found.
func (m *GetStatefulSetHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatefulSetHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := GetStatefulSetHistoryRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetStatefulSetHistoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetStatefulSetHistoryRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStatefulSetHistoryRequestMultiError(errors)
	}

	return nil
}

// GetStatefulSetHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetStatefulSetHistoryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetStatefulSetHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatefulSetHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatefulSetHistoryRequestMultiError) AllErrors() []error { return m }

// GetStatefulSetHistoryRequestValidationError is the validation error returned
// by GetStatefulSetHistoryRequest.Validate if the designated constraints
// aren't met.
type GetStatefulSetHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatefulSetHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatefulSetHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatefulSetHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatefulSetHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatefulSetHistoryRequestValidationError) ErrorName() string {
	return "GetStatefulSetHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatefulSetHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatefulSetHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatefulSetHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatefulSetHistoryRequestValidationError{}

// Validate checks the field values on StatefulSetControllerReversionItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StatefulSetControllerReversionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatefulSetControllerReversionItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StatefulSetControllerReversionItemMultiError, or nil if none found.
func (m *StatefulSetControllerReversionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *StatefulSetControllerReversionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Yaml

	// no validation rules for CreateTime

	// no validation rules for IsCurrent

	if len(errors) > 0 {
		return StatefulSetControllerReversionItemMultiError(errors)
	}

	return nil
}

// StatefulSetControllerReversionItemMultiError is an error wrapping multiple
// validation errors returned by
// StatefulSetControllerReversionItem.ValidateAll() if the designated
// constraints aren't met.
type StatefulSetControllerReversionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatefulSetControllerReversionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatefulSetControllerReversionItemMultiError) AllErrors() []error { return m }

// StatefulSetControllerReversionItemValidationError is the validation error
// returned by StatefulSetControllerReversionItem.Validate if the designated
// constraints aren't met.
type StatefulSetControllerReversionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatefulSetControllerReversionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatefulSetControllerReversionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatefulSetControllerReversionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatefulSetControllerReversionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatefulSetControllerReversionItemValidationError) ErrorName() string {
	return "StatefulSetControllerReversionItemValidationError"
}

// Error satisfies the builtin error interface
func (e StatefulSetControllerReversionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatefulSetControllerReversionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatefulSetControllerReversionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatefulSetControllerReversionItemValidationError{}

// Validate checks the field values on GetStatefulSetHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatefulSetHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatefulSetHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStatefulSetHistoryResponseMultiError, or nil if none found.
func (m *GetStatefulSetHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatefulSetHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStatefulSetHistoryResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStatefulSetHistoryResponseValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStatefulSetHistoryResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetStatefulSetHistoryResponseMultiError(errors)
	}

	return nil
}

// GetStatefulSetHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetStatefulSetHistoryResponse.ValidateAll()
// if the designated constraints aren't met.
type GetStatefulSetHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatefulSetHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatefulSetHistoryResponseMultiError) AllErrors() []error { return m }

// GetStatefulSetHistoryResponseValidationError is the validation error
// returned by GetStatefulSetHistoryResponse.Validate if the designated
// constraints aren't met.
type GetStatefulSetHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatefulSetHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatefulSetHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatefulSetHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatefulSetHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatefulSetHistoryResponseValidationError) ErrorName() string {
	return "GetStatefulSetHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatefulSetHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatefulSetHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatefulSetHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatefulSetHistoryResponseValidationError{}

// Validate checks the field values on UpdateStatefulSetUpdateStrategyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateStatefulSetUpdateStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateStatefulSetUpdateStrategyRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateStatefulSetUpdateStrategyRequestMultiError, or nil if none found.
func (m *UpdateStatefulSetUpdateStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatefulSetUpdateStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClusterName()) < 1 {
		err := UpdateStatefulSetUpdateStrategyRequestValidationError{
			field:  "ClusterName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateStatefulSetUpdateStrategyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateStatefulSetUpdateStrategyRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UpdateStatefulSetUpdateStrategyRequest_UpdateStrategyType_name[int32(m.GetUpdateStrategyType())]; !ok {
		err := UpdateStatefulSetUpdateStrategyRequestValidationError{
			field:  "UpdateStrategyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Partition

	if len(errors) > 0 {
		return UpdateStatefulSetUpdateStrategyRequestMultiError(errors)
	}

	return nil
}

// UpdateStatefulSetUpdateStrategyRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateStatefulSetUpdateStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatefulSetUpdateStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatefulSetUpdateStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatefulSetUpdateStrategyRequestMultiError) AllErrors() []error { return m }

// UpdateStatefulSetUpdateStrategyRequestValidationError is the validation
// error returned by UpdateStatefulSetUpdateStrategyRequest.Validate if the
// designated constraints aren't met.
type UpdateStatefulSetUpdateStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatefulSetUpdateStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatefulSetUpdateStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatefulSetUpdateStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatefulSetUpdateStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatefulSetUpdateStrategyRequestValidationError) ErrorName() string {
	return "UpdateStatefulSetUpdateStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatefulSetUpdateStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatefulSetUpdateStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatefulSetUpdateStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatefulSetUpdateStrategyRequestValidationError{}

// Validate checks the field values on UpdateStatefulSetUpdateStrategyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateStatefulSetUpdateStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateStatefulSetUpdateStrategyResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateStatefulSetUpdateStrategyResponseMultiError, or nil if none found.
func (m *UpdateStatefulSetUpdateStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatefulSetUpdateStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStatefulSetUpdateStrategyResponseMultiError(errors)
	}

	return nil
}

// UpdateStatefulSetUpdateStrategyResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateStatefulSetUpdateStrategyResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatefulSetUpdateStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatefulSetUpdateStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatefulSetUpdateStrategyResponseMultiError) AllErrors() []error { return m }

// UpdateStatefulSetUpdateStrategyResponseValidationError is the validation
// error returned by UpdateStatefulSetUpdateStrategyResponse.Validate if the
// designated constraints aren't met.
type UpdateStatefulSetUpdateStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatefulSetUpdateStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatefulSetUpdateStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatefulSetUpdateStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatefulSetUpdateStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatefulSetUpdateStrategyResponseValidationError) ErrorName() string {
	return "UpdateStatefulSetUpdateStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatefulSetUpdateStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatefulSetUpdateStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatefulSetUpdateStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatefulSetUpdateStrategyResponseValidationError{}
