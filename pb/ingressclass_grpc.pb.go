// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.2
// source: pb/ingressclass.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IngressClass_ListIngressClass_FullMethodName = "/ingressclass.v1.IngressClass/ListIngressClass"
)

// IngressClassClient is the client API for IngressClass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngressClassClient interface {
	// 查看-云原生管理-IngressClass-列表
	ListIngressClass(ctx context.Context, in *ListIngressClassRequest, opts ...grpc.CallOption) (*ListIngressClassResponse, error)
}

type ingressClassClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressClassClient(cc grpc.ClientConnInterface) IngressClassClient {
	return &ingressClassClient{cc}
}

func (c *ingressClassClient) ListIngressClass(ctx context.Context, in *ListIngressClassRequest, opts ...grpc.CallOption) (*ListIngressClassResponse, error) {
	out := new(ListIngressClassResponse)
	err := c.cc.Invoke(ctx, IngressClass_ListIngressClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngressClassServer is the server API for IngressClass service.
// All implementations must embed UnimplementedIngressClassServer
// for forward compatibility
type IngressClassServer interface {
	// 查看-云原生管理-IngressClass-列表
	ListIngressClass(context.Context, *ListIngressClassRequest) (*ListIngressClassResponse, error)
	mustEmbedUnimplementedIngressClassServer()
}

// UnimplementedIngressClassServer must be embedded to have forward compatible implementations.
type UnimplementedIngressClassServer struct {
}

func (UnimplementedIngressClassServer) ListIngressClass(context.Context, *ListIngressClassRequest) (*ListIngressClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIngressClass not implemented")
}
func (UnimplementedIngressClassServer) mustEmbedUnimplementedIngressClassServer() {}

// UnsafeIngressClassServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngressClassServer will
// result in compilation errors.
type UnsafeIngressClassServer interface {
	mustEmbedUnimplementedIngressClassServer()
}

func RegisterIngressClassServer(s grpc.ServiceRegistrar, srv IngressClassServer) {
	s.RegisterService(&IngressClass_ServiceDesc, srv)
}

func _IngressClass_ListIngressClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIngressClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressClassServer).ListIngressClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngressClass_ListIngressClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressClassServer).ListIngressClass(ctx, req.(*ListIngressClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngressClass_ServiceDesc is the grpc.ServiceDesc for IngressClass service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngressClass_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingressclass.v1.IngressClass",
	HandlerType: (*IngressClassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIngressClass",
			Handler:    _IngressClass_ListIngressClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/ingressclass.proto",
}
