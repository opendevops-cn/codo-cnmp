// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/gameserver.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LB锁定状态
type LBLockStatus int32

const (
	// 未知状态
	LBLockStatus_UNKNOWN_ServerLockStatus LBLockStatus = 0
	// 未锁定
	LBLockStatus_LB_UNLOCK LBLockStatus = 1
	// 手动锁定
	LBLockStatus_LB_LOCKED LBLockStatus = 2
	// HPA锁定
	LBLockStatus_LB_HPA_LOCKED LBLockStatus = 3
)

// Enum value maps for LBLockStatus.
var (
	LBLockStatus_name = map[int32]string{
		0: "UNKNOWN_ServerLockStatus",
		1: "LB_UNLOCK",
		2: "LB_LOCKED",
		3: "LB_HPA_LOCKED",
	}
	LBLockStatus_value = map[string]int32{
		"UNKNOWN_ServerLockStatus": 0,
		"LB_UNLOCK":                1,
		"LB_LOCKED":                2,
		"LB_HPA_LOCKED":            3,
	}
)

func (x LBLockStatus) Enum() *LBLockStatus {
	p := new(LBLockStatus)
	*p = x
	return p
}

func (x LBLockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LBLockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_gameserver_v1_proto_enumTypes[0].Descriptor()
}

func (LBLockStatus) Type() protoreflect.EnumType {
	return &file_pb_gameserver_v1_proto_enumTypes[0]
}

func (x LBLockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LBLockStatus.Descriptor instead.
func (LBLockStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{0}
}

type EntityLockStatus int32

const (
	// 未知状态
	EntityLockStatus_UNKNOWN_EntityLockStatus EntityLockStatus = 0
	// 未锁定
	EntityLockStatus_ENTITY_UNLOCK EntityLockStatus = 1
	// 手动锁定
	EntityLockStatus_ENTITY_LOCKED EntityLockStatus = 2
)

// Enum value maps for EntityLockStatus.
var (
	EntityLockStatus_name = map[int32]string{
		0: "UNKNOWN_EntityLockStatus",
		1: "ENTITY_UNLOCK",
		2: "ENTITY_LOCKED",
	}
	EntityLockStatus_value = map[string]int32{
		"UNKNOWN_EntityLockStatus": 0,
		"ENTITY_UNLOCK":            1,
		"ENTITY_LOCKED":            2,
	}
)

func (x EntityLockStatus) Enum() *EntityLockStatus {
	p := new(EntityLockStatus)
	*p = x
	return p
}

func (x EntityLockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityLockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_gameserver_v1_proto_enumTypes[1].Descriptor()
}

func (EntityLockStatus) Type() protoreflect.EnumType {
	return &file_pb_gameserver_v1_proto_enumTypes[1]
}

func (x EntityLockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityLockStatus.Descriptor instead.
func (EntityLockStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{1}
}

// 游戏进程列表请求
type ListGameServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,7,opt,name=list_all,proto3" json:"list_all,optional"`
	// 进程类型
	ServerType string `protobuf:"bytes,8,opt,name=server_type,json=serverType,proto3" json:"server_type,optional"`
	// entity锁定状态
	EntityLockStatus EntityLockStatus `protobuf:"varint,9,opt,name=entity_lock_status,json=entityLockStatus,proto3,enum=gameserver.v1.EntityLockStatus" json:"entity_lock_status,optional"`
	// lb 锁定状态
	LbLockStatus LBLockStatus `protobuf:"varint,10,opt,name=lb_lock_status,json=lbLockStatus,proto3,enum=gameserver.v1.LBLockStatus" json:"lb_lock_status,optional"`
}

func (x *ListGameServerRequest) Reset() {
	*x = ListGameServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGameServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGameServerRequest) ProtoMessage() {}

func (x *ListGameServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGameServerRequest.ProtoReflect.Descriptor instead.
func (*ListGameServerRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{0}
}

func (x *ListGameServerRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListGameServerRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListGameServerRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListGameServerRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListGameServerRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGameServerRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

func (x *ListGameServerRequest) GetServerType() string {
	if x != nil {
		return x.ServerType
	}
	return ""
}

func (x *ListGameServerRequest) GetEntityLockStatus() EntityLockStatus {
	if x != nil {
		return x.EntityLockStatus
	}
	return EntityLockStatus_UNKNOWN_EntityLockStatus
}

func (x *ListGameServerRequest) GetLbLockStatus() LBLockStatus {
	if x != nil {
		return x.LbLockStatus
	}
	return LBLockStatus_UNKNOWN_ServerLockStatus
}

// 游戏进程
type GameServerItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 进程名称
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,optional"`
	// 命名空间
	PodName string `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,optional"`
	// 工作负载类型
	WorkloadType string `protobuf:"bytes,3,opt,name=workload_type,json=workloadType,proto3" json:"workload_type,optional"`
	// 工作负载名称
	Workload string `protobuf:"bytes,4,opt,name=workload,proto3" json:"workload,optional"`
	// server version
	ServerVersion string `protobuf:"bytes,5,opt,name=server_version,json=serverVersion,proto3" json:"server_version,optional"`
	// entity num
	EntityNum uint32 `protobuf:"varint,6,opt,name=entity_num,json=entityNum,proto3" json:"entity_num,optional"`
	// online num
	OnlineNum uint32 `protobuf:"varint,7,opt,name=online_num,json=onlineNum,proto3" json:"online_num,optional"`
	// entity_lock_status
	EntityLockStatus EntityLockStatus `protobuf:"varint,8,opt,name=entity_lock_status,json=entityLockStatus,proto3,enum=gameserver.v1.EntityLockStatus" json:"entity_lock_status,optional"`
	// lb_lock_status
	LbLockStatus LBLockStatus `protobuf:"varint,9,opt,name=lb_lock_status,json=lbLockStatus,proto3,enum=gameserver.v1.LBLockStatus" json:"lb_lock_status,optional"`
	// code_version_game
	CodeVersionGame string `protobuf:"bytes,10,opt,name=code_version_game,json=codeVersionGame,proto3" json:"code_version_game,optional"`
	// code_version_config
	CodeVersionConfig string `protobuf:"bytes,11,opt,name=code_version_config,json=codeVersionConfig,proto3" json:"code_version_config,optional"`
	// code_version_script
	CodeVersionScript string `protobuf:"bytes,12,opt,name=code_version_script,json=codeVersionScript,proto3" json:"code_version_script,optional"`
	// 进程Id
	Id uint32 `protobuf:"varint,13,opt,name=id,proto3" json:"id,optional"`
}

func (x *GameServerItem) Reset() {
	*x = GameServerItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerItem) ProtoMessage() {}

func (x *GameServerItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerItem.ProtoReflect.Descriptor instead.
func (*GameServerItem) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{1}
}

func (x *GameServerItem) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *GameServerItem) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *GameServerItem) GetWorkloadType() string {
	if x != nil {
		return x.WorkloadType
	}
	return ""
}

func (x *GameServerItem) GetWorkload() string {
	if x != nil {
		return x.Workload
	}
	return ""
}

func (x *GameServerItem) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *GameServerItem) GetEntityNum() uint32 {
	if x != nil {
		return x.EntityNum
	}
	return 0
}

func (x *GameServerItem) GetOnlineNum() uint32 {
	if x != nil {
		return x.OnlineNum
	}
	return 0
}

func (x *GameServerItem) GetEntityLockStatus() EntityLockStatus {
	if x != nil {
		return x.EntityLockStatus
	}
	return EntityLockStatus_UNKNOWN_EntityLockStatus
}

func (x *GameServerItem) GetLbLockStatus() LBLockStatus {
	if x != nil {
		return x.LbLockStatus
	}
	return LBLockStatus_UNKNOWN_ServerLockStatus
}

func (x *GameServerItem) GetCodeVersionGame() string {
	if x != nil {
		return x.CodeVersionGame
	}
	return ""
}

func (x *GameServerItem) GetCodeVersionConfig() string {
	if x != nil {
		return x.CodeVersionConfig
	}
	return ""
}

func (x *GameServerItem) GetCodeVersionScript() string {
	if x != nil {
		return x.CodeVersionScript
	}
	return ""
}

func (x *GameServerItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 进程列表响应
type ListGameServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 列表
	List []*GameServerItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListGameServerResponse) Reset() {
	*x = ListGameServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGameServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGameServerResponse) ProtoMessage() {}

func (x *ListGameServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGameServerResponse.ProtoReflect.Descriptor instead.
func (*ListGameServerResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{2}
}

func (x *ListGameServerResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListGameServerResponse) GetList() []*GameServerItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 进程类型列表
type ListGameServerTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,7,opt,name=list_all,proto3" json:"list_all,optional"`
}

func (x *ListGameServerTypeRequest) Reset() {
	*x = ListGameServerTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGameServerTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGameServerTypeRequest) ProtoMessage() {}

func (x *ListGameServerTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGameServerTypeRequest.ProtoReflect.Descriptor instead.
func (*ListGameServerTypeRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{3}
}

func (x *ListGameServerTypeRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListGameServerTypeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListGameServerTypeRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListGameServerTypeRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListGameServerTypeRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGameServerTypeRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

type GameServerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
}

func (x *GameServerType) Reset() {
	*x = GameServerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerType) ProtoMessage() {}

func (x *GameServerType) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerType.ProtoReflect.Descriptor instead.
func (*GameServerType) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{4}
}

func (x *GameServerType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListGameServerTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32            `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	List  []*GameServerType `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListGameServerTypeResponse) Reset() {
	*x = ListGameServerTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGameServerTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGameServerTypeResponse) ProtoMessage() {}

func (x *ListGameServerTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGameServerTypeResponse.ProtoReflect.Descriptor instead.
func (*ListGameServerTypeResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ListGameServerTypeResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListGameServerTypeResponse) GetList() []*GameServerType {
	if x != nil {
		return x.List
	}
	return nil
}

// Entity锁定/解锁请求
type ManageGameServerEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 进程名称
	ServerName string `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,optional"`
	// 锁定/解锁 true表示锁定 false表示解锁
	Lock        bool   `protobuf:"varint,2,opt,name=lock,proto3" json:"lock,optional"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	Namespace   string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *ManageGameServerEntityRequest) Reset() {
	*x = ManageGameServerEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageGameServerEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageGameServerEntityRequest) ProtoMessage() {}

func (x *ManageGameServerEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageGameServerEntityRequest.ProtoReflect.Descriptor instead.
func (*ManageGameServerEntityRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{6}
}

func (x *ManageGameServerEntityRequest) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ManageGameServerEntityRequest) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

func (x *ManageGameServerEntityRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ManageGameServerEntityRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// cbb版本锁定响应head
type ManageEntityHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errno  uint32 `protobuf:"varint,1,opt,name=errno,proto3" json:"errno,optional"`
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,optional"`
}

func (x *ManageEntityHead) Reset() {
	*x = ManageEntityHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageEntityHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageEntityHead) ProtoMessage() {}

func (x *ManageEntityHead) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageEntityHead.ProtoReflect.Descriptor instead.
func (*ManageEntityHead) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{7}
}

func (x *ManageEntityHead) GetErrno() uint32 {
	if x != nil {
		return x.Errno
	}
	return 0
}

func (x *ManageEntityHead) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

// cbb版本锁定响应body
type ManageEntityBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManageEntityBody) Reset() {
	*x = ManageEntityBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageEntityBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageEntityBody) ProtoMessage() {}

func (x *ManageEntityBody) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageEntityBody.ProtoReflect.Descriptor instead.
func (*ManageEntityBody) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{8}
}

// Entity锁定/解锁响应
type ManageGameServerEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *ManageEntityHead `protobuf:"bytes,1,opt,name=head,proto3" json:"head,optional"`
	Body *ManageEntityBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,optional"`
}

func (x *ManageGameServerEntityResponse) Reset() {
	*x = ManageGameServerEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManageGameServerEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManageGameServerEntityResponse) ProtoMessage() {}

func (x *ManageGameServerEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManageGameServerEntityResponse.ProtoReflect.Descriptor instead.
func (*ManageGameServerEntityResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{9}
}

func (x *ManageGameServerEntityResponse) GetHead() *ManageEntityHead {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *ManageGameServerEntityResponse) GetBody() *ManageEntityBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type BatchManageGameServerEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNames []string `protobuf:"bytes,1,rep,name=server_names,json=serverNames,proto3" json:"server_names,optional"`
	// 锁定/解锁 true表示锁定 false表示解锁
	Lock        bool   `protobuf:"varint,2,opt,name=lock,proto3" json:"lock,optional"`
	ClusterName string `protobuf:"bytes,3,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	Namespace   string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *BatchManageGameServerEntityRequest) Reset() {
	*x = BatchManageGameServerEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchManageGameServerEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchManageGameServerEntityRequest) ProtoMessage() {}

func (x *BatchManageGameServerEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchManageGameServerEntityRequest.ProtoReflect.Descriptor instead.
func (*BatchManageGameServerEntityRequest) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{10}
}

func (x *BatchManageGameServerEntityRequest) GetServerNames() []string {
	if x != nil {
		return x.ServerNames
	}
	return nil
}

func (x *BatchManageGameServerEntityRequest) GetLock() bool {
	if x != nil {
		return x.Lock
	}
	return false
}

func (x *BatchManageGameServerEntityRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *BatchManageGameServerEntityRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type BatchManageGameServerEntityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchManageGameServerEntityResponse) Reset() {
	*x = BatchManageGameServerEntityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_gameserver_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchManageGameServerEntityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchManageGameServerEntityResponse) ProtoMessage() {}

func (x *BatchManageGameServerEntityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_gameserver_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchManageGameServerEntityResponse.ProtoReflect.Descriptor instead.
func (*BatchManageGameServerEntityResponse) Descriptor() ([]byte, []int) {
	return file_pb_gameserver_v1_proto_rawDescGZIP(), []int{11}
}

var File_pb_gameserver_v1_proto protoreflect.FileDescriptor

var file_pb_gameserver_v1_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b,
	0x68, 0x74, 0x74, 0x70, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x03, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x42, 0x4c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6c, 0x62, 0x4c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe5, 0x04, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x12,
	0x22, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x52, 0x0a, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6c, 0x62, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x42, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x6c, 0x62, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x6b, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcf, 0x01, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0x24,
	0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6e, 0x6f, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d,
	0x73, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x68, 0x65, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x33,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x23,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0x5d, 0x0a, 0x0c, 0x4c, 0x42, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x42, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x42, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x42, 0x5f, 0x48, 0x50, 0x41, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x56, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x32, 0xcf, 0x0b, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0xc2, 0xdb, 0xaa, 0x03, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x94, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0xc2, 0xdb, 0xaa,
	0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x9f, 0x02, 0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7,
	0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x72, 0x0a, 0x0c, 0xe8, 0xbf, 0x9b,
	0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x0c, 0xe7, 0xae, 0xa1, 0xe7, 0x90,
	0x86, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x1a, 0x06, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0x1a, 0x13, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x93, 0x02, 0x0a, 0x12, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x42, 0x12,
	0x2c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0xc2,
	0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x6e, 0x0a, 0x0c, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8,
	0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x08, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x4c,
	0x42, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x1a, 0x0e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x06, 0xe8, 0xbf, 0x9b, 0xe7,
	0xa8, 0x8b, 0x1a, 0x13, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a,
	0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x6c, 0x62, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0xba,
	0x02, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x31,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa,
	0x03, 0x78, 0x0a, 0x0c, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8,
	0x12, 0x12, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x06, 0xe8,
	0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0x1a, 0x13, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0xae, 0x02, 0x0a, 0x17,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x42, 0x12, 0x31, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab,
	0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x74, 0x0a, 0x0c, 0xe8, 0xbf, 0x9b,
	0xe7, 0xa8, 0x8b, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x12, 0x0e, 0xe6, 0x89, 0xb9, 0xe9, 0x87,
	0x8f, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86, 0x4c, 0x42, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0e, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x1a, 0x06, 0xe8, 0xbf, 0x9b, 0xe7, 0xa8, 0x8b, 0x1a, 0x13, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x6c, 0x62, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x42, 0x11, 0x5a, 0x0f,
	0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_gameserver_v1_proto_rawDescOnce sync.Once
	file_pb_gameserver_v1_proto_rawDescData = file_pb_gameserver_v1_proto_rawDesc
)

func file_pb_gameserver_v1_proto_rawDescGZIP() []byte {
	file_pb_gameserver_v1_proto_rawDescOnce.Do(func() {
		file_pb_gameserver_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_gameserver_v1_proto_rawDescData)
	})
	return file_pb_gameserver_v1_proto_rawDescData
}

var file_pb_gameserver_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_gameserver_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_pb_gameserver_v1_proto_goTypes = []interface{}{
	(LBLockStatus)(0),                           // 0: gameserver.v1.LBLockStatus
	(EntityLockStatus)(0),                       // 1: gameserver.v1.EntityLockStatus
	(*ListGameServerRequest)(nil),               // 2: gameserver.v1.ListGameServerRequest
	(*GameServerItem)(nil),                      // 3: gameserver.v1.GameServerItem
	(*ListGameServerResponse)(nil),              // 4: gameserver.v1.ListGameServerResponse
	(*ListGameServerTypeRequest)(nil),           // 5: gameserver.v1.ListGameServerTypeRequest
	(*GameServerType)(nil),                      // 6: gameserver.v1.GameServerType
	(*ListGameServerTypeResponse)(nil),          // 7: gameserver.v1.ListGameServerTypeResponse
	(*ManageGameServerEntityRequest)(nil),       // 8: gameserver.v1.ManageGameServerEntityRequest
	(*ManageEntityHead)(nil),                    // 9: gameserver.v1.ManageEntityHead
	(*ManageEntityBody)(nil),                    // 10: gameserver.v1.ManageEntityBody
	(*ManageGameServerEntityResponse)(nil),      // 11: gameserver.v1.ManageGameServerEntityResponse
	(*BatchManageGameServerEntityRequest)(nil),  // 12: gameserver.v1.BatchManageGameServerEntityRequest
	(*BatchManageGameServerEntityResponse)(nil), // 13: gameserver.v1.BatchManageGameServerEntityResponse
}
var file_pb_gameserver_v1_proto_depIdxs = []int32{
	1,  // 0: gameserver.v1.ListGameServerRequest.entity_lock_status:type_name -> gameserver.v1.EntityLockStatus
	0,  // 1: gameserver.v1.ListGameServerRequest.lb_lock_status:type_name -> gameserver.v1.LBLockStatus
	1,  // 2: gameserver.v1.GameServerItem.entity_lock_status:type_name -> gameserver.v1.EntityLockStatus
	0,  // 3: gameserver.v1.GameServerItem.lb_lock_status:type_name -> gameserver.v1.LBLockStatus
	3,  // 4: gameserver.v1.ListGameServerResponse.list:type_name -> gameserver.v1.GameServerItem
	6,  // 5: gameserver.v1.ListGameServerTypeResponse.list:type_name -> gameserver.v1.GameServerType
	9,  // 6: gameserver.v1.ManageGameServerEntityResponse.head:type_name -> gameserver.v1.ManageEntityHead
	10, // 7: gameserver.v1.ManageGameServerEntityResponse.body:type_name -> gameserver.v1.ManageEntityBody
	2,  // 8: gameserver.v1.GameServer.ListGameServer:input_type -> gameserver.v1.ListGameServerRequest
	5,  // 9: gameserver.v1.GameServer.ListGameServerType:input_type -> gameserver.v1.ListGameServerTypeRequest
	8,  // 10: gameserver.v1.GameServer.ManageGameServerEntity:input_type -> gameserver.v1.ManageGameServerEntityRequest
	8,  // 11: gameserver.v1.GameServer.ManageGameServerLB:input_type -> gameserver.v1.ManageGameServerEntityRequest
	12, // 12: gameserver.v1.GameServer.BatchManageGameServerEntity:input_type -> gameserver.v1.BatchManageGameServerEntityRequest
	12, // 13: gameserver.v1.GameServer.BatchManageGameServerLB:input_type -> gameserver.v1.BatchManageGameServerEntityRequest
	4,  // 14: gameserver.v1.GameServer.ListGameServer:output_type -> gameserver.v1.ListGameServerResponse
	7,  // 15: gameserver.v1.GameServer.ListGameServerType:output_type -> gameserver.v1.ListGameServerTypeResponse
	11, // 16: gameserver.v1.GameServer.ManageGameServerEntity:output_type -> gameserver.v1.ManageGameServerEntityResponse
	11, // 17: gameserver.v1.GameServer.ManageGameServerLB:output_type -> gameserver.v1.ManageGameServerEntityResponse
	13, // 18: gameserver.v1.GameServer.BatchManageGameServerEntity:output_type -> gameserver.v1.BatchManageGameServerEntityResponse
	13, // 19: gameserver.v1.GameServer.BatchManageGameServerLB:output_type -> gameserver.v1.BatchManageGameServerEntityResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_pb_gameserver_v1_proto_init() }
func file_pb_gameserver_v1_proto_init() {
	if File_pb_gameserver_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_gameserver_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGameServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGameServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGameServerTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGameServerTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageGameServerEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageEntityHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageEntityBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManageGameServerEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchManageGameServerEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_gameserver_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchManageGameServerEntityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_gameserver_v1_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_gameserver_v1_proto_goTypes,
		DependencyIndexes: file_pb_gameserver_v1_proto_depIdxs,
		EnumInfos:         file_pb_gameserver_v1_proto_enumTypes,
		MessageInfos:      file_pb_gameserver_v1_proto_msgTypes,
	}.Build()
	File_pb_gameserver_v1_proto = out.File
	file_pb_gameserver_v1_proto_rawDesc = nil
	file_pb_gameserver_v1_proto_goTypes = nil
	file_pb_gameserver_v1_proto_depIdxs = nil
}
