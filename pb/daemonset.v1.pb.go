// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.2
// source: pb/daemonset.v1.proto

package pb

import (
	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "k8s.io/api/core/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 更新方式
type DaemonSetStrategy_UpdateStrategyType int32

const (
	// 滚动更新
	DaemonSetStrategy_RollingUpdate DaemonSetStrategy_UpdateStrategyType = 0
	// 删除后更新
	DaemonSetStrategy_OnDelete DaemonSetStrategy_UpdateStrategyType = 1
)

// Enum value maps for DaemonSetStrategy_UpdateStrategyType.
var (
	DaemonSetStrategy_UpdateStrategyType_name = map[int32]string{
		0: "RollingUpdate",
		1: "OnDelete",
	}
	DaemonSetStrategy_UpdateStrategyType_value = map[string]int32{
		"RollingUpdate": 0,
		"OnDelete":      1,
	}
)

func (x DaemonSetStrategy_UpdateStrategyType) Enum() *DaemonSetStrategy_UpdateStrategyType {
	p := new(DaemonSetStrategy_UpdateStrategyType)
	*p = x
	return p
}

func (x DaemonSetStrategy_UpdateStrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaemonSetStrategy_UpdateStrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_daemonset_v1_proto_enumTypes[0].Descriptor()
}

func (DaemonSetStrategy_UpdateStrategyType) Type() protoreflect.EnumType {
	return &file_pb_daemonset_v1_proto_enumTypes[0]
}

func (x DaemonSetStrategy_UpdateStrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaemonSetStrategy_UpdateStrategyType.Descriptor instead.
func (DaemonSetStrategy_UpdateStrategyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{2, 0}
}

// 更新方式
type UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType int32

const (
	// 滚动更新
	UpdateDaemonSetUpdateStrategyRequest_RollingUpdate UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType = 0
	// 删除后更新
	UpdateDaemonSetUpdateStrategyRequest_OnDelete UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType = 1
)

// Enum value maps for UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType.
var (
	UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType_name = map[int32]string{
		0: "RollingUpdate",
		1: "OnDelete",
	}
	UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType_value = map[string]int32{
		"RollingUpdate": 0,
		"OnDelete":      1,
	}
)

func (x UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType) Enum() *UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType {
	p := new(UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType)
	*p = x
	return p
}

func (x UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_daemonset_v1_proto_enumTypes[1].Descriptor()
}

func (UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType) Type() protoreflect.EnumType {
	return &file_pb_daemonset_v1_proto_enumTypes[1]
}

func (x UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType.Descriptor instead.
func (UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{19, 0}
}

type DaemonSetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of deployment condition.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,optional"`
	// Status of the condition, one of True, False, Unknown.
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,optional"`
	// The last time this condition was updated.
	// 豪秒级时间戳
	LastUpdateTime uint64 `protobuf:"varint,6,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,optional"`
	// Last time the condition transitioned from one status to another.
	// 豪秒级时间戳
	LastTransitionTime uint64 `protobuf:"varint,7,opt,name=lastTransitionTime,proto3" json:"lastTransitionTime,optional"`
	// The reason for the condition's last transition.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,optional"`
	// A human readable message indicating details about the transition.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,optional"`
}

func (x *DaemonSetCondition) Reset() {
	*x = DaemonSetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonSetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonSetCondition) ProtoMessage() {}

func (x *DaemonSetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonSetCondition.ProtoReflect.Descriptor instead.
func (*DaemonSetCondition) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{0}
}

func (x *DaemonSetCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DaemonSetCondition) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DaemonSetCondition) GetLastUpdateTime() uint64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *DaemonSetCondition) GetLastTransitionTime() uint64 {
	if x != nil {
		return x.LastTransitionTime
	}
	return 0
}

func (x *DaemonSetCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DaemonSetCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// DaemonSet 状态
type DaemonSetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedGeneration uint32 `protobuf:"varint,1,opt,name=observedGeneration,proto3" json:"observedGeneration,optional"`
	// 副本数量
	Replicas uint32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,optional"`
	// 已更新副本数量
	UpdatedReplicas uint32 `protobuf:"varint,3,opt,name=updatedReplicas,proto3" json:"updatedReplicas,optional"`
	// 已就绪副本数量
	ReadyReplicas uint32 `protobuf:"varint,7,opt,name=readyReplicas,proto3" json:"readyReplicas,optional"`
	// 可用副本数量
	AvailableReplicas uint32 `protobuf:"varint,4,opt,name=availableReplicas,proto3" json:"availableReplicas,optional"`
	// 不可用副本数量
	UnavailableReplicas uint32 `protobuf:"varint,5,opt,name=unavailableReplicas,proto3" json:"unavailableReplicas,optional"`
	CollisionCount      uint32 `protobuf:"varint,8,opt,name=collisionCount,proto3" json:"collisionCount,optional"`
}

func (x *DaemonSetStatus) Reset() {
	*x = DaemonSetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonSetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonSetStatus) ProtoMessage() {}

func (x *DaemonSetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonSetStatus.ProtoReflect.Descriptor instead.
func (*DaemonSetStatus) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{1}
}

func (x *DaemonSetStatus) GetObservedGeneration() uint32 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *DaemonSetStatus) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *DaemonSetStatus) GetUpdatedReplicas() uint32 {
	if x != nil {
		return x.UpdatedReplicas
	}
	return 0
}

func (x *DaemonSetStatus) GetReadyReplicas() uint32 {
	if x != nil {
		return x.ReadyReplicas
	}
	return 0
}

func (x *DaemonSetStatus) GetAvailableReplicas() uint32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *DaemonSetStatus) GetUnavailableReplicas() uint32 {
	if x != nil {
		return x.UnavailableReplicas
	}
	return 0
}

func (x *DaemonSetStatus) GetCollisionCount() uint32 {
	if x != nil {
		return x.CollisionCount
	}
	return 0
}

type DaemonSetStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateStrategyType DaemonSetStrategy_UpdateStrategyType `protobuf:"varint,1,opt,name=update_strategy_type,json=updateStrategyType,proto3,enum=daemonset.DaemonSetStrategy_UpdateStrategyType" json:"update_strategy_type,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,2,opt,name=max_unavailable,json=maxUnavailable,proto3" json:"max_unavailable,optional"`
	// 最大可用副本数
	MaxSurge string `protobuf:"bytes,3,opt,name=max_surge,json=maxSurge,proto3" json:"max_surge,optional"`
}

func (x *DaemonSetStrategy) Reset() {
	*x = DaemonSetStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonSetStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonSetStrategy) ProtoMessage() {}

func (x *DaemonSetStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonSetStrategy.ProtoReflect.Descriptor instead.
func (*DaemonSetStrategy) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{2}
}

func (x *DaemonSetStrategy) GetUpdateStrategyType() DaemonSetStrategy_UpdateStrategyType {
	if x != nil {
		return x.UpdateStrategyType
	}
	return DaemonSetStrategy_RollingUpdate
}

func (x *DaemonSetStrategy) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

func (x *DaemonSetStrategy) GetMaxSurge() string {
	if x != nil {
		return x.MaxSurge
	}
	return ""
}

// DaemonSetItem
type DaemonSetItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 容器
	Containers []*v1.Container `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,optional"`
	// 状态
	Status *DaemonSetStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,5,opt,name=create_time,proto3" json:"create_time,optional"`
	// 标签
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// YAML
	Yaml string `protobuf:"bytes,7,opt,name=yaml,proto3" json:"yaml,optional"`
	// 注解
	Annotations map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,optional" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 副本数量
	Replicas uint32 `protobuf:"varint,9,opt,name=replicas,proto3" json:"replicas,optional"`
	// 更新策略
	UpdateStrategy *DaemonSetStrategy `protobuf:"bytes,10,opt,name=update_strategy,json=updateStrategy,proto3" json:"update_strategy,optional"`
	// 选择器
	Selector *v11.LabelSelector `protobuf:"bytes,11,opt,name=selector,proto3" json:"selector,optional"`
	// 健康检查
	Conditions []*DaemonSetCondition `protobuf:"bytes,12,rep,name=conditions,proto3" json:"conditions,optional"`
	// 期望副本数量
	SpecReplicas uint32 `protobuf:"varint,13,opt,name=spec_replicas,json=specReplicas,proto3" json:"spec_replicas,optional"`
	// 是否关注
	IsFollowed bool `protobuf:"varint,14,opt,name=is_followed,json=is_follow,proto3" json:"is_followed,optional"`
}

func (x *DaemonSetItem) Reset() {
	*x = DaemonSetItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonSetItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonSetItem) ProtoMessage() {}

func (x *DaemonSetItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonSetItem.ProtoReflect.Descriptor instead.
func (*DaemonSetItem) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{3}
}

func (x *DaemonSetItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DaemonSetItem) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DaemonSetItem) GetContainers() []*v1.Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *DaemonSetItem) GetStatus() *DaemonSetStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DaemonSetItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DaemonSetItem) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DaemonSetItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *DaemonSetItem) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *DaemonSetItem) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *DaemonSetItem) GetUpdateStrategy() *DaemonSetStrategy {
	if x != nil {
		return x.UpdateStrategy
	}
	return nil
}

func (x *DaemonSetItem) GetSelector() *v11.LabelSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *DaemonSetItem) GetConditions() []*DaemonSetCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *DaemonSetItem) GetSpecReplicas() uint32 {
	if x != nil {
		return x.SpecReplicas
	}
	return 0
}

func (x *DaemonSetItem) GetIsFollowed() bool {
	if x != nil {
		return x.IsFollowed
	}
	return false
}

// DaemonSet列表请求
type ListDaemonSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,optional"`
	// 查询关键字
	Keyword string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,optional"`
	// 页码
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,optional"`
	// 页大小
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,optional"`
	// 查询全部
	ListAll uint32 `protobuf:"varint,7,opt,name=list_all,proto3" json:"list_all,optional"`
}

func (x *ListDaemonSetRequest) Reset() {
	*x = ListDaemonSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDaemonSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDaemonSetRequest) ProtoMessage() {}

func (x *ListDaemonSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDaemonSetRequest.ProtoReflect.Descriptor instead.
func (*ListDaemonSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{4}
}

func (x *ListDaemonSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ListDaemonSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListDaemonSetRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListDaemonSetRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDaemonSetRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDaemonSetRequest) GetListAll() uint32 {
	if x != nil {
		return x.ListAll
	}
	return 0
}

// DaemonSet列表响应
type ListDaemonSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,optional"`
	// 列表
	List []*DaemonSetItem `protobuf:"bytes,2,rep,name=list,proto3" json:"list,optional"`
}

func (x *ListDaemonSetResponse) Reset() {
	*x = ListDaemonSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDaemonSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDaemonSetResponse) ProtoMessage() {}

func (x *ListDaemonSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDaemonSetResponse.ProtoReflect.Descriptor instead.
func (*ListDaemonSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{5}
}

func (x *ListDaemonSetResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListDaemonSetResponse) GetList() []*DaemonSetItem {
	if x != nil {
		return x.List
	}
	return nil
}

// 从YAML创建或者更新DaemonSet请求
type CreateOrUpdateDaemonSetByYamlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// YAML
	Yaml string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,optional"`
}

func (x *CreateOrUpdateDaemonSetByYamlRequest) Reset() {
	*x = CreateOrUpdateDaemonSetByYamlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateDaemonSetByYamlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateDaemonSetByYamlRequest) ProtoMessage() {}

func (x *CreateOrUpdateDaemonSetByYamlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateDaemonSetByYamlRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateDaemonSetByYamlRequest) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrUpdateDaemonSetByYamlRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CreateOrUpdateDaemonSetByYamlRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

// 从YAML创建或者更新DaemonSet响应
type CreateOrUpdateDaemonSetByYamlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateOrUpdateDaemonSetByYamlResponse) Reset() {
	*x = CreateOrUpdateDaemonSetByYamlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateDaemonSetByYamlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateDaemonSetByYamlResponse) ProtoMessage() {}

func (x *CreateOrUpdateDaemonSetByYamlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateDaemonSetByYamlResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateDaemonSetByYamlResponse) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{7}
}

type DeleteDaemonSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *DeleteDaemonSetRequest) Reset() {
	*x = DeleteDaemonSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDaemonSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDaemonSetRequest) ProtoMessage() {}

func (x *DeleteDaemonSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDaemonSetRequest.ProtoReflect.Descriptor instead.
func (*DeleteDaemonSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDaemonSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DeleteDaemonSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteDaemonSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DeleteDaemonSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDaemonSetResponse) Reset() {
	*x = DeleteDaemonSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDaemonSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDaemonSetResponse) ProtoMessage() {}

func (x *DeleteDaemonSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDaemonSetResponse.ProtoReflect.Descriptor instead.
func (*DeleteDaemonSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{9}
}

// RestartDaemonSet请求
type RestartDaemonSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *RestartDaemonSetRequest) Reset() {
	*x = RestartDaemonSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartDaemonSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartDaemonSetRequest) ProtoMessage() {}

func (x *RestartDaemonSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartDaemonSetRequest.ProtoReflect.Descriptor instead.
func (*RestartDaemonSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{10}
}

func (x *RestartDaemonSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RestartDaemonSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestartDaemonSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type RestartDaemonSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartDaemonSetResponse) Reset() {
	*x = RestartDaemonSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartDaemonSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartDaemonSetResponse) ProtoMessage() {}

func (x *RestartDaemonSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartDaemonSetResponse.ProtoReflect.Descriptor instead.
func (*RestartDaemonSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{11}
}

// 查看DaemonSet详情请求
type GetDaemonSetDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *GetDaemonSetDetailRequest) Reset() {
	*x = GetDaemonSetDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDaemonSetDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDaemonSetDetailRequest) ProtoMessage() {}

func (x *GetDaemonSetDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDaemonSetDetailRequest.ProtoReflect.Descriptor instead.
func (*GetDaemonSetDetailRequest) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{12}
}

func (x *GetDaemonSetDetailRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetDaemonSetDetailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDaemonSetDetailRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// 查看DaemonSet详情响应
type GetDaemonSetDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 详情
	Detail *DaemonSetItem `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,optional"`
}

func (x *GetDaemonSetDetailResponse) Reset() {
	*x = GetDaemonSetDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDaemonSetDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDaemonSetDetailResponse) ProtoMessage() {}

func (x *GetDaemonSetDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDaemonSetDetailResponse.ProtoReflect.Descriptor instead.
func (*GetDaemonSetDetailResponse) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{13}
}

func (x *GetDaemonSetDetailResponse) GetDetail() *DaemonSetItem {
	if x != nil {
		return x.Detail
	}
	return nil
}

// 回滚DaemonSet请求
type RollbackDaemonSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	// 版本号
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,optional"`
}

func (x *RollbackDaemonSetRequest) Reset() {
	*x = RollbackDaemonSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackDaemonSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackDaemonSetRequest) ProtoMessage() {}

func (x *RollbackDaemonSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackDaemonSetRequest.ProtoReflect.Descriptor instead.
func (*RollbackDaemonSetRequest) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{14}
}

func (x *RollbackDaemonSetRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *RollbackDaemonSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RollbackDaemonSetRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RollbackDaemonSetRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// 回滚DaemonSet响应
type RollbackDaemonSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RollbackDaemonSetResponse) Reset() {
	*x = RollbackDaemonSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackDaemonSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackDaemonSetResponse) ProtoMessage() {}

func (x *RollbackDaemonSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackDaemonSetResponse.ProtoReflect.Descriptor instead.
func (*RollbackDaemonSetResponse) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{15}
}

// 查看DaemonSet历史版本请求
type GetDaemonSetHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
}

func (x *GetDaemonSetHistoryRequest) Reset() {
	*x = GetDaemonSetHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDaemonSetHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDaemonSetHistoryRequest) ProtoMessage() {}

func (x *GetDaemonSetHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDaemonSetHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetDaemonSetHistoryRequest) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{16}
}

func (x *GetDaemonSetHistoryRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetDaemonSetHistoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDaemonSetHistoryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DaemonSetControllerReversionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,optional"`
	// 镜像
	Images []string `protobuf:"bytes,2,rep,name=images,proto3" json:"images,optional"`
	// 版本
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,optional"`
	// 版本详情
	Yaml string `protobuf:"bytes,4,opt,name=yaml,proto3" json:"yaml,optional"`
	// 创建时间
	CreateTime uint64 `protobuf:"varint,5,opt,name=create_time,proto3" json:"create_time,optional"`
	// 是否当前版本
	IsCurrent bool `protobuf:"varint,6,opt,name=is_current,json=isCurrent,proto3" json:"is_current,optional"`
}

func (x *DaemonSetControllerReversionItem) Reset() {
	*x = DaemonSetControllerReversionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonSetControllerReversionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonSetControllerReversionItem) ProtoMessage() {}

func (x *DaemonSetControllerReversionItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonSetControllerReversionItem.ProtoReflect.Descriptor instead.
func (*DaemonSetControllerReversionItem) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{17}
}

func (x *DaemonSetControllerReversionItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DaemonSetControllerReversionItem) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *DaemonSetControllerReversionItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DaemonSetControllerReversionItem) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

func (x *DaemonSetControllerReversionItem) GetCreateTime() uint64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *DaemonSetControllerReversionItem) GetIsCurrent() bool {
	if x != nil {
		return x.IsCurrent
	}
	return false
}

// 查看DaemonSet历史版本响应
type GetDaemonSetHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列表
	List []*DaemonSetControllerReversionItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,optional"`
	// 总数
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,optional"`
}

func (x *GetDaemonSetHistoryResponse) Reset() {
	*x = GetDaemonSetHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDaemonSetHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDaemonSetHistoryResponse) ProtoMessage() {}

func (x *GetDaemonSetHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDaemonSetHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetDaemonSetHistoryResponse) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{18}
}

func (x *GetDaemonSetHistoryResponse) GetList() []*DaemonSetControllerReversionItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetDaemonSetHistoryResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 修改DaemonSet更新策略请求
type UpdateDaemonSetUpdateStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 集群名称
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,optional"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,optional"`
	// 命名空间
	Namespace          string                                                  `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,optional"`
	UpdateStrategyType UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType `protobuf:"varint,4,opt,name=update_strategy_type,json=updateStrategyType,proto3,enum=daemonset.UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType" json:"update_strategy_type,optional"`
	// 最大不可用副本数
	MaxUnavailable string `protobuf:"bytes,5,opt,name=max_unavailable,json=maxUnavailable,proto3" json:"max_unavailable,optional"`
	// 最大可用副本数
	MaxSurge string `protobuf:"bytes,6,opt,name=max_surge,json=maxSurge,proto3" json:"max_surge,optional"`
}

func (x *UpdateDaemonSetUpdateStrategyRequest) Reset() {
	*x = UpdateDaemonSetUpdateStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDaemonSetUpdateStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDaemonSetUpdateStrategyRequest) ProtoMessage() {}

func (x *UpdateDaemonSetUpdateStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDaemonSetUpdateStrategyRequest.ProtoReflect.Descriptor instead.
func (*UpdateDaemonSetUpdateStrategyRequest) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateDaemonSetUpdateStrategyRequest) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *UpdateDaemonSetUpdateStrategyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDaemonSetUpdateStrategyRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateDaemonSetUpdateStrategyRequest) GetUpdateStrategyType() UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType {
	if x != nil {
		return x.UpdateStrategyType
	}
	return UpdateDaemonSetUpdateStrategyRequest_RollingUpdate
}

func (x *UpdateDaemonSetUpdateStrategyRequest) GetMaxUnavailable() string {
	if x != nil {
		return x.MaxUnavailable
	}
	return ""
}

func (x *UpdateDaemonSetUpdateStrategyRequest) GetMaxSurge() string {
	if x != nil {
		return x.MaxSurge
	}
	return ""
}

// 修改DaemonSet更新策略响应
type UpdateDaemonSetUpdateStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDaemonSetUpdateStrategyResponse) Reset() {
	*x = UpdateDaemonSetUpdateStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_daemonset_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDaemonSetUpdateStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDaemonSetUpdateStrategyResponse) ProtoMessage() {}

func (x *UpdateDaemonSetUpdateStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_daemonset_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDaemonSetUpdateStrategyResponse.ProtoReflect.Descriptor instead.
func (*UpdateDaemonSetUpdateStrategyResponse) Descriptor() ([]byte, []int) {
	return file_pb_daemonset_v1_proto_rawDescGZIP(), []int{20}
}

var File_pb_daemonset_v1_proto protoreflect.FileDescriptor

var file_pb_daemonset_v1_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73,
	0x65, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6b, 0x38, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x6b, 0x38, 0x73, 0x2f, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xca, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc9, 0x02,
	0x0a, 0x0f, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x6e, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x75, 0x72, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x72, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x22, 0xee, 0x06, 0x0a,
	0x0d, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x4a, 0x0a,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73,
	0x65, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x42, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x23, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0x5b, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x27,
	0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x4e,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb9,
	0x01, 0x0a, 0x18, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xdb, 0x01, 0x0a, 0x20, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61, 0x6d,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x79, 0x61,
	0x6d, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x74, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xa0, 0x03, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x72, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x72, 0x67, 0x65, 0x22,
	0x35, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x01, 0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xe7, 0x0d, 0x0a, 0x09, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x77, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1f,
	0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65,
	0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xb3, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x42, 0x79, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x2f, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59, 0x61,
	0x6d, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x42, 0x79, 0x59,
	0x61, 0x6d, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x01, 0xc2, 0xdb,
	0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x6f, 0x0a, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x12, 0x10, 0x59, 0x61, 0x6d, 0x6c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x11, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x09,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a,
	0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x12, 0xed, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x12, 0x21, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca,
	0xdb, 0xaa, 0x03, 0x65, 0x0a, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12,
	0x06, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x11, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x1a, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a,
	0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xf1, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x12, 0x22, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0xc2, 0xdb, 0xaa,
	0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x65, 0x0a, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73,
	0x65, 0x74, 0x12, 0x06, 0xe9, 0x87, 0x8d, 0xe5, 0x90, 0xaf, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x11, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x1a, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x1a, 0x0c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x88, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x90, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x73, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xf5,
	0x01, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74,
	0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x94, 0x01, 0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x65, 0x0a, 0x09, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x06, 0xe5, 0x9b, 0x9e, 0xe6, 0xbb, 0x9a, 0x1a,
	0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x1a, 0x11, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x09, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2f, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0xb0, 0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x2e, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01,
	0xc2, 0xdb, 0xaa, 0x03, 0x00, 0xca, 0xdb, 0xaa, 0x03, 0x6b, 0x0a, 0x09, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0xad, 0x96,
	0xe7, 0x95, 0xa5, 0x1a, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x1a, 0x11, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x09, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65, 0x74, 0x1a, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x73, 0x65,
	0x74, 0x2f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11, 0x5a, 0x0f, 0x63, 0x6f, 0x64,
	0x6f, 0x2d, 0x63, 0x6e, 0x6d, 0x70, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_daemonset_v1_proto_rawDescOnce sync.Once
	file_pb_daemonset_v1_proto_rawDescData = file_pb_daemonset_v1_proto_rawDesc
)

func file_pb_daemonset_v1_proto_rawDescGZIP() []byte {
	file_pb_daemonset_v1_proto_rawDescOnce.Do(func() {
		file_pb_daemonset_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_daemonset_v1_proto_rawDescData)
	})
	return file_pb_daemonset_v1_proto_rawDescData
}

var file_pb_daemonset_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_daemonset_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_pb_daemonset_v1_proto_goTypes = []interface{}{
	(DaemonSetStrategy_UpdateStrategyType)(0),                    // 0: daemonset.DaemonSetStrategy.UpdateStrategyType
	(UpdateDaemonSetUpdateStrategyRequest_UpdateStrategyType)(0), // 1: daemonset.UpdateDaemonSetUpdateStrategyRequest.UpdateStrategyType
	(*DaemonSetCondition)(nil),                                   // 2: daemonset.DaemonSetCondition
	(*DaemonSetStatus)(nil),                                      // 3: daemonset.DaemonSetStatus
	(*DaemonSetStrategy)(nil),                                    // 4: daemonset.DaemonSetStrategy
	(*DaemonSetItem)(nil),                                        // 5: daemonset.DaemonSetItem
	(*ListDaemonSetRequest)(nil),                                 // 6: daemonset.ListDaemonSetRequest
	(*ListDaemonSetResponse)(nil),                                // 7: daemonset.ListDaemonSetResponse
	(*CreateOrUpdateDaemonSetByYamlRequest)(nil),                 // 8: daemonset.CreateOrUpdateDaemonSetByYamlRequest
	(*CreateOrUpdateDaemonSetByYamlResponse)(nil),                // 9: daemonset.CreateOrUpdateDaemonSetByYamlResponse
	(*DeleteDaemonSetRequest)(nil),                               // 10: daemonset.DeleteDaemonSetRequest
	(*DeleteDaemonSetResponse)(nil),                              // 11: daemonset.DeleteDaemonSetResponse
	(*RestartDaemonSetRequest)(nil),                              // 12: daemonset.RestartDaemonSetRequest
	(*RestartDaemonSetResponse)(nil),                             // 13: daemonset.RestartDaemonSetResponse
	(*GetDaemonSetDetailRequest)(nil),                            // 14: daemonset.GetDaemonSetDetailRequest
	(*GetDaemonSetDetailResponse)(nil),                           // 15: daemonset.GetDaemonSetDetailResponse
	(*RollbackDaemonSetRequest)(nil),                             // 16: daemonset.RollbackDaemonSetRequest
	(*RollbackDaemonSetResponse)(nil),                            // 17: daemonset.RollbackDaemonSetResponse
	(*GetDaemonSetHistoryRequest)(nil),                           // 18: daemonset.GetDaemonSetHistoryRequest
	(*DaemonSetControllerReversionItem)(nil),                     // 19: daemonset.DaemonSetControllerReversionItem
	(*GetDaemonSetHistoryResponse)(nil),                          // 20: daemonset.GetDaemonSetHistoryResponse
	(*UpdateDaemonSetUpdateStrategyRequest)(nil),                 // 21: daemonset.UpdateDaemonSetUpdateStrategyRequest
	(*UpdateDaemonSetUpdateStrategyResponse)(nil),                // 22: daemonset.UpdateDaemonSetUpdateStrategyResponse
	nil,                       // 23: daemonset.DaemonSetItem.LabelsEntry
	nil,                       // 24: daemonset.DaemonSetItem.AnnotationsEntry
	(*v1.Container)(nil),      // 25: k8s.io.api.core.v1.Container
	(*v11.LabelSelector)(nil), // 26: k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
}
var file_pb_daemonset_v1_proto_depIdxs = []int32{
	0,  // 0: daemonset.DaemonSetStrategy.update_strategy_type:type_name -> daemonset.DaemonSetStrategy.UpdateStrategyType
	25, // 1: daemonset.DaemonSetItem.containers:type_name -> k8s.io.api.core.v1.Container
	3,  // 2: daemonset.DaemonSetItem.status:type_name -> daemonset.DaemonSetStatus
	23, // 3: daemonset.DaemonSetItem.labels:type_name -> daemonset.DaemonSetItem.LabelsEntry
	24, // 4: daemonset.DaemonSetItem.annotations:type_name -> daemonset.DaemonSetItem.AnnotationsEntry
	4,  // 5: daemonset.DaemonSetItem.update_strategy:type_name -> daemonset.DaemonSetStrategy
	26, // 6: daemonset.DaemonSetItem.selector:type_name -> k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector
	2,  // 7: daemonset.DaemonSetItem.conditions:type_name -> daemonset.DaemonSetCondition
	5,  // 8: daemonset.ListDaemonSetResponse.list:type_name -> daemonset.DaemonSetItem
	5,  // 9: daemonset.GetDaemonSetDetailResponse.detail:type_name -> daemonset.DaemonSetItem
	19, // 10: daemonset.GetDaemonSetHistoryResponse.list:type_name -> daemonset.DaemonSetControllerReversionItem
	1,  // 11: daemonset.UpdateDaemonSetUpdateStrategyRequest.update_strategy_type:type_name -> daemonset.UpdateDaemonSetUpdateStrategyRequest.UpdateStrategyType
	6,  // 12: daemonset.DaemonSet.ListDaemonSet:input_type -> daemonset.ListDaemonSetRequest
	8,  // 13: daemonset.DaemonSet.CreateOrUpdateDaemonSetByYaml:input_type -> daemonset.CreateOrUpdateDaemonSetByYamlRequest
	10, // 14: daemonset.DaemonSet.DeleteDaemonSet:input_type -> daemonset.DeleteDaemonSetRequest
	12, // 15: daemonset.DaemonSet.RestartDaemonSet:input_type -> daemonset.RestartDaemonSetRequest
	14, // 16: daemonset.DaemonSet.GetDaemonSetDetail:input_type -> daemonset.GetDaemonSetDetailRequest
	18, // 17: daemonset.DaemonSet.GetDaemonSetRevisions:input_type -> daemonset.GetDaemonSetHistoryRequest
	16, // 18: daemonset.DaemonSet.RollbackDaemonSet:input_type -> daemonset.RollbackDaemonSetRequest
	21, // 19: daemonset.DaemonSet.UpdateStatefulSetUpdateStrategy:input_type -> daemonset.UpdateDaemonSetUpdateStrategyRequest
	7,  // 20: daemonset.DaemonSet.ListDaemonSet:output_type -> daemonset.ListDaemonSetResponse
	9,  // 21: daemonset.DaemonSet.CreateOrUpdateDaemonSetByYaml:output_type -> daemonset.CreateOrUpdateDaemonSetByYamlResponse
	11, // 22: daemonset.DaemonSet.DeleteDaemonSet:output_type -> daemonset.DeleteDaemonSetResponse
	13, // 23: daemonset.DaemonSet.RestartDaemonSet:output_type -> daemonset.RestartDaemonSetResponse
	15, // 24: daemonset.DaemonSet.GetDaemonSetDetail:output_type -> daemonset.GetDaemonSetDetailResponse
	20, // 25: daemonset.DaemonSet.GetDaemonSetRevisions:output_type -> daemonset.GetDaemonSetHistoryResponse
	17, // 26: daemonset.DaemonSet.RollbackDaemonSet:output_type -> daemonset.RollbackDaemonSetResponse
	22, // 27: daemonset.DaemonSet.UpdateStatefulSetUpdateStrategy:output_type -> daemonset.UpdateDaemonSetUpdateStrategyResponse
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pb_daemonset_v1_proto_init() }
func file_pb_daemonset_v1_proto_init() {
	if File_pb_daemonset_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_daemonset_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonSetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonSetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonSetStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonSetItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDaemonSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDaemonSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateDaemonSetByYamlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateDaemonSetByYamlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDaemonSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDaemonSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartDaemonSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartDaemonSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDaemonSetDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDaemonSetDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackDaemonSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackDaemonSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDaemonSetHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonSetControllerReversionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDaemonSetHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDaemonSetUpdateStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_daemonset_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDaemonSetUpdateStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_daemonset_v1_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_daemonset_v1_proto_goTypes,
		DependencyIndexes: file_pb_daemonset_v1_proto_depIdxs,
		EnumInfos:         file_pb_daemonset_v1_proto_enumTypes,
		MessageInfos:      file_pb_daemonset_v1_proto_msgTypes,
	}.Build()
	File_pb_daemonset_v1_proto = out.File
	file_pb_daemonset_v1_proto_rawDesc = nil
	file_pb_daemonset_v1_proto_goTypes = nil
	file_pb_daemonset_v1_proto_depIdxs = nil
}
